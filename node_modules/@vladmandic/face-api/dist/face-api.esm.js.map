{
  "version": 3,
  "sources": ["tfjs.esm.js", "../src/draw/index.ts", "../src/draw/drawContour.ts", "../src/utils/index.ts", "../src/classes/Dimensions.ts", "../src/classes/Point.ts", "../src/classes/Box.ts", "../src/classes/BoundingBox.ts", "../src/classes/ObjectDetection.ts", "../src/classes/FaceDetection.ts", "../src/ops/iou.ts", "../src/ops/minBbox.ts", "../src/ops/nonMaxSuppression.ts", "../src/ops/normalize.ts", "../src/ops/padToSquare.ts", "../src/ops/shuffleArray.ts", "../src/ops/index.ts", "../src/classes/Rect.ts", "../src/classes/FaceLandmarks.ts", "../src/classes/FaceLandmarks5.ts", "../src/classes/FaceLandmarks68.ts", "../src/classes/FaceMatch.ts", "../src/classes/LabeledBox.ts", "../src/classes/LabeledFaceDescriptors.ts", "../src/classes/PredictedBox.ts", "../src/factories/WithFaceDetection.ts", "../src/env/createBrowserEnv.ts", "../src/env/isNodejs.ts", "../src/env/createFileSystem.ts", "../src/env/createNodejsEnv.ts", "../src/env/isBrowser.ts", "../src/env/index.ts", "../src/dom/resolveInput.ts", "../src/dom/getContext2dOrThrow.ts", "../src/draw/DrawTextField.ts", "../src/draw/DrawBox.ts", "../src/draw/drawDetections.ts", "../src/dom/isMediaLoaded.ts", "../src/dom/awaitMediaLoaded.ts", "../src/dom/bufferToImage.ts", "../src/dom/getMediaDimensions.ts", "../src/dom/createCanvas.ts", "../src/dom/imageTensorToCanvas.ts", "../src/dom/isMediaElement.ts", "../src/dom/imageToSquare.ts", "../src/dom/NetInput.ts", "../src/dom/toNetInput.ts", "../src/dom/extractFaces.ts", "../src/dom/extractFaceTensors.ts", "../src/dom/fetchOrThrow.ts", "../src/dom/fetchImage.ts", "../src/dom/fetchJson.ts", "../src/dom/fetchNetWeights.ts", "../src/dom/bufferToVideo.ts", "../src/dom/fetchVideo.ts", "../src/common/getModelUris.ts", "../src/dom/loadWeightMap.ts", "../src/dom/matchDimensions.ts", "../src/NeuralNetwork.ts", "../src/common/depthwiseSeparableConv.ts", "../src/faceFeatureExtractor/denseBlock.ts", "../src/common/convLayer.ts", "../src/common/disposeUnusedWeightTensors.ts", "../src/common/extractConvParamsFactory.ts", "../src/common/extractFCParamsFactory.ts", "../src/common/types.ts", "../src/common/extractSeparableConvParamsFactory.ts", "../src/common/extractWeightEntryFactory.ts", "../src/common/extractWeightsFactory.ts", "../src/faceFeatureExtractor/extractorsFactory.ts", "../src/faceFeatureExtractor/extractParams.ts", "../src/common/loadConvParamsFactory.ts", "../src/faceFeatureExtractor/loadParamsFactory.ts", "../src/faceFeatureExtractor/extractParamsFromWeightMap.ts", "../src/faceFeatureExtractor/FaceFeatureExtractor.ts", "../src/common/fullyConnectedLayer.ts", "../src/faceProcessor/extractParams.ts", "../src/faceProcessor/extractParamsFromWeightMap.ts", "../src/faceProcessor/util.ts", "../src/faceProcessor/FaceProcessor.ts", "../src/faceExpressionNet/FaceExpressions.ts", "../src/faceExpressionNet/FaceExpressionNet.ts", "../src/factories/WithFaceExpressions.ts", "../src/draw/drawFaceExpressions.ts", "../src/factories/WithFaceLandmarks.ts", "../src/draw/DrawFaceLandmarks.ts", "../src/xception/extractParams.ts", "../src/xception/extractParamsFromWeightMap.ts", "../src/xception/TinyXception.ts", "../src/ageGenderNet/extractParams.ts", "../src/ageGenderNet/extractParamsFromWeightMap.ts", "../src/ageGenderNet/types.ts", "../src/ageGenderNet/AgeGenderNet.ts", "../src/faceLandmarkNet/FaceLandmark68NetBase.ts", "../src/faceLandmarkNet/FaceLandmark68Net.ts", "../src/faceFeatureExtractor/extractParamsFromWeightMapTiny.ts", "../src/faceFeatureExtractor/extractParamsTiny.ts", "../src/faceFeatureExtractor/TinyFaceFeatureExtractor.ts", "../src/faceLandmarkNet/FaceLandmark68TinyNet.ts", "../src/faceLandmarkNet/index.ts", "../src/faceRecognitionNet/scaleLayer.ts", "../src/faceRecognitionNet/convLayer.ts", "../src/faceRecognitionNet/extractParams.ts", "../src/faceRecognitionNet/extractParamsFromWeightMap.ts", "../src/faceRecognitionNet/residualLayer.ts", "../src/faceRecognitionNet/FaceRecognitionNet.ts", "../src/faceRecognitionNet/index.ts", "../src/factories/WithFaceDescriptor.ts", "../src/factories/WithAge.ts", "../src/factories/WithGender.ts", "../src/ssdMobilenetv1/extractParams.ts", "../src/ssdMobilenetv1/extractParamsFromWeightMap.ts", "../src/ssdMobilenetv1/pointwiseConvLayer.ts", "../src/ssdMobilenetv1/mobileNetV1.ts", "../src/ssdMobilenetv1/nonMaxSuppression.ts", "../src/ssdMobilenetv1/outputLayer.ts", "../src/ssdMobilenetv1/boxPredictionLayer.ts", "../src/ssdMobilenetv1/predictionLayer.ts", "../src/ssdMobilenetv1/SsdMobilenetv1Options.ts", "../src/ssdMobilenetv1/SsdMobilenetv1.ts", "../src/ssdMobilenetv1/index.ts", "../src/tinyYolov2/const.ts", "../src/tinyYolov2/config.ts", "../src/tinyYolov2/leaky.ts", "../src/tinyYolov2/convWithBatchNorm.ts", "../src/tinyYolov2/depthwiseSeparableConv.ts", "../src/tinyYolov2/extractParams.ts", "../src/tinyYolov2/extractParamsFromWeightMap.ts", "../src/tinyYolov2/TinyYolov2Options.ts", "../src/tinyYolov2/TinyYolov2Base.ts", "../src/tinyYolov2/TinyYolov2.ts", "../src/tinyYolov2/index.ts", "../src/tinyFaceDetector/TinyFaceDetectorOptions.ts", "../src/globalApi/ComposableTask.ts", "../src/globalApi/extractFacesAndComputeResults.ts", "../src/tinyFaceDetector/const.ts", "../src/tinyFaceDetector/TinyFaceDetector.ts", "../src/globalApi/nets.ts", "../src/globalApi/PredictFaceExpressionsTask.ts", "../src/globalApi/PredictAgeAndGenderTask.ts", "../src/globalApi/ComputeFaceDescriptorsTasks.ts", "../src/globalApi/DetectFaceLandmarksTasks.ts", "../src/globalApi/DetectFacesTasks.ts", "../src/globalApi/detectFaces.ts", "../src/globalApi/allFaces.ts", "../src/euclideanDistance.ts", "../src/globalApi/FaceMatcher.ts", "../src/tinyFaceDetector/index.ts", "../src/resizeResults.ts", "../src/index.ts"],
  "sourcesContent": ["/*\n  Face-API\n  homepage: <https://github.com/vladmandic/face-api>\n  author: <https://github.com/vladmandic>'\n*/\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __commonJS = (cb, mod4) => function __require() {\n  return mod4 || (0, cb[__getOwnPropNames(cb)[0]])((mod4 = { exports: {} }).exports, mod4), mod4.exports;\n};\nvar __export = (target, all5) => {\n  for (var name in all5)\n    __defProp(target, name, { get: all5[name], enumerable: true });\n};\nvar __reExport = (target, module, copyDefault, desc) => {\n  if (module && typeof module === \"object\" || typeof module === \"function\") {\n    for (let key of __getOwnPropNames(module))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, \"default\", !isNodeMode && module && module.__esModule ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);\n};\n\n// node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js\nvar require_long = __commonJS({\n  \"node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js\"(exports, module) {\n    module.exports = Long2;\n    var wasm = null;\n    try {\n      wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        13,\n        2,\n        96,\n        0,\n        1,\n        127,\n        96,\n        4,\n        127,\n        127,\n        127,\n        127,\n        1,\n        127,\n        3,\n        7,\n        6,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        6,\n        6,\n        1,\n        127,\n        1,\n        65,\n        0,\n        11,\n        7,\n        50,\n        6,\n        3,\n        109,\n        117,\n        108,\n        0,\n        1,\n        5,\n        100,\n        105,\n        118,\n        95,\n        115,\n        0,\n        2,\n        5,\n        100,\n        105,\n        118,\n        95,\n        117,\n        0,\n        3,\n        5,\n        114,\n        101,\n        109,\n        95,\n        115,\n        0,\n        4,\n        5,\n        114,\n        101,\n        109,\n        95,\n        117,\n        0,\n        5,\n        8,\n        103,\n        101,\n        116,\n        95,\n        104,\n        105,\n        103,\n        104,\n        0,\n        0,\n        10,\n        191,\n        1,\n        6,\n        4,\n        0,\n        35,\n        0,\n        11,\n        36,\n        1,\n        1,\n        126,\n        32,\n        0,\n        173,\n        32,\n        1,\n        173,\n        66,\n        32,\n        134,\n        132,\n        32,\n        2,\n        173,\n        32,\n        3,\n        173,\n        66,\n        32,\n        134,\n        132,\n        126,\n        34,\n        4,\n        66,\n        32,\n        135,\n        167,\n        36,\n        0,\n        32,\n        4,\n        167,\n        11,\n        36,\n        1,\n        1,\n        126,\n        32,\n        0,\n        173,\n        32,\n        1,\n        173,\n        66,\n        32,\n        134,\n        132,\n        32,\n        2,\n        173,\n        32,\n        3,\n        173,\n        66,\n        32,\n        134,\n        132,\n        127,\n        34,\n        4,\n        66,\n        32,\n        135,\n        167,\n        36,\n        0,\n        32,\n        4,\n        167,\n        11,\n        36,\n        1,\n        1,\n        126,\n        32,\n        0,\n        173,\n        32,\n        1,\n        173,\n        66,\n        32,\n        134,\n        132,\n        32,\n        2,\n        173,\n        32,\n        3,\n        173,\n        66,\n        32,\n        134,\n        132,\n        128,\n        34,\n        4,\n        66,\n        32,\n        135,\n        167,\n        36,\n        0,\n        32,\n        4,\n        167,\n        11,\n        36,\n        1,\n        1,\n        126,\n        32,\n        0,\n        173,\n        32,\n        1,\n        173,\n        66,\n        32,\n        134,\n        132,\n        32,\n        2,\n        173,\n        32,\n        3,\n        173,\n        66,\n        32,\n        134,\n        132,\n        129,\n        34,\n        4,\n        66,\n        32,\n        135,\n        167,\n        36,\n        0,\n        32,\n        4,\n        167,\n        11,\n        36,\n        1,\n        1,\n        126,\n        32,\n        0,\n        173,\n        32,\n        1,\n        173,\n        66,\n        32,\n        134,\n        132,\n        32,\n        2,\n        173,\n        32,\n        3,\n        173,\n        66,\n        32,\n        134,\n        132,\n        130,\n        34,\n        4,\n        66,\n        32,\n        135,\n        167,\n        36,\n        0,\n        32,\n        4,\n        167,\n        11\n      ])), {}).exports;\n    } catch (e) {\n    }\n    function Long2(low, high, unsigned) {\n      this.low = low | 0;\n      this.high = high | 0;\n      this.unsigned = !!unsigned;\n    }\n    Long2.prototype.__isLong__;\n    Object.defineProperty(Long2.prototype, \"__isLong__\", { value: true });\n    function isLong(obj) {\n      return (obj && obj[\"__isLong__\"]) === true;\n    }\n    Long2.isLong = isLong;\n    var INT_CACHE = {};\n    var UINT_CACHE = {};\n    function fromInt(value, unsigned) {\n      var obj, cachedObj, cache;\n      if (unsigned) {\n        value >>>= 0;\n        if (cache = 0 <= value && value < 256) {\n          cachedObj = UINT_CACHE[value];\n          if (cachedObj)\n            return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n          UINT_CACHE[value] = obj;\n        return obj;\n      } else {\n        value |= 0;\n        if (cache = -128 <= value && value < 128) {\n          cachedObj = INT_CACHE[value];\n          if (cachedObj)\n            return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n          INT_CACHE[value] = obj;\n        return obj;\n      }\n    }\n    Long2.fromInt = fromInt;\n    function fromNumber(value, unsigned) {\n      if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n      if (unsigned) {\n        if (value < 0)\n          return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n          return MAX_UNSIGNED_VALUE;\n      } else {\n        if (value <= -TWO_PWR_63_DBL)\n          return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n          return MAX_VALUE;\n      }\n      if (value < 0)\n        return fromNumber(-value, unsigned).neg();\n      return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n    }\n    Long2.fromNumber = fromNumber;\n    function fromBits(lowBits, highBits, unsigned) {\n      return new Long2(lowBits, highBits, unsigned);\n    }\n    Long2.fromBits = fromBits;\n    var pow_dbl = Math.pow;\n    function fromString(str, unsigned, radix) {\n      if (str.length === 0)\n        throw Error(\"empty string\");\n      if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n      if (typeof unsigned === \"number\") {\n        radix = unsigned, unsigned = false;\n      } else {\n        unsigned = !!unsigned;\n      }\n      radix = radix || 10;\n      if (radix < 2 || 36 < radix)\n        throw RangeError(\"radix\");\n      var p2;\n      if ((p2 = str.indexOf(\"-\")) > 0)\n        throw Error(\"interior hyphen\");\n      else if (p2 === 0) {\n        return fromString(str.substring(1), unsigned, radix).neg();\n      }\n      var radixToPower = fromNumber(pow_dbl(radix, 8));\n      var result = ZERO;\n      for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n          var power = fromNumber(pow_dbl(radix, size));\n          result = result.mul(power).add(fromNumber(value));\n        } else {\n          result = result.mul(radixToPower);\n          result = result.add(fromNumber(value));\n        }\n      }\n      result.unsigned = unsigned;\n      return result;\n    }\n    Long2.fromString = fromString;\n    function fromValue(val, unsigned) {\n      if (typeof val === \"number\")\n        return fromNumber(val, unsigned);\n      if (typeof val === \"string\")\n        return fromString(val, unsigned);\n      return fromBits(val.low, val.high, typeof unsigned === \"boolean\" ? unsigned : val.unsigned);\n    }\n    Long2.fromValue = fromValue;\n    var TWO_PWR_16_DBL = 1 << 16;\n    var TWO_PWR_24_DBL = 1 << 24;\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n    var ZERO = fromInt(0);\n    Long2.ZERO = ZERO;\n    var UZERO = fromInt(0, true);\n    Long2.UZERO = UZERO;\n    var ONE = fromInt(1);\n    Long2.ONE = ONE;\n    var UONE = fromInt(1, true);\n    Long2.UONE = UONE;\n    var NEG_ONE = fromInt(-1);\n    Long2.NEG_ONE = NEG_ONE;\n    var MAX_VALUE = fromBits(4294967295 | 0, 2147483647 | 0, false);\n    Long2.MAX_VALUE = MAX_VALUE;\n    var MAX_UNSIGNED_VALUE = fromBits(4294967295 | 0, 4294967295 | 0, true);\n    Long2.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n    var MIN_VALUE = fromBits(0, 2147483648 | 0, false);\n    Long2.MIN_VALUE = MIN_VALUE;\n    var LongPrototype = Long2.prototype;\n    LongPrototype.toInt = function toInt() {\n      return this.unsigned ? this.low >>> 0 : this.low;\n    };\n    LongPrototype.toNumber = function toNumber() {\n      if (this.unsigned)\n        return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n      return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n    LongPrototype.toString = function toString(radix) {\n      radix = radix || 10;\n      if (radix < 2 || 36 < radix)\n        throw RangeError(\"radix\");\n      if (this.isZero())\n        return \"0\";\n      if (this.isNegative()) {\n        if (this.eq(MIN_VALUE)) {\n          var radixLong = fromNumber(radix), div3 = this.div(radixLong), rem1 = div3.mul(radixLong).sub(this);\n          return div3.toString(radix) + rem1.toInt().toString(radix);\n        } else\n          return \"-\" + this.neg().toString(radix);\n      }\n      var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;\n      var result = \"\";\n      while (true) {\n        var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (rem.isZero())\n          return digits + result;\n        else {\n          while (digits.length < 6)\n            digits = \"0\" + digits;\n          result = \"\" + digits + result;\n        }\n      }\n    };\n    LongPrototype.getHighBits = function getHighBits() {\n      return this.high;\n    };\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n      return this.high >>> 0;\n    };\n    LongPrototype.getLowBits = function getLowBits() {\n      return this.low;\n    };\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n      return this.low >>> 0;\n    };\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n      if (this.isNegative())\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n      var val = this.high != 0 ? this.high : this.low;\n      for (var bit = 31; bit > 0; bit--)\n        if ((val & 1 << bit) != 0)\n          break;\n      return this.high != 0 ? bit + 33 : bit + 1;\n    };\n    LongPrototype.isZero = function isZero() {\n      return this.high === 0 && this.low === 0;\n    };\n    LongPrototype.eqz = LongPrototype.isZero;\n    LongPrototype.isNegative = function isNegative() {\n      return !this.unsigned && this.high < 0;\n    };\n    LongPrototype.isPositive = function isPositive() {\n      return this.unsigned || this.high >= 0;\n    };\n    LongPrototype.isOdd = function isOdd() {\n      return (this.low & 1) === 1;\n    };\n    LongPrototype.isEven = function isEven2() {\n      return (this.low & 1) === 0;\n    };\n    LongPrototype.equals = function equals(other) {\n      if (!isLong(other))\n        other = fromValue(other);\n      if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)\n        return false;\n      return this.high === other.high && this.low === other.low;\n    };\n    LongPrototype.eq = LongPrototype.equals;\n    LongPrototype.notEquals = function notEquals(other) {\n      return !this.eq(other);\n    };\n    LongPrototype.neq = LongPrototype.notEquals;\n    LongPrototype.ne = LongPrototype.notEquals;\n    LongPrototype.lessThan = function lessThan(other) {\n      return this.comp(other) < 0;\n    };\n    LongPrototype.lt = LongPrototype.lessThan;\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n      return this.comp(other) <= 0;\n    };\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\n    LongPrototype.le = LongPrototype.lessThanOrEqual;\n    LongPrototype.greaterThan = function greaterThan(other) {\n      return this.comp(other) > 0;\n    };\n    LongPrototype.gt = LongPrototype.greaterThan;\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n      return this.comp(other) >= 0;\n    };\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n    LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n    LongPrototype.compare = function compare(other) {\n      if (!isLong(other))\n        other = fromValue(other);\n      if (this.eq(other))\n        return 0;\n      var thisNeg = this.isNegative(), otherNeg = other.isNegative();\n      if (thisNeg && !otherNeg)\n        return -1;\n      if (!thisNeg && otherNeg)\n        return 1;\n      if (!this.unsigned)\n        return this.sub(other).isNegative() ? -1 : 1;\n      return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    };\n    LongPrototype.comp = LongPrototype.compare;\n    LongPrototype.negate = function negate() {\n      if (!this.unsigned && this.eq(MIN_VALUE))\n        return MIN_VALUE;\n      return this.not().add(ONE);\n    };\n    LongPrototype.neg = LongPrototype.negate;\n    LongPrototype.add = function add5(addend) {\n      if (!isLong(addend))\n        addend = fromValue(addend);\n      var a48 = this.high >>> 16;\n      var a32 = this.high & 65535;\n      var a16 = this.low >>> 16;\n      var a00 = this.low & 65535;\n      var b48 = addend.high >>> 16;\n      var b32 = addend.high & 65535;\n      var b16 = addend.low >>> 16;\n      var b00 = addend.low & 65535;\n      var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n      c00 += a00 + b00;\n      c16 += c00 >>> 16;\n      c00 &= 65535;\n      c16 += a16 + b16;\n      c32 += c16 >>> 16;\n      c16 &= 65535;\n      c32 += a32 + b32;\n      c48 += c32 >>> 16;\n      c32 &= 65535;\n      c48 += a48 + b48;\n      c48 &= 65535;\n      return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n    };\n    LongPrototype.subtract = function subtract(subtrahend) {\n      if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n      return this.add(subtrahend.neg());\n    };\n    LongPrototype.sub = LongPrototype.subtract;\n    LongPrototype.multiply = function multiply4(multiplier) {\n      if (this.isZero())\n        return ZERO;\n      if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n      if (wasm) {\n        var low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), this.unsigned);\n      }\n      if (multiplier.isZero())\n        return ZERO;\n      if (this.eq(MIN_VALUE))\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\n      if (multiplier.eq(MIN_VALUE))\n        return this.isOdd() ? MIN_VALUE : ZERO;\n      if (this.isNegative()) {\n        if (multiplier.isNegative())\n          return this.neg().mul(multiplier.neg());\n        else\n          return this.neg().mul(multiplier).neg();\n      } else if (multiplier.isNegative())\n        return this.mul(multiplier.neg()).neg();\n      if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n      var a48 = this.high >>> 16;\n      var a32 = this.high & 65535;\n      var a16 = this.low >>> 16;\n      var a00 = this.low & 65535;\n      var b48 = multiplier.high >>> 16;\n      var b32 = multiplier.high & 65535;\n      var b16 = multiplier.low >>> 16;\n      var b00 = multiplier.low & 65535;\n      var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n      c00 += a00 * b00;\n      c16 += c00 >>> 16;\n      c00 &= 65535;\n      c16 += a16 * b00;\n      c32 += c16 >>> 16;\n      c16 &= 65535;\n      c16 += a00 * b16;\n      c32 += c16 >>> 16;\n      c16 &= 65535;\n      c32 += a32 * b00;\n      c48 += c32 >>> 16;\n      c32 &= 65535;\n      c32 += a16 * b16;\n      c48 += c32 >>> 16;\n      c32 &= 65535;\n      c32 += a00 * b32;\n      c48 += c32 >>> 16;\n      c32 &= 65535;\n      c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n      c48 &= 65535;\n      return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n    };\n    LongPrototype.mul = LongPrototype.multiply;\n    LongPrototype.divide = function divide(divisor) {\n      if (!isLong(divisor))\n        divisor = fromValue(divisor);\n      if (divisor.isZero())\n        throw Error(\"division by zero\");\n      if (wasm) {\n        if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) {\n          return this;\n        }\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), this.unsigned);\n      }\n      if (this.isZero())\n        return this.unsigned ? UZERO : ZERO;\n      var approx, rem, res;\n      if (!this.unsigned) {\n        if (this.eq(MIN_VALUE)) {\n          if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n            return MIN_VALUE;\n          else if (divisor.eq(MIN_VALUE))\n            return ONE;\n          else {\n            var halfThis = this.shr(1);\n            approx = halfThis.div(divisor).shl(1);\n            if (approx.eq(ZERO)) {\n              return divisor.isNegative() ? ONE : NEG_ONE;\n            } else {\n              rem = this.sub(divisor.mul(approx));\n              res = approx.add(rem.div(divisor));\n              return res;\n            }\n          }\n        } else if (divisor.eq(MIN_VALUE))\n          return this.unsigned ? UZERO : ZERO;\n        if (this.isNegative()) {\n          if (divisor.isNegative())\n            return this.neg().div(divisor.neg());\n          return this.neg().div(divisor).neg();\n        } else if (divisor.isNegative())\n          return this.div(divisor.neg()).neg();\n        res = ZERO;\n      } else {\n        if (!divisor.unsigned)\n          divisor = divisor.toUnsigned();\n        if (divisor.gt(this))\n          return UZERO;\n        if (divisor.gt(this.shru(1)))\n          return UONE;\n        res = UZERO;\n      }\n      rem = this;\n      while (rem.gte(divisor)) {\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n        var log22 = Math.ceil(Math.log(approx) / Math.LN2), delta = log22 <= 48 ? 1 : pow_dbl(2, log22 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\n          approx -= delta;\n          approxRes = fromNumber(approx, this.unsigned);\n          approxRem = approxRes.mul(divisor);\n        }\n        if (approxRes.isZero())\n          approxRes = ONE;\n        res = res.add(approxRes);\n        rem = rem.sub(approxRem);\n      }\n      return res;\n    };\n    LongPrototype.div = LongPrototype.divide;\n    LongPrototype.modulo = function modulo(divisor) {\n      if (!isLong(divisor))\n        divisor = fromValue(divisor);\n      if (wasm) {\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), this.unsigned);\n      }\n      return this.sub(this.div(divisor).mul(divisor));\n    };\n    LongPrototype.mod = LongPrototype.modulo;\n    LongPrototype.rem = LongPrototype.modulo;\n    LongPrototype.not = function not() {\n      return fromBits(~this.low, ~this.high, this.unsigned);\n    };\n    LongPrototype.and = function and(other) {\n      if (!isLong(other))\n        other = fromValue(other);\n      return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    };\n    LongPrototype.or = function or(other) {\n      if (!isLong(other))\n        other = fromValue(other);\n      return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    };\n    LongPrototype.xor = function xor(other) {\n      if (!isLong(other))\n        other = fromValue(other);\n      return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    };\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\n      if (isLong(numBits))\n        numBits = numBits.toInt();\n      if ((numBits &= 63) === 0)\n        return this;\n      else if (numBits < 32)\n        return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);\n      else\n        return fromBits(0, this.low << numBits - 32, this.unsigned);\n    };\n    LongPrototype.shl = LongPrototype.shiftLeft;\n    LongPrototype.shiftRight = function shiftRight(numBits) {\n      if (isLong(numBits))\n        numBits = numBits.toInt();\n      if ((numBits &= 63) === 0)\n        return this;\n      else if (numBits < 32)\n        return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);\n      else\n        return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n    };\n    LongPrototype.shr = LongPrototype.shiftRight;\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n      if (isLong(numBits))\n        numBits = numBits.toInt();\n      numBits &= 63;\n      if (numBits === 0)\n        return this;\n      else {\n        var high = this.high;\n        if (numBits < 32) {\n          var low = this.low;\n          return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);\n        } else if (numBits === 32)\n          return fromBits(high, 0, this.unsigned);\n        else\n          return fromBits(high >>> numBits - 32, 0, this.unsigned);\n      }\n    };\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n    LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n    LongPrototype.toSigned = function toSigned() {\n      if (!this.unsigned)\n        return this;\n      return fromBits(this.low, this.high, false);\n    };\n    LongPrototype.toUnsigned = function toUnsigned() {\n      if (this.unsigned)\n        return this;\n      return fromBits(this.low, this.high, true);\n    };\n    LongPrototype.toBytes = function toBytes(le) {\n      return le ? this.toBytesLE() : this.toBytesBE();\n    };\n    LongPrototype.toBytesLE = function toBytesLE() {\n      var hi = this.high, lo = this.low;\n      return [\n        lo & 255,\n        lo >>> 8 & 255,\n        lo >>> 16 & 255,\n        lo >>> 24,\n        hi & 255,\n        hi >>> 8 & 255,\n        hi >>> 16 & 255,\n        hi >>> 24\n      ];\n    };\n    LongPrototype.toBytesBE = function toBytesBE() {\n      var hi = this.high, lo = this.low;\n      return [\n        hi >>> 24,\n        hi >>> 16 & 255,\n        hi >>> 8 & 255,\n        hi & 255,\n        lo >>> 24,\n        lo >>> 16 & 255,\n        lo >>> 8 & 255,\n        lo & 255\n      ];\n    };\n    Long2.fromBytes = function fromBytes(bytes, unsigned, le) {\n      return le ? Long2.fromBytesLE(bytes, unsigned) : Long2.fromBytesBE(bytes, unsigned);\n    };\n    Long2.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n      return new Long2(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n    };\n    Long2.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n      return new Long2(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n    };\n  }\n});\n\n// (disabled):node_modules/.pnpm/node-fetch@2.6.7/node_modules/node-fetch/browser.js\nvar require_browser = __commonJS({\n  \"(disabled):node_modules/.pnpm/node-fetch@2.6.7/node_modules/node-fetch/browser.js\"() {\n  }\n});\n\n// (disabled):util\nvar require_util = __commonJS({\n  \"(disabled):util\"() {\n  }\n});\n\n// node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/lib/alea.js\nvar require_alea = __commonJS({\n  \"node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/lib/alea.js\"(exports, module) {\n    (function(global2, module2, define2) {\n      function Alea(seed) {\n        var me = this, mash = Mash();\n        me.next = function() {\n          var t = 2091639 * me.s0 + me.c * 23283064365386963e-26;\n          me.s0 = me.s1;\n          me.s1 = me.s2;\n          return me.s2 = t - (me.c = t | 0);\n        };\n        me.c = 1;\n        me.s0 = mash(\" \");\n        me.s1 = mash(\" \");\n        me.s2 = mash(\" \");\n        me.s0 -= mash(seed);\n        if (me.s0 < 0) {\n          me.s0 += 1;\n        }\n        me.s1 -= mash(seed);\n        if (me.s1 < 0) {\n          me.s1 += 1;\n        }\n        me.s2 -= mash(seed);\n        if (me.s2 < 0) {\n          me.s2 += 1;\n        }\n        mash = null;\n      }\n      function copy(f, t) {\n        t.c = f.c;\n        t.s0 = f.s0;\n        t.s1 = f.s1;\n        t.s2 = f.s2;\n        return t;\n      }\n      function impl(seed, opts) {\n        var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;\n        prng.int32 = function() {\n          return xg.next() * 4294967296 | 0;\n        };\n        prng.double = function() {\n          return prng() + (prng() * 2097152 | 0) * 11102230246251565e-32;\n        };\n        prng.quick = prng;\n        if (state) {\n          if (typeof state == \"object\")\n            copy(state, xg);\n          prng.state = function() {\n            return copy(xg, {});\n          };\n        }\n        return prng;\n      }\n      function Mash() {\n        var n = 4022871197;\n        var mash = function(data) {\n          data = data.toString();\n          for (var i = 0; i < data.length; i++) {\n            n += data.charCodeAt(i);\n            var h = 0.02519603282416938 * n;\n            n = h >>> 0;\n            h -= n;\n            h *= n;\n            n = h >>> 0;\n            h -= n;\n            n += h * 4294967296;\n          }\n          return (n >>> 0) * 23283064365386963e-26;\n        };\n        return mash;\n      }\n      if (module2 && module2.exports) {\n        module2.exports = impl;\n      } else if (define2 && define2.amd) {\n        define2(function() {\n          return impl;\n        });\n      } else {\n        this.alea = impl;\n      }\n    })(exports, typeof module == \"object\" && module, typeof define == \"function\" && define);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/lib/xor128.js\nvar require_xor128 = __commonJS({\n  \"node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/lib/xor128.js\"(exports, module) {\n    (function(global2, module2, define2) {\n      function XorGen(seed) {\n        var me = this, strseed = \"\";\n        me.x = 0;\n        me.y = 0;\n        me.z = 0;\n        me.w = 0;\n        me.next = function() {\n          var t = me.x ^ me.x << 11;\n          me.x = me.y;\n          me.y = me.z;\n          me.z = me.w;\n          return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;\n        };\n        if (seed === (seed | 0)) {\n          me.x = seed;\n        } else {\n          strseed += seed;\n        }\n        for (var k = 0; k < strseed.length + 64; k++) {\n          me.x ^= strseed.charCodeAt(k) | 0;\n          me.next();\n        }\n      }\n      function copy(f, t) {\n        t.x = f.x;\n        t.y = f.y;\n        t.z = f.z;\n        t.w = f.w;\n        return t;\n      }\n      function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n          return (xg.next() >>> 0) / 4294967296;\n        };\n        prng.double = function() {\n          do {\n            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);\n          } while (result === 0);\n          return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n          if (typeof state == \"object\")\n            copy(state, xg);\n          prng.state = function() {\n            return copy(xg, {});\n          };\n        }\n        return prng;\n      }\n      if (module2 && module2.exports) {\n        module2.exports = impl;\n      } else if (define2 && define2.amd) {\n        define2(function() {\n          return impl;\n        });\n      } else {\n        this.xor128 = impl;\n      }\n    })(exports, typeof module == \"object\" && module, typeof define == \"function\" && define);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/lib/xorwow.js\nvar require_xorwow = __commonJS({\n  \"node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/lib/xorwow.js\"(exports, module) {\n    (function(global2, module2, define2) {\n      function XorGen(seed) {\n        var me = this, strseed = \"\";\n        me.next = function() {\n          var t = me.x ^ me.x >>> 2;\n          me.x = me.y;\n          me.y = me.z;\n          me.z = me.w;\n          me.w = me.v;\n          return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;\n        };\n        me.x = 0;\n        me.y = 0;\n        me.z = 0;\n        me.w = 0;\n        me.v = 0;\n        if (seed === (seed | 0)) {\n          me.x = seed;\n        } else {\n          strseed += seed;\n        }\n        for (var k = 0; k < strseed.length + 64; k++) {\n          me.x ^= strseed.charCodeAt(k) | 0;\n          if (k == strseed.length) {\n            me.d = me.x << 10 ^ me.x >>> 4;\n          }\n          me.next();\n        }\n      }\n      function copy(f, t) {\n        t.x = f.x;\n        t.y = f.y;\n        t.z = f.z;\n        t.w = f.w;\n        t.v = f.v;\n        t.d = f.d;\n        return t;\n      }\n      function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n          return (xg.next() >>> 0) / 4294967296;\n        };\n        prng.double = function() {\n          do {\n            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);\n          } while (result === 0);\n          return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n          if (typeof state == \"object\")\n            copy(state, xg);\n          prng.state = function() {\n            return copy(xg, {});\n          };\n        }\n        return prng;\n      }\n      if (module2 && module2.exports) {\n        module2.exports = impl;\n      } else if (define2 && define2.amd) {\n        define2(function() {\n          return impl;\n        });\n      } else {\n        this.xorwow = impl;\n      }\n    })(exports, typeof module == \"object\" && module, typeof define == \"function\" && define);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/lib/xorshift7.js\nvar require_xorshift7 = __commonJS({\n  \"node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/lib/xorshift7.js\"(exports, module) {\n    (function(global2, module2, define2) {\n      function XorGen(seed) {\n        var me = this;\n        me.next = function() {\n          var X = me.x, i = me.i, t, v, w;\n          t = X[i];\n          t ^= t >>> 7;\n          v = t ^ t << 24;\n          t = X[i + 1 & 7];\n          v ^= t ^ t >>> 10;\n          t = X[i + 3 & 7];\n          v ^= t ^ t >>> 3;\n          t = X[i + 4 & 7];\n          v ^= t ^ t << 7;\n          t = X[i + 7 & 7];\n          t = t ^ t << 13;\n          v ^= t ^ t << 9;\n          X[i] = v;\n          me.i = i + 1 & 7;\n          return v;\n        };\n        function init2(me2, seed2) {\n          var j, w, X = [];\n          if (seed2 === (seed2 | 0)) {\n            w = X[0] = seed2;\n          } else {\n            seed2 = \"\" + seed2;\n            for (j = 0; j < seed2.length; ++j) {\n              X[j & 7] = X[j & 7] << 15 ^ seed2.charCodeAt(j) + X[j + 1 & 7] << 13;\n            }\n          }\n          while (X.length < 8)\n            X.push(0);\n          for (j = 0; j < 8 && X[j] === 0; ++j)\n            ;\n          if (j == 8)\n            w = X[7] = -1;\n          else\n            w = X[j];\n          me2.x = X;\n          me2.i = 0;\n          for (j = 256; j > 0; --j) {\n            me2.next();\n          }\n        }\n        init2(me, seed);\n      }\n      function copy(f, t) {\n        t.x = f.x.slice();\n        t.i = f.i;\n        return t;\n      }\n      function impl(seed, opts) {\n        if (seed == null)\n          seed = +new Date();\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n          return (xg.next() >>> 0) / 4294967296;\n        };\n        prng.double = function() {\n          do {\n            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);\n          } while (result === 0);\n          return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n          if (state.x)\n            copy(state, xg);\n          prng.state = function() {\n            return copy(xg, {});\n          };\n        }\n        return prng;\n      }\n      if (module2 && module2.exports) {\n        module2.exports = impl;\n      } else if (define2 && define2.amd) {\n        define2(function() {\n          return impl;\n        });\n      } else {\n        this.xorshift7 = impl;\n      }\n    })(exports, typeof module == \"object\" && module, typeof define == \"function\" && define);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/lib/xor4096.js\nvar require_xor4096 = __commonJS({\n  \"node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/lib/xor4096.js\"(exports, module) {\n    (function(global2, module2, define2) {\n      function XorGen(seed) {\n        var me = this;\n        me.next = function() {\n          var w = me.w, X = me.X, i = me.i, t, v;\n          me.w = w = w + 1640531527 | 0;\n          v = X[i + 34 & 127];\n          t = X[i = i + 1 & 127];\n          v ^= v << 13;\n          t ^= t << 17;\n          v ^= v >>> 15;\n          t ^= t >>> 12;\n          v = X[i] = v ^ t;\n          me.i = i;\n          return v + (w ^ w >>> 16) | 0;\n        };\n        function init2(me2, seed2) {\n          var t, v, i, j, w, X = [], limit = 128;\n          if (seed2 === (seed2 | 0)) {\n            v = seed2;\n            seed2 = null;\n          } else {\n            seed2 = seed2 + \"\\0\";\n            v = 0;\n            limit = Math.max(limit, seed2.length);\n          }\n          for (i = 0, j = -32; j < limit; ++j) {\n            if (seed2)\n              v ^= seed2.charCodeAt((j + 32) % seed2.length);\n            if (j === 0)\n              w = v;\n            v ^= v << 10;\n            v ^= v >>> 15;\n            v ^= v << 4;\n            v ^= v >>> 13;\n            if (j >= 0) {\n              w = w + 1640531527 | 0;\n              t = X[j & 127] ^= v + w;\n              i = t == 0 ? i + 1 : 0;\n            }\n          }\n          if (i >= 128) {\n            X[(seed2 && seed2.length || 0) & 127] = -1;\n          }\n          i = 127;\n          for (j = 4 * 128; j > 0; --j) {\n            v = X[i + 34 & 127];\n            t = X[i = i + 1 & 127];\n            v ^= v << 13;\n            t ^= t << 17;\n            v ^= v >>> 15;\n            t ^= t >>> 12;\n            X[i] = v ^ t;\n          }\n          me2.w = w;\n          me2.X = X;\n          me2.i = i;\n        }\n        init2(me, seed);\n      }\n      function copy(f, t) {\n        t.i = f.i;\n        t.w = f.w;\n        t.X = f.X.slice();\n        return t;\n      }\n      ;\n      function impl(seed, opts) {\n        if (seed == null)\n          seed = +new Date();\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n          return (xg.next() >>> 0) / 4294967296;\n        };\n        prng.double = function() {\n          do {\n            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);\n          } while (result === 0);\n          return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n          if (state.X)\n            copy(state, xg);\n          prng.state = function() {\n            return copy(xg, {});\n          };\n        }\n        return prng;\n      }\n      if (module2 && module2.exports) {\n        module2.exports = impl;\n      } else if (define2 && define2.amd) {\n        define2(function() {\n          return impl;\n        });\n      } else {\n        this.xor4096 = impl;\n      }\n    })(exports, typeof module == \"object\" && module, typeof define == \"function\" && define);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/lib/tychei.js\nvar require_tychei = __commonJS({\n  \"node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/lib/tychei.js\"(exports, module) {\n    (function(global2, module2, define2) {\n      function XorGen(seed) {\n        var me = this, strseed = \"\";\n        me.next = function() {\n          var b = me.b, c = me.c, d = me.d, a = me.a;\n          b = b << 25 ^ b >>> 7 ^ c;\n          c = c - d | 0;\n          d = d << 24 ^ d >>> 8 ^ a;\n          a = a - b | 0;\n          me.b = b = b << 20 ^ b >>> 12 ^ c;\n          me.c = c = c - d | 0;\n          me.d = d << 16 ^ c >>> 16 ^ a;\n          return me.a = a - b | 0;\n        };\n        me.a = 0;\n        me.b = 0;\n        me.c = 2654435769 | 0;\n        me.d = 1367130551;\n        if (seed === Math.floor(seed)) {\n          me.a = seed / 4294967296 | 0;\n          me.b = seed | 0;\n        } else {\n          strseed += seed;\n        }\n        for (var k = 0; k < strseed.length + 20; k++) {\n          me.b ^= strseed.charCodeAt(k) | 0;\n          me.next();\n        }\n      }\n      function copy(f, t) {\n        t.a = f.a;\n        t.b = f.b;\n        t.c = f.c;\n        t.d = f.d;\n        return t;\n      }\n      ;\n      function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n          return (xg.next() >>> 0) / 4294967296;\n        };\n        prng.double = function() {\n          do {\n            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);\n          } while (result === 0);\n          return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n          if (typeof state == \"object\")\n            copy(state, xg);\n          prng.state = function() {\n            return copy(xg, {});\n          };\n        }\n        return prng;\n      }\n      if (module2 && module2.exports) {\n        module2.exports = impl;\n      } else if (define2 && define2.amd) {\n        define2(function() {\n          return impl;\n        });\n      } else {\n        this.tychei = impl;\n      }\n    })(exports, typeof module == \"object\" && module, typeof define == \"function\" && define);\n  }\n});\n\n// (disabled):crypto\nvar require_crypto = __commonJS({\n  \"(disabled):crypto\"() {\n  }\n});\n\n// node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/seedrandom.js\nvar require_seedrandom = __commonJS({\n  \"node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/seedrandom.js\"(exports, module) {\n    (function(pool3, math) {\n      var global2 = this, width = 256, chunks = 6, digits = 52, rngname = \"random\", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto;\n      function seedrandom5(seed, options, callback) {\n        var key = [];\n        options = options == true ? { entropy: true } : options || {};\n        var shortseed = mixkey(flatten4(options.entropy ? [seed, tostring(pool3)] : seed == null ? autoseed() : seed, 3), key);\n        var arc4 = new ARC4(key);\n        var prng = function() {\n          var n = arc4.g(chunks), d = startdenom, x = 0;\n          while (n < significance) {\n            n = (n + x) * width;\n            d *= width;\n            x = arc4.g(1);\n          }\n          while (n >= overflow) {\n            n /= 2;\n            d /= 2;\n            x >>>= 1;\n          }\n          return (n + x) / d;\n        };\n        prng.int32 = function() {\n          return arc4.g(4) | 0;\n        };\n        prng.quick = function() {\n          return arc4.g(4) / 4294967296;\n        };\n        prng.double = prng;\n        mixkey(tostring(arc4.S), pool3);\n        return (options.pass || callback || function(prng2, seed2, is_math_call, state) {\n          if (state) {\n            if (state.S) {\n              copy(state, arc4);\n            }\n            prng2.state = function() {\n              return copy(arc4, {});\n            };\n          }\n          if (is_math_call) {\n            math[rngname] = prng2;\n            return seed2;\n          } else\n            return prng2;\n        })(prng, shortseed, \"global\" in options ? options.global : this == math, options.state);\n      }\n      math[\"seed\" + rngname] = seedrandom5;\n      function ARC4(key) {\n        var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n        if (!keylen) {\n          key = [keylen++];\n        }\n        while (i < width) {\n          s[i] = i++;\n        }\n        for (i = 0; i < width; i++) {\n          s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];\n          s[j] = t;\n        }\n        (me.g = function(count2) {\n          var t2, r = 0, i2 = me.i, j2 = me.j, s2 = me.S;\n          while (count2--) {\n            t2 = s2[i2 = mask & i2 + 1];\n            r = r * width + s2[mask & (s2[i2] = s2[j2 = mask & j2 + t2]) + (s2[j2] = t2)];\n          }\n          me.i = i2;\n          me.j = j2;\n          return r;\n        })(width);\n      }\n      function copy(f, t) {\n        t.i = f.i;\n        t.j = f.j;\n        t.S = f.S.slice();\n        return t;\n      }\n      ;\n      function flatten4(obj, depth) {\n        var result = [], typ = typeof obj, prop;\n        if (depth && typ == \"object\") {\n          for (prop in obj) {\n            try {\n              result.push(flatten4(obj[prop], depth - 1));\n            } catch (e) {\n            }\n          }\n        }\n        return result.length ? result : typ == \"string\" ? obj : obj + \"\\0\";\n      }\n      function mixkey(seed, key) {\n        var stringseed = seed + \"\", smear, j = 0;\n        while (j < stringseed.length) {\n          key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);\n        }\n        return tostring(key);\n      }\n      function autoseed() {\n        try {\n          var out;\n          if (nodecrypto && (out = nodecrypto.randomBytes)) {\n            out = out(width);\n          } else {\n            out = new Uint8Array(width);\n            (global2.crypto || global2.msCrypto).getRandomValues(out);\n          }\n          return tostring(out);\n        } catch (e) {\n          var browser = global2.navigator, plugins = browser && browser.plugins;\n          return [+new Date(), global2, plugins, global2.screen, tostring(pool3)];\n        }\n      }\n      function tostring(a) {\n        return String.fromCharCode.apply(0, a);\n      }\n      mixkey(math.random(), pool3);\n      if (typeof module == \"object\" && module.exports) {\n        module.exports = seedrandom5;\n        try {\n          nodecrypto = require_crypto();\n        } catch (ex) {\n        }\n      } else if (typeof define == \"function\" && define.amd) {\n        define(function() {\n          return seedrandom5;\n        });\n      }\n    })([], Math);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/index.js\nvar require_seedrandom2 = __commonJS({\n  \"node_modules/.pnpm/seedrandom@2.4.3/node_modules/seedrandom/index.js\"(exports, module) {\n    var alea5 = require_alea();\n    var xor128 = require_xor128();\n    var xorwow = require_xorwow();\n    var xorshift7 = require_xorshift7();\n    var xor4096 = require_xor4096();\n    var tychei = require_tychei();\n    var sr = require_seedrandom();\n    sr.alea = alea5;\n    sr.xor128 = xor128;\n    sr.xorwow = xorwow;\n    sr.xorshift7 = xorshift7;\n    sr.xor4096 = xor4096;\n    sr.tychei = tychei;\n    module.exports = sr;\n  }\n});\n\n// node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/alea.js\nvar require_alea2 = __commonJS({\n  \"node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/alea.js\"(exports, module) {\n    (function(global2, module2, define2) {\n      function Alea(seed) {\n        var me = this, mash = Mash();\n        me.next = function() {\n          var t = 2091639 * me.s0 + me.c * 23283064365386963e-26;\n          me.s0 = me.s1;\n          me.s1 = me.s2;\n          return me.s2 = t - (me.c = t | 0);\n        };\n        me.c = 1;\n        me.s0 = mash(\" \");\n        me.s1 = mash(\" \");\n        me.s2 = mash(\" \");\n        me.s0 -= mash(seed);\n        if (me.s0 < 0) {\n          me.s0 += 1;\n        }\n        me.s1 -= mash(seed);\n        if (me.s1 < 0) {\n          me.s1 += 1;\n        }\n        me.s2 -= mash(seed);\n        if (me.s2 < 0) {\n          me.s2 += 1;\n        }\n        mash = null;\n      }\n      function copy(f, t) {\n        t.c = f.c;\n        t.s0 = f.s0;\n        t.s1 = f.s1;\n        t.s2 = f.s2;\n        return t;\n      }\n      function impl(seed, opts) {\n        var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;\n        prng.int32 = function() {\n          return xg.next() * 4294967296 | 0;\n        };\n        prng.double = function() {\n          return prng() + (prng() * 2097152 | 0) * 11102230246251565e-32;\n        };\n        prng.quick = prng;\n        if (state) {\n          if (typeof state == \"object\")\n            copy(state, xg);\n          prng.state = function() {\n            return copy(xg, {});\n          };\n        }\n        return prng;\n      }\n      function Mash() {\n        var n = 4022871197;\n        var mash = function(data) {\n          data = String(data);\n          for (var i = 0; i < data.length; i++) {\n            n += data.charCodeAt(i);\n            var h = 0.02519603282416938 * n;\n            n = h >>> 0;\n            h -= n;\n            h *= n;\n            n = h >>> 0;\n            h -= n;\n            n += h * 4294967296;\n          }\n          return (n >>> 0) * 23283064365386963e-26;\n        };\n        return mash;\n      }\n      if (module2 && module2.exports) {\n        module2.exports = impl;\n      } else if (define2 && define2.amd) {\n        define2(function() {\n          return impl;\n        });\n      } else {\n        this.alea = impl;\n      }\n    })(exports, typeof module == \"object\" && module, typeof define == \"function\" && define);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/xor128.js\nvar require_xor1282 = __commonJS({\n  \"node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/xor128.js\"(exports, module) {\n    (function(global2, module2, define2) {\n      function XorGen(seed) {\n        var me = this, strseed = \"\";\n        me.x = 0;\n        me.y = 0;\n        me.z = 0;\n        me.w = 0;\n        me.next = function() {\n          var t = me.x ^ me.x << 11;\n          me.x = me.y;\n          me.y = me.z;\n          me.z = me.w;\n          return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;\n        };\n        if (seed === (seed | 0)) {\n          me.x = seed;\n        } else {\n          strseed += seed;\n        }\n        for (var k = 0; k < strseed.length + 64; k++) {\n          me.x ^= strseed.charCodeAt(k) | 0;\n          me.next();\n        }\n      }\n      function copy(f, t) {\n        t.x = f.x;\n        t.y = f.y;\n        t.z = f.z;\n        t.w = f.w;\n        return t;\n      }\n      function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n          return (xg.next() >>> 0) / 4294967296;\n        };\n        prng.double = function() {\n          do {\n            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);\n          } while (result === 0);\n          return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n          if (typeof state == \"object\")\n            copy(state, xg);\n          prng.state = function() {\n            return copy(xg, {});\n          };\n        }\n        return prng;\n      }\n      if (module2 && module2.exports) {\n        module2.exports = impl;\n      } else if (define2 && define2.amd) {\n        define2(function() {\n          return impl;\n        });\n      } else {\n        this.xor128 = impl;\n      }\n    })(exports, typeof module == \"object\" && module, typeof define == \"function\" && define);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/xorwow.js\nvar require_xorwow2 = __commonJS({\n  \"node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/xorwow.js\"(exports, module) {\n    (function(global2, module2, define2) {\n      function XorGen(seed) {\n        var me = this, strseed = \"\";\n        me.next = function() {\n          var t = me.x ^ me.x >>> 2;\n          me.x = me.y;\n          me.y = me.z;\n          me.z = me.w;\n          me.w = me.v;\n          return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;\n        };\n        me.x = 0;\n        me.y = 0;\n        me.z = 0;\n        me.w = 0;\n        me.v = 0;\n        if (seed === (seed | 0)) {\n          me.x = seed;\n        } else {\n          strseed += seed;\n        }\n        for (var k = 0; k < strseed.length + 64; k++) {\n          me.x ^= strseed.charCodeAt(k) | 0;\n          if (k == strseed.length) {\n            me.d = me.x << 10 ^ me.x >>> 4;\n          }\n          me.next();\n        }\n      }\n      function copy(f, t) {\n        t.x = f.x;\n        t.y = f.y;\n        t.z = f.z;\n        t.w = f.w;\n        t.v = f.v;\n        t.d = f.d;\n        return t;\n      }\n      function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n          return (xg.next() >>> 0) / 4294967296;\n        };\n        prng.double = function() {\n          do {\n            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);\n          } while (result === 0);\n          return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n          if (typeof state == \"object\")\n            copy(state, xg);\n          prng.state = function() {\n            return copy(xg, {});\n          };\n        }\n        return prng;\n      }\n      if (module2 && module2.exports) {\n        module2.exports = impl;\n      } else if (define2 && define2.amd) {\n        define2(function() {\n          return impl;\n        });\n      } else {\n        this.xorwow = impl;\n      }\n    })(exports, typeof module == \"object\" && module, typeof define == \"function\" && define);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/xorshift7.js\nvar require_xorshift72 = __commonJS({\n  \"node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/xorshift7.js\"(exports, module) {\n    (function(global2, module2, define2) {\n      function XorGen(seed) {\n        var me = this;\n        me.next = function() {\n          var X = me.x, i = me.i, t, v, w;\n          t = X[i];\n          t ^= t >>> 7;\n          v = t ^ t << 24;\n          t = X[i + 1 & 7];\n          v ^= t ^ t >>> 10;\n          t = X[i + 3 & 7];\n          v ^= t ^ t >>> 3;\n          t = X[i + 4 & 7];\n          v ^= t ^ t << 7;\n          t = X[i + 7 & 7];\n          t = t ^ t << 13;\n          v ^= t ^ t << 9;\n          X[i] = v;\n          me.i = i + 1 & 7;\n          return v;\n        };\n        function init2(me2, seed2) {\n          var j, w, X = [];\n          if (seed2 === (seed2 | 0)) {\n            w = X[0] = seed2;\n          } else {\n            seed2 = \"\" + seed2;\n            for (j = 0; j < seed2.length; ++j) {\n              X[j & 7] = X[j & 7] << 15 ^ seed2.charCodeAt(j) + X[j + 1 & 7] << 13;\n            }\n          }\n          while (X.length < 8)\n            X.push(0);\n          for (j = 0; j < 8 && X[j] === 0; ++j)\n            ;\n          if (j == 8)\n            w = X[7] = -1;\n          else\n            w = X[j];\n          me2.x = X;\n          me2.i = 0;\n          for (j = 256; j > 0; --j) {\n            me2.next();\n          }\n        }\n        init2(me, seed);\n      }\n      function copy(f, t) {\n        t.x = f.x.slice();\n        t.i = f.i;\n        return t;\n      }\n      function impl(seed, opts) {\n        if (seed == null)\n          seed = +new Date();\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n          return (xg.next() >>> 0) / 4294967296;\n        };\n        prng.double = function() {\n          do {\n            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);\n          } while (result === 0);\n          return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n          if (state.x)\n            copy(state, xg);\n          prng.state = function() {\n            return copy(xg, {});\n          };\n        }\n        return prng;\n      }\n      if (module2 && module2.exports) {\n        module2.exports = impl;\n      } else if (define2 && define2.amd) {\n        define2(function() {\n          return impl;\n        });\n      } else {\n        this.xorshift7 = impl;\n      }\n    })(exports, typeof module == \"object\" && module, typeof define == \"function\" && define);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/xor4096.js\nvar require_xor40962 = __commonJS({\n  \"node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/xor4096.js\"(exports, module) {\n    (function(global2, module2, define2) {\n      function XorGen(seed) {\n        var me = this;\n        me.next = function() {\n          var w = me.w, X = me.X, i = me.i, t, v;\n          me.w = w = w + 1640531527 | 0;\n          v = X[i + 34 & 127];\n          t = X[i = i + 1 & 127];\n          v ^= v << 13;\n          t ^= t << 17;\n          v ^= v >>> 15;\n          t ^= t >>> 12;\n          v = X[i] = v ^ t;\n          me.i = i;\n          return v + (w ^ w >>> 16) | 0;\n        };\n        function init2(me2, seed2) {\n          var t, v, i, j, w, X = [], limit = 128;\n          if (seed2 === (seed2 | 0)) {\n            v = seed2;\n            seed2 = null;\n          } else {\n            seed2 = seed2 + \"\\0\";\n            v = 0;\n            limit = Math.max(limit, seed2.length);\n          }\n          for (i = 0, j = -32; j < limit; ++j) {\n            if (seed2)\n              v ^= seed2.charCodeAt((j + 32) % seed2.length);\n            if (j === 0)\n              w = v;\n            v ^= v << 10;\n            v ^= v >>> 15;\n            v ^= v << 4;\n            v ^= v >>> 13;\n            if (j >= 0) {\n              w = w + 1640531527 | 0;\n              t = X[j & 127] ^= v + w;\n              i = t == 0 ? i + 1 : 0;\n            }\n          }\n          if (i >= 128) {\n            X[(seed2 && seed2.length || 0) & 127] = -1;\n          }\n          i = 127;\n          for (j = 4 * 128; j > 0; --j) {\n            v = X[i + 34 & 127];\n            t = X[i = i + 1 & 127];\n            v ^= v << 13;\n            t ^= t << 17;\n            v ^= v >>> 15;\n            t ^= t >>> 12;\n            X[i] = v ^ t;\n          }\n          me2.w = w;\n          me2.X = X;\n          me2.i = i;\n        }\n        init2(me, seed);\n      }\n      function copy(f, t) {\n        t.i = f.i;\n        t.w = f.w;\n        t.X = f.X.slice();\n        return t;\n      }\n      ;\n      function impl(seed, opts) {\n        if (seed == null)\n          seed = +new Date();\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n          return (xg.next() >>> 0) / 4294967296;\n        };\n        prng.double = function() {\n          do {\n            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);\n          } while (result === 0);\n          return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n          if (state.X)\n            copy(state, xg);\n          prng.state = function() {\n            return copy(xg, {});\n          };\n        }\n        return prng;\n      }\n      if (module2 && module2.exports) {\n        module2.exports = impl;\n      } else if (define2 && define2.amd) {\n        define2(function() {\n          return impl;\n        });\n      } else {\n        this.xor4096 = impl;\n      }\n    })(exports, typeof module == \"object\" && module, typeof define == \"function\" && define);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/tychei.js\nvar require_tychei2 = __commonJS({\n  \"node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/lib/tychei.js\"(exports, module) {\n    (function(global2, module2, define2) {\n      function XorGen(seed) {\n        var me = this, strseed = \"\";\n        me.next = function() {\n          var b = me.b, c = me.c, d = me.d, a = me.a;\n          b = b << 25 ^ b >>> 7 ^ c;\n          c = c - d | 0;\n          d = d << 24 ^ d >>> 8 ^ a;\n          a = a - b | 0;\n          me.b = b = b << 20 ^ b >>> 12 ^ c;\n          me.c = c = c - d | 0;\n          me.d = d << 16 ^ c >>> 16 ^ a;\n          return me.a = a - b | 0;\n        };\n        me.a = 0;\n        me.b = 0;\n        me.c = 2654435769 | 0;\n        me.d = 1367130551;\n        if (seed === Math.floor(seed)) {\n          me.a = seed / 4294967296 | 0;\n          me.b = seed | 0;\n        } else {\n          strseed += seed;\n        }\n        for (var k = 0; k < strseed.length + 20; k++) {\n          me.b ^= strseed.charCodeAt(k) | 0;\n          me.next();\n        }\n      }\n      function copy(f, t) {\n        t.a = f.a;\n        t.b = f.b;\n        t.c = f.c;\n        t.d = f.d;\n        return t;\n      }\n      ;\n      function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n          return (xg.next() >>> 0) / 4294967296;\n        };\n        prng.double = function() {\n          do {\n            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);\n          } while (result === 0);\n          return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n          if (typeof state == \"object\")\n            copy(state, xg);\n          prng.state = function() {\n            return copy(xg, {});\n          };\n        }\n        return prng;\n      }\n      if (module2 && module2.exports) {\n        module2.exports = impl;\n      } else if (define2 && define2.amd) {\n        define2(function() {\n          return impl;\n        });\n      } else {\n        this.tychei = impl;\n      }\n    })(exports, typeof module == \"object\" && module, typeof define == \"function\" && define);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/seedrandom.js\nvar require_seedrandom3 = __commonJS({\n  \"node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/seedrandom.js\"(exports, module) {\n    (function(global2, pool3, math) {\n      var width = 256, chunks = 6, digits = 52, rngname = \"random\", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto;\n      function seedrandom5(seed, options, callback) {\n        var key = [];\n        options = options == true ? { entropy: true } : options || {};\n        var shortseed = mixkey(flatten4(options.entropy ? [seed, tostring(pool3)] : seed == null ? autoseed() : seed, 3), key);\n        var arc4 = new ARC4(key);\n        var prng = function() {\n          var n = arc4.g(chunks), d = startdenom, x = 0;\n          while (n < significance) {\n            n = (n + x) * width;\n            d *= width;\n            x = arc4.g(1);\n          }\n          while (n >= overflow) {\n            n /= 2;\n            d /= 2;\n            x >>>= 1;\n          }\n          return (n + x) / d;\n        };\n        prng.int32 = function() {\n          return arc4.g(4) | 0;\n        };\n        prng.quick = function() {\n          return arc4.g(4) / 4294967296;\n        };\n        prng.double = prng;\n        mixkey(tostring(arc4.S), pool3);\n        return (options.pass || callback || function(prng2, seed2, is_math_call, state) {\n          if (state) {\n            if (state.S) {\n              copy(state, arc4);\n            }\n            prng2.state = function() {\n              return copy(arc4, {});\n            };\n          }\n          if (is_math_call) {\n            math[rngname] = prng2;\n            return seed2;\n          } else\n            return prng2;\n        })(prng, shortseed, \"global\" in options ? options.global : this == math, options.state);\n      }\n      function ARC4(key) {\n        var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n        if (!keylen) {\n          key = [keylen++];\n        }\n        while (i < width) {\n          s[i] = i++;\n        }\n        for (i = 0; i < width; i++) {\n          s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];\n          s[j] = t;\n        }\n        (me.g = function(count2) {\n          var t2, r = 0, i2 = me.i, j2 = me.j, s2 = me.S;\n          while (count2--) {\n            t2 = s2[i2 = mask & i2 + 1];\n            r = r * width + s2[mask & (s2[i2] = s2[j2 = mask & j2 + t2]) + (s2[j2] = t2)];\n          }\n          me.i = i2;\n          me.j = j2;\n          return r;\n        })(width);\n      }\n      function copy(f, t) {\n        t.i = f.i;\n        t.j = f.j;\n        t.S = f.S.slice();\n        return t;\n      }\n      ;\n      function flatten4(obj, depth) {\n        var result = [], typ = typeof obj, prop;\n        if (depth && typ == \"object\") {\n          for (prop in obj) {\n            try {\n              result.push(flatten4(obj[prop], depth - 1));\n            } catch (e) {\n            }\n          }\n        }\n        return result.length ? result : typ == \"string\" ? obj : obj + \"\\0\";\n      }\n      function mixkey(seed, key) {\n        var stringseed = seed + \"\", smear, j = 0;\n        while (j < stringseed.length) {\n          key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);\n        }\n        return tostring(key);\n      }\n      function autoseed() {\n        try {\n          var out;\n          if (nodecrypto && (out = nodecrypto.randomBytes)) {\n            out = out(width);\n          } else {\n            out = new Uint8Array(width);\n            (global2.crypto || global2.msCrypto).getRandomValues(out);\n          }\n          return tostring(out);\n        } catch (e) {\n          var browser = global2.navigator, plugins = browser && browser.plugins;\n          return [+new Date(), global2, plugins, global2.screen, tostring(pool3)];\n        }\n      }\n      function tostring(a) {\n        return String.fromCharCode.apply(0, a);\n      }\n      mixkey(math.random(), pool3);\n      if (typeof module == \"object\" && module.exports) {\n        module.exports = seedrandom5;\n        try {\n          nodecrypto = require_crypto();\n        } catch (ex) {\n        }\n      } else if (typeof define == \"function\" && define.amd) {\n        define(function() {\n          return seedrandom5;\n        });\n      } else {\n        math[\"seed\" + rngname] = seedrandom5;\n      }\n    })(typeof self !== \"undefined\" ? self : exports, [], Math);\n  }\n});\n\n// node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/index.js\nvar require_seedrandom4 = __commonJS({\n  \"node_modules/.pnpm/seedrandom@3.0.5/node_modules/seedrandom/index.js\"(exports, module) {\n    var alea5 = require_alea2();\n    var xor128 = require_xor1282();\n    var xorwow = require_xorwow2();\n    var xorshift7 = require_xorshift72();\n    var xor4096 = require_xor40962();\n    var tychei = require_tychei2();\n    var sr = require_seedrandom3();\n    sr.alea = alea5;\n    sr.xor128 = xor128;\n    sr.xorwow = xorwow;\n    sr.xorshift7 = xorshift7;\n    sr.xor4096 = xor4096;\n    sr.tychei = tychei;\n    module.exports = sr;\n  }\n});\n\n// (disabled):node_modules/.pnpm/string_decoder@1.1.1/node_modules/string_decoder/lib/string_decoder.js\nvar require_string_decoder = __commonJS({\n  \"(disabled):node_modules/.pnpm/string_decoder@1.1.1/node_modules/string_decoder/lib/string_decoder.js\"() {\n  }\n});\n\n// (disabled):fs\nvar require_fs = __commonJS({\n  \"(disabled):fs\"() {\n  }\n});\n\n// (disabled):path\nvar require_path = __commonJS({\n  \"(disabled):path\"() {\n  }\n});\n\n// (disabled):worker_threads\nvar require_worker_threads = __commonJS({\n  \"(disabled):worker_threads\"() {\n  }\n});\n\n// (disabled):perf_hooks\nvar require_perf_hooks = __commonJS({\n  \"(disabled):perf_hooks\"() {\n  }\n});\n\n// (disabled):os\nvar require_os = __commonJS({\n  \"(disabled):os\"() {\n  }\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm-threaded-simd.js\nvar require_tfjs_backend_wasm_threaded_simd = __commonJS({\n  \"node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm-threaded-simd.js\"(exports, module) {\n    var WasmBackendModuleThreadedSimd2 = function() {\n      var _scriptDir = typeof document !== \"undefined\" && document.currentScript ? document.currentScript.src : void 0;\n      if (typeof __filename !== \"undefined\")\n        _scriptDir = _scriptDir || __filename;\n      return function(WasmBackendModuleThreadedSimd3) {\n        WasmBackendModuleThreadedSimd3 = WasmBackendModuleThreadedSimd3 || {};\n        function GROWABLE_HEAP_I8() {\n          if (wasmMemory.buffer != buffer2) {\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n          }\n          return HEAP8;\n        }\n        function GROWABLE_HEAP_U8() {\n          if (wasmMemory.buffer != buffer2) {\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n          }\n          return HEAPU8;\n        }\n        function GROWABLE_HEAP_I32() {\n          if (wasmMemory.buffer != buffer2) {\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n          }\n          return HEAP32;\n        }\n        function GROWABLE_HEAP_U32() {\n          if (wasmMemory.buffer != buffer2) {\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n          }\n          return HEAPU32;\n        }\n        function GROWABLE_HEAP_F64() {\n          if (wasmMemory.buffer != buffer2) {\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n          }\n          return HEAPF64;\n        }\n        var Module = typeof WasmBackendModuleThreadedSimd3 !== \"undefined\" ? WasmBackendModuleThreadedSimd3 : {};\n        var readyPromiseResolve, readyPromiseReject;\n        Module[\"ready\"] = new Promise(function(resolve, reject) {\n          readyPromiseResolve = resolve;\n          readyPromiseReject = reject;\n        });\n        var beforeListeners;\n        if (typeof process !== \"undefined\" && process.listeners) {\n          beforeListeners = { uncaughtException: process.listeners(\"uncaughtException\"), unhandledRejection: process.listeners(\"unhandledRejection\") };\n        }\n        var moduleOverrides = {};\n        var key;\n        for (key in Module) {\n          if (Module.hasOwnProperty(key)) {\n            moduleOverrides[key] = Module[key];\n          }\n        }\n        var arguments_ = [];\n        var thisProgram = \"./this.program\";\n        var quit_ = function(status, toThrow) {\n          throw toThrow;\n        };\n        var ENVIRONMENT_IS_WEB = false;\n        var ENVIRONMENT_IS_WORKER = false;\n        var ENVIRONMENT_IS_NODE = false;\n        var ENVIRONMENT_IS_SHELL = false;\n        ENVIRONMENT_IS_WEB = typeof window === \"object\";\n        ENVIRONMENT_IS_WORKER = typeof importScripts === \"function\";\n        ENVIRONMENT_IS_NODE = typeof process === \"object\" && typeof process.versions === \"object\" && typeof process.versions.node === \"string\";\n        ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n        var ENVIRONMENT_IS_PTHREAD = Module[\"ENVIRONMENT_IS_PTHREAD\"] || false;\n        if (ENVIRONMENT_IS_PTHREAD) {\n          buffer2 = Module[\"buffer\"];\n        }\n        var scriptDirectory = \"\";\n        function locateFile(path) {\n          if (Module[\"locateFile\"]) {\n            return Module[\"locateFile\"](path, scriptDirectory);\n          }\n          return scriptDirectory + path;\n        }\n        var read_, readAsync, readBinary, setWindowTitle;\n        var nodeFS;\n        var nodePath;\n        if (ENVIRONMENT_IS_NODE) {\n          if (ENVIRONMENT_IS_WORKER) {\n            scriptDirectory = require_path().dirname(scriptDirectory) + \"/\";\n          } else {\n            scriptDirectory = __dirname + \"/\";\n          }\n          read_ = function shell_read(filename, binary) {\n            if (!nodeFS)\n              nodeFS = require_fs();\n            if (!nodePath)\n              nodePath = require_path();\n            filename = nodePath[\"normalize\"](filename);\n            return nodeFS[\"readFileSync\"](filename, binary ? null : \"utf8\");\n          };\n          readBinary = function readBinary2(filename) {\n            var ret = read_(filename, true);\n            if (!ret.buffer) {\n              ret = new Uint8Array(ret);\n            }\n            assert3(ret.buffer);\n            return ret;\n          };\n          if (process[\"argv\"].length > 1) {\n            thisProgram = process[\"argv\"][1].replace(/\\\\/g, \"/\");\n          }\n          arguments_ = process[\"argv\"].slice(2);\n          process[\"on\"](\"uncaughtException\", function(ex) {\n            if (!(ex instanceof ExitStatus)) {\n              throw ex;\n            }\n          });\n          process[\"on\"](\"unhandledRejection\", abort);\n          quit_ = function(status) {\n            process[\"exit\"](status);\n          };\n          Module[\"inspect\"] = function() {\n            return \"[Emscripten Module object]\";\n          };\n          var nodeWorkerThreads;\n          try {\n            nodeWorkerThreads = require_worker_threads();\n          } catch (e) {\n            console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?');\n            throw e;\n          }\n          global.Worker = nodeWorkerThreads.Worker;\n        } else if (ENVIRONMENT_IS_SHELL) {\n          if (typeof read != \"undefined\") {\n            read_ = function shell_read(f) {\n              return read(f);\n            };\n          }\n          readBinary = function readBinary2(f) {\n            var data;\n            if (typeof readbuffer === \"function\") {\n              return new Uint8Array(readbuffer(f));\n            }\n            data = read(f, \"binary\");\n            assert3(typeof data === \"object\");\n            return data;\n          };\n          if (typeof scriptArgs != \"undefined\") {\n            arguments_ = scriptArgs;\n          } else if (typeof arguments != \"undefined\") {\n            arguments_ = arguments;\n          }\n          if (typeof quit === \"function\") {\n            quit_ = function(status) {\n              quit(status);\n            };\n          }\n          if (typeof print !== \"undefined\") {\n            if (typeof console === \"undefined\")\n              console = {};\n            console.log = print;\n            console.warn = console.error = typeof printErr !== \"undefined\" ? printErr : print;\n          }\n        } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n          if (ENVIRONMENT_IS_WORKER) {\n            scriptDirectory = self.location.href;\n          } else if (typeof document !== \"undefined\" && document.currentScript) {\n            scriptDirectory = document.currentScript.src;\n          }\n          if (typeof _scriptDir !== \"undefined\" && _scriptDir) {\n            scriptDirectory = _scriptDir;\n          }\n          if (scriptDirectory.indexOf(\"blob:\") !== 0) {\n            scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf(\"/\") + 1);\n          } else {\n            scriptDirectory = \"\";\n          }\n          if (ENVIRONMENT_IS_NODE) {\n            read_ = function shell_read(filename, binary) {\n              if (!nodeFS)\n                nodeFS = require_fs();\n              if (!nodePath)\n                nodePath = require_path();\n              filename = nodePath[\"normalize\"](filename);\n              return nodeFS[\"readFileSync\"](filename, binary ? null : \"utf8\");\n            };\n            readBinary = function readBinary2(filename) {\n              var ret = read_(filename, true);\n              if (!ret.buffer) {\n                ret = new Uint8Array(ret);\n              }\n              assert3(ret.buffer);\n              return ret;\n            };\n          } else {\n            read_ = function(url) {\n              var xhr = new XMLHttpRequest();\n              xhr.open(\"GET\", url, false);\n              xhr.send(null);\n              return xhr.responseText;\n            };\n            if (ENVIRONMENT_IS_WORKER) {\n              readBinary = function(url) {\n                var xhr = new XMLHttpRequest();\n                xhr.open(\"GET\", url, false);\n                xhr.responseType = \"arraybuffer\";\n                xhr.send(null);\n                return new Uint8Array(xhr.response);\n              };\n            }\n            readAsync = function(url, onload, onerror) {\n              var xhr = new XMLHttpRequest();\n              xhr.open(\"GET\", url, true);\n              xhr.responseType = \"arraybuffer\";\n              xhr.onload = function() {\n                if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n                  onload(xhr.response);\n                  return;\n                }\n                onerror();\n              };\n              xhr.onerror = onerror;\n              xhr.send(null);\n            };\n          }\n          setWindowTitle = function(title) {\n            document.title = title;\n          };\n        } else {\n        }\n        if (ENVIRONMENT_IS_NODE) {\n          if (typeof performance === \"undefined\") {\n            global.performance = require_perf_hooks().performance;\n          }\n        }\n        var out = Module[\"print\"] || console.log.bind(console);\n        var err = Module[\"printErr\"] || console.warn.bind(console);\n        for (key in moduleOverrides) {\n          if (moduleOverrides.hasOwnProperty(key)) {\n            Module[key] = moduleOverrides[key];\n          }\n        }\n        moduleOverrides = null;\n        if (Module[\"arguments\"])\n          arguments_ = Module[\"arguments\"];\n        if (Module[\"thisProgram\"])\n          thisProgram = Module[\"thisProgram\"];\n        if (Module[\"quit\"])\n          quit_ = Module[\"quit\"];\n        function warnOnce(text) {\n          if (!warnOnce.shown)\n            warnOnce.shown = {};\n          if (!warnOnce.shown[text]) {\n            warnOnce.shown[text] = 1;\n            err(text);\n          }\n        }\n        var Atomics_load = Atomics.load;\n        var Atomics_store = Atomics.store;\n        var Atomics_compareExchange = Atomics.compareExchange;\n        var wasmBinary;\n        if (Module[\"wasmBinary\"])\n          wasmBinary = Module[\"wasmBinary\"];\n        var noExitRuntime = Module[\"noExitRuntime\"] || true;\n        if (typeof WebAssembly !== \"object\") {\n          abort(\"no native wasm support detected\");\n        }\n        var wasmMemory;\n        var wasmModule;\n        var ABORT = false;\n        var EXITSTATUS;\n        function assert3(condition, text) {\n          if (!condition) {\n            abort(\"Assertion failed: \" + text);\n          }\n        }\n        function getCFunc(ident) {\n          var func2 = Module[\"_\" + ident];\n          assert3(func2, \"Cannot call unknown function \" + ident + \", make sure it is exported\");\n          return func2;\n        }\n        function ccall(ident, returnType, argTypes, args, opts) {\n          var toC = { \"string\": function(str) {\n            var ret2 = 0;\n            if (str !== null && str !== void 0 && str !== 0) {\n              var len = (str.length << 2) + 1;\n              ret2 = stackAlloc(len);\n              stringToUTF8(str, ret2, len);\n            }\n            return ret2;\n          }, \"array\": function(arr) {\n            var ret2 = stackAlloc(arr.length);\n            writeArrayToMemory(arr, ret2);\n            return ret2;\n          } };\n          function convertReturnValue(ret2) {\n            if (returnType === \"string\")\n              return UTF8ToString(ret2);\n            if (returnType === \"boolean\")\n              return Boolean(ret2);\n            return ret2;\n          }\n          var func2 = getCFunc(ident);\n          var cArgs = [];\n          var stack2 = 0;\n          if (args) {\n            for (var i = 0; i < args.length; i++) {\n              var converter = toC[argTypes[i]];\n              if (converter) {\n                if (stack2 === 0)\n                  stack2 = stackSave();\n                cArgs[i] = converter(args[i]);\n              } else {\n                cArgs[i] = args[i];\n              }\n            }\n          }\n          var ret = func2.apply(null, cArgs);\n          ret = convertReturnValue(ret);\n          if (stack2 !== 0)\n            stackRestore(stack2);\n          return ret;\n        }\n        function cwrap(ident, returnType, argTypes, opts) {\n          argTypes = argTypes || [];\n          var numericArgs = argTypes.every(function(type) {\n            return type === \"number\";\n          });\n          var numericRet = returnType !== \"string\";\n          if (numericRet && numericArgs && !opts) {\n            return getCFunc(ident);\n          }\n          return function() {\n            return ccall(ident, returnType, argTypes, arguments, opts);\n          };\n        }\n        function UTF8ArrayToString(heap, idx, maxBytesToRead) {\n          var endIdx = idx + maxBytesToRead;\n          var str = \"\";\n          while (!(idx >= endIdx)) {\n            var u0 = heap[idx++];\n            if (!u0)\n              return str;\n            if (!(u0 & 128)) {\n              str += String.fromCharCode(u0);\n              continue;\n            }\n            var u1 = heap[idx++] & 63;\n            if ((u0 & 224) == 192) {\n              str += String.fromCharCode((u0 & 31) << 6 | u1);\n              continue;\n            }\n            var u2 = heap[idx++] & 63;\n            if ((u0 & 240) == 224) {\n              u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n            } else {\n              u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;\n            }\n            if (u0 < 65536) {\n              str += String.fromCharCode(u0);\n            } else {\n              var ch = u0 - 65536;\n              str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n            }\n          }\n          return str;\n        }\n        function UTF8ToString(ptr, maxBytesToRead) {\n          return ptr ? UTF8ArrayToString(GROWABLE_HEAP_U8(), ptr, maxBytesToRead) : \"\";\n        }\n        function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n          if (!(maxBytesToWrite > 0))\n            return 0;\n          var startIdx = outIdx;\n          var endIdx = outIdx + maxBytesToWrite - 1;\n          for (var i = 0; i < str.length; ++i) {\n            var u = str.charCodeAt(i);\n            if (u >= 55296 && u <= 57343) {\n              var u1 = str.charCodeAt(++i);\n              u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n            }\n            if (u <= 127) {\n              if (outIdx >= endIdx)\n                break;\n              heap[outIdx++] = u;\n            } else if (u <= 2047) {\n              if (outIdx + 1 >= endIdx)\n                break;\n              heap[outIdx++] = 192 | u >> 6;\n              heap[outIdx++] = 128 | u & 63;\n            } else if (u <= 65535) {\n              if (outIdx + 2 >= endIdx)\n                break;\n              heap[outIdx++] = 224 | u >> 12;\n              heap[outIdx++] = 128 | u >> 6 & 63;\n              heap[outIdx++] = 128 | u & 63;\n            } else {\n              if (outIdx + 3 >= endIdx)\n                break;\n              heap[outIdx++] = 240 | u >> 18;\n              heap[outIdx++] = 128 | u >> 12 & 63;\n              heap[outIdx++] = 128 | u >> 6 & 63;\n              heap[outIdx++] = 128 | u & 63;\n            }\n          }\n          heap[outIdx] = 0;\n          return outIdx - startIdx;\n        }\n        function stringToUTF8(str, outPtr, maxBytesToWrite) {\n          return stringToUTF8Array(str, GROWABLE_HEAP_U8(), outPtr, maxBytesToWrite);\n        }\n        function lengthBytesUTF8(str) {\n          var len = 0;\n          for (var i = 0; i < str.length; ++i) {\n            var u = str.charCodeAt(i);\n            if (u >= 55296 && u <= 57343)\n              u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;\n            if (u <= 127)\n              ++len;\n            else if (u <= 2047)\n              len += 2;\n            else if (u <= 65535)\n              len += 3;\n            else\n              len += 4;\n          }\n          return len;\n        }\n        function writeArrayToMemory(array2, buffer3) {\n          GROWABLE_HEAP_I8().set(array2, buffer3);\n        }\n        function alignUp(x, multiple) {\n          if (x % multiple > 0) {\n            x += multiple - x % multiple;\n          }\n          return x;\n        }\n        var buffer2, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n        function updateGlobalBufferAndViews(buf) {\n          buffer2 = buf;\n          Module[\"HEAP8\"] = HEAP8 = new Int8Array(buf);\n          Module[\"HEAP16\"] = HEAP16 = new Int16Array(buf);\n          Module[\"HEAP32\"] = HEAP32 = new Int32Array(buf);\n          Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(buf);\n          Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(buf);\n          Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(buf);\n          Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(buf);\n          Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(buf);\n        }\n        var INITIAL_MEMORY = Module[\"INITIAL_MEMORY\"] || 16777216;\n        if (ENVIRONMENT_IS_PTHREAD) {\n          wasmMemory = Module[\"wasmMemory\"];\n          buffer2 = Module[\"buffer\"];\n        } else {\n          if (Module[\"wasmMemory\"]) {\n            wasmMemory = Module[\"wasmMemory\"];\n          } else {\n            wasmMemory = new WebAssembly.Memory({ \"initial\": INITIAL_MEMORY / 65536, \"maximum\": 2147483648 / 65536, \"shared\": true });\n            if (!(wasmMemory.buffer instanceof SharedArrayBuffer)) {\n              err(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\");\n              if (ENVIRONMENT_IS_NODE) {\n                console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\");\n              }\n              throw Error(\"bad memory\");\n            }\n          }\n        }\n        if (wasmMemory) {\n          buffer2 = wasmMemory.buffer;\n        }\n        INITIAL_MEMORY = buffer2.byteLength;\n        updateGlobalBufferAndViews(buffer2);\n        var wasmTable;\n        var __ATPRERUN__ = [];\n        var __ATINIT__ = [];\n        var __ATMAIN__ = [];\n        var __ATEXIT__ = [];\n        var __ATPOSTRUN__ = [];\n        var runtimeInitialized = false;\n        var runtimeExited = false;\n        if (!ENVIRONMENT_IS_PTHREAD)\n          __ATINIT__.push({ func: function() {\n            ___wasm_call_ctors();\n          } });\n        function preRun() {\n          if (ENVIRONMENT_IS_PTHREAD)\n            return;\n          if (Module[\"preRun\"]) {\n            if (typeof Module[\"preRun\"] == \"function\")\n              Module[\"preRun\"] = [Module[\"preRun\"]];\n            while (Module[\"preRun\"].length) {\n              addOnPreRun(Module[\"preRun\"].shift());\n            }\n          }\n          callRuntimeCallbacks(__ATPRERUN__);\n        }\n        function initRuntime() {\n          runtimeInitialized = true;\n          if (ENVIRONMENT_IS_PTHREAD)\n            return;\n          callRuntimeCallbacks(__ATINIT__);\n        }\n        function preMain() {\n          if (ENVIRONMENT_IS_PTHREAD)\n            return;\n          callRuntimeCallbacks(__ATMAIN__);\n        }\n        function exitRuntime() {\n          if (ENVIRONMENT_IS_PTHREAD)\n            return;\n          runtimeExited = true;\n        }\n        function postRun() {\n          if (ENVIRONMENT_IS_PTHREAD)\n            return;\n          if (Module[\"postRun\"]) {\n            if (typeof Module[\"postRun\"] == \"function\")\n              Module[\"postRun\"] = [Module[\"postRun\"]];\n            while (Module[\"postRun\"].length) {\n              addOnPostRun(Module[\"postRun\"].shift());\n            }\n          }\n          callRuntimeCallbacks(__ATPOSTRUN__);\n        }\n        function addOnPreRun(cb) {\n          __ATPRERUN__.unshift(cb);\n        }\n        function addOnPostRun(cb) {\n          __ATPOSTRUN__.unshift(cb);\n        }\n        var runDependencies = 0;\n        var runDependencyWatcher = null;\n        var dependenciesFulfilled = null;\n        function addRunDependency(id) {\n          assert3(!ENVIRONMENT_IS_PTHREAD, \"addRunDependency cannot be used in a pthread worker\");\n          runDependencies++;\n          if (Module[\"monitorRunDependencies\"]) {\n            Module[\"monitorRunDependencies\"](runDependencies);\n          }\n        }\n        function removeRunDependency(id) {\n          runDependencies--;\n          if (Module[\"monitorRunDependencies\"]) {\n            Module[\"monitorRunDependencies\"](runDependencies);\n          }\n          if (runDependencies == 0) {\n            if (runDependencyWatcher !== null) {\n              clearInterval(runDependencyWatcher);\n              runDependencyWatcher = null;\n            }\n            if (dependenciesFulfilled) {\n              var callback = dependenciesFulfilled;\n              dependenciesFulfilled = null;\n              callback();\n            }\n          }\n        }\n        Module[\"preloadedImages\"] = {};\n        Module[\"preloadedAudios\"] = {};\n        function abort(what) {\n          if (Module[\"onAbort\"]) {\n            Module[\"onAbort\"](what);\n          }\n          if (ENVIRONMENT_IS_PTHREAD)\n            console.error(\"Pthread aborting at \" + new Error().stack);\n          what += \"\";\n          err(what);\n          ABORT = true;\n          EXITSTATUS = 1;\n          what = \"abort(\" + what + \"). Build with -s ASSERTIONS=1 for more info.\";\n          var e = new WebAssembly.RuntimeError(what);\n          readyPromiseReject(e);\n          throw e;\n        }\n        function hasPrefix(str, prefix) {\n          return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;\n        }\n        var dataURIPrefix = \"data:application/octet-stream;base64,\";\n        function isDataURI(filename) {\n          return hasPrefix(filename, dataURIPrefix);\n        }\n        var fileURIPrefix = \"file://\";\n        function isFileURI(filename) {\n          return hasPrefix(filename, fileURIPrefix);\n        }\n        var wasmBinaryFile = \"tfjs-backend-wasm-threaded-simd.wasm\";\n        if (!isDataURI(wasmBinaryFile)) {\n          wasmBinaryFile = locateFile(wasmBinaryFile);\n        }\n        function getBinary(file) {\n          try {\n            if (file == wasmBinaryFile && wasmBinary) {\n              return new Uint8Array(wasmBinary);\n            }\n            if (readBinary) {\n              return readBinary(file);\n            } else {\n              throw \"both async and sync fetching of the wasm failed\";\n            }\n          } catch (err2) {\n            abort(err2);\n          }\n        }\n        function getBinaryPromise() {\n          if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n            if (typeof fetch === \"function\" && !isFileURI(wasmBinaryFile)) {\n              return fetch(wasmBinaryFile, { credentials: \"same-origin\" }).then(function(response) {\n                if (!response[\"ok\"]) {\n                  throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\n                }\n                return response[\"arrayBuffer\"]();\n              }).catch(function() {\n                return getBinary(wasmBinaryFile);\n              });\n            } else {\n              if (readAsync) {\n                return new Promise(function(resolve, reject) {\n                  readAsync(wasmBinaryFile, function(response) {\n                    resolve(new Uint8Array(response));\n                  }, reject);\n                });\n              }\n            }\n          }\n          return Promise.resolve().then(function() {\n            return getBinary(wasmBinaryFile);\n          });\n        }\n        function createWasm() {\n          var info = { \"a\": asmLibraryArg };\n          function receiveInstance(instance, module2) {\n            var exports3 = instance.exports;\n            Module[\"asm\"] = exports3;\n            wasmTable = Module[\"asm\"][\"I\"];\n            wasmModule = module2;\n            if (!ENVIRONMENT_IS_PTHREAD) {\n              var numWorkersToLoad = PThread.unusedWorkers.length;\n              PThread.unusedWorkers.forEach(function(w) {\n                PThread.loadWasmModuleToWorker(w, function() {\n                  if (!--numWorkersToLoad)\n                    removeRunDependency(\"wasm-instantiate\");\n                });\n              });\n            }\n          }\n          if (!ENVIRONMENT_IS_PTHREAD) {\n            addRunDependency(\"wasm-instantiate\");\n          }\n          function receiveInstantiatedSource(output) {\n            receiveInstance(output[\"instance\"], output[\"module\"]);\n          }\n          function instantiateArrayBuffer(receiver) {\n            return getBinaryPromise().then(function(binary) {\n              return WebAssembly.instantiate(binary, info);\n            }).then(receiver, function(reason) {\n              err(\"failed to asynchronously prepare wasm: \" + reason);\n              abort(reason);\n            });\n          }\n          function instantiateAsync() {\n            if (!wasmBinary && typeof WebAssembly.instantiateStreaming === \"function\" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === \"function\") {\n              return fetch(wasmBinaryFile, { credentials: \"same-origin\" }).then(function(response) {\n                var result = WebAssembly.instantiateStreaming(response, info);\n                return result.then(receiveInstantiatedSource, function(reason) {\n                  err(\"wasm streaming compile failed: \" + reason);\n                  err(\"falling back to ArrayBuffer instantiation\");\n                  return instantiateArrayBuffer(receiveInstantiatedSource);\n                });\n              });\n            } else {\n              return instantiateArrayBuffer(receiveInstantiatedSource);\n            }\n          }\n          if (Module[\"instantiateWasm\"]) {\n            try {\n              var exports2 = Module[\"instantiateWasm\"](info, receiveInstance);\n              return exports2;\n            } catch (e) {\n              err(\"Module.instantiateWasm callback failed with error: \" + e);\n              return false;\n            }\n          }\n          instantiateAsync().catch(readyPromiseReject);\n          return {};\n        }\n        var ASM_CONSTS = { 10664: function() {\n          throw \"Canceled!\";\n        }, 10682: function($0, $1) {\n          setTimeout(function() {\n            __emscripten_do_dispatch_to_thread($0, $1);\n          }, 0);\n        } };\n        function initPthreadsJS() {\n          PThread.initRuntime();\n        }\n        function callRuntimeCallbacks(callbacks2) {\n          while (callbacks2.length > 0) {\n            var callback = callbacks2.shift();\n            if (typeof callback == \"function\") {\n              callback(Module);\n              continue;\n            }\n            var func2 = callback.func;\n            if (typeof func2 === \"number\") {\n              if (callback.arg === void 0) {\n                wasmTable.get(func2)();\n              } else {\n                wasmTable.get(func2)(callback.arg);\n              }\n            } else {\n              func2(callback.arg === void 0 ? null : callback.arg);\n            }\n          }\n        }\n        var ERRNO_CODES = { EPERM: 63, ENOENT: 44, ESRCH: 71, EINTR: 27, EIO: 29, ENXIO: 60, E2BIG: 1, ENOEXEC: 45, EBADF: 8, ECHILD: 12, EAGAIN: 6, EWOULDBLOCK: 6, ENOMEM: 48, EACCES: 2, EFAULT: 21, ENOTBLK: 105, EBUSY: 10, EEXIST: 20, EXDEV: 75, ENODEV: 43, ENOTDIR: 54, EISDIR: 31, EINVAL: 28, ENFILE: 41, EMFILE: 33, ENOTTY: 59, ETXTBSY: 74, EFBIG: 22, ENOSPC: 51, ESPIPE: 70, EROFS: 69, EMLINK: 34, EPIPE: 64, EDOM: 18, ERANGE: 68, ENOMSG: 49, EIDRM: 24, ECHRNG: 106, EL2NSYNC: 156, EL3HLT: 107, EL3RST: 108, ELNRNG: 109, EUNATCH: 110, ENOCSI: 111, EL2HLT: 112, EDEADLK: 16, ENOLCK: 46, EBADE: 113, EBADR: 114, EXFULL: 115, ENOANO: 104, EBADRQC: 103, EBADSLT: 102, EDEADLOCK: 16, EBFONT: 101, ENOSTR: 100, ENODATA: 116, ETIME: 117, ENOSR: 118, ENONET: 119, ENOPKG: 120, EREMOTE: 121, ENOLINK: 47, EADV: 122, ESRMNT: 123, ECOMM: 124, EPROTO: 65, EMULTIHOP: 36, EDOTDOT: 125, EBADMSG: 9, ENOTUNIQ: 126, EBADFD: 127, EREMCHG: 128, ELIBACC: 129, ELIBBAD: 130, ELIBSCN: 131, ELIBMAX: 132, ELIBEXEC: 133, ENOSYS: 52, ENOTEMPTY: 55, ENAMETOOLONG: 37, ELOOP: 32, EOPNOTSUPP: 138, EPFNOSUPPORT: 139, ECONNRESET: 15, ENOBUFS: 42, EAFNOSUPPORT: 5, EPROTOTYPE: 67, ENOTSOCK: 57, ENOPROTOOPT: 50, ESHUTDOWN: 140, ECONNREFUSED: 14, EADDRINUSE: 3, ECONNABORTED: 13, ENETUNREACH: 40, ENETDOWN: 38, ETIMEDOUT: 73, EHOSTDOWN: 142, EHOSTUNREACH: 23, EINPROGRESS: 26, EALREADY: 7, EDESTADDRREQ: 17, EMSGSIZE: 35, EPROTONOSUPPORT: 66, ESOCKTNOSUPPORT: 137, EADDRNOTAVAIL: 4, ENETRESET: 39, EISCONN: 30, ENOTCONN: 53, ETOOMANYREFS: 141, EUSERS: 136, EDQUOT: 19, ESTALE: 72, ENOTSUP: 138, ENOMEDIUM: 148, EILSEQ: 25, EOVERFLOW: 61, ECANCELED: 11, ENOTRECOVERABLE: 56, EOWNERDEAD: 62, ESTRPIPE: 135 };\n        function _emscripten_futex_wake(addr, count2) {\n          if (addr <= 0 || addr > GROWABLE_HEAP_I8().length || addr & true || count2 < 0)\n            return -28;\n          if (count2 == 0)\n            return 0;\n          if (count2 >= 2147483647)\n            count2 = Infinity;\n          var mainThreadWaitAddress = Atomics.load(GROWABLE_HEAP_I32(), __emscripten_main_thread_futex >> 2);\n          var mainThreadWoken = 0;\n          if (mainThreadWaitAddress == addr) {\n            var loadedAddr = Atomics.compareExchange(GROWABLE_HEAP_I32(), __emscripten_main_thread_futex >> 2, mainThreadWaitAddress, 0);\n            if (loadedAddr == mainThreadWaitAddress) {\n              --count2;\n              mainThreadWoken = 1;\n              if (count2 <= 0)\n                return 1;\n            }\n          }\n          var ret = Atomics.notify(GROWABLE_HEAP_I32(), addr >> 2, count2);\n          if (ret >= 0)\n            return ret + mainThreadWoken;\n          throw \"Atomics.notify returned an unexpected value \" + ret;\n        }\n        Module[\"_emscripten_futex_wake\"] = _emscripten_futex_wake;\n        function killThread(pthread_ptr) {\n          if (ENVIRONMENT_IS_PTHREAD)\n            throw \"Internal Error! killThread() can only ever be called from main application thread!\";\n          if (!pthread_ptr)\n            throw \"Internal Error! Null pthread_ptr in killThread!\";\n          GROWABLE_HEAP_I32()[pthread_ptr + 12 >> 2] = 0;\n          var pthread = PThread.pthreads[pthread_ptr];\n          pthread.worker.terminate();\n          PThread.freeThreadData(pthread);\n          PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(pthread.worker), 1);\n          pthread.worker.pthread = void 0;\n        }\n        function cancelThread(pthread_ptr) {\n          if (ENVIRONMENT_IS_PTHREAD)\n            throw \"Internal Error! cancelThread() can only ever be called from main application thread!\";\n          if (!pthread_ptr)\n            throw \"Internal Error! Null pthread_ptr in cancelThread!\";\n          var pthread = PThread.pthreads[pthread_ptr];\n          pthread.worker.postMessage({ \"cmd\": \"cancel\" });\n        }\n        function cleanupThread(pthread_ptr) {\n          if (ENVIRONMENT_IS_PTHREAD)\n            throw \"Internal Error! cleanupThread() can only ever be called from main application thread!\";\n          if (!pthread_ptr)\n            throw \"Internal Error! Null pthread_ptr in cleanupThread!\";\n          var pthread = PThread.pthreads[pthread_ptr];\n          if (pthread) {\n            GROWABLE_HEAP_I32()[pthread_ptr + 12 >> 2] = 0;\n            var worker = pthread.worker;\n            PThread.returnWorkerToPool(worker);\n          }\n        }\n        var PThread = { unusedWorkers: [], runningWorkers: [], initMainThreadBlock: function() {\n          var pthreadPoolSize = 8;\n          for (var i = 0; i < pthreadPoolSize; ++i) {\n            PThread.allocateUnusedWorker();\n          }\n        }, initRuntime: function() {\n          var tb = _malloc(228);\n          for (var i = 0; i < 228 / 4; ++i)\n            GROWABLE_HEAP_U32()[tb / 4 + i] = 0;\n          GROWABLE_HEAP_I32()[tb + 12 >> 2] = tb;\n          var headPtr = tb + 152;\n          GROWABLE_HEAP_I32()[headPtr >> 2] = headPtr;\n          var tlsMemory = _malloc(512);\n          for (var i = 0; i < 128; ++i)\n            GROWABLE_HEAP_U32()[tlsMemory / 4 + i] = 0;\n          Atomics.store(GROWABLE_HEAP_U32(), tb + 100 >> 2, tlsMemory);\n          Atomics.store(GROWABLE_HEAP_U32(), tb + 40 >> 2, tb);\n          __emscripten_thread_init(tb, !ENVIRONMENT_IS_WORKER, 1);\n          _emscripten_register_main_browser_thread_id(tb);\n        }, initWorker: function() {\n        }, pthreads: {}, threadExitHandlers: [], setThreadStatus: function() {\n        }, runExitHandlers: function() {\n          while (PThread.threadExitHandlers.length > 0) {\n            PThread.threadExitHandlers.pop()();\n          }\n          if (ENVIRONMENT_IS_PTHREAD && _pthread_self())\n            ___pthread_tsd_run_dtors();\n        }, runExitHandlersAndDeinitThread: function(tb, exitCode) {\n          Atomics.store(GROWABLE_HEAP_U32(), tb + 56 >> 2, 1);\n          Atomics.store(GROWABLE_HEAP_U32(), tb + 60 >> 2, 0);\n          PThread.runExitHandlers();\n          Atomics.store(GROWABLE_HEAP_U32(), tb + 4 >> 2, exitCode);\n          Atomics.store(GROWABLE_HEAP_U32(), tb + 0 >> 2, 1);\n          _emscripten_futex_wake(tb + 0, 2147483647);\n          __emscripten_thread_init(0, 0, 0);\n        }, threadExit: function(exitCode) {\n          var tb = _pthread_self();\n          if (tb) {\n            PThread.runExitHandlersAndDeinitThread(tb, exitCode);\n            if (ENVIRONMENT_IS_PTHREAD) {\n              postMessage({ \"cmd\": \"exit\" });\n            }\n          }\n        }, threadCancel: function() {\n          PThread.runExitHandlersAndDeinitThread(_pthread_self(), -1);\n          postMessage({ \"cmd\": \"cancelDone\" });\n        }, terminateAllThreads: function() {\n          for (var t in PThread.pthreads) {\n            var pthread = PThread.pthreads[t];\n            if (pthread && pthread.worker) {\n              PThread.returnWorkerToPool(pthread.worker);\n            }\n          }\n          PThread.pthreads = {};\n          for (var i = 0; i < PThread.unusedWorkers.length; ++i) {\n            var worker = PThread.unusedWorkers[i];\n            worker.terminate();\n          }\n          PThread.unusedWorkers = [];\n          for (var i = 0; i < PThread.runningWorkers.length; ++i) {\n            var worker = PThread.runningWorkers[i];\n            var pthread = worker.pthread;\n            PThread.freeThreadData(pthread);\n            worker.terminate();\n          }\n          PThread.runningWorkers = [];\n        }, freeThreadData: function(pthread) {\n          if (!pthread)\n            return;\n          if (pthread.threadInfoStruct) {\n            var tlsMemory = GROWABLE_HEAP_I32()[pthread.threadInfoStruct + 100 >> 2];\n            GROWABLE_HEAP_I32()[pthread.threadInfoStruct + 100 >> 2] = 0;\n            _free(tlsMemory);\n            _free(pthread.threadInfoStruct);\n          }\n          pthread.threadInfoStruct = 0;\n          if (pthread.allocatedOwnStack && pthread.stackBase)\n            _free(pthread.stackBase);\n          pthread.stackBase = 0;\n          if (pthread.worker)\n            pthread.worker.pthread = null;\n        }, returnWorkerToPool: function(worker) {\n          PThread.runWithoutMainThreadQueuedCalls(function() {\n            delete PThread.pthreads[worker.pthread.threadInfoStruct];\n            PThread.unusedWorkers.push(worker);\n            PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker), 1);\n            PThread.freeThreadData(worker.pthread);\n            worker.pthread = void 0;\n          });\n        }, runWithoutMainThreadQueuedCalls: function(func2) {\n          GROWABLE_HEAP_I32()[__emscripten_allow_main_runtime_queued_calls >> 2] = 0;\n          try {\n            func2();\n          } finally {\n            GROWABLE_HEAP_I32()[__emscripten_allow_main_runtime_queued_calls >> 2] = 1;\n          }\n        }, receiveObjectTransfer: function(data) {\n        }, loadWasmModuleToWorker: function(worker, onFinishedLoading) {\n          worker.onmessage = function(e) {\n            var d = e[\"data\"];\n            var cmd = d[\"cmd\"];\n            if (worker.pthread)\n              PThread.currentProxiedOperationCallerThread = worker.pthread.threadInfoStruct;\n            if (d[\"targetThread\"] && d[\"targetThread\"] != _pthread_self()) {\n              var thread = PThread.pthreads[d.targetThread];\n              if (thread) {\n                thread.worker.postMessage(e.data, d[\"transferList\"]);\n              } else {\n                console.error('Internal error! Worker sent a message \"' + cmd + '\" to target pthread ' + d[\"targetThread\"] + \", but that thread no longer exists!\");\n              }\n              PThread.currentProxiedOperationCallerThread = void 0;\n              return;\n            }\n            if (cmd === \"processQueuedMainThreadWork\") {\n              _emscripten_main_thread_process_queued_calls();\n            } else if (cmd === \"spawnThread\") {\n              spawnThread(e.data);\n            } else if (cmd === \"cleanupThread\") {\n              cleanupThread(d[\"thread\"]);\n            } else if (cmd === \"killThread\") {\n              killThread(d[\"thread\"]);\n            } else if (cmd === \"cancelThread\") {\n              cancelThread(d[\"thread\"]);\n            } else if (cmd === \"loaded\") {\n              worker.loaded = true;\n              if (onFinishedLoading)\n                onFinishedLoading(worker);\n              if (worker.runPthread) {\n                worker.runPthread();\n                delete worker.runPthread;\n              }\n            } else if (cmd === \"print\") {\n              out(\"Thread \" + d[\"threadId\"] + \": \" + d[\"text\"]);\n            } else if (cmd === \"printErr\") {\n              err(\"Thread \" + d[\"threadId\"] + \": \" + d[\"text\"]);\n            } else if (cmd === \"alert\") {\n              alert(\"Thread \" + d[\"threadId\"] + \": \" + d[\"text\"]);\n            } else if (cmd === \"exit\") {\n              var detached = worker.pthread && Atomics.load(GROWABLE_HEAP_U32(), worker.pthread.threadInfoStruct + 64 >> 2);\n              if (detached) {\n                PThread.returnWorkerToPool(worker);\n              }\n            } else if (cmd === \"exitProcess\") {\n              try {\n                exit(d[\"returnCode\"]);\n              } catch (e2) {\n                if (e2 instanceof ExitStatus)\n                  return;\n                throw e2;\n              }\n            } else if (cmd === \"cancelDone\") {\n              PThread.returnWorkerToPool(worker);\n            } else if (cmd === \"objectTransfer\") {\n              PThread.receiveObjectTransfer(e.data);\n            } else if (e.data.target === \"setimmediate\") {\n              worker.postMessage(e.data);\n            } else {\n              err(\"worker sent an unknown command \" + cmd);\n            }\n            PThread.currentProxiedOperationCallerThread = void 0;\n          };\n          worker.onerror = function(e) {\n            err(\"pthread sent an error! \" + e.filename + \":\" + e.lineno + \": \" + e.message);\n          };\n          if (ENVIRONMENT_IS_NODE) {\n            worker.on(\"message\", function(data) {\n              worker.onmessage({ data });\n            });\n            worker.on(\"error\", function(data) {\n              worker.onerror(data);\n            });\n            worker.on(\"exit\", function(data) {\n            });\n          }\n          worker.postMessage({ \"cmd\": \"load\", \"urlOrBlob\": Module[\"mainScriptUrlOrBlob\"] || _scriptDir, \"wasmMemory\": wasmMemory, \"wasmModule\": wasmModule });\n        }, allocateUnusedWorker: function() {\n          var pthreadMainJs = locateFile(\"tfjs-backend-wasm-threaded-simd.worker.js\");\n          PThread.unusedWorkers.push(new Worker(pthreadMainJs));\n        }, getNewWorker: function() {\n          if (PThread.unusedWorkers.length == 0) {\n            PThread.allocateUnusedWorker();\n            PThread.loadWasmModuleToWorker(PThread.unusedWorkers[0]);\n          }\n          if (PThread.unusedWorkers.length > 0)\n            return PThread.unusedWorkers.pop();\n          else\n            return null;\n        }, busySpinWait: function(msecs) {\n          var t = performance.now() + msecs;\n          while (performance.now() < t) {\n          }\n        } };\n        function establishStackSpace(stackTop, stackMax) {\n          _emscripten_stack_set_limits(stackTop, stackMax);\n          stackRestore(stackTop);\n        }\n        Module[\"establishStackSpace\"] = establishStackSpace;\n        function getNoExitRuntime() {\n          return noExitRuntime;\n        }\n        Module[\"getNoExitRuntime\"] = getNoExitRuntime;\n        function invokeEntryPoint(ptr, arg) {\n          return wasmTable.get(ptr)(arg);\n        }\n        Module[\"invokeEntryPoint\"] = invokeEntryPoint;\n        function ___assert_fail(condition, filename, line, func2) {\n          abort(\"Assertion failed: \" + UTF8ToString(condition) + \", at: \" + [filename ? UTF8ToString(filename) : \"unknown filename\", line, func2 ? UTF8ToString(func2) : \"unknown function\"]);\n        }\n        function ___call_main(argc, argv) {\n          var returnCode = _main(argc, argv);\n        }\n        var _emscripten_get_now;\n        if (ENVIRONMENT_IS_NODE) {\n          _emscripten_get_now = function() {\n            var t = process[\"hrtime\"]();\n            return t[0] * 1e3 + t[1] / 1e6;\n          };\n        } else if (ENVIRONMENT_IS_PTHREAD) {\n          _emscripten_get_now = function() {\n            return performance.now() - Module[\"__performance_now_clock_drift\"];\n          };\n        } else if (typeof dateNow !== \"undefined\") {\n          _emscripten_get_now = dateNow;\n        } else\n          _emscripten_get_now = function() {\n            return performance.now();\n          };\n        function setErrNo(value) {\n          GROWABLE_HEAP_I32()[___errno_location() >> 2] = value;\n          return value;\n        }\n        function _atexit(func2, arg) {\n          if (ENVIRONMENT_IS_PTHREAD)\n            return _emscripten_proxy_to_main_thread_js(1, 1, func2, arg);\n        }\n        function __emscripten_notify_thread_queue(targetThreadId, mainThreadId) {\n          if (targetThreadId == mainThreadId) {\n            postMessage({ \"cmd\": \"processQueuedMainThreadWork\" });\n          } else if (ENVIRONMENT_IS_PTHREAD) {\n            postMessage({ \"targetThread\": targetThreadId, \"cmd\": \"processThreadQueue\" });\n          } else {\n            var pthread = PThread.pthreads[targetThreadId];\n            var worker = pthread && pthread.worker;\n            if (!worker) {\n              return;\n            }\n            worker.postMessage({ \"cmd\": \"processThreadQueue\" });\n          }\n          return 1;\n        }\n        function _abort() {\n          abort();\n        }\n        function _emscripten_asm_const_int(code, sigPtr, argbuf) {\n          var args = readAsmConstArgs(sigPtr, argbuf);\n          return ASM_CONSTS[code].apply(null, args);\n        }\n        function _emscripten_conditional_set_current_thread_status(expectedStatus, newStatus) {\n        }\n        function _emscripten_futex_wait(addr, val, timeout) {\n          if (addr <= 0 || addr > GROWABLE_HEAP_I8().length || addr & true)\n            return -28;\n          if (!ENVIRONMENT_IS_WEB) {\n            var ret = Atomics.wait(GROWABLE_HEAP_I32(), addr >> 2, val, timeout);\n            if (ret === \"timed-out\")\n              return -73;\n            if (ret === \"not-equal\")\n              return -6;\n            if (ret === \"ok\")\n              return 0;\n            throw \"Atomics.wait returned an unexpected value \" + ret;\n          } else {\n            if (Atomics.load(GROWABLE_HEAP_I32(), addr >> 2) != val) {\n              return -6;\n            }\n            var tNow = performance.now();\n            var tEnd = tNow + timeout;\n            var lastAddr = Atomics.exchange(GROWABLE_HEAP_I32(), __emscripten_main_thread_futex >> 2, addr);\n            while (1) {\n              tNow = performance.now();\n              if (tNow > tEnd) {\n                lastAddr = Atomics.exchange(GROWABLE_HEAP_I32(), __emscripten_main_thread_futex >> 2, 0);\n                return -73;\n              }\n              lastAddr = Atomics.exchange(GROWABLE_HEAP_I32(), __emscripten_main_thread_futex >> 2, 0);\n              if (lastAddr == 0) {\n                break;\n              }\n              _emscripten_main_thread_process_queued_calls();\n              if (Atomics.load(GROWABLE_HEAP_I32(), addr >> 2) != val) {\n                return -6;\n              }\n              lastAddr = Atomics.exchange(GROWABLE_HEAP_I32(), __emscripten_main_thread_futex >> 2, addr);\n            }\n            return 0;\n          }\n        }\n        function _emscripten_memcpy_big(dest, src, num) {\n          GROWABLE_HEAP_U8().copyWithin(dest, src, src + num);\n        }\n        function _emscripten_num_logical_cores() {\n          if (ENVIRONMENT_IS_NODE)\n            return require_os().cpus().length;\n          return navigator[\"hardwareConcurrency\"];\n        }\n        function _emscripten_proxy_to_main_thread_js(index, sync) {\n          var numCallArgs = arguments.length - 2;\n          var stack2 = stackSave();\n          var serializedNumCallArgs = numCallArgs;\n          var args = stackAlloc(serializedNumCallArgs * 8);\n          var b = args >> 3;\n          for (var i = 0; i < numCallArgs; i++) {\n            var arg = arguments[2 + i];\n            GROWABLE_HEAP_F64()[b + i] = arg;\n          }\n          var ret = _emscripten_run_in_main_runtime_thread_js(index, serializedNumCallArgs, args, sync);\n          stackRestore(stack2);\n          return ret;\n        }\n        var _emscripten_receive_on_main_thread_js_callArgs = [];\n        var readAsmConstArgsArray = [];\n        function readAsmConstArgs(sigPtr, buf) {\n          readAsmConstArgsArray.length = 0;\n          var ch;\n          buf >>= 2;\n          while (ch = GROWABLE_HEAP_U8()[sigPtr++]) {\n            var double = ch < 105;\n            if (double && buf & 1)\n              buf++;\n            readAsmConstArgsArray.push(double ? GROWABLE_HEAP_F64()[buf++ >> 1] : GROWABLE_HEAP_I32()[buf]);\n            ++buf;\n          }\n          return readAsmConstArgsArray;\n        }\n        function _emscripten_receive_on_main_thread_js(index, numCallArgs, args) {\n          _emscripten_receive_on_main_thread_js_callArgs.length = numCallArgs;\n          var b = args >> 3;\n          for (var i = 0; i < numCallArgs; i++) {\n            _emscripten_receive_on_main_thread_js_callArgs[i] = GROWABLE_HEAP_F64()[b + i];\n          }\n          var isEmAsmConst = index < 0;\n          var func2 = !isEmAsmConst ? proxiedFunctionTable[index] : ASM_CONSTS[-index - 1];\n          return func2.apply(null, _emscripten_receive_on_main_thread_js_callArgs);\n        }\n        function _emscripten_get_heap_size() {\n          return GROWABLE_HEAP_U8().length;\n        }\n        function emscripten_realloc_buffer(size) {\n          try {\n            wasmMemory.grow(size - buffer2.byteLength + 65535 >>> 16);\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n            return 1;\n          } catch (e) {\n          }\n        }\n        function _emscripten_resize_heap(requestedSize) {\n          var oldSize = _emscripten_get_heap_size();\n          if (requestedSize <= oldSize) {\n            return false;\n          }\n          var maxHeapSize = 2147483648;\n          if (requestedSize > maxHeapSize) {\n            return false;\n          }\n          for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n            var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n            overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n            var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n            var replacement = emscripten_realloc_buffer(newSize);\n            if (replacement) {\n              return true;\n            }\n          }\n          return false;\n        }\n        var JSEvents = { inEventHandler: 0, removeAllEventListeners: function() {\n          for (var i = JSEvents.eventHandlers.length - 1; i >= 0; --i) {\n            JSEvents._removeHandler(i);\n          }\n          JSEvents.eventHandlers = [];\n          JSEvents.deferredCalls = [];\n        }, registerRemoveEventListeners: function() {\n          if (!JSEvents.removeEventListenersRegistered) {\n            __ATEXIT__.push(JSEvents.removeAllEventListeners);\n            JSEvents.removeEventListenersRegistered = true;\n          }\n        }, deferredCalls: [], deferCall: function(targetFunction, precedence, argsList) {\n          function arraysHaveEqualContent(arrA, arrB) {\n            if (arrA.length != arrB.length)\n              return false;\n            for (var i2 in arrA) {\n              if (arrA[i2] != arrB[i2])\n                return false;\n            }\n            return true;\n          }\n          for (var i in JSEvents.deferredCalls) {\n            var call = JSEvents.deferredCalls[i];\n            if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {\n              return;\n            }\n          }\n          JSEvents.deferredCalls.push({ targetFunction, precedence, argsList });\n          JSEvents.deferredCalls.sort(function(x, y) {\n            return x.precedence < y.precedence;\n          });\n        }, removeDeferredCalls: function(targetFunction) {\n          for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {\n            if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {\n              JSEvents.deferredCalls.splice(i, 1);\n              --i;\n            }\n          }\n        }, canPerformEventHandlerRequests: function() {\n          return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;\n        }, runDeferredCalls: function() {\n          if (!JSEvents.canPerformEventHandlerRequests()) {\n            return;\n          }\n          for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {\n            var call = JSEvents.deferredCalls[i];\n            JSEvents.deferredCalls.splice(i, 1);\n            --i;\n            call.targetFunction.apply(null, call.argsList);\n          }\n        }, eventHandlers: [], removeAllHandlersOnTarget: function(target, eventTypeString) {\n          for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {\n            if (JSEvents.eventHandlers[i].target == target && (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {\n              JSEvents._removeHandler(i--);\n            }\n          }\n        }, _removeHandler: function(i) {\n          var h = JSEvents.eventHandlers[i];\n          h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);\n          JSEvents.eventHandlers.splice(i, 1);\n        }, registerOrRemoveHandler: function(eventHandler) {\n          var jsEventHandler = function jsEventHandler2(event) {\n            ++JSEvents.inEventHandler;\n            JSEvents.currentEventHandler = eventHandler;\n            JSEvents.runDeferredCalls();\n            eventHandler.handlerFunc(event);\n            JSEvents.runDeferredCalls();\n            --JSEvents.inEventHandler;\n          };\n          if (eventHandler.callbackfunc) {\n            eventHandler.eventListenerFunc = jsEventHandler;\n            eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);\n            JSEvents.eventHandlers.push(eventHandler);\n            JSEvents.registerRemoveEventListeners();\n          } else {\n            for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {\n              if (JSEvents.eventHandlers[i].target == eventHandler.target && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {\n                JSEvents._removeHandler(i--);\n              }\n            }\n          }\n        }, queueEventHandlerOnThread_iiii: function(targetThread, eventHandlerFunc, eventTypeId, eventData, userData) {\n          var stackTop = stackSave();\n          var varargs = stackAlloc(12);\n          GROWABLE_HEAP_I32()[varargs >> 2] = eventTypeId;\n          GROWABLE_HEAP_I32()[varargs + 4 >> 2] = eventData;\n          GROWABLE_HEAP_I32()[varargs + 8 >> 2] = userData;\n          __emscripten_call_on_thread(0, targetThread, 637534208, eventHandlerFunc, eventData, varargs);\n          stackRestore(stackTop);\n        }, getTargetThreadForEventCallback: function(targetThread) {\n          switch (targetThread) {\n            case 1:\n              return 0;\n            case 2:\n              return PThread.currentProxiedOperationCallerThread;\n            default:\n              return targetThread;\n          }\n        }, getNodeNameForTarget: function(target) {\n          if (!target)\n            return \"\";\n          if (target == window)\n            return \"#window\";\n          if (target == screen)\n            return \"#screen\";\n          return target && target.nodeName ? target.nodeName : \"\";\n        }, fullscreenEnabled: function() {\n          return document.fullscreenEnabled || document.webkitFullscreenEnabled;\n        } };\n        function stringToNewUTF8(jsString) {\n          var length = lengthBytesUTF8(jsString) + 1;\n          var cString = _malloc(length);\n          stringToUTF8(jsString, cString, length);\n          return cString;\n        }\n        function _emscripten_set_offscreencanvas_size_on_target_thread_js(targetThread, targetCanvas, width, height) {\n          var stackTop = stackSave();\n          var varargs = stackAlloc(12);\n          var targetCanvasPtr = 0;\n          if (targetCanvas) {\n            targetCanvasPtr = stringToNewUTF8(targetCanvas);\n          }\n          GROWABLE_HEAP_I32()[varargs >> 2] = targetCanvasPtr;\n          GROWABLE_HEAP_I32()[varargs + 4 >> 2] = width;\n          GROWABLE_HEAP_I32()[varargs + 8 >> 2] = height;\n          __emscripten_call_on_thread(0, targetThread, 657457152, 0, targetCanvasPtr, varargs);\n          stackRestore(stackTop);\n        }\n        function _emscripten_set_offscreencanvas_size_on_target_thread(targetThread, targetCanvas, width, height) {\n          targetCanvas = targetCanvas ? UTF8ToString(targetCanvas) : \"\";\n          _emscripten_set_offscreencanvas_size_on_target_thread_js(targetThread, targetCanvas, width, height);\n        }\n        function maybeCStringToJsString(cString) {\n          return cString > 2 ? UTF8ToString(cString) : cString;\n        }\n        var specialHTMLTargets = [0, typeof document !== \"undefined\" ? document : 0, typeof window !== \"undefined\" ? window : 0];\n        function findEventTarget(target) {\n          target = maybeCStringToJsString(target);\n          var domElement = specialHTMLTargets[target] || (typeof document !== \"undefined\" ? document.querySelector(target) : void 0);\n          return domElement;\n        }\n        function findCanvasEventTarget(target) {\n          return findEventTarget(target);\n        }\n        function _emscripten_set_canvas_element_size_calling_thread(target, width, height) {\n          var canvas = findCanvasEventTarget(target);\n          if (!canvas)\n            return -4;\n          if (canvas.canvasSharedPtr) {\n            GROWABLE_HEAP_I32()[canvas.canvasSharedPtr >> 2] = width;\n            GROWABLE_HEAP_I32()[canvas.canvasSharedPtr + 4 >> 2] = height;\n          }\n          if (canvas.offscreenCanvas || !canvas.controlTransferredOffscreen) {\n            if (canvas.offscreenCanvas)\n              canvas = canvas.offscreenCanvas;\n            var autoResizeViewport = false;\n            if (canvas.GLctxObject && canvas.GLctxObject.GLctx) {\n              var prevViewport = canvas.GLctxObject.GLctx.getParameter(2978);\n              autoResizeViewport = prevViewport[0] === 0 && prevViewport[1] === 0 && prevViewport[2] === canvas.width && prevViewport[3] === canvas.height;\n            }\n            canvas.width = width;\n            canvas.height = height;\n            if (autoResizeViewport) {\n              canvas.GLctxObject.GLctx.viewport(0, 0, width, height);\n            }\n          } else if (canvas.canvasSharedPtr) {\n            var targetThread = GROWABLE_HEAP_I32()[canvas.canvasSharedPtr + 8 >> 2];\n            _emscripten_set_offscreencanvas_size_on_target_thread(targetThread, target, width, height);\n            return 1;\n          } else {\n            return -4;\n          }\n          return 0;\n        }\n        function _emscripten_set_canvas_element_size_main_thread(target, width, height) {\n          if (ENVIRONMENT_IS_PTHREAD)\n            return _emscripten_proxy_to_main_thread_js(2, 1, target, width, height);\n          return _emscripten_set_canvas_element_size_calling_thread(target, width, height);\n        }\n        function _emscripten_set_canvas_element_size(target, width, height) {\n          var canvas = findCanvasEventTarget(target);\n          if (canvas) {\n            return _emscripten_set_canvas_element_size_calling_thread(target, width, height);\n          } else {\n            return _emscripten_set_canvas_element_size_main_thread(target, width, height);\n          }\n        }\n        function _emscripten_set_current_thread_status(newStatus) {\n        }\n        function _emscripten_set_thread_name(threadId, name) {\n        }\n        function __webgl_enable_ANGLE_instanced_arrays(ctx) {\n          var ext = ctx.getExtension(\"ANGLE_instanced_arrays\");\n          if (ext) {\n            ctx[\"vertexAttribDivisor\"] = function(index, divisor) {\n              ext[\"vertexAttribDivisorANGLE\"](index, divisor);\n            };\n            ctx[\"drawArraysInstanced\"] = function(mode, first, count2, primcount) {\n              ext[\"drawArraysInstancedANGLE\"](mode, first, count2, primcount);\n            };\n            ctx[\"drawElementsInstanced\"] = function(mode, count2, type, indices, primcount) {\n              ext[\"drawElementsInstancedANGLE\"](mode, count2, type, indices, primcount);\n            };\n            return 1;\n          }\n        }\n        function __webgl_enable_OES_vertex_array_object(ctx) {\n          var ext = ctx.getExtension(\"OES_vertex_array_object\");\n          if (ext) {\n            ctx[\"createVertexArray\"] = function() {\n              return ext[\"createVertexArrayOES\"]();\n            };\n            ctx[\"deleteVertexArray\"] = function(vao) {\n              ext[\"deleteVertexArrayOES\"](vao);\n            };\n            ctx[\"bindVertexArray\"] = function(vao) {\n              ext[\"bindVertexArrayOES\"](vao);\n            };\n            ctx[\"isVertexArray\"] = function(vao) {\n              return ext[\"isVertexArrayOES\"](vao);\n            };\n            return 1;\n          }\n        }\n        function __webgl_enable_WEBGL_draw_buffers(ctx) {\n          var ext = ctx.getExtension(\"WEBGL_draw_buffers\");\n          if (ext) {\n            ctx[\"drawBuffers\"] = function(n, bufs) {\n              ext[\"drawBuffersWEBGL\"](n, bufs);\n            };\n            return 1;\n          }\n        }\n        function __webgl_enable_WEBGL_multi_draw(ctx) {\n          return !!(ctx.multiDrawWebgl = ctx.getExtension(\"WEBGL_multi_draw\"));\n        }\n        var GL = { counter: 1, buffers: [], programs: [], framebuffers: [], renderbuffers: [], textures: [], uniforms: [], shaders: [], vaos: [], contexts: {}, offscreenCanvases: {}, timerQueriesEXT: [], programInfos: {}, stringCache: {}, unpackAlignment: 4, recordError: function recordError(errorCode) {\n          if (!GL.lastError) {\n            GL.lastError = errorCode;\n          }\n        }, getNewId: function(table) {\n          var ret = GL.counter++;\n          for (var i = table.length; i < ret; i++) {\n            table[i] = null;\n          }\n          return ret;\n        }, getSource: function(shader, count2, string2, length) {\n          var source = \"\";\n          for (var i = 0; i < count2; ++i) {\n            var len = length ? GROWABLE_HEAP_I32()[length + i * 4 >> 2] : -1;\n            source += UTF8ToString(GROWABLE_HEAP_I32()[string2 + i * 4 >> 2], len < 0 ? void 0 : len);\n          }\n          return source;\n        }, createContext: function(canvas, webGLContextAttributes) {\n          var ctx = canvas.getContext(\"webgl\", webGLContextAttributes);\n          if (!ctx)\n            return 0;\n          var handle = GL.registerContext(ctx, webGLContextAttributes);\n          return handle;\n        }, registerContext: function(ctx, webGLContextAttributes) {\n          var handle = _malloc(8);\n          GROWABLE_HEAP_I32()[handle + 4 >> 2] = _pthread_self();\n          var context = { handle, attributes: webGLContextAttributes, version: webGLContextAttributes.majorVersion, GLctx: ctx };\n          if (ctx.canvas)\n            ctx.canvas.GLctxObject = context;\n          GL.contexts[handle] = context;\n          if (typeof webGLContextAttributes.enableExtensionsByDefault === \"undefined\" || webGLContextAttributes.enableExtensionsByDefault) {\n            GL.initExtensions(context);\n          }\n          return handle;\n        }, makeContextCurrent: function(contextHandle) {\n          GL.currentContext = GL.contexts[contextHandle];\n          Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx;\n          return !(contextHandle && !GLctx);\n        }, getContext: function(contextHandle) {\n          return GL.contexts[contextHandle];\n        }, deleteContext: function(contextHandle) {\n          if (GL.currentContext === GL.contexts[contextHandle])\n            GL.currentContext = null;\n          if (typeof JSEvents === \"object\")\n            JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);\n          if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas)\n            GL.contexts[contextHandle].GLctx.canvas.GLctxObject = void 0;\n          _free(GL.contexts[contextHandle].handle);\n          GL.contexts[contextHandle] = null;\n        }, initExtensions: function(context) {\n          if (!context)\n            context = GL.currentContext;\n          if (context.initExtensionsDone)\n            return;\n          context.initExtensionsDone = true;\n          var GLctx2 = context.GLctx;\n          __webgl_enable_ANGLE_instanced_arrays(GLctx2);\n          __webgl_enable_OES_vertex_array_object(GLctx2);\n          __webgl_enable_WEBGL_draw_buffers(GLctx2);\n          GLctx2.disjointTimerQueryExt = GLctx2.getExtension(\"EXT_disjoint_timer_query\");\n          __webgl_enable_WEBGL_multi_draw(GLctx2);\n          var exts = GLctx2.getSupportedExtensions() || [];\n          exts.forEach(function(ext) {\n            if (ext.indexOf(\"lose_context\") < 0 && ext.indexOf(\"debug\") < 0) {\n              GLctx2.getExtension(ext);\n            }\n          });\n        }, populateUniformTable: function(program) {\n          var p2 = GL.programs[program];\n          var ptable = GL.programInfos[program] = { uniforms: {}, maxUniformLength: 0, maxAttributeLength: -1, maxUniformBlockNameLength: -1 };\n          var utable = ptable.uniforms;\n          var numUniforms = GLctx.getProgramParameter(p2, 35718);\n          for (var i = 0; i < numUniforms; ++i) {\n            var u = GLctx.getActiveUniform(p2, i);\n            var name = u.name;\n            ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length + 1);\n            if (name.slice(-1) == \"]\") {\n              name = name.slice(0, name.lastIndexOf(\"[\"));\n            }\n            var loc = GLctx.getUniformLocation(p2, name);\n            if (loc) {\n              var id = GL.getNewId(GL.uniforms);\n              utable[name] = [u.size, id];\n              GL.uniforms[id] = loc;\n              for (var j = 1; j < u.size; ++j) {\n                var n = name + \"[\" + j + \"]\";\n                loc = GLctx.getUniformLocation(p2, n);\n                id = GL.getNewId(GL.uniforms);\n                GL.uniforms[id] = loc;\n              }\n            }\n          }\n        } };\n        var __emscripten_webgl_power_preferences = [\"default\", \"low-power\", \"high-performance\"];\n        function _emscripten_webgl_do_create_context(target, attributes) {\n          var a = attributes >> 2;\n          var powerPreference = GROWABLE_HEAP_I32()[a + (24 >> 2)];\n          var contextAttributes = { \"alpha\": !!GROWABLE_HEAP_I32()[a + (0 >> 2)], \"depth\": !!GROWABLE_HEAP_I32()[a + (4 >> 2)], \"stencil\": !!GROWABLE_HEAP_I32()[a + (8 >> 2)], \"antialias\": !!GROWABLE_HEAP_I32()[a + (12 >> 2)], \"premultipliedAlpha\": !!GROWABLE_HEAP_I32()[a + (16 >> 2)], \"preserveDrawingBuffer\": !!GROWABLE_HEAP_I32()[a + (20 >> 2)], \"powerPreference\": __emscripten_webgl_power_preferences[powerPreference], \"failIfMajorPerformanceCaveat\": !!GROWABLE_HEAP_I32()[a + (28 >> 2)], majorVersion: GROWABLE_HEAP_I32()[a + (32 >> 2)], minorVersion: GROWABLE_HEAP_I32()[a + (36 >> 2)], enableExtensionsByDefault: GROWABLE_HEAP_I32()[a + (40 >> 2)], explicitSwapControl: GROWABLE_HEAP_I32()[a + (44 >> 2)], proxyContextToMainThread: GROWABLE_HEAP_I32()[a + (48 >> 2)], renderViaOffscreenBackBuffer: GROWABLE_HEAP_I32()[a + (52 >> 2)] };\n          var canvas = findCanvasEventTarget(target);\n          if (!canvas) {\n            return 0;\n          }\n          if (contextAttributes.explicitSwapControl) {\n            return 0;\n          }\n          var contextHandle = GL.createContext(canvas, contextAttributes);\n          return contextHandle;\n        }\n        function _emscripten_webgl_create_context(a0, a12) {\n          return _emscripten_webgl_do_create_context(a0, a12);\n        }\n        var SYSCALLS = { mappings: {}, buffers: [null, [], []], printChar: function(stream, curr) {\n          var buffer3 = SYSCALLS.buffers[stream];\n          if (curr === 0 || curr === 10) {\n            (stream === 1 ? out : err)(UTF8ArrayToString(buffer3, 0));\n            buffer3.length = 0;\n          } else {\n            buffer3.push(curr);\n          }\n        }, varargs: void 0, get: function() {\n          SYSCALLS.varargs += 4;\n          var ret = GROWABLE_HEAP_I32()[SYSCALLS.varargs - 4 >> 2];\n          return ret;\n        }, getStr: function(ptr) {\n          var ret = UTF8ToString(ptr);\n          return ret;\n        }, get64: function(low, high) {\n          return low;\n        } };\n        function _fd_close(fd) {\n          if (ENVIRONMENT_IS_PTHREAD)\n            return _emscripten_proxy_to_main_thread_js(3, 1, fd);\n          return 0;\n        }\n        function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n          if (ENVIRONMENT_IS_PTHREAD)\n            return _emscripten_proxy_to_main_thread_js(4, 1, fd, offset_low, offset_high, whence, newOffset);\n        }\n        function _fd_write(fd, iov, iovcnt, pnum) {\n          if (ENVIRONMENT_IS_PTHREAD)\n            return _emscripten_proxy_to_main_thread_js(5, 1, fd, iov, iovcnt, pnum);\n          var num = 0;\n          for (var i = 0; i < iovcnt; i++) {\n            var ptr = GROWABLE_HEAP_I32()[iov + i * 8 >> 2];\n            var len = GROWABLE_HEAP_I32()[iov + (i * 8 + 4) >> 2];\n            for (var j = 0; j < len; j++) {\n              SYSCALLS.printChar(fd, GROWABLE_HEAP_U8()[ptr + j]);\n            }\n            num += len;\n          }\n          GROWABLE_HEAP_I32()[pnum >> 2] = num;\n          return 0;\n        }\n        function _pthread_cleanup_pop(execute2) {\n          var routine = PThread.threadExitHandlers.pop();\n          if (execute2)\n            routine();\n        }\n        function _pthread_cleanup_push(routine, arg) {\n          PThread.threadExitHandlers.push(function() {\n            wasmTable.get(routine)(arg);\n          });\n        }\n        function spawnThread(threadParams) {\n          if (ENVIRONMENT_IS_PTHREAD)\n            throw \"Internal Error! spawnThread() can only ever be called from main application thread!\";\n          var worker = PThread.getNewWorker();\n          if (worker.pthread !== void 0)\n            throw \"Internal error!\";\n          if (!threadParams.pthread_ptr)\n            throw \"Internal error, no pthread ptr!\";\n          PThread.runningWorkers.push(worker);\n          var tlsMemory = _malloc(128 * 4);\n          for (var i = 0; i < 128; ++i) {\n            GROWABLE_HEAP_I32()[tlsMemory + i * 4 >> 2] = 0;\n          }\n          var stackHigh = threadParams.stackBase + threadParams.stackSize;\n          var pthread = PThread.pthreads[threadParams.pthread_ptr] = { worker, stackBase: threadParams.stackBase, stackSize: threadParams.stackSize, allocatedOwnStack: threadParams.allocatedOwnStack, threadInfoStruct: threadParams.pthread_ptr };\n          var tis = pthread.threadInfoStruct >> 2;\n          Atomics.store(GROWABLE_HEAP_U32(), tis + (64 >> 2), threadParams.detached);\n          Atomics.store(GROWABLE_HEAP_U32(), tis + (100 >> 2), tlsMemory);\n          Atomics.store(GROWABLE_HEAP_U32(), tis + (40 >> 2), pthread.threadInfoStruct);\n          Atomics.store(GROWABLE_HEAP_U32(), tis + (80 >> 2), threadParams.stackSize);\n          Atomics.store(GROWABLE_HEAP_U32(), tis + (76 >> 2), stackHigh);\n          Atomics.store(GROWABLE_HEAP_U32(), tis + (104 >> 2), threadParams.stackSize);\n          Atomics.store(GROWABLE_HEAP_U32(), tis + (104 + 8 >> 2), stackHigh);\n          Atomics.store(GROWABLE_HEAP_U32(), tis + (104 + 12 >> 2), threadParams.detached);\n          var global_libc = _emscripten_get_global_libc();\n          var global_locale = global_libc + 40;\n          Atomics.store(GROWABLE_HEAP_U32(), tis + (172 >> 2), global_locale);\n          worker.pthread = pthread;\n          var msg = { \"cmd\": \"run\", \"start_routine\": threadParams.startRoutine, \"arg\": threadParams.arg, \"threadInfoStruct\": threadParams.pthread_ptr, \"stackBase\": threadParams.stackBase, \"stackSize\": threadParams.stackSize };\n          worker.runPthread = function() {\n            msg.time = performance.now();\n            worker.postMessage(msg, threadParams.transferList);\n          };\n          if (worker.loaded) {\n            worker.runPthread();\n            delete worker.runPthread;\n          }\n        }\n        function _pthread_create(pthread_ptr, attr, start_routine, arg) {\n          if (typeof SharedArrayBuffer === \"undefined\") {\n            err(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\");\n            return 6;\n          }\n          if (!pthread_ptr) {\n            err(\"pthread_create called with a null thread pointer!\");\n            return 28;\n          }\n          var transferList = [];\n          var error = 0;\n          if (ENVIRONMENT_IS_PTHREAD && (transferList.length === 0 || error)) {\n            return _emscripten_sync_run_in_main_thread_4(687865856, pthread_ptr, attr, start_routine, arg);\n          }\n          if (error)\n            return error;\n          var stackSize = 0;\n          var stackBase = 0;\n          var detached = 0;\n          if (attr && attr != -1) {\n            stackSize = GROWABLE_HEAP_I32()[attr >> 2];\n            stackSize += 81920;\n            stackBase = GROWABLE_HEAP_I32()[attr + 8 >> 2];\n            detached = GROWABLE_HEAP_I32()[attr + 12 >> 2] !== 0;\n          } else {\n            stackSize = 2097152;\n          }\n          var allocatedOwnStack = stackBase == 0;\n          if (allocatedOwnStack) {\n            stackBase = _memalign(16, stackSize);\n          } else {\n            stackBase -= stackSize;\n            assert3(stackBase > 0);\n          }\n          var threadInfoStruct = _malloc(228);\n          for (var i = 0; i < 228 >> 2; ++i)\n            GROWABLE_HEAP_U32()[(threadInfoStruct >> 2) + i] = 0;\n          GROWABLE_HEAP_I32()[pthread_ptr >> 2] = threadInfoStruct;\n          GROWABLE_HEAP_I32()[threadInfoStruct + 12 >> 2] = threadInfoStruct;\n          var headPtr = threadInfoStruct + 152;\n          GROWABLE_HEAP_I32()[headPtr >> 2] = headPtr;\n          var threadParams = { stackBase, stackSize, allocatedOwnStack, detached, startRoutine: start_routine, pthread_ptr: threadInfoStruct, arg, transferList };\n          if (ENVIRONMENT_IS_PTHREAD) {\n            threadParams.cmd = \"spawnThread\";\n            postMessage(threadParams, transferList);\n          } else {\n            spawnThread(threadParams);\n          }\n          return 0;\n        }\n        function __pthread_testcancel_js() {\n          if (!ENVIRONMENT_IS_PTHREAD)\n            return;\n          var tb = _pthread_self();\n          if (!tb)\n            return;\n          var cancelDisabled = Atomics.load(GROWABLE_HEAP_U32(), tb + 56 >> 2);\n          if (cancelDisabled)\n            return;\n          var canceled = Atomics.load(GROWABLE_HEAP_U32(), tb + 0 >> 2);\n          if (canceled == 2)\n            throw \"Canceled!\";\n        }\n        function _emscripten_check_blocking_allowed() {\n          if (ENVIRONMENT_IS_NODE)\n            return;\n          if (ENVIRONMENT_IS_WORKER)\n            return;\n          warnOnce(\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\");\n        }\n        function __emscripten_do_pthread_join(thread, status, block) {\n          if (!thread) {\n            err(\"pthread_join attempted on a null thread pointer!\");\n            return ERRNO_CODES.ESRCH;\n          }\n          if (ENVIRONMENT_IS_PTHREAD && _pthread_self() == thread) {\n            err(\"PThread \" + thread + \" is attempting to join to itself!\");\n            return ERRNO_CODES.EDEADLK;\n          } else if (!ENVIRONMENT_IS_PTHREAD && _emscripten_main_browser_thread_id() == thread) {\n            err(\"Main thread \" + thread + \" is attempting to join to itself!\");\n            return ERRNO_CODES.EDEADLK;\n          }\n          var self2 = GROWABLE_HEAP_I32()[thread + 12 >> 2];\n          if (self2 !== thread) {\n            err(\"pthread_join attempted on thread \" + thread + \", which does not point to a valid thread, or does not exist anymore!\");\n            return ERRNO_CODES.ESRCH;\n          }\n          var detached = Atomics.load(GROWABLE_HEAP_U32(), thread + 64 >> 2);\n          if (detached) {\n            err(\"Attempted to join thread \" + thread + \", which was already detached!\");\n            return ERRNO_CODES.EINVAL;\n          }\n          if (block) {\n            _emscripten_check_blocking_allowed();\n          }\n          for (; ; ) {\n            var threadStatus = Atomics.load(GROWABLE_HEAP_U32(), thread + 0 >> 2);\n            if (threadStatus == 1) {\n              var threadExitCode = Atomics.load(GROWABLE_HEAP_U32(), thread + 4 >> 2);\n              if (status)\n                GROWABLE_HEAP_I32()[status >> 2] = threadExitCode;\n              Atomics.store(GROWABLE_HEAP_U32(), thread + 64 >> 2, 1);\n              if (!ENVIRONMENT_IS_PTHREAD)\n                cleanupThread(thread);\n              else\n                postMessage({ \"cmd\": \"cleanupThread\", \"thread\": thread });\n              return 0;\n            }\n            if (!block) {\n              return ERRNO_CODES.EBUSY;\n            }\n            __pthread_testcancel_js();\n            if (!ENVIRONMENT_IS_PTHREAD)\n              _emscripten_main_thread_process_queued_calls();\n            _emscripten_futex_wait(thread + 0, threadStatus, ENVIRONMENT_IS_PTHREAD ? 100 : 1);\n          }\n        }\n        function _pthread_join(thread, status) {\n          return __emscripten_do_pthread_join(thread, status, true);\n        }\n        function _sysconf(name) {\n          if (ENVIRONMENT_IS_PTHREAD)\n            return _emscripten_proxy_to_main_thread_js(6, 1, name);\n          switch (name) {\n            case 30:\n              return 16384;\n            case 85:\n              var maxHeapSize = 2147483648;\n              return maxHeapSize / 16384;\n            case 132:\n            case 133:\n            case 12:\n            case 137:\n            case 138:\n            case 15:\n            case 235:\n            case 16:\n            case 17:\n            case 18:\n            case 19:\n            case 20:\n            case 149:\n            case 13:\n            case 10:\n            case 236:\n            case 153:\n            case 9:\n            case 21:\n            case 22:\n            case 159:\n            case 154:\n            case 14:\n            case 77:\n            case 78:\n            case 139:\n            case 82:\n            case 68:\n            case 67:\n            case 164:\n            case 11:\n            case 29:\n            case 47:\n            case 48:\n            case 95:\n            case 52:\n            case 51:\n            case 46:\n              return 200809;\n            case 27:\n            case 246:\n            case 127:\n            case 128:\n            case 23:\n            case 24:\n            case 160:\n            case 161:\n            case 181:\n            case 182:\n            case 242:\n            case 183:\n            case 184:\n            case 243:\n            case 244:\n            case 245:\n            case 165:\n            case 178:\n            case 179:\n            case 49:\n            case 50:\n            case 168:\n            case 169:\n            case 175:\n            case 170:\n            case 171:\n            case 172:\n            case 97:\n            case 76:\n            case 32:\n            case 173:\n            case 35:\n            case 80:\n            case 81:\n            case 79:\n              return -1;\n            case 176:\n            case 177:\n            case 7:\n            case 155:\n            case 8:\n            case 157:\n            case 125:\n            case 126:\n            case 92:\n            case 93:\n            case 129:\n            case 130:\n            case 131:\n            case 94:\n            case 91:\n              return 1;\n            case 74:\n            case 60:\n            case 69:\n            case 70:\n            case 4:\n              return 1024;\n            case 31:\n            case 42:\n            case 72:\n              return 32;\n            case 87:\n            case 26:\n            case 33:\n              return 2147483647;\n            case 34:\n            case 1:\n              return 47839;\n            case 38:\n            case 36:\n              return 99;\n            case 43:\n            case 37:\n              return 2048;\n            case 0:\n              return 2097152;\n            case 3:\n              return 65536;\n            case 28:\n              return 32768;\n            case 44:\n              return 32767;\n            case 75:\n              return 16384;\n            case 39:\n              return 1e3;\n            case 89:\n              return 700;\n            case 71:\n              return 256;\n            case 40:\n              return 255;\n            case 2:\n              return 100;\n            case 180:\n              return 64;\n            case 25:\n              return 20;\n            case 5:\n              return 16;\n            case 6:\n              return 6;\n            case 73:\n              return 4;\n            case 84: {\n              if (typeof navigator === \"object\")\n                return navigator[\"hardwareConcurrency\"] || 1;\n              return 1;\n            }\n          }\n          setErrNo(28);\n          return -1;\n        }\n        if (!ENVIRONMENT_IS_PTHREAD)\n          PThread.initMainThreadBlock();\n        var GLctx;\n        var proxiedFunctionTable = [null, _atexit, _emscripten_set_canvas_element_size_main_thread, _fd_close, _fd_seek, _fd_write, _sysconf];\n        var asmLibraryArg = { \"e\": ___assert_fail, \"r\": ___call_main, \"x\": __emscripten_notify_thread_queue, \"b\": _abort, \"y\": _emscripten_asm_const_int, \"j\": _emscripten_conditional_set_current_thread_status, \"d\": _emscripten_futex_wait, \"c\": _emscripten_futex_wake, \"f\": _emscripten_get_now, \"p\": _emscripten_memcpy_big, \"A\": _emscripten_num_logical_cores, \"u\": _emscripten_receive_on_main_thread_js, \"q\": _emscripten_resize_heap, \"v\": _emscripten_set_canvas_element_size, \"i\": _emscripten_set_current_thread_status, \"s\": _emscripten_set_thread_name, \"w\": _emscripten_webgl_create_context, \"l\": _fd_close, \"n\": _fd_seek, \"g\": _fd_write, \"o\": initPthreadsJS, \"a\": wasmMemory || Module[\"wasmMemory\"], \"z\": _pthread_cleanup_pop, \"k\": _pthread_cleanup_push, \"h\": _pthread_create, \"m\": _pthread_join, \"t\": _sysconf };\n        var asm = createWasm();\n        var ___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = function() {\n          return (___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = Module[\"asm\"][\"B\"]).apply(null, arguments);\n        };\n        var _init = Module[\"_init\"] = function() {\n          return (_init = Module[\"_init\"] = Module[\"asm\"][\"C\"]).apply(null, arguments);\n        };\n        var _init_with_threads_count = Module[\"_init_with_threads_count\"] = function() {\n          return (_init_with_threads_count = Module[\"_init_with_threads_count\"] = Module[\"asm\"][\"D\"]).apply(null, arguments);\n        };\n        var _get_threads_count = Module[\"_get_threads_count\"] = function() {\n          return (_get_threads_count = Module[\"_get_threads_count\"] = Module[\"asm\"][\"E\"]).apply(null, arguments);\n        };\n        var _register_tensor = Module[\"_register_tensor\"] = function() {\n          return (_register_tensor = Module[\"_register_tensor\"] = Module[\"asm\"][\"F\"]).apply(null, arguments);\n        };\n        var _dispose_data = Module[\"_dispose_data\"] = function() {\n          return (_dispose_data = Module[\"_dispose_data\"] = Module[\"asm\"][\"G\"]).apply(null, arguments);\n        };\n        var _dispose = Module[\"_dispose\"] = function() {\n          return (_dispose = Module[\"_dispose\"] = Module[\"asm\"][\"H\"]).apply(null, arguments);\n        };\n        var _Abs = Module[\"_Abs\"] = function() {\n          return (_Abs = Module[\"_Abs\"] = Module[\"asm\"][\"J\"]).apply(null, arguments);\n        };\n        var _Add = Module[\"_Add\"] = function() {\n          return (_Add = Module[\"_Add\"] = Module[\"asm\"][\"K\"]).apply(null, arguments);\n        };\n        var _AddN = Module[\"_AddN\"] = function() {\n          return (_AddN = Module[\"_AddN\"] = Module[\"asm\"][\"L\"]).apply(null, arguments);\n        };\n        var _All = Module[\"_All\"] = function() {\n          return (_All = Module[\"_All\"] = Module[\"asm\"][\"M\"]).apply(null, arguments);\n        };\n        var _Any = Module[\"_Any\"] = function() {\n          return (_Any = Module[\"_Any\"] = Module[\"asm\"][\"N\"]).apply(null, arguments);\n        };\n        var _ArgMax = Module[\"_ArgMax\"] = function() {\n          return (_ArgMax = Module[\"_ArgMax\"] = Module[\"asm\"][\"O\"]).apply(null, arguments);\n        };\n        var _AvgPool = Module[\"_AvgPool\"] = function() {\n          return (_AvgPool = Module[\"_AvgPool\"] = Module[\"asm\"][\"P\"]).apply(null, arguments);\n        };\n        var _BatchMatMul = Module[\"_BatchMatMul\"] = function() {\n          return (_BatchMatMul = Module[\"_BatchMatMul\"] = Module[\"asm\"][\"Q\"]).apply(null, arguments);\n        };\n        var _Ceil = Module[\"_Ceil\"] = function() {\n          return (_Ceil = Module[\"_Ceil\"] = Module[\"asm\"][\"R\"]).apply(null, arguments);\n        };\n        var _ClipByValue = Module[\"_ClipByValue\"] = function() {\n          return (_ClipByValue = Module[\"_ClipByValue\"] = Module[\"asm\"][\"S\"]).apply(null, arguments);\n        };\n        var _Conv2D = Module[\"_Conv2D\"] = function() {\n          return (_Conv2D = Module[\"_Conv2D\"] = Module[\"asm\"][\"T\"]).apply(null, arguments);\n        };\n        var _Conv2DBackpropInput = Module[\"_Conv2DBackpropInput\"] = function() {\n          return (_Conv2DBackpropInput = Module[\"_Conv2DBackpropInput\"] = Module[\"asm\"][\"U\"]).apply(null, arguments);\n        };\n        var _Cos = Module[\"_Cos\"] = function() {\n          return (_Cos = Module[\"_Cos\"] = Module[\"asm\"][\"V\"]).apply(null, arguments);\n        };\n        var _Cosh = Module[\"_Cosh\"] = function() {\n          return (_Cosh = Module[\"_Cosh\"] = Module[\"asm\"][\"W\"]).apply(null, arguments);\n        };\n        var _CropAndResize = Module[\"_CropAndResize\"] = function() {\n          return (_CropAndResize = Module[\"_CropAndResize\"] = Module[\"asm\"][\"X\"]).apply(null, arguments);\n        };\n        var _Cumsum = Module[\"_Cumsum\"] = function() {\n          return (_Cumsum = Module[\"_Cumsum\"] = Module[\"asm\"][\"Y\"]).apply(null, arguments);\n        };\n        var _DepthToSpace = Module[\"_DepthToSpace\"] = function() {\n          return (_DepthToSpace = Module[\"_DepthToSpace\"] = Module[\"asm\"][\"Z\"]).apply(null, arguments);\n        };\n        var _DepthwiseConv2dNative = Module[\"_DepthwiseConv2dNative\"] = function() {\n          return (_DepthwiseConv2dNative = Module[\"_DepthwiseConv2dNative\"] = Module[\"asm\"][\"_\"]).apply(null, arguments);\n        };\n        var _Elu = Module[\"_Elu\"] = function() {\n          return (_Elu = Module[\"_Elu\"] = Module[\"asm\"][\"$\"]).apply(null, arguments);\n        };\n        var _Equal = Module[\"_Equal\"] = function() {\n          return (_Equal = Module[\"_Equal\"] = Module[\"asm\"][\"aa\"]).apply(null, arguments);\n        };\n        var _Exp = Module[\"_Exp\"] = function() {\n          return (_Exp = Module[\"_Exp\"] = Module[\"asm\"][\"ba\"]).apply(null, arguments);\n        };\n        var _FlipLeftRight = Module[\"_FlipLeftRight\"] = function() {\n          return (_FlipLeftRight = Module[\"_FlipLeftRight\"] = Module[\"asm\"][\"ca\"]).apply(null, arguments);\n        };\n        var _Floor = Module[\"_Floor\"] = function() {\n          return (_Floor = Module[\"_Floor\"] = Module[\"asm\"][\"da\"]).apply(null, arguments);\n        };\n        var _FloorDiv = Module[\"_FloorDiv\"] = function() {\n          return (_FloorDiv = Module[\"_FloorDiv\"] = Module[\"asm\"][\"ea\"]).apply(null, arguments);\n        };\n        var _FusedBatchNorm = Module[\"_FusedBatchNorm\"] = function() {\n          return (_FusedBatchNorm = Module[\"_FusedBatchNorm\"] = Module[\"asm\"][\"fa\"]).apply(null, arguments);\n        };\n        var _FusedConv2D = Module[\"_FusedConv2D\"] = function() {\n          return (_FusedConv2D = Module[\"_FusedConv2D\"] = Module[\"asm\"][\"ga\"]).apply(null, arguments);\n        };\n        var _FusedDepthwiseConv2D = Module[\"_FusedDepthwiseConv2D\"] = function() {\n          return (_FusedDepthwiseConv2D = Module[\"_FusedDepthwiseConv2D\"] = Module[\"asm\"][\"ha\"]).apply(null, arguments);\n        };\n        var _Gather = Module[\"_Gather\"] = function() {\n          return (_Gather = Module[\"_Gather\"] = Module[\"asm\"][\"ia\"]).apply(null, arguments);\n        };\n        var _GatherNd = Module[\"_GatherNd\"] = function() {\n          return (_GatherNd = Module[\"_GatherNd\"] = Module[\"asm\"][\"ja\"]).apply(null, arguments);\n        };\n        var _Greater = Module[\"_Greater\"] = function() {\n          return (_Greater = Module[\"_Greater\"] = Module[\"asm\"][\"ka\"]).apply(null, arguments);\n        };\n        var _GreaterEqual = Module[\"_GreaterEqual\"] = function() {\n          return (_GreaterEqual = Module[\"_GreaterEqual\"] = Module[\"asm\"][\"la\"]).apply(null, arguments);\n        };\n        var _LeakyRelu = Module[\"_LeakyRelu\"] = function() {\n          return (_LeakyRelu = Module[\"_LeakyRelu\"] = Module[\"asm\"][\"ma\"]).apply(null, arguments);\n        };\n        var _Less = Module[\"_Less\"] = function() {\n          return (_Less = Module[\"_Less\"] = Module[\"asm\"][\"na\"]).apply(null, arguments);\n        };\n        var _LessEqual = Module[\"_LessEqual\"] = function() {\n          return (_LessEqual = Module[\"_LessEqual\"] = Module[\"asm\"][\"oa\"]).apply(null, arguments);\n        };\n        var _Log = Module[\"_Log\"] = function() {\n          return (_Log = Module[\"_Log\"] = Module[\"asm\"][\"pa\"]).apply(null, arguments);\n        };\n        var _LogicalAnd = Module[\"_LogicalAnd\"] = function() {\n          return (_LogicalAnd = Module[\"_LogicalAnd\"] = Module[\"asm\"][\"qa\"]).apply(null, arguments);\n        };\n        var _Max = Module[\"_Max\"] = function() {\n          return (_Max = Module[\"_Max\"] = Module[\"asm\"][\"ra\"]).apply(null, arguments);\n        };\n        var _MaxPool = Module[\"_MaxPool\"] = function() {\n          return (_MaxPool = Module[\"_MaxPool\"] = Module[\"asm\"][\"sa\"]).apply(null, arguments);\n        };\n        var _Maximum = Module[\"_Maximum\"] = function() {\n          return (_Maximum = Module[\"_Maximum\"] = Module[\"asm\"][\"ta\"]).apply(null, arguments);\n        };\n        var _Mean = Module[\"_Mean\"] = function() {\n          return (_Mean = Module[\"_Mean\"] = Module[\"asm\"][\"ua\"]).apply(null, arguments);\n        };\n        var _Min = Module[\"_Min\"] = function() {\n          return (_Min = Module[\"_Min\"] = Module[\"asm\"][\"va\"]).apply(null, arguments);\n        };\n        var _Minimum = Module[\"_Minimum\"] = function() {\n          return (_Minimum = Module[\"_Minimum\"] = Module[\"asm\"][\"wa\"]).apply(null, arguments);\n        };\n        var _MirrorPad = Module[\"_MirrorPad\"] = function() {\n          return (_MirrorPad = Module[\"_MirrorPad\"] = Module[\"asm\"][\"xa\"]).apply(null, arguments);\n        };\n        var _Multiply = Module[\"_Multiply\"] = function() {\n          return (_Multiply = Module[\"_Multiply\"] = Module[\"asm\"][\"ya\"]).apply(null, arguments);\n        };\n        var _Neg = Module[\"_Neg\"] = function() {\n          return (_Neg = Module[\"_Neg\"] = Module[\"asm\"][\"za\"]).apply(null, arguments);\n        };\n        var _NonMaxSuppressionV3 = Module[\"_NonMaxSuppressionV3\"] = function() {\n          return (_NonMaxSuppressionV3 = Module[\"_NonMaxSuppressionV3\"] = Module[\"asm\"][\"Aa\"]).apply(null, arguments);\n        };\n        var _NonMaxSuppressionV4 = Module[\"_NonMaxSuppressionV4\"] = function() {\n          return (_NonMaxSuppressionV4 = Module[\"_NonMaxSuppressionV4\"] = Module[\"asm\"][\"Ba\"]).apply(null, arguments);\n        };\n        var _NonMaxSuppressionV5 = Module[\"_NonMaxSuppressionV5\"] = function() {\n          return (_NonMaxSuppressionV5 = Module[\"_NonMaxSuppressionV5\"] = Module[\"asm\"][\"Ca\"]).apply(null, arguments);\n        };\n        var _NotEqual = Module[\"_NotEqual\"] = function() {\n          return (_NotEqual = Module[\"_NotEqual\"] = Module[\"asm\"][\"Da\"]).apply(null, arguments);\n        };\n        var _OneHot = Module[\"_OneHot\"] = function() {\n          return (_OneHot = Module[\"_OneHot\"] = Module[\"asm\"][\"Ea\"]).apply(null, arguments);\n        };\n        var _PadV2 = Module[\"_PadV2\"] = function() {\n          return (_PadV2 = Module[\"_PadV2\"] = Module[\"asm\"][\"Fa\"]).apply(null, arguments);\n        };\n        var _Pow = Module[\"_Pow\"] = function() {\n          return (_Pow = Module[\"_Pow\"] = Module[\"asm\"][\"Ga\"]).apply(null, arguments);\n        };\n        var _Prelu = Module[\"_Prelu\"] = function() {\n          return (_Prelu = Module[\"_Prelu\"] = Module[\"asm\"][\"Ha\"]).apply(null, arguments);\n        };\n        var _Prod = Module[\"_Prod\"] = function() {\n          return (_Prod = Module[\"_Prod\"] = Module[\"asm\"][\"Ia\"]).apply(null, arguments);\n        };\n        var _RealDiv = Module[\"_RealDiv\"] = function() {\n          return (_RealDiv = Module[\"_RealDiv\"] = Module[\"asm\"][\"Ja\"]).apply(null, arguments);\n        };\n        var _Relu = Module[\"_Relu\"] = function() {\n          return (_Relu = Module[\"_Relu\"] = Module[\"asm\"][\"Ka\"]).apply(null, arguments);\n        };\n        var _Relu6 = Module[\"_Relu6\"] = function() {\n          return (_Relu6 = Module[\"_Relu6\"] = Module[\"asm\"][\"La\"]).apply(null, arguments);\n        };\n        var _ResizeBilinear = Module[\"_ResizeBilinear\"] = function() {\n          return (_ResizeBilinear = Module[\"_ResizeBilinear\"] = Module[\"asm\"][\"Ma\"]).apply(null, arguments);\n        };\n        var _Reverse = Module[\"_Reverse\"] = function() {\n          return (_Reverse = Module[\"_Reverse\"] = Module[\"asm\"][\"Na\"]).apply(null, arguments);\n        };\n        var _RotateWithOffset = Module[\"_RotateWithOffset\"] = function() {\n          return (_RotateWithOffset = Module[\"_RotateWithOffset\"] = Module[\"asm\"][\"Oa\"]).apply(null, arguments);\n        };\n        var _Round = Module[\"_Round\"] = function() {\n          return (_Round = Module[\"_Round\"] = Module[\"asm\"][\"Pa\"]).apply(null, arguments);\n        };\n        var _Rsqrt = Module[\"_Rsqrt\"] = function() {\n          return (_Rsqrt = Module[\"_Rsqrt\"] = Module[\"asm\"][\"Qa\"]).apply(null, arguments);\n        };\n        var _ScatterNd = Module[\"_ScatterNd\"] = function() {\n          return (_ScatterNd = Module[\"_ScatterNd\"] = Module[\"asm\"][\"Ra\"]).apply(null, arguments);\n        };\n        var _SelectV2 = Module[\"_SelectV2\"] = function() {\n          return (_SelectV2 = Module[\"_SelectV2\"] = Module[\"asm\"][\"Sa\"]).apply(null, arguments);\n        };\n        var _Sigmoid = Module[\"_Sigmoid\"] = function() {\n          return (_Sigmoid = Module[\"_Sigmoid\"] = Module[\"asm\"][\"Ta\"]).apply(null, arguments);\n        };\n        var _Sin = Module[\"_Sin\"] = function() {\n          return (_Sin = Module[\"_Sin\"] = Module[\"asm\"][\"Ua\"]).apply(null, arguments);\n        };\n        var _Softmax = Module[\"_Softmax\"] = function() {\n          return (_Softmax = Module[\"_Softmax\"] = Module[\"asm\"][\"Va\"]).apply(null, arguments);\n        };\n        var _SparseFillEmptyRows = Module[\"_SparseFillEmptyRows\"] = function() {\n          return (_SparseFillEmptyRows = Module[\"_SparseFillEmptyRows\"] = Module[\"asm\"][\"Wa\"]).apply(null, arguments);\n        };\n        var _SparseReshape = Module[\"_SparseReshape\"] = function() {\n          return (_SparseReshape = Module[\"_SparseReshape\"] = Module[\"asm\"][\"Xa\"]).apply(null, arguments);\n        };\n        var _SparseSegmentReduction = Module[\"_SparseSegmentReduction\"] = function() {\n          return (_SparseSegmentReduction = Module[\"_SparseSegmentReduction\"] = Module[\"asm\"][\"Ya\"]).apply(null, arguments);\n        };\n        var _Sqrt = Module[\"_Sqrt\"] = function() {\n          return (_Sqrt = Module[\"_Sqrt\"] = Module[\"asm\"][\"Za\"]).apply(null, arguments);\n        };\n        var _Square = Module[\"_Square\"] = function() {\n          return (_Square = Module[\"_Square\"] = Module[\"asm\"][\"_a\"]).apply(null, arguments);\n        };\n        var _SquaredDifference = Module[\"_SquaredDifference\"] = function() {\n          return (_SquaredDifference = Module[\"_SquaredDifference\"] = Module[\"asm\"][\"$a\"]).apply(null, arguments);\n        };\n        var _Step = Module[\"_Step\"] = function() {\n          return (_Step = Module[\"_Step\"] = Module[\"asm\"][\"ab\"]).apply(null, arguments);\n        };\n        var _StridedSlice = Module[\"_StridedSlice\"] = function() {\n          return (_StridedSlice = Module[\"_StridedSlice\"] = Module[\"asm\"][\"bb\"]).apply(null, arguments);\n        };\n        var _Sub = Module[\"_Sub\"] = function() {\n          return (_Sub = Module[\"_Sub\"] = Module[\"asm\"][\"cb\"]).apply(null, arguments);\n        };\n        var _Sum = Module[\"_Sum\"] = function() {\n          return (_Sum = Module[\"_Sum\"] = Module[\"asm\"][\"db\"]).apply(null, arguments);\n        };\n        var _Tan = Module[\"_Tan\"] = function() {\n          return (_Tan = Module[\"_Tan\"] = Module[\"asm\"][\"eb\"]).apply(null, arguments);\n        };\n        var _Tanh = Module[\"_Tanh\"] = function() {\n          return (_Tanh = Module[\"_Tanh\"] = Module[\"asm\"][\"fb\"]).apply(null, arguments);\n        };\n        var _Tile = Module[\"_Tile\"] = function() {\n          return (_Tile = Module[\"_Tile\"] = Module[\"asm\"][\"gb\"]).apply(null, arguments);\n        };\n        var _TopK = Module[\"_TopK\"] = function() {\n          return (_TopK = Module[\"_TopK\"] = Module[\"asm\"][\"hb\"]).apply(null, arguments);\n        };\n        var _Transform = Module[\"_Transform\"] = function() {\n          return (_Transform = Module[\"_Transform\"] = Module[\"asm\"][\"ib\"]).apply(null, arguments);\n        };\n        var _Transpose = Module[\"_Transpose\"] = function() {\n          return (_Transpose = Module[\"_Transpose\"] = Module[\"asm\"][\"jb\"]).apply(null, arguments);\n        };\n        var __FusedMatMul = Module[\"__FusedMatMul\"] = function() {\n          return (__FusedMatMul = Module[\"__FusedMatMul\"] = Module[\"asm\"][\"kb\"]).apply(null, arguments);\n        };\n        var _malloc = Module[\"_malloc\"] = function() {\n          return (_malloc = Module[\"_malloc\"] = Module[\"asm\"][\"lb\"]).apply(null, arguments);\n        };\n        var _free = Module[\"_free\"] = function() {\n          return (_free = Module[\"_free\"] = Module[\"asm\"][\"mb\"]).apply(null, arguments);\n        };\n        var ___errno_location = Module[\"___errno_location\"] = function() {\n          return (___errno_location = Module[\"___errno_location\"] = Module[\"asm\"][\"nb\"]).apply(null, arguments);\n        };\n        var _emscripten_get_global_libc = Module[\"_emscripten_get_global_libc\"] = function() {\n          return (_emscripten_get_global_libc = Module[\"_emscripten_get_global_libc\"] = Module[\"asm\"][\"ob\"]).apply(null, arguments);\n        };\n        var _pthread_self = Module[\"_pthread_self\"] = function() {\n          return (_pthread_self = Module[\"_pthread_self\"] = Module[\"asm\"][\"pb\"]).apply(null, arguments);\n        };\n        var ___pthread_tsd_run_dtors = Module[\"___pthread_tsd_run_dtors\"] = function() {\n          return (___pthread_tsd_run_dtors = Module[\"___pthread_tsd_run_dtors\"] = Module[\"asm\"][\"qb\"]).apply(null, arguments);\n        };\n        var _emscripten_main_thread_process_queued_calls = Module[\"_emscripten_main_thread_process_queued_calls\"] = function() {\n          return (_emscripten_main_thread_process_queued_calls = Module[\"_emscripten_main_thread_process_queued_calls\"] = Module[\"asm\"][\"rb\"]).apply(null, arguments);\n        };\n        var _emscripten_current_thread_process_queued_calls = Module[\"_emscripten_current_thread_process_queued_calls\"] = function() {\n          return (_emscripten_current_thread_process_queued_calls = Module[\"_emscripten_current_thread_process_queued_calls\"] = Module[\"asm\"][\"sb\"]).apply(null, arguments);\n        };\n        var _emscripten_register_main_browser_thread_id = Module[\"_emscripten_register_main_browser_thread_id\"] = function() {\n          return (_emscripten_register_main_browser_thread_id = Module[\"_emscripten_register_main_browser_thread_id\"] = Module[\"asm\"][\"tb\"]).apply(null, arguments);\n        };\n        var _emscripten_main_browser_thread_id = Module[\"_emscripten_main_browser_thread_id\"] = function() {\n          return (_emscripten_main_browser_thread_id = Module[\"_emscripten_main_browser_thread_id\"] = Module[\"asm\"][\"ub\"]).apply(null, arguments);\n        };\n        var __emscripten_do_dispatch_to_thread = Module[\"__emscripten_do_dispatch_to_thread\"] = function() {\n          return (__emscripten_do_dispatch_to_thread = Module[\"__emscripten_do_dispatch_to_thread\"] = Module[\"asm\"][\"vb\"]).apply(null, arguments);\n        };\n        var _emscripten_sync_run_in_main_thread_4 = Module[\"_emscripten_sync_run_in_main_thread_4\"] = function() {\n          return (_emscripten_sync_run_in_main_thread_4 = Module[\"_emscripten_sync_run_in_main_thread_4\"] = Module[\"asm\"][\"wb\"]).apply(null, arguments);\n        };\n        var _emscripten_run_in_main_runtime_thread_js = Module[\"_emscripten_run_in_main_runtime_thread_js\"] = function() {\n          return (_emscripten_run_in_main_runtime_thread_js = Module[\"_emscripten_run_in_main_runtime_thread_js\"] = Module[\"asm\"][\"xb\"]).apply(null, arguments);\n        };\n        var __emscripten_call_on_thread = Module[\"__emscripten_call_on_thread\"] = function() {\n          return (__emscripten_call_on_thread = Module[\"__emscripten_call_on_thread\"] = Module[\"asm\"][\"yb\"]).apply(null, arguments);\n        };\n        var _emscripten_tls_init = Module[\"_emscripten_tls_init\"] = function() {\n          return (_emscripten_tls_init = Module[\"_emscripten_tls_init\"] = Module[\"asm\"][\"zb\"]).apply(null, arguments);\n        };\n        var __emscripten_thread_init = Module[\"__emscripten_thread_init\"] = function() {\n          return (__emscripten_thread_init = Module[\"__emscripten_thread_init\"] = Module[\"asm\"][\"Ab\"]).apply(null, arguments);\n        };\n        var stackSave = Module[\"stackSave\"] = function() {\n          return (stackSave = Module[\"stackSave\"] = Module[\"asm\"][\"Bb\"]).apply(null, arguments);\n        };\n        var stackRestore = Module[\"stackRestore\"] = function() {\n          return (stackRestore = Module[\"stackRestore\"] = Module[\"asm\"][\"Cb\"]).apply(null, arguments);\n        };\n        var stackAlloc = Module[\"stackAlloc\"] = function() {\n          return (stackAlloc = Module[\"stackAlloc\"] = Module[\"asm\"][\"Db\"]).apply(null, arguments);\n        };\n        var _emscripten_stack_set_limits = Module[\"_emscripten_stack_set_limits\"] = function() {\n          return (_emscripten_stack_set_limits = Module[\"_emscripten_stack_set_limits\"] = Module[\"asm\"][\"Eb\"]).apply(null, arguments);\n        };\n        var _memalign = Module[\"_memalign\"] = function() {\n          return (_memalign = Module[\"_memalign\"] = Module[\"asm\"][\"Fb\"]).apply(null, arguments);\n        };\n        var __emscripten_allow_main_runtime_queued_calls = Module[\"__emscripten_allow_main_runtime_queued_calls\"] = 10656;\n        var __emscripten_main_thread_futex = Module[\"__emscripten_main_thread_futex\"] = 12292;\n        Module[\"cwrap\"] = cwrap;\n        Module[\"PThread\"] = PThread;\n        Module[\"PThread\"] = PThread;\n        Module[\"wasmMemory\"] = wasmMemory;\n        Module[\"ExitStatus\"] = ExitStatus;\n        var calledRun;\n        function ExitStatus(status) {\n          this.name = \"ExitStatus\";\n          this.message = \"Program terminated with exit(\" + status + \")\";\n          this.status = status;\n        }\n        dependenciesFulfilled = function runCaller() {\n          if (!calledRun)\n            run();\n          if (!calledRun)\n            dependenciesFulfilled = runCaller;\n        };\n        function run(args) {\n          args = args || arguments_;\n          if (runDependencies > 0) {\n            return;\n          }\n          if (ENVIRONMENT_IS_PTHREAD) {\n            readyPromiseResolve(Module);\n            initRuntime();\n            postMessage({ \"cmd\": \"loaded\" });\n            return;\n          }\n          preRun();\n          if (runDependencies > 0) {\n            return;\n          }\n          function doRun() {\n            if (calledRun)\n              return;\n            calledRun = true;\n            Module[\"calledRun\"] = true;\n            if (ABORT)\n              return;\n            initRuntime();\n            preMain();\n            readyPromiseResolve(Module);\n            if (Module[\"onRuntimeInitialized\"])\n              Module[\"onRuntimeInitialized\"]();\n            postRun();\n          }\n          if (Module[\"setStatus\"]) {\n            Module[\"setStatus\"](\"Running...\");\n            setTimeout(function() {\n              setTimeout(function() {\n                Module[\"setStatus\"](\"\");\n              }, 1);\n              doRun();\n            }, 1);\n          } else {\n            doRun();\n          }\n        }\n        Module[\"run\"] = run;\n        function exit(status, implicit) {\n          if (implicit && noExitRuntime && status === 0) {\n            return;\n          }\n          if (!implicit) {\n            if (ENVIRONMENT_IS_PTHREAD) {\n              postMessage({ \"cmd\": \"exitProcess\", \"returnCode\": status });\n              throw new ExitStatus(status);\n            } else {\n            }\n          }\n          if (noExitRuntime) {\n          } else {\n            PThread.terminateAllThreads();\n            EXITSTATUS = status;\n            exitRuntime();\n            if (Module[\"onExit\"])\n              Module[\"onExit\"](status);\n            ABORT = true;\n          }\n          quit_(status, new ExitStatus(status));\n        }\n        if (Module[\"preInit\"]) {\n          if (typeof Module[\"preInit\"] == \"function\")\n            Module[\"preInit\"] = [Module[\"preInit\"]];\n          while (Module[\"preInit\"].length > 0) {\n            Module[\"preInit\"].pop()();\n          }\n        }\n        if (ENVIRONMENT_IS_PTHREAD) {\n          noExitRuntime = false;\n          PThread.initWorker();\n        }\n        run();\n        var listenersAdded;\n        if (beforeListeners) {\n          listenersAdded = { uncaughtException: process.listeners(\"uncaughtException\").filter(function(listener) {\n            return !beforeListeners.uncaughtException.indexOf(listener) > -1;\n          }), unhandledRejection: process.listeners(\"unhandledRejection\").filter(function(listener) {\n            return !beforeListeners.unhandledRejection.indexOf(listener) > -1;\n          }) };\n        }\n        var actualModule;\n        if (typeof WasmBackendModule !== \"undefined\") {\n          actualModule = WasmBackendModule;\n        } else if (typeof WasmBackendModuleThreadedSimd3 !== \"undefined\") {\n          actualModule = WasmBackendModuleThreadedSimd3;\n        } else {\n          throw new Error(\"Could not find wasm module in post.js\");\n        }\n        if (listenersAdded) {\n          var tmpDispose = actualModule[\"_dispose\"];\n          actualModule[\"_dispose\"] = function() {\n            tmpDispose();\n            listenersAdded.uncaughtException.forEach(function(listener) {\n              process.removeListener(\"uncaughtException\", listener);\n            });\n            listenersAdded.unhandledRejection.forEach(function(listener) {\n              process.removeListener(\"unhandledRejection\", listener);\n            });\n          };\n        }\n        return WasmBackendModuleThreadedSimd3.ready;\n      };\n    }();\n    if (typeof exports === \"object\" && typeof module === \"object\")\n      module.exports = WasmBackendModuleThreadedSimd2;\n    else if (typeof define === \"function\" && define[\"amd\"])\n      define([], function() {\n        return WasmBackendModuleThreadedSimd2;\n      });\n    else if (typeof exports === \"object\")\n      exports[\"WasmBackendModuleThreadedSimd\"] = WasmBackendModuleThreadedSimd2;\n  }\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm.js\nvar require_tfjs_backend_wasm = __commonJS({\n  \"node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm.js\"(exports, module) {\n    var WasmBackendModule2 = function() {\n      var _scriptDir = typeof document !== \"undefined\" && document.currentScript ? document.currentScript.src : void 0;\n      if (typeof __filename !== \"undefined\")\n        _scriptDir = _scriptDir || __filename;\n      return function(WasmBackendModule3) {\n        WasmBackendModule3 = WasmBackendModule3 || {};\n        var Module = typeof WasmBackendModule3 !== \"undefined\" ? WasmBackendModule3 : {};\n        var readyPromiseResolve, readyPromiseReject;\n        Module[\"ready\"] = new Promise(function(resolve, reject) {\n          readyPromiseResolve = resolve;\n          readyPromiseReject = reject;\n        });\n        var beforeListeners;\n        if (typeof process !== \"undefined\" && process.listeners) {\n          beforeListeners = { uncaughtException: process.listeners(\"uncaughtException\"), unhandledRejection: process.listeners(\"unhandledRejection\") };\n        }\n        var moduleOverrides = {};\n        var key;\n        for (key in Module) {\n          if (Module.hasOwnProperty(key)) {\n            moduleOverrides[key] = Module[key];\n          }\n        }\n        var arguments_ = [];\n        var thisProgram = \"./this.program\";\n        var quit_ = function(status, toThrow) {\n          throw toThrow;\n        };\n        var ENVIRONMENT_IS_WEB = false;\n        var ENVIRONMENT_IS_WORKER = false;\n        var ENVIRONMENT_IS_NODE = false;\n        var ENVIRONMENT_IS_SHELL = false;\n        ENVIRONMENT_IS_WEB = typeof window === \"object\";\n        ENVIRONMENT_IS_WORKER = typeof importScripts === \"function\";\n        ENVIRONMENT_IS_NODE = typeof process === \"object\" && typeof process.versions === \"object\" && typeof process.versions.node === \"string\";\n        ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n        var scriptDirectory = \"\";\n        function locateFile(path) {\n          if (Module[\"locateFile\"]) {\n            return Module[\"locateFile\"](path, scriptDirectory);\n          }\n          return scriptDirectory + path;\n        }\n        var read_, readAsync, readBinary, setWindowTitle;\n        var nodeFS;\n        var nodePath;\n        if (ENVIRONMENT_IS_NODE) {\n          if (ENVIRONMENT_IS_WORKER) {\n            scriptDirectory = require_path().dirname(scriptDirectory) + \"/\";\n          } else {\n            scriptDirectory = __dirname + \"/\";\n          }\n          read_ = function shell_read(filename, binary) {\n            if (!nodeFS)\n              nodeFS = require_fs();\n            if (!nodePath)\n              nodePath = require_path();\n            filename = nodePath[\"normalize\"](filename);\n            return nodeFS[\"readFileSync\"](filename, binary ? null : \"utf8\");\n          };\n          readBinary = function readBinary2(filename) {\n            var ret = read_(filename, true);\n            if (!ret.buffer) {\n              ret = new Uint8Array(ret);\n            }\n            assert3(ret.buffer);\n            return ret;\n          };\n          if (process[\"argv\"].length > 1) {\n            thisProgram = process[\"argv\"][1].replace(/\\\\/g, \"/\");\n          }\n          arguments_ = process[\"argv\"].slice(2);\n          process[\"on\"](\"uncaughtException\", function(ex) {\n            if (!(ex instanceof ExitStatus)) {\n              throw ex;\n            }\n          });\n          process[\"on\"](\"unhandledRejection\", abort);\n          quit_ = function(status) {\n            process[\"exit\"](status);\n          };\n          Module[\"inspect\"] = function() {\n            return \"[Emscripten Module object]\";\n          };\n        } else if (ENVIRONMENT_IS_SHELL) {\n          if (typeof read != \"undefined\") {\n            read_ = function shell_read(f) {\n              return read(f);\n            };\n          }\n          readBinary = function readBinary2(f) {\n            var data;\n            if (typeof readbuffer === \"function\") {\n              return new Uint8Array(readbuffer(f));\n            }\n            data = read(f, \"binary\");\n            assert3(typeof data === \"object\");\n            return data;\n          };\n          if (typeof scriptArgs != \"undefined\") {\n            arguments_ = scriptArgs;\n          } else if (typeof arguments != \"undefined\") {\n            arguments_ = arguments;\n          }\n          if (typeof quit === \"function\") {\n            quit_ = function(status) {\n              quit(status);\n            };\n          }\n          if (typeof print !== \"undefined\") {\n            if (typeof console === \"undefined\")\n              console = {};\n            console.log = print;\n            console.warn = console.error = typeof printErr !== \"undefined\" ? printErr : print;\n          }\n        } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n          if (ENVIRONMENT_IS_WORKER) {\n            scriptDirectory = self.location.href;\n          } else if (typeof document !== \"undefined\" && document.currentScript) {\n            scriptDirectory = document.currentScript.src;\n          }\n          if (_scriptDir) {\n            scriptDirectory = _scriptDir;\n          }\n          if (scriptDirectory.indexOf(\"blob:\") !== 0) {\n            scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf(\"/\") + 1);\n          } else {\n            scriptDirectory = \"\";\n          }\n          {\n            read_ = function(url) {\n              var xhr = new XMLHttpRequest();\n              xhr.open(\"GET\", url, false);\n              xhr.send(null);\n              return xhr.responseText;\n            };\n            if (ENVIRONMENT_IS_WORKER) {\n              readBinary = function(url) {\n                var xhr = new XMLHttpRequest();\n                xhr.open(\"GET\", url, false);\n                xhr.responseType = \"arraybuffer\";\n                xhr.send(null);\n                return new Uint8Array(xhr.response);\n              };\n            }\n            readAsync = function(url, onload, onerror) {\n              var xhr = new XMLHttpRequest();\n              xhr.open(\"GET\", url, true);\n              xhr.responseType = \"arraybuffer\";\n              xhr.onload = function() {\n                if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n                  onload(xhr.response);\n                  return;\n                }\n                onerror();\n              };\n              xhr.onerror = onerror;\n              xhr.send(null);\n            };\n          }\n          setWindowTitle = function(title) {\n            document.title = title;\n          };\n        } else {\n        }\n        var out = Module[\"print\"] || console.log.bind(console);\n        var err = Module[\"printErr\"] || console.warn.bind(console);\n        for (key in moduleOverrides) {\n          if (moduleOverrides.hasOwnProperty(key)) {\n            Module[key] = moduleOverrides[key];\n          }\n        }\n        moduleOverrides = null;\n        if (Module[\"arguments\"])\n          arguments_ = Module[\"arguments\"];\n        if (Module[\"thisProgram\"])\n          thisProgram = Module[\"thisProgram\"];\n        if (Module[\"quit\"])\n          quit_ = Module[\"quit\"];\n        var wasmBinary;\n        if (Module[\"wasmBinary\"])\n          wasmBinary = Module[\"wasmBinary\"];\n        var noExitRuntime = Module[\"noExitRuntime\"] || true;\n        if (typeof WebAssembly !== \"object\") {\n          abort(\"no native wasm support detected\");\n        }\n        var wasmMemory;\n        var ABORT = false;\n        var EXITSTATUS;\n        function assert3(condition, text) {\n          if (!condition) {\n            abort(\"Assertion failed: \" + text);\n          }\n        }\n        function getCFunc(ident) {\n          var func2 = Module[\"_\" + ident];\n          assert3(func2, \"Cannot call unknown function \" + ident + \", make sure it is exported\");\n          return func2;\n        }\n        function ccall(ident, returnType, argTypes, args, opts) {\n          var toC = { \"string\": function(str) {\n            var ret2 = 0;\n            if (str !== null && str !== void 0 && str !== 0) {\n              var len = (str.length << 2) + 1;\n              ret2 = stackAlloc(len);\n              stringToUTF8(str, ret2, len);\n            }\n            return ret2;\n          }, \"array\": function(arr) {\n            var ret2 = stackAlloc(arr.length);\n            writeArrayToMemory(arr, ret2);\n            return ret2;\n          } };\n          function convertReturnValue(ret2) {\n            if (returnType === \"string\")\n              return UTF8ToString(ret2);\n            if (returnType === \"boolean\")\n              return Boolean(ret2);\n            return ret2;\n          }\n          var func2 = getCFunc(ident);\n          var cArgs = [];\n          var stack2 = 0;\n          if (args) {\n            for (var i = 0; i < args.length; i++) {\n              var converter = toC[argTypes[i]];\n              if (converter) {\n                if (stack2 === 0)\n                  stack2 = stackSave();\n                cArgs[i] = converter(args[i]);\n              } else {\n                cArgs[i] = args[i];\n              }\n            }\n          }\n          var ret = func2.apply(null, cArgs);\n          ret = convertReturnValue(ret);\n          if (stack2 !== 0)\n            stackRestore(stack2);\n          return ret;\n        }\n        function cwrap(ident, returnType, argTypes, opts) {\n          argTypes = argTypes || [];\n          var numericArgs = argTypes.every(function(type) {\n            return type === \"number\";\n          });\n          var numericRet = returnType !== \"string\";\n          if (numericRet && numericArgs && !opts) {\n            return getCFunc(ident);\n          }\n          return function() {\n            return ccall(ident, returnType, argTypes, arguments, opts);\n          };\n        }\n        var UTF8Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf8\") : void 0;\n        function UTF8ArrayToString(heap, idx, maxBytesToRead) {\n          var endIdx = idx + maxBytesToRead;\n          var endPtr = idx;\n          while (heap[endPtr] && !(endPtr >= endIdx))\n            ++endPtr;\n          if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {\n            return UTF8Decoder.decode(heap.subarray(idx, endPtr));\n          } else {\n            var str = \"\";\n            while (idx < endPtr) {\n              var u0 = heap[idx++];\n              if (!(u0 & 128)) {\n                str += String.fromCharCode(u0);\n                continue;\n              }\n              var u1 = heap[idx++] & 63;\n              if ((u0 & 224) == 192) {\n                str += String.fromCharCode((u0 & 31) << 6 | u1);\n                continue;\n              }\n              var u2 = heap[idx++] & 63;\n              if ((u0 & 240) == 224) {\n                u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n              } else {\n                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;\n              }\n              if (u0 < 65536) {\n                str += String.fromCharCode(u0);\n              } else {\n                var ch = u0 - 65536;\n                str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n              }\n            }\n          }\n          return str;\n        }\n        function UTF8ToString(ptr, maxBytesToRead) {\n          return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\";\n        }\n        function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n          if (!(maxBytesToWrite > 0))\n            return 0;\n          var startIdx = outIdx;\n          var endIdx = outIdx + maxBytesToWrite - 1;\n          for (var i = 0; i < str.length; ++i) {\n            var u = str.charCodeAt(i);\n            if (u >= 55296 && u <= 57343) {\n              var u1 = str.charCodeAt(++i);\n              u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n            }\n            if (u <= 127) {\n              if (outIdx >= endIdx)\n                break;\n              heap[outIdx++] = u;\n            } else if (u <= 2047) {\n              if (outIdx + 1 >= endIdx)\n                break;\n              heap[outIdx++] = 192 | u >> 6;\n              heap[outIdx++] = 128 | u & 63;\n            } else if (u <= 65535) {\n              if (outIdx + 2 >= endIdx)\n                break;\n              heap[outIdx++] = 224 | u >> 12;\n              heap[outIdx++] = 128 | u >> 6 & 63;\n              heap[outIdx++] = 128 | u & 63;\n            } else {\n              if (outIdx + 3 >= endIdx)\n                break;\n              heap[outIdx++] = 240 | u >> 18;\n              heap[outIdx++] = 128 | u >> 12 & 63;\n              heap[outIdx++] = 128 | u >> 6 & 63;\n              heap[outIdx++] = 128 | u & 63;\n            }\n          }\n          heap[outIdx] = 0;\n          return outIdx - startIdx;\n        }\n        function stringToUTF8(str, outPtr, maxBytesToWrite) {\n          return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n        }\n        function writeArrayToMemory(array2, buffer3) {\n          HEAP8.set(array2, buffer3);\n        }\n        function alignUp(x, multiple) {\n          if (x % multiple > 0) {\n            x += multiple - x % multiple;\n          }\n          return x;\n        }\n        var buffer2, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n        function updateGlobalBufferAndViews(buf) {\n          buffer2 = buf;\n          Module[\"HEAP8\"] = HEAP8 = new Int8Array(buf);\n          Module[\"HEAP16\"] = HEAP16 = new Int16Array(buf);\n          Module[\"HEAP32\"] = HEAP32 = new Int32Array(buf);\n          Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(buf);\n          Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(buf);\n          Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(buf);\n          Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(buf);\n          Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(buf);\n        }\n        var INITIAL_MEMORY = Module[\"INITIAL_MEMORY\"] || 16777216;\n        var wasmTable;\n        var __ATPRERUN__ = [];\n        var __ATINIT__ = [];\n        var __ATMAIN__ = [];\n        var __ATPOSTRUN__ = [];\n        var runtimeInitialized = false;\n        __ATINIT__.push({ func: function() {\n          ___wasm_call_ctors();\n        } });\n        function preRun() {\n          if (Module[\"preRun\"]) {\n            if (typeof Module[\"preRun\"] == \"function\")\n              Module[\"preRun\"] = [Module[\"preRun\"]];\n            while (Module[\"preRun\"].length) {\n              addOnPreRun(Module[\"preRun\"].shift());\n            }\n          }\n          callRuntimeCallbacks(__ATPRERUN__);\n        }\n        function initRuntime() {\n          runtimeInitialized = true;\n          callRuntimeCallbacks(__ATINIT__);\n        }\n        function preMain() {\n          callRuntimeCallbacks(__ATMAIN__);\n        }\n        function postRun() {\n          if (Module[\"postRun\"]) {\n            if (typeof Module[\"postRun\"] == \"function\")\n              Module[\"postRun\"] = [Module[\"postRun\"]];\n            while (Module[\"postRun\"].length) {\n              addOnPostRun(Module[\"postRun\"].shift());\n            }\n          }\n          callRuntimeCallbacks(__ATPOSTRUN__);\n        }\n        function addOnPreRun(cb) {\n          __ATPRERUN__.unshift(cb);\n        }\n        function addOnPostRun(cb) {\n          __ATPOSTRUN__.unshift(cb);\n        }\n        var runDependencies = 0;\n        var runDependencyWatcher = null;\n        var dependenciesFulfilled = null;\n        function addRunDependency(id) {\n          runDependencies++;\n          if (Module[\"monitorRunDependencies\"]) {\n            Module[\"monitorRunDependencies\"](runDependencies);\n          }\n        }\n        function removeRunDependency(id) {\n          runDependencies--;\n          if (Module[\"monitorRunDependencies\"]) {\n            Module[\"monitorRunDependencies\"](runDependencies);\n          }\n          if (runDependencies == 0) {\n            if (runDependencyWatcher !== null) {\n              clearInterval(runDependencyWatcher);\n              runDependencyWatcher = null;\n            }\n            if (dependenciesFulfilled) {\n              var callback = dependenciesFulfilled;\n              dependenciesFulfilled = null;\n              callback();\n            }\n          }\n        }\n        Module[\"preloadedImages\"] = {};\n        Module[\"preloadedAudios\"] = {};\n        function abort(what) {\n          if (Module[\"onAbort\"]) {\n            Module[\"onAbort\"](what);\n          }\n          what += \"\";\n          err(what);\n          ABORT = true;\n          EXITSTATUS = 1;\n          what = \"abort(\" + what + \"). Build with -s ASSERTIONS=1 for more info.\";\n          var e = new WebAssembly.RuntimeError(what);\n          readyPromiseReject(e);\n          throw e;\n        }\n        function hasPrefix(str, prefix) {\n          return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;\n        }\n        var dataURIPrefix = \"data:application/octet-stream;base64,\";\n        function isDataURI(filename) {\n          return hasPrefix(filename, dataURIPrefix);\n        }\n        var fileURIPrefix = \"file://\";\n        function isFileURI(filename) {\n          return hasPrefix(filename, fileURIPrefix);\n        }\n        var wasmBinaryFile = \"tfjs-backend-wasm.wasm\";\n        if (!isDataURI(wasmBinaryFile)) {\n          wasmBinaryFile = locateFile(wasmBinaryFile);\n        }\n        function getBinary(file) {\n          try {\n            if (file == wasmBinaryFile && wasmBinary) {\n              return new Uint8Array(wasmBinary);\n            }\n            if (readBinary) {\n              return readBinary(file);\n            } else {\n              throw \"both async and sync fetching of the wasm failed\";\n            }\n          } catch (err2) {\n            abort(err2);\n          }\n        }\n        function getBinaryPromise() {\n          if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n            if (typeof fetch === \"function\" && !isFileURI(wasmBinaryFile)) {\n              return fetch(wasmBinaryFile, { credentials: \"same-origin\" }).then(function(response) {\n                if (!response[\"ok\"]) {\n                  throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\n                }\n                return response[\"arrayBuffer\"]();\n              }).catch(function() {\n                return getBinary(wasmBinaryFile);\n              });\n            } else {\n              if (readAsync) {\n                return new Promise(function(resolve, reject) {\n                  readAsync(wasmBinaryFile, function(response) {\n                    resolve(new Uint8Array(response));\n                  }, reject);\n                });\n              }\n            }\n          }\n          return Promise.resolve().then(function() {\n            return getBinary(wasmBinaryFile);\n          });\n        }\n        function createWasm() {\n          var info = { \"a\": asmLibraryArg };\n          function receiveInstance(instance, module2) {\n            var exports3 = instance.exports;\n            Module[\"asm\"] = exports3;\n            wasmMemory = Module[\"asm\"][\"j\"];\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n            wasmTable = Module[\"asm\"][\"r\"];\n            removeRunDependency(\"wasm-instantiate\");\n          }\n          addRunDependency(\"wasm-instantiate\");\n          function receiveInstantiatedSource(output) {\n            receiveInstance(output[\"instance\"]);\n          }\n          function instantiateArrayBuffer(receiver) {\n            return getBinaryPromise().then(function(binary) {\n              return WebAssembly.instantiate(binary, info);\n            }).then(receiver, function(reason) {\n              err(\"failed to asynchronously prepare wasm: \" + reason);\n              abort(reason);\n            });\n          }\n          function instantiateAsync() {\n            if (!wasmBinary && typeof WebAssembly.instantiateStreaming === \"function\" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === \"function\") {\n              return fetch(wasmBinaryFile, { credentials: \"same-origin\" }).then(function(response) {\n                var result = WebAssembly.instantiateStreaming(response, info);\n                return result.then(receiveInstantiatedSource, function(reason) {\n                  err(\"wasm streaming compile failed: \" + reason);\n                  err(\"falling back to ArrayBuffer instantiation\");\n                  return instantiateArrayBuffer(receiveInstantiatedSource);\n                });\n              });\n            } else {\n              return instantiateArrayBuffer(receiveInstantiatedSource);\n            }\n          }\n          if (Module[\"instantiateWasm\"]) {\n            try {\n              var exports2 = Module[\"instantiateWasm\"](info, receiveInstance);\n              return exports2;\n            } catch (e) {\n              err(\"Module.instantiateWasm callback failed with error: \" + e);\n              return false;\n            }\n          }\n          instantiateAsync().catch(readyPromiseReject);\n          return {};\n        }\n        function callRuntimeCallbacks(callbacks2) {\n          while (callbacks2.length > 0) {\n            var callback = callbacks2.shift();\n            if (typeof callback == \"function\") {\n              callback(Module);\n              continue;\n            }\n            var func2 = callback.func;\n            if (typeof func2 === \"number\") {\n              if (callback.arg === void 0) {\n                wasmTable.get(func2)();\n              } else {\n                wasmTable.get(func2)(callback.arg);\n              }\n            } else {\n              func2(callback.arg === void 0 ? null : callback.arg);\n            }\n          }\n        }\n        function _abort() {\n          abort();\n        }\n        function _emscripten_memcpy_big(dest, src, num) {\n          HEAPU8.copyWithin(dest, src, src + num);\n        }\n        function _emscripten_get_heap_size() {\n          return HEAPU8.length;\n        }\n        function emscripten_realloc_buffer(size) {\n          try {\n            wasmMemory.grow(size - buffer2.byteLength + 65535 >>> 16);\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n            return 1;\n          } catch (e) {\n          }\n        }\n        function _emscripten_resize_heap(requestedSize) {\n          var oldSize = _emscripten_get_heap_size();\n          var maxHeapSize = 2147483648;\n          if (requestedSize > maxHeapSize) {\n            return false;\n          }\n          for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n            var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n            overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n            var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n            var replacement = emscripten_realloc_buffer(newSize);\n            if (replacement) {\n              return true;\n            }\n          }\n          return false;\n        }\n        var SYSCALLS = { mappings: {}, buffers: [null, [], []], printChar: function(stream, curr) {\n          var buffer3 = SYSCALLS.buffers[stream];\n          if (curr === 0 || curr === 10) {\n            (stream === 1 ? out : err)(UTF8ArrayToString(buffer3, 0));\n            buffer3.length = 0;\n          } else {\n            buffer3.push(curr);\n          }\n        }, varargs: void 0, get: function() {\n          SYSCALLS.varargs += 4;\n          var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];\n          return ret;\n        }, getStr: function(ptr) {\n          var ret = UTF8ToString(ptr);\n          return ret;\n        }, get64: function(low, high) {\n          return low;\n        } };\n        function _fd_close(fd) {\n          return 0;\n        }\n        function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n        }\n        function _fd_write(fd, iov, iovcnt, pnum) {\n          var num = 0;\n          for (var i = 0; i < iovcnt; i++) {\n            var ptr = HEAP32[iov + i * 8 >> 2];\n            var len = HEAP32[iov + (i * 8 + 4) >> 2];\n            for (var j = 0; j < len; j++) {\n              SYSCALLS.printChar(fd, HEAPU8[ptr + j]);\n            }\n            num += len;\n          }\n          HEAP32[pnum >> 2] = num;\n          return 0;\n        }\n        function _pthread_create() {\n          return 6;\n        }\n        function _pthread_join() {\n          return 28;\n        }\n        function setErrNo(value) {\n          HEAP32[___errno_location() >> 2] = value;\n          return value;\n        }\n        function _sysconf(name) {\n          switch (name) {\n            case 30:\n              return 16384;\n            case 85:\n              var maxHeapSize = 2147483648;\n              return maxHeapSize / 16384;\n            case 132:\n            case 133:\n            case 12:\n            case 137:\n            case 138:\n            case 15:\n            case 235:\n            case 16:\n            case 17:\n            case 18:\n            case 19:\n            case 20:\n            case 149:\n            case 13:\n            case 10:\n            case 236:\n            case 153:\n            case 9:\n            case 21:\n            case 22:\n            case 159:\n            case 154:\n            case 14:\n            case 77:\n            case 78:\n            case 139:\n            case 82:\n            case 68:\n            case 67:\n            case 164:\n            case 11:\n            case 29:\n            case 47:\n            case 48:\n            case 95:\n            case 52:\n            case 51:\n            case 46:\n              return 200809;\n            case 27:\n            case 246:\n            case 127:\n            case 128:\n            case 23:\n            case 24:\n            case 160:\n            case 161:\n            case 181:\n            case 182:\n            case 242:\n            case 183:\n            case 184:\n            case 243:\n            case 244:\n            case 245:\n            case 165:\n            case 178:\n            case 179:\n            case 49:\n            case 50:\n            case 168:\n            case 169:\n            case 175:\n            case 170:\n            case 171:\n            case 172:\n            case 97:\n            case 76:\n            case 32:\n            case 173:\n            case 35:\n            case 80:\n            case 81:\n            case 79:\n              return -1;\n            case 176:\n            case 177:\n            case 7:\n            case 155:\n            case 8:\n            case 157:\n            case 125:\n            case 126:\n            case 92:\n            case 93:\n            case 129:\n            case 130:\n            case 131:\n            case 94:\n            case 91:\n              return 1;\n            case 74:\n            case 60:\n            case 69:\n            case 70:\n            case 4:\n              return 1024;\n            case 31:\n            case 42:\n            case 72:\n              return 32;\n            case 87:\n            case 26:\n            case 33:\n              return 2147483647;\n            case 34:\n            case 1:\n              return 47839;\n            case 38:\n            case 36:\n              return 99;\n            case 43:\n            case 37:\n              return 2048;\n            case 0:\n              return 2097152;\n            case 3:\n              return 65536;\n            case 28:\n              return 32768;\n            case 44:\n              return 32767;\n            case 75:\n              return 16384;\n            case 39:\n              return 1e3;\n            case 89:\n              return 700;\n            case 71:\n              return 256;\n            case 40:\n              return 255;\n            case 2:\n              return 100;\n            case 180:\n              return 64;\n            case 25:\n              return 20;\n            case 5:\n              return 16;\n            case 6:\n              return 6;\n            case 73:\n              return 4;\n            case 84: {\n              if (typeof navigator === \"object\")\n                return navigator[\"hardwareConcurrency\"] || 1;\n              return 1;\n            }\n          }\n          setErrNo(28);\n          return -1;\n        }\n        var asmLibraryArg = { \"a\": _abort, \"d\": _emscripten_memcpy_big, \"e\": _emscripten_resize_heap, \"f\": _fd_close, \"c\": _fd_seek, \"b\": _fd_write, \"h\": _pthread_create, \"g\": _pthread_join, \"i\": _sysconf };\n        var asm = createWasm();\n        var ___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = function() {\n          return (___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = Module[\"asm\"][\"k\"]).apply(null, arguments);\n        };\n        var _init = Module[\"_init\"] = function() {\n          return (_init = Module[\"_init\"] = Module[\"asm\"][\"l\"]).apply(null, arguments);\n        };\n        var _init_with_threads_count = Module[\"_init_with_threads_count\"] = function() {\n          return (_init_with_threads_count = Module[\"_init_with_threads_count\"] = Module[\"asm\"][\"m\"]).apply(null, arguments);\n        };\n        var _get_threads_count = Module[\"_get_threads_count\"] = function() {\n          return (_get_threads_count = Module[\"_get_threads_count\"] = Module[\"asm\"][\"n\"]).apply(null, arguments);\n        };\n        var _register_tensor = Module[\"_register_tensor\"] = function() {\n          return (_register_tensor = Module[\"_register_tensor\"] = Module[\"asm\"][\"o\"]).apply(null, arguments);\n        };\n        var _dispose_data = Module[\"_dispose_data\"] = function() {\n          return (_dispose_data = Module[\"_dispose_data\"] = Module[\"asm\"][\"p\"]).apply(null, arguments);\n        };\n        var _dispose = Module[\"_dispose\"] = function() {\n          return (_dispose = Module[\"_dispose\"] = Module[\"asm\"][\"q\"]).apply(null, arguments);\n        };\n        var _Abs = Module[\"_Abs\"] = function() {\n          return (_Abs = Module[\"_Abs\"] = Module[\"asm\"][\"s\"]).apply(null, arguments);\n        };\n        var _Add = Module[\"_Add\"] = function() {\n          return (_Add = Module[\"_Add\"] = Module[\"asm\"][\"t\"]).apply(null, arguments);\n        };\n        var _AddN = Module[\"_AddN\"] = function() {\n          return (_AddN = Module[\"_AddN\"] = Module[\"asm\"][\"u\"]).apply(null, arguments);\n        };\n        var _All = Module[\"_All\"] = function() {\n          return (_All = Module[\"_All\"] = Module[\"asm\"][\"v\"]).apply(null, arguments);\n        };\n        var _Any = Module[\"_Any\"] = function() {\n          return (_Any = Module[\"_Any\"] = Module[\"asm\"][\"w\"]).apply(null, arguments);\n        };\n        var _ArgMax = Module[\"_ArgMax\"] = function() {\n          return (_ArgMax = Module[\"_ArgMax\"] = Module[\"asm\"][\"x\"]).apply(null, arguments);\n        };\n        var _AvgPool = Module[\"_AvgPool\"] = function() {\n          return (_AvgPool = Module[\"_AvgPool\"] = Module[\"asm\"][\"y\"]).apply(null, arguments);\n        };\n        var _BatchMatMul = Module[\"_BatchMatMul\"] = function() {\n          return (_BatchMatMul = Module[\"_BatchMatMul\"] = Module[\"asm\"][\"z\"]).apply(null, arguments);\n        };\n        var _Ceil = Module[\"_Ceil\"] = function() {\n          return (_Ceil = Module[\"_Ceil\"] = Module[\"asm\"][\"A\"]).apply(null, arguments);\n        };\n        var _ClipByValue = Module[\"_ClipByValue\"] = function() {\n          return (_ClipByValue = Module[\"_ClipByValue\"] = Module[\"asm\"][\"B\"]).apply(null, arguments);\n        };\n        var _Conv2D = Module[\"_Conv2D\"] = function() {\n          return (_Conv2D = Module[\"_Conv2D\"] = Module[\"asm\"][\"C\"]).apply(null, arguments);\n        };\n        var _Conv2DBackpropInput = Module[\"_Conv2DBackpropInput\"] = function() {\n          return (_Conv2DBackpropInput = Module[\"_Conv2DBackpropInput\"] = Module[\"asm\"][\"D\"]).apply(null, arguments);\n        };\n        var _Cos = Module[\"_Cos\"] = function() {\n          return (_Cos = Module[\"_Cos\"] = Module[\"asm\"][\"E\"]).apply(null, arguments);\n        };\n        var _Cosh = Module[\"_Cosh\"] = function() {\n          return (_Cosh = Module[\"_Cosh\"] = Module[\"asm\"][\"F\"]).apply(null, arguments);\n        };\n        var _CropAndResize = Module[\"_CropAndResize\"] = function() {\n          return (_CropAndResize = Module[\"_CropAndResize\"] = Module[\"asm\"][\"G\"]).apply(null, arguments);\n        };\n        var _Cumsum = Module[\"_Cumsum\"] = function() {\n          return (_Cumsum = Module[\"_Cumsum\"] = Module[\"asm\"][\"H\"]).apply(null, arguments);\n        };\n        var _DepthToSpace = Module[\"_DepthToSpace\"] = function() {\n          return (_DepthToSpace = Module[\"_DepthToSpace\"] = Module[\"asm\"][\"I\"]).apply(null, arguments);\n        };\n        var _DepthwiseConv2dNative = Module[\"_DepthwiseConv2dNative\"] = function() {\n          return (_DepthwiseConv2dNative = Module[\"_DepthwiseConv2dNative\"] = Module[\"asm\"][\"J\"]).apply(null, arguments);\n        };\n        var _Elu = Module[\"_Elu\"] = function() {\n          return (_Elu = Module[\"_Elu\"] = Module[\"asm\"][\"K\"]).apply(null, arguments);\n        };\n        var _Equal = Module[\"_Equal\"] = function() {\n          return (_Equal = Module[\"_Equal\"] = Module[\"asm\"][\"L\"]).apply(null, arguments);\n        };\n        var _Exp = Module[\"_Exp\"] = function() {\n          return (_Exp = Module[\"_Exp\"] = Module[\"asm\"][\"M\"]).apply(null, arguments);\n        };\n        var _FlipLeftRight = Module[\"_FlipLeftRight\"] = function() {\n          return (_FlipLeftRight = Module[\"_FlipLeftRight\"] = Module[\"asm\"][\"N\"]).apply(null, arguments);\n        };\n        var _Floor = Module[\"_Floor\"] = function() {\n          return (_Floor = Module[\"_Floor\"] = Module[\"asm\"][\"O\"]).apply(null, arguments);\n        };\n        var _FloorDiv = Module[\"_FloorDiv\"] = function() {\n          return (_FloorDiv = Module[\"_FloorDiv\"] = Module[\"asm\"][\"P\"]).apply(null, arguments);\n        };\n        var _FusedBatchNorm = Module[\"_FusedBatchNorm\"] = function() {\n          return (_FusedBatchNorm = Module[\"_FusedBatchNorm\"] = Module[\"asm\"][\"Q\"]).apply(null, arguments);\n        };\n        var _FusedConv2D = Module[\"_FusedConv2D\"] = function() {\n          return (_FusedConv2D = Module[\"_FusedConv2D\"] = Module[\"asm\"][\"R\"]).apply(null, arguments);\n        };\n        var _FusedDepthwiseConv2D = Module[\"_FusedDepthwiseConv2D\"] = function() {\n          return (_FusedDepthwiseConv2D = Module[\"_FusedDepthwiseConv2D\"] = Module[\"asm\"][\"S\"]).apply(null, arguments);\n        };\n        var _Gather = Module[\"_Gather\"] = function() {\n          return (_Gather = Module[\"_Gather\"] = Module[\"asm\"][\"T\"]).apply(null, arguments);\n        };\n        var _GatherNd = Module[\"_GatherNd\"] = function() {\n          return (_GatherNd = Module[\"_GatherNd\"] = Module[\"asm\"][\"U\"]).apply(null, arguments);\n        };\n        var _Greater = Module[\"_Greater\"] = function() {\n          return (_Greater = Module[\"_Greater\"] = Module[\"asm\"][\"V\"]).apply(null, arguments);\n        };\n        var _GreaterEqual = Module[\"_GreaterEqual\"] = function() {\n          return (_GreaterEqual = Module[\"_GreaterEqual\"] = Module[\"asm\"][\"W\"]).apply(null, arguments);\n        };\n        var _LeakyRelu = Module[\"_LeakyRelu\"] = function() {\n          return (_LeakyRelu = Module[\"_LeakyRelu\"] = Module[\"asm\"][\"X\"]).apply(null, arguments);\n        };\n        var _Less = Module[\"_Less\"] = function() {\n          return (_Less = Module[\"_Less\"] = Module[\"asm\"][\"Y\"]).apply(null, arguments);\n        };\n        var _LessEqual = Module[\"_LessEqual\"] = function() {\n          return (_LessEqual = Module[\"_LessEqual\"] = Module[\"asm\"][\"Z\"]).apply(null, arguments);\n        };\n        var _Log = Module[\"_Log\"] = function() {\n          return (_Log = Module[\"_Log\"] = Module[\"asm\"][\"_\"]).apply(null, arguments);\n        };\n        var _LogicalAnd = Module[\"_LogicalAnd\"] = function() {\n          return (_LogicalAnd = Module[\"_LogicalAnd\"] = Module[\"asm\"][\"$\"]).apply(null, arguments);\n        };\n        var _Max = Module[\"_Max\"] = function() {\n          return (_Max = Module[\"_Max\"] = Module[\"asm\"][\"aa\"]).apply(null, arguments);\n        };\n        var _MaxPool = Module[\"_MaxPool\"] = function() {\n          return (_MaxPool = Module[\"_MaxPool\"] = Module[\"asm\"][\"ba\"]).apply(null, arguments);\n        };\n        var _Maximum = Module[\"_Maximum\"] = function() {\n          return (_Maximum = Module[\"_Maximum\"] = Module[\"asm\"][\"ca\"]).apply(null, arguments);\n        };\n        var _Mean = Module[\"_Mean\"] = function() {\n          return (_Mean = Module[\"_Mean\"] = Module[\"asm\"][\"da\"]).apply(null, arguments);\n        };\n        var _Min = Module[\"_Min\"] = function() {\n          return (_Min = Module[\"_Min\"] = Module[\"asm\"][\"ea\"]).apply(null, arguments);\n        };\n        var _Minimum = Module[\"_Minimum\"] = function() {\n          return (_Minimum = Module[\"_Minimum\"] = Module[\"asm\"][\"fa\"]).apply(null, arguments);\n        };\n        var _MirrorPad = Module[\"_MirrorPad\"] = function() {\n          return (_MirrorPad = Module[\"_MirrorPad\"] = Module[\"asm\"][\"ga\"]).apply(null, arguments);\n        };\n        var _Multiply = Module[\"_Multiply\"] = function() {\n          return (_Multiply = Module[\"_Multiply\"] = Module[\"asm\"][\"ha\"]).apply(null, arguments);\n        };\n        var _Neg = Module[\"_Neg\"] = function() {\n          return (_Neg = Module[\"_Neg\"] = Module[\"asm\"][\"ia\"]).apply(null, arguments);\n        };\n        var _NonMaxSuppressionV3 = Module[\"_NonMaxSuppressionV3\"] = function() {\n          return (_NonMaxSuppressionV3 = Module[\"_NonMaxSuppressionV3\"] = Module[\"asm\"][\"ja\"]).apply(null, arguments);\n        };\n        var _NonMaxSuppressionV4 = Module[\"_NonMaxSuppressionV4\"] = function() {\n          return (_NonMaxSuppressionV4 = Module[\"_NonMaxSuppressionV4\"] = Module[\"asm\"][\"ka\"]).apply(null, arguments);\n        };\n        var _NonMaxSuppressionV5 = Module[\"_NonMaxSuppressionV5\"] = function() {\n          return (_NonMaxSuppressionV5 = Module[\"_NonMaxSuppressionV5\"] = Module[\"asm\"][\"la\"]).apply(null, arguments);\n        };\n        var _NotEqual = Module[\"_NotEqual\"] = function() {\n          return (_NotEqual = Module[\"_NotEqual\"] = Module[\"asm\"][\"ma\"]).apply(null, arguments);\n        };\n        var _OneHot = Module[\"_OneHot\"] = function() {\n          return (_OneHot = Module[\"_OneHot\"] = Module[\"asm\"][\"na\"]).apply(null, arguments);\n        };\n        var _PadV2 = Module[\"_PadV2\"] = function() {\n          return (_PadV2 = Module[\"_PadV2\"] = Module[\"asm\"][\"oa\"]).apply(null, arguments);\n        };\n        var _Pow = Module[\"_Pow\"] = function() {\n          return (_Pow = Module[\"_Pow\"] = Module[\"asm\"][\"pa\"]).apply(null, arguments);\n        };\n        var _Prelu = Module[\"_Prelu\"] = function() {\n          return (_Prelu = Module[\"_Prelu\"] = Module[\"asm\"][\"qa\"]).apply(null, arguments);\n        };\n        var _Prod = Module[\"_Prod\"] = function() {\n          return (_Prod = Module[\"_Prod\"] = Module[\"asm\"][\"ra\"]).apply(null, arguments);\n        };\n        var _RealDiv = Module[\"_RealDiv\"] = function() {\n          return (_RealDiv = Module[\"_RealDiv\"] = Module[\"asm\"][\"sa\"]).apply(null, arguments);\n        };\n        var _Relu = Module[\"_Relu\"] = function() {\n          return (_Relu = Module[\"_Relu\"] = Module[\"asm\"][\"ta\"]).apply(null, arguments);\n        };\n        var _Relu6 = Module[\"_Relu6\"] = function() {\n          return (_Relu6 = Module[\"_Relu6\"] = Module[\"asm\"][\"ua\"]).apply(null, arguments);\n        };\n        var _ResizeBilinear = Module[\"_ResizeBilinear\"] = function() {\n          return (_ResizeBilinear = Module[\"_ResizeBilinear\"] = Module[\"asm\"][\"va\"]).apply(null, arguments);\n        };\n        var _Reverse = Module[\"_Reverse\"] = function() {\n          return (_Reverse = Module[\"_Reverse\"] = Module[\"asm\"][\"wa\"]).apply(null, arguments);\n        };\n        var _RotateWithOffset = Module[\"_RotateWithOffset\"] = function() {\n          return (_RotateWithOffset = Module[\"_RotateWithOffset\"] = Module[\"asm\"][\"xa\"]).apply(null, arguments);\n        };\n        var _Round = Module[\"_Round\"] = function() {\n          return (_Round = Module[\"_Round\"] = Module[\"asm\"][\"ya\"]).apply(null, arguments);\n        };\n        var _Rsqrt = Module[\"_Rsqrt\"] = function() {\n          return (_Rsqrt = Module[\"_Rsqrt\"] = Module[\"asm\"][\"za\"]).apply(null, arguments);\n        };\n        var _ScatterNd = Module[\"_ScatterNd\"] = function() {\n          return (_ScatterNd = Module[\"_ScatterNd\"] = Module[\"asm\"][\"Aa\"]).apply(null, arguments);\n        };\n        var _SelectV2 = Module[\"_SelectV2\"] = function() {\n          return (_SelectV2 = Module[\"_SelectV2\"] = Module[\"asm\"][\"Ba\"]).apply(null, arguments);\n        };\n        var _Sigmoid = Module[\"_Sigmoid\"] = function() {\n          return (_Sigmoid = Module[\"_Sigmoid\"] = Module[\"asm\"][\"Ca\"]).apply(null, arguments);\n        };\n        var _Sin = Module[\"_Sin\"] = function() {\n          return (_Sin = Module[\"_Sin\"] = Module[\"asm\"][\"Da\"]).apply(null, arguments);\n        };\n        var _Softmax = Module[\"_Softmax\"] = function() {\n          return (_Softmax = Module[\"_Softmax\"] = Module[\"asm\"][\"Ea\"]).apply(null, arguments);\n        };\n        var _SparseFillEmptyRows = Module[\"_SparseFillEmptyRows\"] = function() {\n          return (_SparseFillEmptyRows = Module[\"_SparseFillEmptyRows\"] = Module[\"asm\"][\"Fa\"]).apply(null, arguments);\n        };\n        var _SparseReshape = Module[\"_SparseReshape\"] = function() {\n          return (_SparseReshape = Module[\"_SparseReshape\"] = Module[\"asm\"][\"Ga\"]).apply(null, arguments);\n        };\n        var _SparseSegmentReduction = Module[\"_SparseSegmentReduction\"] = function() {\n          return (_SparseSegmentReduction = Module[\"_SparseSegmentReduction\"] = Module[\"asm\"][\"Ha\"]).apply(null, arguments);\n        };\n        var _Sqrt = Module[\"_Sqrt\"] = function() {\n          return (_Sqrt = Module[\"_Sqrt\"] = Module[\"asm\"][\"Ia\"]).apply(null, arguments);\n        };\n        var _Square = Module[\"_Square\"] = function() {\n          return (_Square = Module[\"_Square\"] = Module[\"asm\"][\"Ja\"]).apply(null, arguments);\n        };\n        var _SquaredDifference = Module[\"_SquaredDifference\"] = function() {\n          return (_SquaredDifference = Module[\"_SquaredDifference\"] = Module[\"asm\"][\"Ka\"]).apply(null, arguments);\n        };\n        var _Step = Module[\"_Step\"] = function() {\n          return (_Step = Module[\"_Step\"] = Module[\"asm\"][\"La\"]).apply(null, arguments);\n        };\n        var _StridedSlice = Module[\"_StridedSlice\"] = function() {\n          return (_StridedSlice = Module[\"_StridedSlice\"] = Module[\"asm\"][\"Ma\"]).apply(null, arguments);\n        };\n        var _Sub = Module[\"_Sub\"] = function() {\n          return (_Sub = Module[\"_Sub\"] = Module[\"asm\"][\"Na\"]).apply(null, arguments);\n        };\n        var _Sum = Module[\"_Sum\"] = function() {\n          return (_Sum = Module[\"_Sum\"] = Module[\"asm\"][\"Oa\"]).apply(null, arguments);\n        };\n        var _Tan = Module[\"_Tan\"] = function() {\n          return (_Tan = Module[\"_Tan\"] = Module[\"asm\"][\"Pa\"]).apply(null, arguments);\n        };\n        var _Tanh = Module[\"_Tanh\"] = function() {\n          return (_Tanh = Module[\"_Tanh\"] = Module[\"asm\"][\"Qa\"]).apply(null, arguments);\n        };\n        var _Tile = Module[\"_Tile\"] = function() {\n          return (_Tile = Module[\"_Tile\"] = Module[\"asm\"][\"Ra\"]).apply(null, arguments);\n        };\n        var _TopK = Module[\"_TopK\"] = function() {\n          return (_TopK = Module[\"_TopK\"] = Module[\"asm\"][\"Sa\"]).apply(null, arguments);\n        };\n        var _Transform = Module[\"_Transform\"] = function() {\n          return (_Transform = Module[\"_Transform\"] = Module[\"asm\"][\"Ta\"]).apply(null, arguments);\n        };\n        var _Transpose = Module[\"_Transpose\"] = function() {\n          return (_Transpose = Module[\"_Transpose\"] = Module[\"asm\"][\"Ua\"]).apply(null, arguments);\n        };\n        var __FusedMatMul = Module[\"__FusedMatMul\"] = function() {\n          return (__FusedMatMul = Module[\"__FusedMatMul\"] = Module[\"asm\"][\"Va\"]).apply(null, arguments);\n        };\n        var _malloc = Module[\"_malloc\"] = function() {\n          return (_malloc = Module[\"_malloc\"] = Module[\"asm\"][\"Wa\"]).apply(null, arguments);\n        };\n        var _free = Module[\"_free\"] = function() {\n          return (_free = Module[\"_free\"] = Module[\"asm\"][\"Xa\"]).apply(null, arguments);\n        };\n        var ___errno_location = Module[\"___errno_location\"] = function() {\n          return (___errno_location = Module[\"___errno_location\"] = Module[\"asm\"][\"Ya\"]).apply(null, arguments);\n        };\n        var stackSave = Module[\"stackSave\"] = function() {\n          return (stackSave = Module[\"stackSave\"] = Module[\"asm\"][\"Za\"]).apply(null, arguments);\n        };\n        var stackRestore = Module[\"stackRestore\"] = function() {\n          return (stackRestore = Module[\"stackRestore\"] = Module[\"asm\"][\"_a\"]).apply(null, arguments);\n        };\n        var stackAlloc = Module[\"stackAlloc\"] = function() {\n          return (stackAlloc = Module[\"stackAlloc\"] = Module[\"asm\"][\"$a\"]).apply(null, arguments);\n        };\n        Module[\"cwrap\"] = cwrap;\n        var calledRun;\n        function ExitStatus(status) {\n          this.name = \"ExitStatus\";\n          this.message = \"Program terminated with exit(\" + status + \")\";\n          this.status = status;\n        }\n        dependenciesFulfilled = function runCaller() {\n          if (!calledRun)\n            run();\n          if (!calledRun)\n            dependenciesFulfilled = runCaller;\n        };\n        function run(args) {\n          args = args || arguments_;\n          if (runDependencies > 0) {\n            return;\n          }\n          preRun();\n          if (runDependencies > 0) {\n            return;\n          }\n          function doRun() {\n            if (calledRun)\n              return;\n            calledRun = true;\n            Module[\"calledRun\"] = true;\n            if (ABORT)\n              return;\n            initRuntime();\n            preMain();\n            readyPromiseResolve(Module);\n            if (Module[\"onRuntimeInitialized\"])\n              Module[\"onRuntimeInitialized\"]();\n            postRun();\n          }\n          if (Module[\"setStatus\"]) {\n            Module[\"setStatus\"](\"Running...\");\n            setTimeout(function() {\n              setTimeout(function() {\n                Module[\"setStatus\"](\"\");\n              }, 1);\n              doRun();\n            }, 1);\n          } else {\n            doRun();\n          }\n        }\n        Module[\"run\"] = run;\n        if (Module[\"preInit\"]) {\n          if (typeof Module[\"preInit\"] == \"function\")\n            Module[\"preInit\"] = [Module[\"preInit\"]];\n          while (Module[\"preInit\"].length > 0) {\n            Module[\"preInit\"].pop()();\n          }\n        }\n        run();\n        var listenersAdded;\n        if (beforeListeners) {\n          listenersAdded = { uncaughtException: process.listeners(\"uncaughtException\").filter(function(listener) {\n            return !beforeListeners.uncaughtException.indexOf(listener) > -1;\n          }), unhandledRejection: process.listeners(\"unhandledRejection\").filter(function(listener) {\n            return !beforeListeners.unhandledRejection.indexOf(listener) > -1;\n          }) };\n        }\n        var actualModule;\n        if (typeof WasmBackendModule3 !== \"undefined\") {\n          actualModule = WasmBackendModule3;\n        } else if (typeof WasmBackendModuleThreadedSimd !== \"undefined\") {\n          actualModule = WasmBackendModuleThreadedSimd;\n        } else {\n          throw new Error(\"Could not find wasm module in post.js\");\n        }\n        if (listenersAdded) {\n          var tmpDispose = actualModule[\"_dispose\"];\n          actualModule[\"_dispose\"] = function() {\n            tmpDispose();\n            listenersAdded.uncaughtException.forEach(function(listener) {\n              process.removeListener(\"uncaughtException\", listener);\n            });\n            listenersAdded.unhandledRejection.forEach(function(listener) {\n              process.removeListener(\"unhandledRejection\", listener);\n            });\n          };\n        }\n        return WasmBackendModule3.ready;\n      };\n    }();\n    if (typeof exports === \"object\" && typeof module === \"object\")\n      module.exports = WasmBackendModule2;\n    else if (typeof define === \"function\" && define[\"amd\"])\n      define([], function() {\n        return WasmBackendModule2;\n      });\n    else if (typeof exports === \"object\")\n      exports[\"WasmBackendModule\"] = WasmBackendModule2;\n  }\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/backends/backend.js\nvar EPSILON_FLOAT32 = 1e-7;\nvar EPSILON_FLOAT16 = 1e-4;\nvar DataStorage = class {\n  constructor(backend2, dataMover) {\n    this.backend = backend2;\n    this.dataMover = dataMover;\n    this.data = /* @__PURE__ */ new WeakMap();\n    this.dataIdsCount = 0;\n  }\n  get(dataId) {\n    if (!this.data.has(dataId)) {\n      this.dataMover.moveData(this.backend, dataId);\n    }\n    return this.data.get(dataId);\n  }\n  set(dataId, value) {\n    this.dataIdsCount++;\n    this.data.set(dataId, value);\n  }\n  has(dataId) {\n    return this.data.has(dataId);\n  }\n  delete(dataId) {\n    this.dataIdsCount--;\n    return this.data.delete(dataId);\n  }\n  numDataIds() {\n    return this.dataIdsCount;\n  }\n};\nvar KernelBackend = class {\n  refCount(dataId) {\n    return notYetImplemented(\"refCount\");\n  }\n  incRef(dataId) {\n    return notYetImplemented(\"incRef\");\n  }\n  timerAvailable() {\n    return true;\n  }\n  time(f) {\n    return notYetImplemented(\"time\");\n  }\n  read(dataId) {\n    return notYetImplemented(\"read\");\n  }\n  readSync(dataId) {\n    return notYetImplemented(\"readSync\");\n  }\n  readToGPU(dataId, options) {\n    return notYetImplemented(\"readToGPU\");\n  }\n  numDataIds() {\n    return notYetImplemented(\"numDataIds\");\n  }\n  disposeData(dataId, force) {\n    return notYetImplemented(\"disposeData\");\n  }\n  write(values, shape, dtype) {\n    return notYetImplemented(\"write\");\n  }\n  move(dataId, values, shape, dtype, refCount) {\n    return notYetImplemented(\"move\");\n  }\n  memory() {\n    return notYetImplemented(\"memory\");\n  }\n  floatPrecision() {\n    return notYetImplemented(\"floatPrecision\");\n  }\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n  dispose() {\n    return notYetImplemented(\"dispose\");\n  }\n};\nfunction notYetImplemented(kernelName) {\n  throw new Error(`'${kernelName}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/util_base.js\nfunction shuffle(array2) {\n  let counter = array2.length;\n  let index = 0;\n  while (counter > 0) {\n    index = Math.random() * counter | 0;\n    counter--;\n    swap(array2, counter, index);\n  }\n}\nfunction shuffleCombo(array2, array22) {\n  if (array2.length !== array22.length) {\n    throw new Error(`Array sizes must match to be shuffled together First array length was ${array2.length}Second array length was ${array22.length}`);\n  }\n  let counter = array2.length;\n  let index = 0;\n  while (counter > 0) {\n    index = Math.random() * counter | 0;\n    counter--;\n    swap(array2, counter, index);\n    swap(array22, counter, index);\n  }\n}\nfunction clamp(min6, x, max6) {\n  return Math.max(min6, Math.min(x, max6));\n}\nfunction nearestLargerEven(val) {\n  return val % 2 === 0 ? val : val + 1;\n}\nfunction swap(object, left, right) {\n  const temp = object[left];\n  object[left] = object[right];\n  object[right] = temp;\n}\nfunction sum(arr) {\n  let sum6 = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum6 += arr[i];\n  }\n  return sum6;\n}\nfunction randUniform(a, b) {\n  const r = Math.random();\n  return b * r + (1 - r) * a;\n}\nfunction distSquared(a, b) {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n  return result;\n}\nfunction assert(expr, msg) {\n  if (!expr) {\n    throw new Error(typeof msg === \"string\" ? msg : msg());\n  }\n}\nfunction assertShapesMatch(shapeA, shapeB, errorMessagePrefix = \"\") {\n  assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nfunction assertNonNull(a) {\n  assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n}\nfunction flatten(arr, result = [], skipTypedArray = false) {\n  if (result == null) {\n    result = [];\n  }\n  if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    result.push(arr);\n  }\n  return result;\n}\nfunction sizeFromShape(shape) {\n  if (shape.length === 0) {\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nfunction isScalarShape(shape) {\n  return shape.length === 0;\n}\nfunction arraysEqual(n1, n2) {\n  if (n1 === n2) {\n    return true;\n  }\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isInt(a) {\n  return a % 1 === 0;\n}\nfunction tanh(x) {\n  if (Math.tanh != null) {\n    return Math.tanh(x);\n  }\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\nfunction sizeToSquarishShape(size) {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nfunction createShuffledIndices(n) {\n  const shuffledIndices = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\nfunction rightPad(a, size) {\n  if (size <= a.length) {\n    return a;\n  }\n  return a + \" \".repeat(size - a.length);\n}\nfunction repeatedTry(checkFn, delayFn = (counter) => 0, maxCounter) {\n  return new Promise((resolve, reject) => {\n    let tryCount = 0;\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n      tryCount++;\n      const nextBackoff = delayFn(tryCount);\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n    tryFn();\n  });\n}\nfunction inferFromImplicitShape(shape, size) {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n    return shape;\n  }\n  if (shapeProd === 0) {\n    throw Error(`Cannot infer the missing size in [${shape}] when there are 0 elements`);\n  }\n  if (size % shapeProd !== 0) {\n    throw Error(`The implicit shape can't be a fractional number. Got ${size} / ${shapeProd}`);\n  }\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\nfunction parseAxisParam(axis, shape) {\n  const rank = shape.length;\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n  assert(axis.every((ax) => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but got axis ${axis}`);\n  assert(axis.every((ax) => isInt(ax)), () => `All values in axis param must be integers but got axis ${axis}`);\n  return axis.map((a) => a < 0 ? rank + a : a);\n}\nfunction squeezeShape(shape, axis) {\n  const newShape = [];\n  const keptDims = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return { newShape, keptDims };\n}\nfunction getTypedArrayFromDType(dtype, size) {\n  let values = null;\n  if (dtype == null || dtype === \"float32\") {\n    values = new Float32Array(size);\n  } else if (dtype === \"int32\") {\n    values = new Int32Array(size);\n  } else if (dtype === \"bool\") {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values;\n}\nfunction getArrayFromDType(dtype, size) {\n  let values = null;\n  if (dtype == null || dtype === \"float32\") {\n    values = new Float32Array(size);\n  } else if (dtype === \"int32\") {\n    values = new Int32Array(size);\n  } else if (dtype === \"bool\") {\n    values = new Uint8Array(size);\n  } else if (dtype === \"string\") {\n    values = new Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values;\n}\nfunction checkConversionForErrors(vals, dtype) {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\nfunction isValidDtype(dtype) {\n  return dtype === \"bool\" || dtype === \"complex64\" || dtype === \"float32\" || dtype === \"int32\" || dtype === \"string\";\n}\nfunction hasEncodingLoss(oldType, newType) {\n  if (newType === \"complex64\") {\n    return false;\n  }\n  if (newType === \"float32\" && oldType !== \"complex64\") {\n    return false;\n  }\n  if (newType === \"int32\" && oldType !== \"float32\" && oldType !== \"complex64\") {\n    return false;\n  }\n  if (newType === \"bool\" && oldType === \"bool\") {\n    return false;\n  }\n  return true;\n}\nfunction isTypedArray(a) {\n  return a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array || a instanceof Uint8ClampedArray;\n}\nfunction bytesPerElement(dtype) {\n  if (dtype === \"float32\" || dtype === \"int32\") {\n    return 4;\n  } else if (dtype === \"complex64\") {\n    return 8;\n  } else if (dtype === \"bool\") {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\nfunction bytesFromStringArray(arr) {\n  if (arr == null) {\n    return 0;\n  }\n  let bytes = 0;\n  arr.forEach((x) => bytes += x.length);\n  return bytes;\n}\nfunction isString(value) {\n  return typeof value === \"string\" || value instanceof String;\n}\nfunction isBoolean(value) {\n  return typeof value === \"boolean\";\n}\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\nfunction inferDtype(values) {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n  if (values instanceof Float32Array) {\n    return \"float32\";\n  } else if (values instanceof Int32Array || values instanceof Uint8Array || values instanceof Uint8ClampedArray) {\n    return \"int32\";\n  } else if (isNumber(values)) {\n    return \"float32\";\n  } else if (isString(values)) {\n    return \"string\";\n  } else if (isBoolean(values)) {\n    return \"bool\";\n  }\n  return \"float32\";\n}\nfunction isFunction(f) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\nfunction nearestDivisor(size, start) {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n  return size;\n}\nfunction computeStrides(shape) {\n  const rank = shape.length;\n  if (rank < 2) {\n    return [];\n  }\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n  return strides;\n}\nfunction createNestedArray(offset, shape, a, isComplex = false) {\n  const ret = new Array();\n  if (shape.length === 1) {\n    const d = shape[0] * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n    }\n  }\n  return ret;\n}\nfunction toNestedArray(shape, a, isComplex = false) {\n  if (shape.length === 0) {\n    return a[0];\n  }\n  const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n  if (size === 0) {\n    return [];\n  }\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size ${a.length}${isComplex ? \" for a complex tensor\" : \"\"}.`);\n  }\n  return createNestedArray(0, shape, a, isComplex);\n}\nfunction makeOnesTypedArray(size, dtype) {\n  const array2 = makeZerosTypedArray(size, dtype);\n  for (let i = 0; i < array2.length; i++) {\n    array2[i] = 1;\n  }\n  return array2;\n}\nfunction makeZerosTypedArray(size, dtype) {\n  if (dtype == null || dtype === \"float32\" || dtype === \"complex64\") {\n    return new Float32Array(size);\n  } else if (dtype === \"int32\") {\n    return new Int32Array(size);\n  } else if (dtype === \"bool\") {\n    return new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\nfunction makeZerosNestedTypedArray(shape, dtype) {\n  const size = shape.reduce((prev, curr) => prev * curr, 1);\n  if (dtype == null || dtype === \"float32\") {\n    return toNestedArray(shape, new Float32Array(size));\n  } else if (dtype === \"int32\") {\n    return toNestedArray(shape, new Int32Array(size));\n  } else if (dtype === \"bool\") {\n    return toNestedArray(shape, new Uint8Array(size));\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\nfunction assertNonNegativeIntegerDimensions(shape) {\n  shape.forEach((dimSize) => {\n    assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${shape}].`);\n  });\n}\nfunction locToIndex(locs, rank, strides) {\n  if (rank === 0) {\n    return 0;\n  } else if (rank === 1) {\n    return locs[0];\n  }\n  let index = locs[locs.length - 1];\n  for (let i = 0; i < locs.length - 1; ++i) {\n    index += strides[i] * locs[i];\n  }\n  return index;\n}\nfunction indexToLoc(index, rank, strides) {\n  if (rank === 0) {\n    return [];\n  } else if (rank === 1) {\n    return [index];\n  }\n  const locs = new Array(rank);\n  for (let i = 0; i < locs.length - 1; ++i) {\n    locs[i] = Math.floor(index / strides[i]);\n    index -= locs[i] * strides[i];\n  }\n  locs[locs.length - 1] = index;\n  return locs;\n}\nfunction isPromise(object) {\n  return object && object.then && typeof object.then === \"function\";\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/environment.js\nvar TENSORFLOWJS_FLAGS_PREFIX = \"tfjsflags\";\nvar Environment = class {\n  constructor(global2) {\n    this.global = global2;\n    this.flags = {};\n    this.flagRegistry = {};\n    this.urlFlags = {};\n    this.getQueryParams = getQueryParams;\n    this.populateURLFlags();\n  }\n  setPlatform(platformName, platform) {\n    if (this.platform != null) {\n      if (!(env().getBool(\"IS_TEST\") || env().getBool(\"PROD\"))) {\n        console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${platform}.`);\n      }\n    }\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n  registerFlag(flagName, evaluationFn, setHook) {\n    this.flagRegistry[flagName] = { evaluationFn, setHook };\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      if (!(env().getBool(\"IS_TEST\") || env().getBool(\"PROD\"))) {\n        console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);\n      }\n      this.set(flagName, flagValue);\n    }\n  }\n  async getAsync(flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n    this.flags[flagName] = await this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  }\n  get(flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n    const flagValue = this.evaluateFlag(flagName);\n    if (isPromise(flagValue)) {\n      throw new Error(`Flag ${flagName} cannot be synchronously evaluated. Please use getAsync() instead.`);\n    }\n    this.flags[flagName] = flagValue;\n    return this.flags[flagName];\n  }\n  getNumber(flagName) {\n    return this.get(flagName);\n  }\n  getBool(flagName) {\n    return this.get(flagName);\n  }\n  getFlags() {\n    return this.flags;\n  }\n  get features() {\n    return this.flags;\n  }\n  set(flagName, value) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);\n    }\n    this.flags[flagName] = value;\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n  evaluateFlag(flagName) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n  setFlags(flags) {\n    this.flags = Object.assign({}, flags);\n  }\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n  populateURLFlags() {\n    if (typeof this.global === \"undefined\" || typeof this.global.location === \"undefined\" || typeof this.global.location.search === \"undefined\") {\n      return;\n    }\n    const urlParams = this.getQueryParams(this.global.location.search);\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(\",\");\n      keyValues.forEach((keyValue) => {\n        const [key, value] = keyValue.split(\":\");\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n};\nfunction getQueryParams(queryString) {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join(\"=\");\n  });\n  return params;\n}\nfunction decodeParam(params, name, value) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || \"\");\n}\nfunction parseValue(flagName, value) {\n  value = value.toLowerCase();\n  if (value === \"true\" || value === \"false\") {\n    return value === \"true\";\n  } else if (`${+value}` === value) {\n    return +value;\n  }\n  throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);\n}\nfunction env() {\n  return ENV;\n}\nvar ENV = null;\nfunction setEnvironmentGlobal(environment) {\n  ENV = environment;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/global_util.js\nvar globalNameSpace;\nfunction getGlobalNamespace() {\n  if (globalNameSpace == null) {\n    let ns;\n    if (typeof window !== \"undefined\") {\n      ns = window;\n    } else if (typeof global !== \"undefined\") {\n      ns = global;\n    } else if (typeof process !== \"undefined\") {\n      ns = process;\n    } else if (typeof self !== \"undefined\") {\n      ns = self;\n    } else {\n      throw new Error(\"Could not find a global object\");\n    }\n    globalNameSpace = ns;\n  }\n  return globalNameSpace;\n}\nfunction getGlobalMap() {\n  const ns = getGlobalNamespace();\n  if (ns._tfGlobals == null) {\n    ns._tfGlobals = /* @__PURE__ */ new Map();\n  }\n  return ns._tfGlobals;\n}\nfunction getGlobal(key, init2) {\n  const globalMap = getGlobalMap();\n  if (globalMap.has(key)) {\n    return globalMap.get(key);\n  } else {\n    const singleton = init2();\n    globalMap.set(key, singleton);\n    return globalMap.get(key);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/kernel_names.js\nvar Abs = \"Abs\";\nvar Acos = \"Acos\";\nvar Acosh = \"Acosh\";\nvar Add = \"Add\";\nvar AddN = \"AddN\";\nvar All = \"All\";\nvar Any = \"Any\";\nvar ArgMax = \"ArgMax\";\nvar ArgMin = \"ArgMin\";\nvar Asin = \"Asin\";\nvar Asinh = \"Asinh\";\nvar Atan = \"Atan\";\nvar Atanh = \"Atanh\";\nvar Atan2 = \"Atan2\";\nvar AvgPool = \"AvgPool\";\nvar AvgPoolGrad = \"AvgPoolGrad\";\nvar AvgPool3D = \"AvgPool3D\";\nvar AvgPool3DGrad = \"AvgPool3DGrad\";\nvar BatchMatMul = \"BatchMatMul\";\nvar BatchToSpaceND = \"BatchToSpaceND\";\nvar Bincount = \"Bincount\";\nvar BroadcastTo = \"BroadcastTo\";\nvar BroadcastArgs = \"BroadcastArgs\";\nvar Cast = \"Cast\";\nvar Ceil = \"Ceil\";\nvar ClipByValue = \"ClipByValue\";\nvar Complex = \"Complex\";\nvar ComplexAbs = \"ComplexAbs\";\nvar Concat = \"Concat\";\nvar Conv2D = \"Conv2D\";\nvar Conv2DBackpropFilter = \"Conv2DBackpropFilter\";\nvar Conv2DBackpropInput = \"Conv2DBackpropInput\";\nvar Conv3D = \"Conv3D\";\nvar Conv3DBackpropFilterV2 = \"Conv3DBackpropFilterV2\";\nvar Conv3DBackpropInputV2 = \"Conv3DBackpropInputV2\";\nvar Cos = \"Cos\";\nvar Cosh = \"Cosh\";\nvar Cumsum = \"Cumsum\";\nvar CropAndResize = \"CropAndResize\";\nvar DenseBincount = \"DenseBincount\";\nvar DepthToSpace = \"DepthToSpace\";\nvar DepthwiseConv2dNative = \"DepthwiseConv2dNative\";\nvar DepthwiseConv2dNativeBackpropFilter = \"DepthwiseConv2dNativeBackpropFilter\";\nvar DepthwiseConv2dNativeBackpropInput = \"DepthwiseConv2dNativeBackpropInput\";\nvar Diag = \"Diag\";\nvar Dilation2D = \"Dilation2D\";\nvar Dilation2DBackpropInput = \"Dilation2DBackpropInput\";\nvar Dilation2DBackpropFilter = \"Dilation2DBackpropFilter\";\nvar RealDiv = \"RealDiv\";\nvar Einsum = \"Einsum\";\nvar Elu = \"Elu\";\nvar EluGrad = \"EluGrad\";\nvar Erf = \"Erf\";\nvar Equal = \"Equal\";\nvar Exp = \"Exp\";\nvar ExpandDims = \"ExpandDims\";\nvar Expm1 = \"Expm1\";\nvar FFT = \"FFT\";\nvar Fill = \"Fill\";\nvar FlipLeftRight = \"FlipLeftRight\";\nvar Floor = \"Floor\";\nvar FloorDiv = \"FloorDiv\";\nvar FusedBatchNorm = \"FusedBatchNorm\";\nvar GatherV2 = \"GatherV2\";\nvar GatherNd = \"GatherNd\";\nvar Greater = \"Greater\";\nvar GreaterEqual = \"GreaterEqual\";\nvar Identity = \"Identity\";\nvar IFFT = \"IFFT\";\nvar Imag = \"Imag\";\nvar IsFinite = \"IsFinite\";\nvar IsInf = \"IsInf\";\nvar IsNan = \"IsNan\";\nvar LeakyRelu = \"LeakyRelu\";\nvar Less = \"Less\";\nvar LessEqual = \"LessEqual\";\nvar LinSpace = \"LinSpace\";\nvar Log = \"Log\";\nvar Log1p = \"Log1p\";\nvar LogicalAnd = \"LogicalAnd\";\nvar LogicalNot = \"LogicalNot\";\nvar LogicalOr = \"LogicalOr\";\nvar LogSoftmax = \"LogSoftmax\";\nvar LRN = \"LRN\";\nvar LRNGrad = \"LRNGrad\";\nvar Max = \"Max\";\nvar Maximum = \"Maximum\";\nvar MaxPool = \"MaxPool\";\nvar MaxPoolGrad = \"MaxPoolGrad\";\nvar MaxPool3D = \"MaxPool3D\";\nvar MaxPool3DGrad = \"MaxPool3DGrad\";\nvar MaxPoolWithArgmax = \"MaxPoolWithArgmax\";\nvar Mean = \"Mean\";\nvar Min = \"Min\";\nvar Minimum = \"Minimum\";\nvar MirrorPad = \"MirrorPad\";\nvar Mod = \"Mod\";\nvar Multinomial = \"Multinomial\";\nvar Multiply = \"Multiply\";\nvar Neg = \"Neg\";\nvar NotEqual = \"NotEqual\";\nvar NonMaxSuppressionV3 = \"NonMaxSuppressionV3\";\nvar NonMaxSuppressionV4 = \"NonMaxSuppressionV4\";\nvar NonMaxSuppressionV5 = \"NonMaxSuppressionV5\";\nvar OnesLike = \"OnesLike\";\nvar OneHot = \"OneHot\";\nvar Pack = \"Pack\";\nvar PadV2 = \"PadV2\";\nvar Pool = \"Pool\";\nvar Pow = \"Pow\";\nvar Prelu = \"Prelu\";\nvar Prod = \"Prod\";\nvar Range = \"Range\";\nvar Real = \"Real\";\nvar Reciprocal = \"Reciprocal\";\nvar Relu = \"Relu\";\nvar Reshape = \"Reshape\";\nvar ResizeNearestNeighbor = \"ResizeNearestNeighbor\";\nvar ResizeNearestNeighborGrad = \"ResizeNearestNeighborGrad\";\nvar ResizeBilinear = \"ResizeBilinear\";\nvar ResizeBilinearGrad = \"ResizeBilinearGrad\";\nvar Relu6 = \"Relu6\";\nvar Reverse = \"Reverse\";\nvar Round = \"Round\";\nvar Rsqrt = \"Rsqrt\";\nvar ScatterNd = \"ScatterNd\";\nvar Select = \"Select\";\nvar Selu = \"Selu\";\nvar Slice = \"Slice\";\nvar Sin = \"Sin\";\nvar Sinh = \"Sinh\";\nvar Sign = \"Sign\";\nvar Sigmoid = \"Sigmoid\";\nvar Softplus = \"Softplus\";\nvar Sqrt = \"Sqrt\";\nvar Sum = \"Sum\";\nvar SpaceToBatchND = \"SpaceToBatchND\";\nvar SplitV = \"SplitV\";\nvar Softmax = \"Softmax\";\nvar SparseFillEmptyRows = \"SparseFillEmptyRows\";\nvar SparseReshape = \"SparseReshape\";\nvar SparseSegmentMean = \"SparseSegmentMean\";\nvar SparseSegmentSum = \"SparseSegmentSum\";\nvar SparseToDense = \"SparseToDense\";\nvar SquaredDifference = \"SquaredDifference\";\nvar Square = \"Square\";\nvar StridedSlice = \"StridedSlice\";\nvar StringNGrams = \"StringNGrams\";\nvar StringSplit = \"StringSplit\";\nvar StringToHashBucketFast = \"StringToHashBucketFast\";\nvar Sub = \"Sub\";\nvar Tan = \"Tan\";\nvar Tanh = \"Tanh\";\nvar Tile = \"Tile\";\nvar TopK = \"TopK\";\nvar Transform = \"Transform\";\nvar Transpose = \"Transpose\";\nvar Unique = \"Unique\";\nvar Unpack = \"Unpack\";\nvar UnsortedSegmentSum = \"UnsortedSegmentSum\";\nvar ZerosLike = \"ZerosLike\";\nvar Step = \"Step\";\nvar FromPixels = \"FromPixels\";\nvar RotateWithOffset = \"RotateWithOffset\";\nvar _FusedMatMul = \"_FusedMatMul\";\nvar FusedConv2D = \"FusedConv2D\";\nvar FusedDepthwiseConv2D = \"FusedDepthwiseConv2D\";\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/log.js\nfunction warn(...msg) {\n  if (!(env().getBool(\"IS_TEST\") || env().getBool(\"PROD\"))) {\n    console.warn(...msg);\n  }\n}\nfunction log(...msg) {\n  if (!(env().getBool(\"IS_TEST\") || env().getBool(\"PROD\"))) {\n    console.log(...msg);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js\nvar kernelRegistry = getGlobal(\"kernelRegistry\", () => /* @__PURE__ */ new Map());\nvar gradRegistry = getGlobal(\"gradRegistry\", () => /* @__PURE__ */ new Map());\nfunction getKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\nfunction getGradient(kernelName) {\n  return gradRegistry.get(kernelName);\n}\nfunction getKernelsForBackend(backendName) {\n  const it = kernelRegistry.entries();\n  const result = [];\n  while (true) {\n    const { done, value } = it.next();\n    if (done) {\n      break;\n    }\n    const [key, config] = value;\n    const [backend2] = key.split(\"_\");\n    if (backend2 === backendName) {\n      result.push(config);\n    }\n  }\n  return result;\n}\nfunction registerKernel(config) {\n  const { kernelName, backendName } = config;\n  const key = makeKey(kernelName, backendName);\n  if (kernelRegistry.has(key)) {\n    warn(`The kernel '${kernelName}' for backend '${backendName}' is already registered`);\n  }\n  kernelRegistry.set(key, config);\n}\nfunction registerGradient(config) {\n  const { kernelName } = config;\n  if (gradRegistry.has(kernelName)) {\n    if (env().getBool(\"DEBUG\")) {\n      warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n  gradRegistry.set(kernelName, config);\n}\nfunction unregisterKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n  if (!kernelRegistry.has(key)) {\n    throw new Error(`The kernel '${kernelName}' for backend '${backendName}' is not registered`);\n  }\n  kernelRegistry.delete(key);\n}\nfunction unregisterGradient(kernelName) {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n  }\n  gradRegistry.delete(kernelName);\n}\nfunction copyRegisteredKernels(registeredBackendName, newBackendName) {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach((kernelConfig) => {\n    const newKernelConfig = Object.assign({}, kernelConfig, { backendName: newBackendName });\n    registerKernel(newKernelConfig);\n  });\n}\nfunction makeKey(kernelName, backendName) {\n  return `${backendName}_${kernelName}`;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/util.js\nvar util_exports = {};\n__export(util_exports, {\n  arraysEqual: () => arraysEqual,\n  assert: () => assert,\n  assertNonNegativeIntegerDimensions: () => assertNonNegativeIntegerDimensions,\n  assertNonNull: () => assertNonNull,\n  assertShapesMatch: () => assertShapesMatch,\n  bytesFromStringArray: () => bytesFromStringArray,\n  bytesPerElement: () => bytesPerElement,\n  checkConversionForErrors: () => checkConversionForErrors,\n  clamp: () => clamp,\n  computeStrides: () => computeStrides,\n  createScalarValue: () => createScalarValue,\n  createShuffledIndices: () => createShuffledIndices,\n  decodeString: () => decodeString,\n  distSquared: () => distSquared,\n  encodeString: () => encodeString,\n  fetch: () => fetch3,\n  fingerPrint64: () => fingerPrint64,\n  flatten: () => flatten,\n  getArrayFromDType: () => getArrayFromDType,\n  getTypedArrayFromDType: () => getTypedArrayFromDType,\n  hasEncodingLoss: () => hasEncodingLoss,\n  hexToLong: () => hexToLong,\n  indexToLoc: () => indexToLoc,\n  inferDtype: () => inferDtype,\n  inferFromImplicitShape: () => inferFromImplicitShape,\n  isBoolean: () => isBoolean,\n  isFunction: () => isFunction,\n  isInt: () => isInt,\n  isNumber: () => isNumber,\n  isPromise: () => isPromise,\n  isScalarShape: () => isScalarShape,\n  isString: () => isString,\n  isTypedArray: () => isTypedArray,\n  isValidDtype: () => isValidDtype,\n  locToIndex: () => locToIndex,\n  makeOnesTypedArray: () => makeOnesTypedArray,\n  makeZerosNestedTypedArray: () => makeZerosNestedTypedArray,\n  makeZerosTypedArray: () => makeZerosTypedArray,\n  nearestDivisor: () => nearestDivisor,\n  nearestLargerEven: () => nearestLargerEven,\n  now: () => now,\n  parseAxisParam: () => parseAxisParam,\n  randUniform: () => randUniform,\n  repeatedTry: () => repeatedTry,\n  rightPad: () => rightPad,\n  shuffle: () => shuffle,\n  shuffleCombo: () => shuffleCombo,\n  sizeFromShape: () => sizeFromShape,\n  sizeToSquarishShape: () => sizeToSquarishShape,\n  squeezeShape: () => squeezeShape,\n  sum: () => sum,\n  swap: () => swap,\n  tanh: () => tanh,\n  toNestedArray: () => toNestedArray,\n  toTypedArray: () => toTypedArray\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/hash_util.js\nvar LongExports = __toESM(require_long());\nvar Long = LongExports.default || LongExports;\nfunction hexToLong(hex) {\n  return Long.fromString(hex, true, 16);\n}\nvar k0 = hexToLong(\"c3a5c85c97cb3127\");\nvar k1 = hexToLong(\"b492b66fbe98f273\");\nvar k2 = hexToLong(\"9ae16a3b2f90404f\");\nfunction shiftMix(val) {\n  return val.xor(val.shru(47));\n}\nfunction fetch2(s, offset, numBytes) {\n  const bytes = s.slice(offset, offset + numBytes);\n  return Long.fromBytes(Array.from(bytes), true, true);\n}\nfunction fetch64(s, offset) {\n  return fetch2(s, offset, 8);\n}\nfunction fetch32(s, offset) {\n  return fetch2(s, offset, 4);\n}\nfunction rotate64(val, shift) {\n  return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));\n}\nfunction hashLen16(u, v, mul2 = hexToLong(\"9ddfea08eb382d69\")) {\n  let a = u.xor(v).mul(mul2);\n  a = a.xor(a.shru(47));\n  let b = v.xor(a).mul(mul2);\n  b = b.xor(b.shru(47));\n  b = b.mul(mul2);\n  return b;\n}\nfunction weakHashLen32WithSeeds(w, x, y, z, a, b) {\n  a = a.add(w);\n  b = rotate64(b.add(a).add(z), 21);\n  const c = a;\n  a = a.add(x);\n  a = a.add(y);\n  b = b.add(rotate64(a, 44));\n  return [a.add(z), b.add(c)];\n}\nfunction weakHashLen32WithSeedsStr(s, offset, a, b) {\n  return weakHashLen32WithSeeds(fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16), fetch64(s, offset + 24), a, b);\n}\nfunction hashLen0to16(s, len = s.length) {\n  if (len >= 8) {\n    const mul2 = k2.add(len * 2);\n    const a = fetch64(s, 0).add(k2);\n    const b = fetch64(s, len - 8);\n    const c = rotate64(b, 37).mul(mul2).add(a);\n    const d = rotate64(a, 25).add(b).mul(mul2);\n    return hashLen16(c, d, mul2);\n  }\n  if (len >= 4) {\n    const mul2 = k2.add(len * 2);\n    const a = fetch32(s, 0);\n    return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul2);\n  }\n  if (len > 0) {\n    const a = s[0];\n    const b = s[len >> 1];\n    const c = s[len - 1];\n    const y = a + (b << 8);\n    const z = len + (c << 2);\n    return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);\n  }\n  return k2;\n}\nfunction hashLen17to32(s, len = s.length) {\n  const mul2 = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k1);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul2);\n  const d = fetch64(s, len - 16).mul(k2);\n  return hashLen16(rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d), a.add(rotate64(b.add(k2), 18)).add(c), mul2);\n}\nfunction hashLen33to64(s, len = s.length) {\n  const mul2 = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k2);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul2);\n  const d = fetch64(s, len - 16).mul(k2);\n  const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);\n  const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul2);\n  const e = fetch64(s, 16).mul(mul2);\n  const f = fetch64(s, 24);\n  const g = y.add(fetch64(s, len - 32)).mul(mul2);\n  const h = z.add(fetch64(s, len - 24)).mul(mul2);\n  return hashLen16(rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h), e.add(rotate64(f.add(a), 18)).add(g), mul2);\n}\nfunction fingerPrint64(s, len = s.length) {\n  const seed = Long.fromNumber(81, true);\n  if (len <= 32) {\n    if (len <= 16) {\n      return hashLen0to16(s, len);\n    } else {\n      return hashLen17to32(s, len);\n    }\n  } else if (len <= 64) {\n    return hashLen33to64(s, len);\n  }\n  let x = seed;\n  let y = seed.mul(k1).add(113);\n  let z = shiftMix(y.mul(k2).add(113)).mul(k2);\n  let v = [Long.UZERO, Long.UZERO];\n  let w = [Long.UZERO, Long.UZERO];\n  x = x.mul(k2).add(fetch64(s, 0));\n  let offset = 0;\n  const end = (len - 1 >> 6) * 64;\n  const last64 = end + (len - 1 & 63) - 63;\n  do {\n    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);\n    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);\n    x = x.xor(w[1]);\n    y = y.add(v[0]).add(fetch64(s, offset + 40));\n    z = rotate64(z.add(w[0]), 33).mul(k1);\n    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));\n    w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n    [z, x] = [x, z];\n    offset += 64;\n  } while (offset !== end);\n  const mul2 = k1.add(z.and(255).shl(1));\n  offset = last64;\n  w[0] = w[0].add(len - 1 & 63);\n  v[0] = v[0].add(w[0]);\n  w[0] = w[0].add(v[0]);\n  x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul2);\n  y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul2);\n  x = x.xor(w[1].mul(9));\n  y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));\n  z = rotate64(z.add(w[0]), 33).mul(mul2);\n  v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul2), x.add(w[0]));\n  w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n  [z, x] = [x, z];\n  return hashLen16(hashLen16(v[0], w[0], mul2).add(shiftMix(y).mul(k0)).add(z), hashLen16(v[1], w[1], mul2).add(x), mul2);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/util.js\nfunction createScalarValue(value, dtype) {\n  if (dtype === \"string\") {\n    return encodeString(value);\n  }\n  return toTypedArray([value], dtype);\n}\nfunction noConversionNeeded(a, dtype) {\n  return a instanceof Float32Array && dtype === \"float32\" || a instanceof Int32Array && dtype === \"int32\" || a instanceof Uint8Array && dtype === \"bool\";\n}\nfunction toTypedArray(a, dtype) {\n  if (dtype === \"string\") {\n    throw new Error(\"Cannot convert a string[] to a TypedArray\");\n  }\n  if (Array.isArray(a)) {\n    a = flatten(a);\n  }\n  if (env().getBool(\"DEBUG\")) {\n    checkConversionForErrors(a, dtype);\n  }\n  if (noConversionNeeded(a, dtype)) {\n    return a;\n  }\n  if (dtype == null || dtype === \"float32\" || dtype === \"complex64\") {\n    return new Float32Array(a);\n  } else if (dtype === \"int32\") {\n    return new Int32Array(a);\n  } else if (dtype === \"bool\") {\n    const bool = new Uint8Array(a.length);\n    for (let i = 0; i < bool.length; ++i) {\n      if (Math.round(a[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n    return bool;\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\nfunction now() {\n  return env().platform.now();\n}\nfunction fetch3(path, requestInits) {\n  return env().platform.fetch(path, requestInits);\n}\nfunction encodeString(s, encoding = \"utf-8\") {\n  encoding = encoding || \"utf-8\";\n  return env().platform.encode(s, encoding);\n}\nfunction decodeString(bytes, encoding = \"utf-8\") {\n  encoding = encoding || \"utf-8\";\n  return env().platform.decode(bytes, encoding);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/profiler.js\nvar Profiler = class {\n  constructor(backendTimer, logger) {\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n  profileKernel(kernelName, inputs, f) {\n    let outputs;\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    let timer;\n    const start = now();\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n      for (const output of outputs) {\n        output.dataSync();\n      }\n      timer = Promise.resolve({ kernelMs: now() - start });\n    }\n    if (env().getBool(\"CHECK_COMPUTATION_FOR_ERRORS\")) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        output.data().then((tensorVals) => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then((timing) => timing.kernelMs),\n      extraInfo: timer.then((timing) => timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : \"\")\n    };\n    return kernelProfile;\n  }\n  logKernelProfile(kernelProfile) {\n    const { kernelName, outputs, timeMs, inputs, extraInfo } = kernelProfile;\n    outputs.forEach((result) => {\n      Promise.all([result.data(), timeMs, extraInfo]).then((valueContainer) => {\n        this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n      });\n    });\n  }\n};\nfunction checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== \"float32\") {\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n    if (isNaN(num) || !isFinite(num)) {\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\nvar Logger = class {\n  logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n    const time2 = typeof timeMs === \"number\" ? rightPad(`${timeMs}ms`, 9) : timeMs[\"error\"];\n    const paddedName = rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = \"\";\n    for (const name2 in inputs) {\n      const input2 = inputs[name2];\n      if (input2 != null) {\n        const inputShape = input2.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription += `${name2}: ${inputRank}D ${inputRank > 0 ? inputShape : \"\"} `;\n      }\n    }\n    console.log(`%c${paddedName}\t%c${time2}\t%c${rank}D ${shape}\t%c${size}\t%c${inputShapesDescription}\t%c${extraInfo}`, \"font-weight:bold\", \"color:red\", \"color:blue\", \"color: orange\", \"color: green\", \"color: steelblue\");\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/tape.js\nfunction getFilteredNodesXToY(tape, xs, y) {\n  const tensorsFromX = {};\n  const nodesFromX = {};\n  for (let i = 0; i < xs.length; i++) {\n    tensorsFromX[xs[i].id] = true;\n  }\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n    for (const inputName in nodeInputs) {\n      const input2 = nodeInputs[inputName];\n      let anyInputFromX = false;\n      for (let j = 0; j < xs.length; j++) {\n        if (tensorsFromX[input2.id]) {\n          node.outputs.forEach((output) => tensorsFromX[output.id] = true);\n          anyInputFromX = true;\n          nodesFromX[node.id] = true;\n          break;\n        }\n      }\n      if (anyInputFromX) {\n        break;\n      }\n    }\n  }\n  const tensorsLeadToY = {};\n  tensorsLeadToY[y.id] = true;\n  const nodesToY = {};\n  for (let i = tape.length - 1; i >= 0; i--) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n    for (let j = 0; j < node.outputs.length; j++) {\n      if (tensorsLeadToY[node.outputs[j].id]) {\n        for (const inputName in nodeInputs) {\n          tensorsLeadToY[nodeInputs[inputName].id] = true;\n          nodesToY[node.id] = true;\n        }\n        break;\n      }\n    }\n  }\n  const filteredTape = [];\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    if (nodesFromX[node.id] && nodesToY[node.id]) {\n      const prunedInputs = {};\n      for (const inputName in node.inputs) {\n        const nodeInput = node.inputs[inputName];\n        if (tensorsFromX[nodeInput.id]) {\n          prunedInputs[inputName] = nodeInput;\n        }\n      }\n      const prunedNode = Object.assign({}, node);\n      prunedNode.inputs = prunedInputs;\n      prunedNode.outputs = node.outputs;\n      filteredTape.push(prunedNode);\n    }\n  }\n  return filteredTape;\n}\nfunction backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy2, add5) {\n  for (let i = filteredTape.length - 1; i >= 0; i--) {\n    const node = filteredTape[i];\n    const dys = [];\n    node.outputs.forEach((o) => {\n      const gradTensor = tensorAccumulatedGradientMap[o.id];\n      if (gradTensor != null) {\n        dys.push(gradTensor);\n      } else {\n        dys.push(null);\n      }\n    });\n    if (node.gradient == null) {\n      throw new Error(`Cannot compute gradient: gradient function not found for ${node.kernelName}.`);\n    }\n    const inputGradients = node.gradient(dys);\n    for (const inputName in node.inputs) {\n      if (!(inputName in inputGradients)) {\n        throw new Error(`Cannot backprop through input ${inputName}. Available gradients found: ${Object.keys(inputGradients)}.`);\n      }\n      const dx = tidy2(() => inputGradients[inputName]());\n      if (dx.dtype !== \"float32\") {\n        throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n      }\n      const x = node.inputs[inputName];\n      if (!arraysEqual(dx.shape, x.shape)) {\n        throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input '${inputName}' has shape '${dx.shape}', which does not match the shape of the input '${x.shape}'`);\n      }\n      if (tensorAccumulatedGradientMap[x.id] == null) {\n        tensorAccumulatedGradientMap[x.id] = dx;\n      } else {\n        const curGradient = tensorAccumulatedGradientMap[x.id];\n        tensorAccumulatedGradientMap[x.id] = add5(curGradient, dx);\n        curGradient.dispose();\n      }\n    }\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/tensor_format.js\nvar FORMAT_LIMIT_NUM_VALS = 20;\nvar FORMAT_NUM_FIRST_LAST_VALS = 3;\nvar FORMAT_NUM_SIG_DIGITS = 7;\nfunction tensorToString(vals, shape, dtype, verbose) {\n  const strides = computeStrides(shape);\n  const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n  const rank = shape.length;\n  const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n  const lines = [\"Tensor\"];\n  if (verbose) {\n    lines.push(`  dtype: ${dtype}`);\n    lines.push(`  rank: ${rank}`);\n    lines.push(`  shape: [${shape}]`);\n    lines.push(`  values:`);\n  }\n  lines.push(valsLines.map((l) => \"    \" + l).join(\"\\n\"));\n  return lines.join(\"\\n\");\n}\nfunction computeMaxSizePerColumn(vals, shape, dtype, strides) {\n  const n = sizeFromShape(shape);\n  const numCols = strides[strides.length - 1];\n  const padPerCol = new Array(numCols).fill(0);\n  const rank = shape.length;\n  const valuesOrTuples = dtype === \"complex64\" ? createComplexTuples(vals) : vals;\n  if (rank > 1) {\n    for (let row = 0; row < n / numCols; row++) {\n      const offset = row * numCols;\n      for (let j = 0; j < numCols; j++) {\n        padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);\n      }\n    }\n  }\n  return padPerCol;\n}\nfunction valToString(val, pad3, dtype) {\n  let valStr;\n  if (Array.isArray(val)) {\n    valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;\n  } else if (isString(val)) {\n    valStr = `'${val}'`;\n  } else if (dtype === \"bool\") {\n    valStr = boolNumToString(val);\n  } else {\n    valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n  }\n  return rightPad(valStr, pad3);\n}\nfunction boolNumToString(v) {\n  return v === 0 ? \"false\" : \"true\";\n}\nfunction subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {\n  const storagePerElement = dtype === \"complex64\" ? 2 : 1;\n  const size = shape[0];\n  const rank = shape.length;\n  if (rank === 0) {\n    if (dtype === \"complex64\") {\n      const complexTuple = createComplexTuples(vals);\n      return [valToString(complexTuple[0], 0, dtype)];\n    }\n    if (dtype === \"bool\") {\n      return [boolNumToString(vals[0])];\n    }\n    return [vals[0].toString()];\n  }\n  if (rank === 1) {\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n      const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n      let firstVals = Array.from(vals.slice(0, firstValsSize));\n      let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));\n      if (dtype === \"complex64\") {\n        firstVals = createComplexTuples(firstVals);\n        lastVals = createComplexTuples(lastVals);\n      }\n      return [\n        \"[\" + firstVals.map((x, i) => valToString(x, padPerCol[i], dtype)).join(\", \") + \", ..., \" + lastVals.map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype)).join(\", \") + \"]\"\n      ];\n    }\n    const displayVals = dtype === \"complex64\" ? createComplexTuples(vals) : Array.from(vals);\n    return [\n      \"[\" + displayVals.map((x, i) => valToString(x, padPerCol[i], dtype)).join(\", \") + \"]\"\n    ];\n  }\n  const subshape = shape.slice(1);\n  const substrides = strides.slice(1);\n  const stride = strides[0] * storagePerElement;\n  const lines = [];\n  if (size > FORMAT_LIMIT_NUM_VALS) {\n    for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false));\n    }\n    lines.push(\"...\");\n    for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1));\n    }\n  } else {\n    for (let i = 0; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1));\n    }\n  }\n  const sep = rank === 2 ? \",\" : \"\";\n  lines[0] = \"[\" + lines[0] + sep;\n  for (let i = 1; i < lines.length - 1; i++) {\n    lines[i] = \" \" + lines[i] + sep;\n  }\n  let newLineSep = \",\\n\";\n  for (let i = 2; i < rank; i++) {\n    newLineSep += \"\\n\";\n  }\n  lines[lines.length - 1] = \" \" + lines[lines.length - 1] + \"]\" + (isLast ? \"\" : newLineSep);\n  return lines;\n}\nfunction createComplexTuples(vals) {\n  const complexTuples = [];\n  for (let i = 0; i < vals.length; i += 2) {\n    complexTuples.push([vals[i], vals[i + 1]]);\n  }\n  return complexTuples;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/tensor.js\nvar TensorBuffer = class {\n  constructor(shape, dtype, values) {\n    this.dtype = dtype;\n    this.shape = shape.slice();\n    this.size = sizeFromShape(shape);\n    if (values != null) {\n      const n = values.length;\n      assert(n === this.size, () => `Length of values '${n}' does not match the size inferred by the shape '${this.size}'.`);\n    }\n    if (dtype === \"complex64\") {\n      throw new Error(`complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).`);\n    }\n    this.values = values || getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n  set(value, ...locs) {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must match the rank (${this.rank})`);\n    const index = this.locToIndex(locs);\n    this.values[index] = value;\n  }\n  get(...locs) {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    let i = 0;\n    for (const loc of locs) {\n      if (loc < 0 || loc >= this.shape[i]) {\n        const msg = `Requested out of range element at ${locs}.   Buffer shape=${this.shape}`;\n        throw new Error(msg);\n      }\n      i++;\n    }\n    let index = locs[locs.length - 1];\n    for (let i2 = 0; i2 < locs.length - 1; ++i2) {\n      index += this.strides[i2] * locs[i2];\n    }\n    return this.values[index];\n  }\n  locToIndex(locs) {\n    if (this.rank === 0) {\n      return 0;\n    } else if (this.rank === 1) {\n      return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return index;\n  }\n  indexToLoc(index) {\n    if (this.rank === 0) {\n      return [];\n    } else if (this.rank === 1) {\n      return [index];\n    }\n    const locs = new Array(this.shape.length);\n    for (let i = 0; i < locs.length - 1; ++i) {\n      locs[i] = Math.floor(index / this.strides[i]);\n      index -= locs[i] * this.strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n  }\n  get rank() {\n    return this.shape.length;\n  }\n  toTensor() {\n    return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n  }\n};\nvar trackerFn = null;\nvar opHandler = null;\nvar deprecationWarningFn = null;\nfunction setTensorTracker(fn) {\n  trackerFn = fn;\n}\nfunction setOpHandler(handler) {\n  opHandler = handler;\n}\nfunction setDeprecationWarningFn(fn) {\n  deprecationWarningFn = fn;\n}\nvar Tensor = class {\n  constructor(shape, dtype, dataId, id) {\n    this.kept = false;\n    this.isDisposedInternal = false;\n    this.shape = shape.slice();\n    this.dtype = dtype || \"float32\";\n    this.size = sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = this.rank < 5 ? this.rank.toString() : \"higher\";\n  }\n  get rank() {\n    return this.shape.length;\n  }\n  async buffer() {\n    const vals = await this.data();\n    return opHandler.buffer(this.shape, this.dtype, vals);\n  }\n  bufferSync() {\n    return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n  }\n  async array() {\n    const vals = await this.data();\n    return toNestedArray(this.shape, vals, this.dtype === \"complex64\");\n  }\n  arraySync() {\n    return toNestedArray(this.shape, this.dataSync(), this.dtype === \"complex64\");\n  }\n  async data() {\n    this.throwIfDisposed();\n    const data = trackerFn().read(this.dataId);\n    if (this.dtype === \"string\") {\n      const bytes = await data;\n      try {\n        return bytes.map((b) => decodeString(b));\n      } catch (_a) {\n        throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\");\n      }\n    }\n    return data;\n  }\n  dataToGPU(options) {\n    this.throwIfDisposed();\n    return trackerFn().readToGPU(this.dataId, options);\n  }\n  dataSync() {\n    this.throwIfDisposed();\n    const data = trackerFn().readSync(this.dataId);\n    if (this.dtype === \"string\") {\n      try {\n        return data.map((b) => decodeString(b));\n      } catch (_a) {\n        throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\");\n      }\n    }\n    return data;\n  }\n  async bytes() {\n    this.throwIfDisposed();\n    const data = await trackerFn().read(this.dataId);\n    if (this.dtype === \"string\") {\n      return data;\n    } else {\n      return new Uint8Array(data.buffer);\n    }\n  }\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n    trackerFn().disposeTensor(this);\n    this.isDisposedInternal = true;\n  }\n  get isDisposed() {\n    return this.isDisposedInternal;\n  }\n  throwIfDisposed() {\n    if (this.isDisposed) {\n      throw new Error(`Tensor is disposed.`);\n    }\n  }\n  print(verbose = false) {\n    return opHandler.print(this, verbose);\n  }\n  clone() {\n    this.throwIfDisposed();\n    return opHandler.clone(this);\n  }\n  toString(verbose = false) {\n    const vals = this.dataSync();\n    return tensorToString(vals, this.shape, this.dtype, verbose);\n  }\n  cast(dtype) {\n    this.throwIfDisposed();\n    return opHandler.cast(this, dtype);\n  }\n  variable(trainable = true, name, dtype) {\n    this.throwIfDisposed();\n    return trackerFn().makeVariable(this, trainable, name, dtype);\n  }\n};\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: (instance) => {\n    return !!instance && instance.data != null && instance.dataSync != null && instance.throwIfDisposed != null;\n  }\n});\nfunction getGlobalTensorClass() {\n  return getGlobal(\"Tensor\", () => {\n    return Tensor;\n  });\n}\ngetGlobalTensorClass();\nvar Variable = class extends Tensor {\n  constructor(initialValue, trainable, name, tensorId) {\n    super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    this.trainable = trainable;\n    this.name = name;\n  }\n  assign(newValue) {\n    if (newValue.dtype !== this.dtype) {\n      throw new Error(`dtype of the new value (${newValue.dtype}) and previous value (${this.dtype}) must match`);\n    }\n    if (!arraysEqual(newValue.shape, this.shape)) {\n      throw new Error(`shape of the new value (${newValue.shape}) and previous value (${this.shape}) must match`);\n    }\n    trackerFn().disposeTensor(this);\n    this.dataId = newValue.dataId;\n    trackerFn().incRef(this, null);\n  }\n  dispose() {\n    trackerFn().disposeVariable(this);\n    this.isDisposedInternal = true;\n  }\n};\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: (instance) => {\n    return instance instanceof Tensor && instance.assign != null && instance.assign instanceof Function;\n  }\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/tensor_util.js\nvar tensor_util_exports = {};\n__export(tensor_util_exports, {\n  assertTypesMatch: () => assertTypesMatch,\n  getTensorsInContainer: () => getTensorsInContainer,\n  isTensorInList: () => isTensorInList,\n  makeTypesMatch: () => makeTypesMatch\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/types.js\nvar Rank;\n(function(Rank2) {\n  Rank2[\"R0\"] = \"R0\";\n  Rank2[\"R1\"] = \"R1\";\n  Rank2[\"R2\"] = \"R2\";\n  Rank2[\"R3\"] = \"R3\";\n  Rank2[\"R4\"] = \"R4\";\n  Rank2[\"R5\"] = \"R5\";\n  Rank2[\"R6\"] = \"R6\";\n})(Rank || (Rank = {}));\nvar UpcastInt32AndMap;\n(function(UpcastInt32AndMap2) {\n  UpcastInt32AndMap2[\"float32\"] = \"float32\";\n  UpcastInt32AndMap2[\"int32\"] = \"int32\";\n  UpcastInt32AndMap2[\"bool\"] = \"int32\";\n  UpcastInt32AndMap2[\"complex64\"] = \"complex64\";\n})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));\nvar UpcastBoolAndMap;\n(function(UpcastBoolAndMap2) {\n  UpcastBoolAndMap2[\"float32\"] = \"float32\";\n  UpcastBoolAndMap2[\"int32\"] = \"int32\";\n  UpcastBoolAndMap2[\"bool\"] = \"bool\";\n  UpcastBoolAndMap2[\"complex64\"] = \"complex64\";\n})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));\nvar UpcastFloat32AndMap;\n(function(UpcastFloat32AndMap2) {\n  UpcastFloat32AndMap2[\"float32\"] = \"float32\";\n  UpcastFloat32AndMap2[\"int32\"] = \"float32\";\n  UpcastFloat32AndMap2[\"bool\"] = \"float32\";\n  UpcastFloat32AndMap2[\"complex64\"] = \"complex64\";\n})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));\nvar UpcastComplex64AndMap;\n(function(UpcastComplex64AndMap2) {\n  UpcastComplex64AndMap2[\"float32\"] = \"complex64\";\n  UpcastComplex64AndMap2[\"int32\"] = \"complex64\";\n  UpcastComplex64AndMap2[\"bool\"] = \"complex64\";\n  UpcastComplex64AndMap2[\"complex64\"] = \"complex64\";\n})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));\nvar upcastTypeMap = {\n  \"float32\": UpcastFloat32AndMap,\n  \"int32\": UpcastInt32AndMap,\n  \"bool\": UpcastBoolAndMap,\n  \"complex64\": UpcastComplex64AndMap\n};\nfunction upcastType(typeA, typeB) {\n  if (typeA === \"string\" || typeB === \"string\") {\n    if (typeA === \"string\" && typeB === \"string\") {\n      return \"string\";\n    }\n    throw new Error(`Can not upcast ${typeA} with ${typeB}`);\n  }\n  return upcastTypeMap[typeA][typeB];\n}\nfunction sumOutType(type) {\n  return upcastType(type, \"int32\");\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/tensor_util.js\nfunction makeTypesMatch(a, b) {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n  const dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\nfunction assertTypesMatch(a, b) {\n  assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and second(${b.dtype}) input must match`);\n}\nfunction isTensorInList(tensor2, tensorList) {\n  return tensorList.some((x) => x.id === tensor2.id);\n}\nfunction getTensorsInContainer(result) {\n  const list = [];\n  const seen = /* @__PURE__ */ new Set();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\nfunction walkTensorContainer(container, list, seen) {\n  if (container == null) {\n    return;\n  }\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n  if (!isIterable(container)) {\n    return;\n  }\n  const iterable = container;\n  for (const k in iterable) {\n    const val = iterable[k];\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n}\nfunction isIterable(obj) {\n  return Array.isArray(obj) || typeof obj === \"object\";\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/engine.js\nfunction isRegisteredKernelInvocation(kernelInvocation) {\n  return kernelInvocation.kernelName != null;\n}\nvar EngineState = class {\n  constructor() {\n    this.registeredVariables = {};\n    this.nextTapeNodeId = 0;\n    this.numBytes = 0;\n    this.numTensors = 0;\n    this.numStringTensors = 0;\n    this.numDataBuffers = 0;\n    this.gradientDepth = 0;\n    this.kernelDepth = 0;\n    this.scopeStack = [];\n    this.numDataMovesStack = [];\n    this.nextScopeId = 0;\n    this.tensorInfo = /* @__PURE__ */ new WeakMap();\n    this.profiling = false;\n    this.activeProfile = {\n      newBytes: 0,\n      newTensors: 0,\n      peakBytes: 0,\n      kernels: [],\n      result: null,\n      get kernelNames() {\n        return Array.from(new Set(this.kernels.map((k) => k.name)));\n      }\n    };\n  }\n  dispose() {\n    for (const variableName in this.registeredVariables) {\n      this.registeredVariables[variableName].dispose();\n    }\n  }\n};\nvar Engine = class {\n  constructor(ENV6) {\n    this.ENV = ENV6;\n    this.registry = {};\n    this.registryFactory = {};\n    this.pendingBackendInitId = 0;\n    this.state = new EngineState();\n  }\n  async ready() {\n    if (this.pendingBackendInit != null) {\n      return this.pendingBackendInit.then(() => {\n      });\n    }\n    if (this.backendInstance != null) {\n      return;\n    }\n    const sortedBackends = this.getSortedBackends();\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const success = await this.initializeBackend(backendName).success;\n      if (success) {\n        await this.setBackend(backendName);\n        return;\n      }\n    }\n    throw new Error(`Could not initialize any backends, all backend initializations failed.`);\n  }\n  get backend() {\n    if (this.pendingBackendInit != null) {\n      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);\n    }\n    if (this.backendInstance == null) {\n      const { name, asyncInit } = this.initializeBackendsAndReturnBest();\n      if (asyncInit) {\n        throw new Error(`The highest priority backend '${name}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);\n      }\n      this.setBackend(name);\n    }\n    return this.backendInstance;\n  }\n  backendNames() {\n    return Object.keys(this.registryFactory);\n  }\n  findBackend(backendName) {\n    if (!(backendName in this.registry)) {\n      if (backendName in this.registryFactory) {\n        const { asyncInit } = this.initializeBackend(backendName);\n        if (asyncInit) {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n    return this.registry[backendName];\n  }\n  findBackendFactory(backendName) {\n    if (!(backendName in this.registryFactory)) {\n      return null;\n    }\n    return this.registryFactory[backendName].factory;\n  }\n  registerBackend(backendName, factory, priority = 1) {\n    if (backendName in this.registryFactory) {\n      warn(`${backendName} backend was already registered. Reusing existing backend factory.`);\n      return false;\n    }\n    this.registryFactory[backendName] = { factory, priority };\n    return true;\n  }\n  async setBackend(backendName) {\n    if (this.registryFactory[backendName] == null) {\n      throw new Error(`Backend name '${backendName}' not found in registry`);\n    }\n    this.backendName = backendName;\n    if (this.registry[backendName] == null) {\n      this.backendInstance = null;\n      const { success, asyncInit } = this.initializeBackend(backendName);\n      const result = asyncInit ? await success : success;\n      if (!result) {\n        return false;\n      }\n    }\n    this.backendInstance = this.registry[backendName];\n    this.setupRegisteredKernels();\n    this.profiler = new Profiler(this.backendInstance);\n    return true;\n  }\n  setupRegisteredKernels() {\n    const kernels = getKernelsForBackend(this.backendName);\n    kernels.forEach((kernel) => {\n      if (kernel.setupFunc != null) {\n        kernel.setupFunc(this.backendInstance);\n      }\n    });\n  }\n  disposeRegisteredKernels(backendName) {\n    const kernels = getKernelsForBackend(backendName);\n    kernels.forEach((kernel) => {\n      if (kernel.disposeFunc != null) {\n        kernel.disposeFunc(this.registry[backendName]);\n      }\n    });\n  }\n  initializeBackend(backendName) {\n    const registryFactoryEntry = this.registryFactory[backendName];\n    if (registryFactoryEntry == null) {\n      throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);\n    }\n    try {\n      const backend2 = registryFactoryEntry.factory();\n      if (backend2 && !(backend2 instanceof KernelBackend) && typeof backend2.then === \"function\") {\n        const promiseId = ++this.pendingBackendInitId;\n        const success = backend2.then((backendInstance) => {\n          if (promiseId < this.pendingBackendInitId) {\n            return false;\n          }\n          this.registry[backendName] = backendInstance;\n          this.pendingBackendInit = null;\n          return true;\n        }).catch((err) => {\n          if (promiseId < this.pendingBackendInitId) {\n            return false;\n          }\n          this.pendingBackendInit = null;\n          warn(`Initialization of backend ${backendName} failed`);\n          warn(err.stack || err.message);\n          return false;\n        });\n        this.pendingBackendInit = success;\n        return { success, asyncInit: true };\n      } else {\n        this.registry[backendName] = backend2;\n        return { success: true, asyncInit: false };\n      }\n    } catch (err) {\n      warn(`Initialization of backend ${backendName} failed`);\n      warn(err.stack || err.message);\n      return { success: false, asyncInit: false };\n    }\n  }\n  removeBackend(backendName) {\n    if (!(backendName in this.registryFactory)) {\n      throw new Error(`${backendName} backend not found in registry`);\n    }\n    if (this.backendName === backendName && this.pendingBackendInit != null) {\n      this.pendingBackendInitId++;\n    }\n    if (backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n    delete this.registryFactory[backendName];\n    if (this.backendName === backendName) {\n      this.pendingBackendInit = null;\n      this.backendName = null;\n      this.backendInstance = null;\n    }\n  }\n  getSortedBackends() {\n    if (Object.keys(this.registryFactory).length === 0) {\n      throw new Error(\"No backend found in registry.\");\n    }\n    return Object.keys(this.registryFactory).sort((a, b) => {\n      return this.registryFactory[b].priority - this.registryFactory[a].priority;\n    });\n  }\n  initializeBackendsAndReturnBest() {\n    const sortedBackends = this.getSortedBackends();\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const { success, asyncInit } = this.initializeBackend(backendName);\n      if (asyncInit || success) {\n        return { name: backendName, asyncInit };\n      }\n    }\n    throw new Error(`Could not initialize any backends, all backend initializations failed.`);\n  }\n  moveData(backend2, dataId) {\n    const info = this.state.tensorInfo.get(dataId);\n    const srcBackend = info.backend;\n    const values = this.readSync(dataId);\n    const refCount = srcBackend.refCount(dataId);\n    srcBackend.disposeData(dataId, true);\n    info.backend = backend2;\n    backend2.move(dataId, values, info.shape, info.dtype, refCount);\n    if (this.shouldCheckForMemLeaks()) {\n      this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n    }\n  }\n  tidy(nameOrFn, fn) {\n    let name = null;\n    if (fn == null) {\n      if (typeof nameOrFn !== \"function\") {\n        throw new Error(\"Please provide a function to tidy()\");\n      }\n      fn = nameOrFn;\n    } else {\n      if (typeof nameOrFn !== \"string\" && !(nameOrFn instanceof String)) {\n        throw new Error(\"When calling with two arguments, the first argument to tidy() must be a string\");\n      }\n      if (typeof fn !== \"function\") {\n        throw new Error(\"When calling with two arguments, the 2nd argument to tidy() must be a function\");\n      }\n      name = nameOrFn;\n    }\n    let result;\n    return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {\n      result = fn();\n      if (result instanceof Promise) {\n        console.error(\"Cannot return a Promise inside of tidy.\");\n      }\n      return result;\n    });\n  }\n  scopedRun(start, end, f) {\n    start();\n    try {\n      const res = f();\n      end();\n      return res;\n    } catch (ex) {\n      end();\n      throw ex;\n    }\n  }\n  nextTensorId() {\n    return Engine.nextTensorId++;\n  }\n  nextVariableId() {\n    return Engine.nextVariableId++;\n  }\n  clone(x) {\n    const y = ENGINE.runKernel(Identity, { x });\n    const inputs = { x };\n    const grad2 = (dy) => ({\n      x: () => {\n        const dtype = \"float32\";\n        const gradInputs = { x: dy };\n        const attrs = { dtype };\n        return ENGINE.runKernel(Cast, gradInputs, attrs);\n      }\n    });\n    const saved = [];\n    this.addTapeNode(this.state.activeScope.name, inputs, [y], grad2, saved, {});\n    return y;\n  }\n  runKernel(kernelName, inputs, attrs) {\n    if (this.backendName == null) {\n      this.backend;\n    }\n    const hasKernel = getKernel(kernelName, this.backendName) != null;\n    if (!hasKernel) {\n      throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);\n    }\n    return this.runKernelFunc({ kernelName, inputs, attrs });\n  }\n  shouldCheckForMemLeaks() {\n    return this.ENV.getBool(\"IS_TEST\");\n  }\n  checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n    const numDataIdsAfter = this.backend.numDataIds();\n    let numOutputDataIds = 0;\n    outInfos.forEach((info) => {\n      numOutputDataIds += info.dtype === \"complex64\" ? 3 : 1;\n    });\n    const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n    const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n    if (dataIdsLeaked > 0) {\n      throw new Error(`Backend '${this.backendName}' has an internal memory leak (${dataIdsLeaked} data ids) after running '${kernelName}'`);\n    }\n  }\n  runKernelFunc(kernelParams) {\n    let outputs;\n    let saved = [];\n    const isTapeOn = this.isTapeOn();\n    const startingBytecount = this.state.numBytes;\n    const startingNumTensors = this.state.numTensors;\n    if (this.shouldCheckForMemLeaks()) {\n      this.state.numDataMovesStack.push(0);\n    }\n    let kernelFunc3;\n    if (this.backendName == null) {\n      this.backend;\n    }\n    let out;\n    const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ? kernelParams.kernelName : this.state.activeScope != null ? this.state.activeScope.name : \"\";\n    if (isRegisteredKernelInvocation(kernelParams)) {\n      const { kernelName, inputs: inputs2, attrs: attrs2 } = kernelParams;\n      if (this.backendName == null) {\n        this.backend;\n      }\n      const kernel = getKernel(kernelName, this.backendName);\n      assert(kernel != null, () => `Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);\n      kernelFunc3 = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = kernel.kernelFunc({ inputs: inputs2, attrs: attrs2, backend: this.backend });\n        const outInfos = Array.isArray(out) ? out : [out];\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n        }\n        const outTensors = outInfos.map((outInfo) => {\n          if (outInfo.rank != null) {\n            return outInfo;\n          }\n          const { dataId, shape, dtype } = outInfo;\n          return this.makeTensorFromDataId(dataId, shape, dtype);\n        });\n        if (isTapeOn) {\n          const tensorsToSave = this.getTensorsForGradient(kernelName, inputs2, outTensors);\n          saved = this.saveTensorsForBackwardMode(tensorsToSave);\n        }\n        return outTensors;\n      };\n    } else {\n      const { forwardFunc } = kernelParams;\n      const saveFunc = (tensors) => {\n        if (!isTapeOn) {\n          return;\n        }\n        saved = tensors.map((tensor2) => this.keep(this.clone(tensor2)));\n      };\n      kernelFunc3 = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n        const outs = Array.isArray(out) ? out : [out];\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n        }\n        return outs;\n      };\n    }\n    const { inputs, attrs } = kernelParams;\n    const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ? null : kernelParams.backwardsFunc;\n    let kernelProfile;\n    this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n      if (!this.ENV.getBool(\"DEBUG\") && !this.state.profiling) {\n        outputs = kernelFunc3();\n      } else {\n        kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs, () => kernelFunc3());\n        if (this.ENV.getBool(\"DEBUG\")) {\n          this.profiler.logKernelProfile(kernelProfile);\n        }\n        outputs = kernelProfile.outputs;\n      }\n    });\n    if (isTapeOn) {\n      this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n    }\n    if (this.state.profiling) {\n      this.state.activeProfile.kernels.push({\n        name: kernelOrScopeName,\n        bytesAdded: this.state.numBytes - startingBytecount,\n        totalBytesSnapshot: this.state.numBytes,\n        tensorsAdded: this.state.numTensors - startingNumTensors,\n        totalTensorsSnapshot: this.state.numTensors,\n        inputShapes: Object.keys(inputs).map((key) => inputs[key] != null ? inputs[key].shape : null),\n        outputShapes: outputs.map((item) => item.shape),\n        kernelTimeMs: kernelProfile.timeMs,\n        extraInfo: kernelProfile.extraInfo\n      });\n    }\n    return Array.isArray(out) ? outputs : outputs[0];\n  }\n  saveTensorsForBackwardMode(tensors) {\n    const saved = tensors.map((tensor2) => this.keep(this.clone(tensor2)));\n    return saved;\n  }\n  getTensorsForGradient(kernelName, inputs, outputs) {\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      const inputsToSave = gradConfig.inputsToSave || [];\n      const outputsToSave = gradConfig.outputsToSave || [];\n      let inputTensorsToSave;\n      if (gradConfig.saveAllInputs) {\n        assert(Array.isArray(inputs), () => \"saveAllInputs is true, expected inputs to be an array.\");\n        inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n      } else {\n        inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n      }\n      const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);\n      return inputTensorsToSave.concat(outputTensorsToSave);\n    }\n    return [];\n  }\n  makeTensor(values, shape, dtype, backend2) {\n    if (values == null) {\n      throw new Error(\"Values passed to engine.makeTensor() are null\");\n    }\n    dtype = dtype || \"float32\";\n    backend2 = backend2 || this.backend;\n    let backendVals = values;\n    if (dtype === \"string\" && isString(values[0])) {\n      backendVals = values.map((d) => encodeString(d));\n    }\n    const dataId = backend2.write(backendVals, shape, dtype);\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend2);\n    if (dtype === \"string\") {\n      const info = this.state.tensorInfo.get(dataId);\n      const newBytes = bytesFromStringArray(backendVals);\n      this.state.numBytes += newBytes - info.bytes;\n      info.bytes = newBytes;\n    }\n    return t;\n  }\n  makeTensorFromDataId(dataId, shape, dtype, backend2) {\n    dtype = dtype || \"float32\";\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend2);\n    return t;\n  }\n  makeVariable(initialValue, trainable = true, name, dtype) {\n    name = name || this.nextVariableId().toString();\n    if (dtype != null && dtype !== initialValue.dtype) {\n      initialValue = initialValue.cast(dtype);\n    }\n    const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n    if (this.state.registeredVariables[v.name] != null) {\n      throw new Error(`Variable with name ${v.name} was already registered`);\n    }\n    this.state.registeredVariables[v.name] = v;\n    this.incRef(v, this.backend);\n    return v;\n  }\n  trackTensor(a, backend2) {\n    this.state.numTensors++;\n    if (a.dtype === \"string\") {\n      this.state.numStringTensors++;\n    }\n    let bytes = 0;\n    if (a.dtype !== \"complex64\" && a.dtype !== \"string\") {\n      bytes = a.size * bytesPerElement(a.dtype);\n    }\n    this.state.numBytes += bytes;\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      this.state.numDataBuffers++;\n      this.state.tensorInfo.set(a.dataId, {\n        backend: backend2 || this.backend,\n        dtype: a.dtype,\n        shape: a.shape,\n        bytes\n      });\n    }\n    if (!(a instanceof Variable)) {\n      this.track(a);\n    }\n  }\n  incRef(a, backend2) {\n    this.trackTensor(a, backend2);\n    this.backend.incRef(a.dataId);\n  }\n  removeDataId(dataId, backend2) {\n    if (this.state.tensorInfo.has(dataId) && this.state.tensorInfo.get(dataId).backend === backend2) {\n      this.state.tensorInfo.delete(dataId);\n      this.state.numDataBuffers--;\n    }\n  }\n  disposeTensor(a) {\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      return;\n    }\n    const info = this.state.tensorInfo.get(a.dataId);\n    this.state.numTensors--;\n    if (a.dtype === \"string\") {\n      this.state.numStringTensors--;\n      this.state.numBytes -= info.bytes;\n    }\n    if (a.dtype !== \"complex64\" && a.dtype !== \"string\") {\n      const bytes = a.size * bytesPerElement(a.dtype);\n      this.state.numBytes -= bytes;\n    }\n    if (info.backend.disposeData(a.dataId)) {\n      this.removeDataId(a.dataId, info.backend);\n    }\n  }\n  disposeVariables() {\n    for (const varName in this.state.registeredVariables) {\n      const v = this.state.registeredVariables[varName];\n      this.disposeVariable(v);\n    }\n  }\n  disposeVariable(v) {\n    this.disposeTensor(v);\n    if (this.state.registeredVariables[v.name] != null) {\n      delete this.state.registeredVariables[v.name];\n    }\n  }\n  memory() {\n    const info = this.backend.memory();\n    info.numTensors = this.state.numTensors;\n    info.numDataBuffers = this.state.numDataBuffers;\n    info.numBytes = this.state.numBytes;\n    if (this.state.numStringTensors > 0) {\n      info.unreliable = true;\n      if (info.reasons == null) {\n        info.reasons = [];\n      }\n      info.reasons.push(\"Memory usage by string tensors is approximate (2 bytes per character)\");\n    }\n    return info;\n  }\n  async profile(query) {\n    this.state.profiling = true;\n    const startBytes = this.state.numBytes;\n    const startNumTensors = this.state.numTensors;\n    this.state.activeProfile.kernels = [];\n    this.state.activeProfile.result = await query();\n    this.state.profiling = false;\n    this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((d) => d.totalBytesSnapshot));\n    this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n    this.state.activeProfile.newTensors = this.state.numTensors - startNumTensors;\n    for (const kernel of this.state.activeProfile.kernels) {\n      kernel.kernelTimeMs = await kernel.kernelTimeMs;\n      kernel.extraInfo = await kernel.extraInfo;\n    }\n    return this.state.activeProfile;\n  }\n  isTapeOn() {\n    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n  }\n  addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n    const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      gradientsFunc = gradConfig.gradFunc;\n    }\n    if (gradientsFunc != null) {\n      tapeNode.gradient = (dys) => {\n        dys = dys.map((dy, i) => {\n          if (dy == null) {\n            const output = outputs[i];\n            const vals = makeZerosTypedArray(output.size, output.dtype);\n            return this.makeTensor(vals, output.shape, output.dtype);\n          }\n          return dy;\n        });\n        return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n      };\n    }\n    this.state.activeTape.push(tapeNode);\n  }\n  keep(result) {\n    result.kept = true;\n    return result;\n  }\n  startTape() {\n    if (this.state.gradientDepth === 0) {\n      this.state.activeTape = [];\n    }\n    this.state.gradientDepth++;\n  }\n  endTape() {\n    this.state.gradientDepth--;\n  }\n  startScope(name) {\n    const scopeInfo = {\n      track: [],\n      name: \"unnamed scope\",\n      id: this.state.nextScopeId++\n    };\n    if (name) {\n      scopeInfo.name = name;\n    }\n    this.state.scopeStack.push(scopeInfo);\n    this.state.activeScope = scopeInfo;\n  }\n  endScope(result) {\n    const tensorsToTrackInParent = getTensorsInContainer(result);\n    const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map((t) => t.id));\n    for (let i = 0; i < this.state.activeScope.track.length; i++) {\n      const tensor2 = this.state.activeScope.track[i];\n      if (!tensor2.kept && !tensorsToTrackInParentSet.has(tensor2.id)) {\n        tensor2.dispose();\n      }\n    }\n    const oldScope = this.state.scopeStack.pop();\n    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1];\n    tensorsToTrackInParent.forEach((tensor2) => {\n      if (!tensor2.kept && tensor2.scopeId === oldScope.id) {\n        this.track(tensor2);\n      }\n    });\n  }\n  gradients(f, xs, dy, allowNoGradients = false) {\n    assert(xs.length > 0, () => \"gradients() received an empty list of xs.\");\n    if (dy != null && dy.dtype !== \"float32\") {\n      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n    }\n    const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy(\"forward\", f));\n    assert(y instanceof Tensor, () => \"The result y returned by f() must be a tensor.\");\n    const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n      throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.\");\n    }\n    return this.tidy(\"backward\", () => {\n      const accumulatedGradientMap = {};\n      accumulatedGradientMap[y.id] = dy == null ? ones(y.shape) : dy;\n      backpropagateGradients(accumulatedGradientMap, filteredTape, (f2) => this.tidy(f2), add);\n      const grads2 = xs.map((x) => accumulatedGradientMap[x.id]);\n      if (this.state.gradientDepth === 0) {\n        this.state.activeTape.forEach((node) => {\n          for (const tensor2 of node.saved) {\n            tensor2.dispose();\n          }\n        });\n        this.state.activeTape = null;\n      }\n      return { value: y, grads: grads2 };\n    });\n  }\n  customGrad(f) {\n    assert(isFunction(f), () => \"The f passed in customGrad(f) must be a function.\");\n    return (...inputs) => {\n      assert(inputs.every((t) => t instanceof Tensor), () => \"The args passed in customGrad(f)(x1, x2,...) must all be tensors\");\n      let res;\n      const inputMap = {};\n      inputs.forEach((input2, i) => {\n        inputMap[i] = input2;\n      });\n      const forwardFunc = (_, save) => {\n        res = f(...[...inputs, save]);\n        assert(res.value instanceof Tensor, () => \"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor\");\n        assert(isFunction(res.gradFunc), () => \"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.\");\n        return res.value;\n      };\n      const backwardsFunc = (dy, saved) => {\n        const gradRes = res.gradFunc(dy, saved);\n        const grads2 = Array.isArray(gradRes) ? gradRes : [gradRes];\n        assert(grads2.length === inputs.length, () => \"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).\");\n        assert(grads2.every((t) => t instanceof Tensor), () => \"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.\");\n        const gradMap = {};\n        grads2.forEach((grad2, i) => {\n          gradMap[i] = () => grad2;\n        });\n        return gradMap;\n      };\n      return this.runKernelFunc({\n        forwardFunc,\n        backwardsFunc,\n        inputs: inputMap\n      });\n    };\n  }\n  readSync(dataId) {\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readSync(dataId);\n  }\n  read(dataId) {\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.read(dataId);\n  }\n  readToGPU(dataId, options) {\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readToGPU(dataId, options);\n  }\n  async time(query) {\n    const start = now();\n    const timingInfo = await this.backend.time(query);\n    timingInfo.wallMs = now() - start;\n    return timingInfo;\n  }\n  track(result) {\n    if (this.state.activeScope != null) {\n      result.scopeId = this.state.activeScope.id;\n      this.state.activeScope.track.push(result);\n    }\n    return result;\n  }\n  get registeredVariables() {\n    return this.state.registeredVariables;\n  }\n  reset() {\n    this.pendingBackendInitId++;\n    this.state.dispose();\n    this.ENV.reset();\n    this.state = new EngineState();\n    for (const backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n    this.backendName = null;\n    this.backendInstance = null;\n    this.pendingBackendInit = null;\n  }\n};\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\nfunction ones(shape) {\n  const values = makeOnesTypedArray(sizeFromShape(shape), \"float32\");\n  return ENGINE.makeTensor(values, shape, \"float32\");\n}\nfunction getOrMakeEngine() {\n  const ns = getGlobalNamespace();\n  if (ns._tfengine == null) {\n    const environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n  setEnvironmentGlobal(ns._tfengine.ENV);\n  setTensorTracker(() => ns._tfengine);\n  return ns._tfengine;\n}\nvar ENGINE = getOrMakeEngine();\nfunction add(a, b) {\n  const inputs = { a, b };\n  return ENGINE.runKernel(Add, inputs);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/device_util.js\nvar device_util_exports = {};\n__export(device_util_exports, {\n  isBrowser: () => isBrowser,\n  isMobile: () => isMobile,\n  mockIsMobile: () => mockIsMobile\n});\nfunction _isNavigatorDefined() {\n  return typeof navigator !== \"undefined\" && navigator != null;\n}\nvar isMobileMockValue;\nfunction mockIsMobile(value) {\n  isMobileMockValue = value;\n}\nfunction isMobile(nav) {\n  if (isMobileMockValue !== void 0) {\n    return isMobileMockValue;\n  }\n  if (nav || _isNavigatorDefined()) {\n    if (!nav) {\n      nav = navigator;\n    }\n    if (nav.product === \"ReactNative\") {\n      return true;\n    }\n    const a = nav.userAgent || nav.vendor || (typeof window !== \"undefined\" ? window.opera : \"\");\n    if (!a) {\n      const navAny = nav;\n      return navAny.userAgentData && navAny.userAgentData.mobile;\n    }\n    return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4));\n  }\n  return false;\n}\nfunction isBrowser() {\n  return typeof window !== \"undefined\" && window.document != null || typeof WorkerGlobalScope !== \"undefined\";\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/flags.js\nvar ENV2 = env();\nENV2.registerFlag(\"DEBUG\", () => false, (debugValue) => {\n  if (debugValue) {\n    console.warn(\"Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.\");\n  }\n});\nENV2.registerFlag(\"IS_BROWSER\", () => isBrowser());\nENV2.registerFlag(\"IS_NODE\", () => typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\");\nENV2.registerFlag(\"IS_CHROME\", () => typeof navigator !== \"undefined\" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));\nENV2.registerFlag(\"PROD\", () => false);\nENV2.registerFlag(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\", () => ENV2.getBool(\"DEBUG\"));\nENV2.registerFlag(\"DEPRECATION_WARNINGS_ENABLED\", () => true);\nENV2.registerFlag(\"IS_TEST\", () => false);\nENV2.registerFlag(\"CHECK_COMPUTATION_FOR_ERRORS\", () => true);\nENV2.registerFlag(\"WRAP_TO_IMAGEBITMAP\", () => false);\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js\nfunction inferShape(val, dtype) {\n  let firstElem = val;\n  if (isTypedArray(val)) {\n    return dtype === \"string\" ? [] : [val.length];\n  }\n  if (!Array.isArray(val)) {\n    return [];\n  }\n  const shape = [];\n  while (Array.isArray(firstElem) || isTypedArray(firstElem) && dtype !== \"string\") {\n    shape.push(firstElem.length);\n    firstElem = firstElem[0];\n  }\n  if (Array.isArray(val) && env().getBool(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\")) {\n    deepAssertShapeConsistency(val, shape, []);\n  }\n  return shape;\n}\nfunction deepAssertShapeConsistency(val, shape, indices) {\n  indices = indices || [];\n  if (!Array.isArray(val) && !isTypedArray(val)) {\n    assert(shape.length === 0, () => `Element arr[${indices.join(\"][\")}] is a primitive, but should be an array/TypedArray of ${shape[0]} elements`);\n    return;\n  }\n  assert(shape.length > 0, () => `Element arr[${indices.join(\"][\")}] should be a primitive, but is an array of ${val.length} elements`);\n  assert(val.length === shape[0], () => `Element arr[${indices.join(\"][\")}] should have ${shape[0]} elements, but has ${val.length} elements`);\n  const subShape = shape.slice(1);\n  for (let i = 0; i < val.length; ++i) {\n    deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n  }\n}\nfunction assertDtype(expectedDtype, actualDType, argName, functionName) {\n  if (expectedDtype === \"string_or_numeric\") {\n    return;\n  }\n  if (expectedDtype == null) {\n    throw new Error(`Expected dtype cannot be null.`);\n  }\n  if (expectedDtype !== \"numeric\" && expectedDtype !== actualDType || expectedDtype === \"numeric\" && actualDType === \"string\") {\n    throw new Error(`Argument '${argName}' passed to '${functionName}' must be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n  }\n}\nfunction convertToTensor(x, argName, functionName, parseAsDtype = \"numeric\") {\n  if (x instanceof Tensor) {\n    assertDtype(parseAsDtype, x.dtype, argName, functionName);\n    return x;\n  }\n  let inferredDtype = inferDtype(x);\n  if (inferredDtype !== \"string\" && [\"bool\", \"int32\", \"float32\"].indexOf(parseAsDtype) >= 0) {\n    inferredDtype = parseAsDtype;\n  }\n  assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n  if (x == null || !isTypedArray(x) && !Array.isArray(x) && typeof x !== \"number\" && typeof x !== \"boolean\" && typeof x !== \"string\") {\n    const type = x == null ? \"null\" : x.constructor.name;\n    throw new Error(`Argument '${argName}' passed to '${functionName}' must be a Tensor or TensorLike, but got '${type}'`);\n  }\n  const inferredShape = inferShape(x, inferredDtype);\n  if (!isTypedArray(x) && !Array.isArray(x)) {\n    x = [x];\n  }\n  const skipTypedArray = true;\n  const values = inferredDtype !== \"string\" ? toTypedArray(x, inferredDtype) : flatten(x, [], skipTypedArray);\n  return ENGINE.makeTensor(values, inferredShape, inferredDtype);\n}\nfunction convertToTensorArray(arg, argName, functionName, parseAsDtype = \"numeric\") {\n  if (!Array.isArray(arg)) {\n    throw new Error(`Argument ${argName} passed to ${functionName} must be a \\`Tensor[]\\` or \\`TensorLike[]\\``);\n  }\n  const tensors = arg;\n  return tensors.map((t, i) => convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\nvar OP_SCOPE_SUFFIX = \"__op\";\nfunction op(f) {\n  const keys = Object.keys(f);\n  if (keys.length !== 1) {\n    throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${keys.length} keys.`);\n  }\n  let opName = keys[0];\n  const fn = f[opName];\n  if (opName.endsWith(\"_\")) {\n    opName = opName.substring(0, opName.length - 1);\n  }\n  opName = opName + OP_SCOPE_SUFFIX;\n  const f2 = (...args) => {\n    ENGINE.startScope(opName);\n    try {\n      const result = fn(...args);\n      if (isPromise(result)) {\n        console.error(\"Cannot return a Promise inside of tidy.\");\n      }\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n  Object.defineProperty(f2, \"name\", { value: opName, configurable: true });\n  return f2;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/complex.js\nfunction complex_(real4, imag4) {\n  const $real = convertToTensor(real4, \"real\", \"complex\");\n  const $imag = convertToTensor(imag4, \"imag\", \"complex\");\n  assertShapesMatch($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, must match in call to tf.complex().`);\n  const inputs = { real: $real, imag: $imag };\n  return ENGINE.runKernel(Complex, inputs);\n}\nvar complex = op({ complex_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js\nfunction makeTensor(values, shape, inferredShape, dtype) {\n  if (dtype == null) {\n    dtype = inferDtype(values);\n  }\n  if (dtype === \"complex64\") {\n    throw new Error(`Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).`);\n  }\n  if (!isTypedArray(values) && !Array.isArray(values) && typeof values !== \"number\" && typeof values !== \"boolean\" && typeof values !== \"string\") {\n    throw new Error(\"values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray\");\n  }\n  if (shape != null) {\n    assertNonNegativeIntegerDimensions(shape);\n    const providedSize = sizeFromShape(shape);\n    const inferredSize = sizeFromShape(inferredShape);\n    assert(providedSize === inferredSize, () => `Based on the provided shape, [${shape}], the tensor should have ${providedSize} values but has ${inferredSize}`);\n    for (let i = 0; i < inferredShape.length; ++i) {\n      const inferred = inferredShape[i];\n      const flatDimsDontMatch = i === inferredShape.length - 1 ? inferred !== sizeFromShape(shape.slice(i)) : true;\n      assert(inferredShape[i] === shape[i] || !flatDimsDontMatch, () => `Error creating a new Tensor. Inferred shape (${inferredShape}) does not match the provided shape (${shape}). `);\n    }\n  }\n  if (!isTypedArray(values) && !Array.isArray(values)) {\n    values = [values];\n  }\n  shape = shape || inferredShape;\n  values = dtype !== \"string\" ? toTypedArray(values, dtype) : flatten(values, [], true);\n  return ENGINE.makeTensor(values, shape, dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js\nfunction tensor(values, shape, dtype) {\n  const inferredShape = inferShape(values, dtype);\n  return makeTensor(values, shape, inferredShape, dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/io/types.js\nvar DTYPE_VALUE_SIZE_MAP = {\n  \"float32\": 4,\n  \"float16\": 2,\n  \"int32\": 4,\n  \"uint16\": 2,\n  \"uint8\": 1,\n  \"bool\": 1,\n  \"complex64\": 8\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js\nvar NUM_BYTES_STRING_LENGTH = 4;\nasync function encodeWeights(tensors, group) {\n  const specs = [];\n  const dataPromises = [];\n  const names = Array.isArray(tensors) ? tensors.map((tensor2) => tensor2.name) : Object.keys(tensors);\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n    if (t.dtype !== \"float32\" && t.dtype !== \"int32\" && t.dtype !== \"bool\" && t.dtype !== \"string\" && t.dtype !== \"complex64\") {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n    const spec = { name, shape: t.shape, dtype: t.dtype };\n    if (t.dtype === \"string\") {\n      const utf8bytes = new Promise(async (resolve) => {\n        const vals = await t.bytes();\n        const totalNumBytes = vals.reduce((p2, c) => p2 + c.length, 0) + NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n        for (let i2 = 0; i2 < vals.length; i2++) {\n          const val = vals[i2];\n          const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n    if (group != null) {\n      spec.group = group;\n    }\n    specs.push(spec);\n  }\n  const tensorValues = await Promise.all(dataPromises);\n  return { data: concatenateTypedArrays(tensorValues), specs };\n}\nfunction decodeWeights(buffer2, specs) {\n  const out = {};\n  let float16Decode;\n  let offset = 0;\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values;\n    if (\"quantization\" in spec) {\n      const quantization = spec.quantization;\n      if (quantization.dtype === \"uint8\" || quantization.dtype === \"uint16\") {\n        if (!(\"min\" in quantization && \"scale\" in quantization)) {\n          throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} doesn't have corresponding metadata min and scale.`);\n        }\n      } else if (quantization.dtype === \"float16\") {\n        if (dtype !== \"float32\") {\n          throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} which only supports weights of type float32 not ${dtype}.`);\n        }\n      } else {\n        throw new Error(`Weight ${spec.name} has unknown quantization dtype ${quantization.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);\n      }\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer = buffer2.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = quantization.dtype === \"uint8\" ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);\n      if (dtype === \"float32\") {\n        if (quantization.dtype === \"uint8\" || quantization.dtype === \"uint16\") {\n          values = new Float32Array(quantizedArray.length);\n          for (let i = 0; i < quantizedArray.length; i++) {\n            const v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === \"float16\") {\n          if (float16Decode === void 0) {\n            float16Decode = getFloat16Decoder();\n          }\n          values = float16Decode(quantizedArray);\n        } else {\n          throw new Error(`Unsupported quantization type ${quantization.dtype} for weight type float32.`);\n        }\n      } else if (dtype === \"int32\") {\n        if (quantization.dtype !== \"uint8\" && quantization.dtype !== \"uint16\") {\n          throw new Error(`Unsupported quantization type ${quantization.dtype} for weight type int32.`);\n        }\n        values = new Int32Array(quantizedArray.length);\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = Math.round(v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === \"string\") {\n      const size2 = sizeFromShape(spec.shape);\n      values = [];\n      for (let i = 0; i < size2; i++) {\n        const byteLength = new Uint32Array(buffer2.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer2.slice(offset, offset + byteLength));\n        values.push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer2.slice(offset, offset + size * dtypeFactor);\n      if (dtype === \"float32\") {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === \"int32\") {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === \"bool\") {\n        values = new Uint8Array(byteBuffer);\n      } else if (dtype === \"complex64\") {\n        values = new Float32Array(byteBuffer);\n        const real4 = new Float32Array(values.length / 2);\n        const image2 = new Float32Array(values.length / 2);\n        for (let i = 0; i < real4.length; i++) {\n          real4[i] = values[i * 2];\n          image2[i] = values[i * 2 + 1];\n        }\n        const realTensor = tensor(real4, shape, \"float32\");\n        const imageTensor = tensor(image2, shape, \"float32\");\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * dtypeFactor;\n    }\n    if (dtype !== \"complex64\") {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n  return out;\n}\nfunction concatenateTypedArrays(xs) {\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n  let totalByteLength = 0;\n  const normalizedXs = [];\n  xs.forEach((x) => {\n    totalByteLength += x.byteLength;\n    normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));\n    if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    }\n  });\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach((x) => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n  return y.buffer;\n}\nvar useNodeBuffer = typeof Buffer !== \"undefined\" && (typeof Blob === \"undefined\" || typeof atob === \"undefined\" || typeof btoa === \"undefined\");\nfunction stringByteLength(str) {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n  return new Blob([str]).size;\n}\nfunction arrayBufferToBase64String(buffer2) {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer2).toString(\"base64\");\n  }\n  const buf = new Uint8Array(buffer2);\n  let s = \"\";\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n  return btoa(s);\n}\nfunction base64StringToArrayBuffer(str) {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, \"base64\");\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const s = atob(str);\n  const buffer2 = new Uint8Array(s.length);\n  for (let i = 0; i < s.length; ++i) {\n    buffer2.set([s.charCodeAt(i)], i);\n  }\n  return buffer2.buffer;\n}\nfunction concatenateArrayBuffers(buffers) {\n  if (buffers.length === 1) {\n    return buffers[0];\n  }\n  let totalByteLength = 0;\n  buffers.forEach((buffer2) => {\n    totalByteLength += buffer2.byteLength;\n  });\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach((buffer2) => {\n    temp.set(new Uint8Array(buffer2), offset);\n    offset += buffer2.byteLength;\n  });\n  return temp.buffer;\n}\nfunction basename(path) {\n  const SEPARATOR = \"/\";\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\nfunction getModelJSONForModelArtifacts(artifacts, manifest) {\n  const result = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n  return result;\n}\nasync function getModelArtifactsForJSON(modelJSON, loadWeights2) {\n  const modelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n  if (modelJSON.weightsManifest != null) {\n    const [weightSpecs, weightData] = await loadWeights2(modelJSON.weightsManifest);\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n  return modelArtifacts;\n}\nfunction getModelArtifactsInfoForJSON(modelArtifacts) {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error(\"Expected JSON model topology, received ArrayBuffer.\");\n  }\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: \"JSON\",\n    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength\n  };\n}\nfunction computeFloat16MantisaTable() {\n  const convertMantissa = (i) => {\n    let m = i << 13;\n    let e = 0;\n    while ((m & 8388608) === 0) {\n      e -= 8388608;\n      m <<= 1;\n    }\n    m &= ~8388608;\n    e += 947912704;\n    return m | e;\n  };\n  const mantisaTable = new Uint32Array(2048);\n  mantisaTable[0] = 0;\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 939524096 + (i - 1024 << 13);\n  }\n  return mantisaTable;\n}\nfunction computeFloat16ExponentTable() {\n  const exponentTable = new Uint32Array(64);\n  exponentTable[0] = 0;\n  exponentTable[31] = 1199570944;\n  exponentTable[32] = 2147483648;\n  exponentTable[63] = 3347054592;\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 2147483648 + (i - 32 << 23);\n  }\n  return exponentTable;\n}\nfunction computeFloat16OffsetTable() {\n  const offsetTable = new Uint32Array(64);\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n  offsetTable[0] = offsetTable[32] = 0;\n  return offsetTable;\n}\nfunction getFloat16Decoder() {\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n  return (quantizedArray) => {\n    const buffer2 = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer2);\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 1023)] + exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n    return new Float32Array(buffer2);\n  };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js\nvar IORouterRegistry = class {\n  constructor() {\n    this.saveRouters = [];\n    this.loadRouters = [];\n  }\n  static getInstance() {\n    if (IORouterRegistry.instance == null) {\n      IORouterRegistry.instance = new IORouterRegistry();\n    }\n    return IORouterRegistry.instance;\n  }\n  static registerSaveRouter(saveRouter) {\n    IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n  }\n  static registerLoadRouter(loadRouter) {\n    IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n  }\n  static getSaveHandlers(url) {\n    return IORouterRegistry.getHandlers(url, \"save\");\n  }\n  static getLoadHandlers(url, loadOptions) {\n    return IORouterRegistry.getHandlers(url, \"load\", loadOptions);\n  }\n  static getHandlers(url, handlerType, loadOptions) {\n    const validHandlers = [];\n    const routers = handlerType === \"load\" ? IORouterRegistry.getInstance().loadRouters : IORouterRegistry.getInstance().saveRouters;\n    routers.forEach((router) => {\n      const handler = router(url, loadOptions);\n      if (handler !== null) {\n        validHandlers.push(handler);\n      }\n    });\n    return validHandlers;\n  }\n};\nvar registerSaveRouter = (loudRouter) => IORouterRegistry.registerSaveRouter(loudRouter);\nvar registerLoadRouter = (loudRouter) => IORouterRegistry.registerLoadRouter(loudRouter);\nvar getSaveHandlers = (url) => IORouterRegistry.getSaveHandlers(url);\nvar getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js\nvar DATABASE_NAME = \"tensorflowjs\";\nvar DATABASE_VERSION = 1;\nvar MODEL_STORE_NAME = \"models_store\";\nvar INFO_STORE_NAME = \"model_info_store\";\nfunction getIndexedDBFactory() {\n  if (!env().getBool(\"IS_BROWSER\")) {\n    throw new Error(\"Failed to obtain IndexedDB factory because the current environmentis not a web browser.\");\n  }\n  const theWindow = typeof window === \"undefined\" ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error(\"The current browser does not appear to support IndexedDB.\");\n  }\n  return factory;\n}\nfunction setUpDatabase(openRequest) {\n  const db = openRequest.result;\n  db.createObjectStore(MODEL_STORE_NAME, { keyPath: \"modelPath\" });\n  db.createObjectStore(INFO_STORE_NAME, { keyPath: \"modelPath\" });\n}\nvar BrowserIndexedDB = class {\n  constructor(modelPath) {\n    this.indexedDB = getIndexedDBFactory();\n    if (modelPath == null || !modelPath) {\n      throw new Error(\"For IndexedDB, modelPath must not be null, undefined or empty.\");\n    }\n    this.modelPath = modelPath;\n  }\n  async save(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");\n    }\n    return this.databaseAction(this.modelPath, modelArtifacts);\n  }\n  async load() {\n    return this.databaseAction(this.modelPath);\n  }\n  databaseAction(modelPath, modelArtifacts) {\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        if (modelArtifacts == null) {\n          const modelTx = db.transaction(MODEL_STORE_NAME, \"readonly\");\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = (error) => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n          const infoTx = db.transaction(INFO_STORE_NAME, \"readwrite\");\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest = infoStore.put({ modelPath: this.modelPath, modelArtifactsInfo });\n          let modelTx;\n          putInfoRequest.onsuccess = () => {\n            modelTx = db.transaction(MODEL_STORE_NAME, \"readwrite\");\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n            putModelRequest.onsuccess = () => resolve({ modelArtifactsInfo });\n            putModelRequest.onerror = (error) => {\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = (error2) => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = (error) => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = (error) => reject(openRequest.error);\n    });\n  }\n};\nBrowserIndexedDB.URL_SCHEME = \"indexeddb://\";\nvar indexedDBRouter = (url) => {\n  if (!env().getBool(\"IS_BROWSER\")) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\nfunction browserIndexedDB(modelPath) {\n  return new BrowserIndexedDB(modelPath);\n}\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;\n}\nvar BrowserIndexedDBManager = class {\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n  async listModels() {\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const tx = db.transaction(INFO_STORE_NAME, \"readonly\");\n        const store = tx.objectStore(INFO_STORE_NAME);\n        const getAllInfoRequest = store.getAll();\n        getAllInfoRequest.onsuccess = () => {\n          const out = {};\n          for (const item of getAllInfoRequest.result) {\n            out[item.modelPath] = item.modelArtifactsInfo;\n          }\n          resolve(out);\n        };\n        getAllInfoRequest.onerror = (error) => {\n          db.close();\n          return reject(getAllInfoRequest.error);\n        };\n        tx.oncomplete = () => db.close();\n      };\n      openRequest.onerror = (error) => reject(openRequest.error);\n    });\n  }\n  async removeModel(path) {\n    path = maybeStripScheme(path);\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, \"readwrite\");\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n        const getInfoRequest = infoStore.get(path);\n        let modelTx;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(`Cannot find model with path '${path}' in IndexedDB.`));\n          } else {\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              modelTx = db.transaction(MODEL_STORE_NAME, \"readwrite\");\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = (error) => reject(getInfoRequest.error);\n            };\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = (error) => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = (error) => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = (error) => reject(openRequest.error);\n    });\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js\nvar PATH_SEPARATOR = \"/\";\nvar PATH_PREFIX = \"tensorflowjs_models\";\nvar INFO_SUFFIX = \"info\";\nvar MODEL_TOPOLOGY_SUFFIX = \"model_topology\";\nvar WEIGHT_SPECS_SUFFIX = \"weight_specs\";\nvar WEIGHT_DATA_SUFFIX = \"weight_data\";\nvar MODEL_METADATA_SUFFIX = \"model_metadata\";\nfunction getModelKeys(path) {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\nfunction removeItems(keys) {\n  for (const key of Object.values(keys)) {\n    window.localStorage.removeItem(key);\n  }\n}\nfunction getModelPathFromKey(key) {\n  const items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\nfunction maybeStripScheme2(key) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;\n}\nvar BrowserLocalStorage = class {\n  constructor(modelPath) {\n    if (!env().getBool(\"IS_BROWSER\") || typeof window === \"undefined\" || typeof window.localStorage === \"undefined\") {\n      throw new Error(\"The current environment does not support local storage.\");\n    }\n    this.LS = window.localStorage;\n    if (modelPath == null || !modelPath) {\n      throw new Error(\"For local storage, modelPath must not be null, undefined or empty.\");\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n  async save(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n      const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));\n        const metadata = {\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy,\n          signature: modelArtifacts.signature != null ? modelArtifacts.signature : void 0,\n          userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ? modelArtifacts.userDefinedMetadata : void 0,\n          modelInitializer: modelArtifacts.modelInitializer != null ? modelArtifacts.modelInitializer : void 0,\n          trainingConfig: modelArtifacts.trainingConfig != null ? modelArtifacts.trainingConfig : void 0\n        };\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n        return { modelArtifactsInfo };\n      } catch (err) {\n        removeItems(this.keys);\n        throw new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n  async load() {\n    const info = JSON.parse(this.LS.getItem(this.keys.info));\n    if (info == null) {\n      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);\n    }\n    if (info.modelTopologyType !== \"JSON\") {\n      throw new Error(\"BrowserLocalStorage does not support loading non-JSON model topology yet.\");\n    }\n    const out = {};\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n    if (topology == null) {\n      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);\n    }\n    out.modelTopology = topology;\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n    if (weightSpecs == null) {\n      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);\n    }\n    out.weightSpecs = weightSpecs;\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString);\n      out.format = metadata.format;\n      out.generatedBy = metadata.generatedBy;\n      out.convertedBy = metadata.convertedBy;\n      if (metadata.signature != null) {\n        out.signature = metadata.signature;\n      }\n      if (metadata.userDefinedMetadata != null) {\n        out.userDefinedMetadata = metadata.userDefinedMetadata;\n      }\n      if (metadata.modelInitializer != null) {\n        out.modelInitializer = metadata.modelInitializer;\n      }\n      if (metadata.trainingConfig != null) {\n        out.trainingConfig = metadata.trainingConfig;\n      }\n    }\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);\n    }\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n    return out;\n  }\n};\nBrowserLocalStorage.URL_SCHEME = \"localstorage://\";\nvar localStorageRouter = (url) => {\n  if (!env().getBool(\"IS_BROWSER\")) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\nfunction browserLocalStorage(modelPath) {\n  return new BrowserLocalStorage(modelPath);\n}\nvar BrowserLocalStorageManager = class {\n  constructor() {\n    assert(env().getBool(\"IS_BROWSER\"), () => \"Current environment is not a web browser\");\n    assert(typeof window === \"undefined\" || typeof window.localStorage !== \"undefined\", () => \"Current browser does not appear to support localStorage\");\n    this.LS = window.localStorage;\n  }\n  async listModels() {\n    const out = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key));\n      }\n    }\n    return out;\n  }\n  async removeModel(path) {\n    path = maybeStripScheme2(path);\n    const keys = getModelKeys(path);\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n    const info = JSON.parse(this.LS.getItem(keys.info));\n    removeItems(keys);\n    return info;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/io/model_management.js\nvar URL_SCHEME_SUFFIX = \"://\";\nvar ModelStoreManagerRegistry = class {\n  constructor() {\n    this.managers = {};\n  }\n  static getInstance() {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n    return ModelStoreManagerRegistry.instance;\n  }\n  static registerManager(scheme, manager) {\n    assert(scheme != null, () => \"scheme must not be undefined or null.\");\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n    assert(scheme.length > 0, () => \"scheme must not be an empty string.\");\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n  static getManager(scheme) {\n    const manager = this.getInstance().managers[scheme];\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n    return manager;\n  }\n  static getSchemes() {\n    return Object.keys(this.getInstance().managers);\n  }\n};\nfunction parseURL(url) {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ModelStoreManagerRegistry.getSchemes().join(\",\")}`);\n  }\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1]\n  };\n}\nasync function cloneModelInternal(sourceURL, destURL, deleteSource = false) {\n  assert(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);\n  assert(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination URL ${destURL}.`);\n  assert(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n  const modelArtifacts = await loadHandler.load();\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n  }\n  const saveResult = await saveHandler.save(modelArtifacts);\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n  }\n  return saveResult.modelArtifactsInfo;\n}\nasync function listModels() {\n  const schemes = ModelStoreManagerRegistry.getSchemes();\n  const out = {};\n  for (const scheme of schemes) {\n    const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();\n    for (const path in schemeOut) {\n      const url = scheme + URL_SCHEME_SUFFIX + path;\n      out[url] = schemeOut[path];\n    }\n  }\n  return out;\n}\nasync function removeModel(url) {\n  const schemeAndPath = parseURL(url);\n  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n  return manager.removeModel(schemeAndPath.path);\n}\nasync function copyModel(sourceURL, destURL) {\n  const deleteSource = false;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\nasync function moveModel(sourceURL, destURL) {\n  const deleteSource = true;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js\nvar PlatformBrowser = class {\n  fetch(path, init2) {\n    return fetch(path, init2);\n  }\n  now() {\n    return performance.now();\n  }\n  encode(text, encoding) {\n    if (encoding !== \"utf-8\" && encoding !== \"utf8\") {\n      throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);\n    }\n    if (this.textEncoder == null) {\n      this.textEncoder = new TextEncoder();\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes, encoding) {\n    return new TextDecoder(encoding).decode(bytes);\n  }\n};\nif (env().get(\"IS_BROWSER\")) {\n  env().setPlatform(\"browser\", new PlatformBrowser());\n  try {\n    ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());\n  } catch (err) {\n  }\n  try {\n    ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n  } catch (err) {\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js\nvar getNodeFetch = {\n  importFetch: () => require_browser()\n};\nvar systemFetch;\nvar PlatformNode = class {\n  constructor() {\n    this.util = require_util();\n    this.textEncoder = new this.util.TextEncoder();\n  }\n  fetch(path, requestInits) {\n    if (env().global.fetch != null) {\n      return env().global.fetch(path, requestInits);\n    }\n    if (systemFetch == null) {\n      systemFetch = getNodeFetch.importFetch();\n    }\n    return systemFetch(path, requestInits);\n  }\n  now() {\n    const time2 = process.hrtime();\n    return time2[0] * 1e3 + time2[1] / 1e6;\n  }\n  encode(text, encoding) {\n    if (encoding !== \"utf-8\" && encoding !== \"utf8\") {\n      throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes, encoding) {\n    if (bytes.length === 0) {\n      return \"\";\n    }\n    return new this.util.TextDecoder(encoding).decode(bytes);\n  }\n};\nif (env().get(\"IS_NODE\")) {\n  env().setPlatform(\"node\", new PlatformNode());\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js\nfunction buffer(shape, dtype = \"float32\", values) {\n  dtype = dtype || \"float32\";\n  assertNonNegativeIntegerDimensions(shape);\n  return new TensorBuffer(shape, dtype, values);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/cast.js\nfunction cast_(x, dtype) {\n  const $x = convertToTensor(x, \"x\", \"cast\");\n  if (!isValidDtype(dtype)) {\n    throw new Error(`Failed to cast to unknown dtype ${dtype}`);\n  }\n  if (dtype === \"string\" && $x.dtype !== \"string\" || dtype !== \"string\" && $x.dtype === \"string\") {\n    throw new Error(\"Only strings can be casted to strings\");\n  }\n  const inputs = { x: $x };\n  const attrs = { dtype };\n  return ENGINE.runKernel(Cast, inputs, attrs);\n}\nvar cast = op({ cast_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/clone.js\nfunction clone_(x) {\n  const $x = convertToTensor(x, \"x\", \"clone\", \"string_or_numeric\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Identity, inputs);\n}\nvar clone = op({ clone_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/print.js\nfunction print2(x, verbose = false) {\n  console.log(x.toString(verbose));\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js\ngetOrMakeEngine();\nvar opHandler2 = {\n  buffer,\n  cast,\n  clone,\n  print: print2\n};\nsetOpHandler(opHandler2);\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/io/io.js\nvar io_exports = {};\n__export(io_exports, {\n  browserFiles: () => browserFiles,\n  browserHTTPRequest: () => browserHTTPRequest,\n  concatenateArrayBuffers: () => concatenateArrayBuffers,\n  copyModel: () => copyModel,\n  decodeWeights: () => decodeWeights,\n  encodeWeights: () => encodeWeights,\n  fromMemory: () => fromMemory,\n  getLoadHandlers: () => getLoadHandlers,\n  getModelArtifactsForJSON: () => getModelArtifactsForJSON,\n  getModelArtifactsInfoForJSON: () => getModelArtifactsInfoForJSON,\n  getSaveHandlers: () => getSaveHandlers,\n  http: () => http,\n  isHTTPScheme: () => isHTTPScheme,\n  listModels: () => listModels,\n  loadWeights: () => loadWeights,\n  moveModel: () => moveModel,\n  registerLoadRouter: () => registerLoadRouter,\n  registerSaveRouter: () => registerSaveRouter,\n  removeModel: () => removeModel,\n  weightsLoaderFactory: () => weightsLoaderFactory,\n  withSaveHandler: () => withSaveHandler\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js\nvar DEFAULT_FILE_NAME_PREFIX = \"model\";\nvar DEFAULT_JSON_EXTENSION_NAME = \".json\";\nvar DEFAULT_WEIGHT_DATA_EXTENSION_NAME = \".weights.bin\";\nfunction defer(f) {\n  return new Promise((resolve) => setTimeout(resolve)).then(f);\n}\nvar BrowserDownloads = class {\n  constructor(fileNamePrefix) {\n    if (!env().getBool(\"IS_BROWSER\")) {\n      throw new Error(\"browserDownloads() cannot proceed because the current environment is not a browser.\");\n    }\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n  async save(modelArtifacts) {\n    if (typeof document === \"undefined\") {\n      throw new Error(\"Browser downloads are not supported in this environment since `document` is not present\");\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: \"application/octet-stream\" }));\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\"BrowserDownloads.save() does not support saving model topology in binary formats yet.\");\n    } else {\n      const weightsManifest = [{\n        paths: [\"./\" + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelJSON = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n      const modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], { type: \"application/json\" }));\n      const jsonAnchor = this.modelJsonAnchor == null ? document.createElement(\"a\") : this.modelJsonAnchor;\n      jsonAnchor.download = this.modelJsonFileName;\n      jsonAnchor.href = modelJsonURL;\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent(\"click\")));\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ? document.createElement(\"a\") : this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent(\"click\")));\n      }\n      return { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) };\n    }\n  }\n};\nBrowserDownloads.URL_SCHEME = \"downloads://\";\nvar BrowserFiles = class {\n  constructor(files) {\n    if (files == null || files.length < 1) {\n      throw new Error(`When calling browserFiles, at least 1 file is required, but received ${files}`);\n    }\n    this.jsonFile = files[0];\n    this.weightsFiles = files.slice(1);\n  }\n  async load() {\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = (event) => {\n        const modelJSON = JSON.parse(event.target.result);\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));\n          return;\n        }\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));\n          return;\n        }\n        if (this.weightsFiles.length === 0) {\n          resolve({ modelTopology });\n          return;\n        }\n        const modelArtifactsPromise = getModelArtifactsForJSON(modelJSON, (weightsManifest2) => this.loadWeights(weightsManifest2));\n        resolve(modelArtifactsPromise);\n      };\n      jsonReader.onerror = (error) => reject(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(this.jsonFile);\n    });\n  }\n  loadWeights(weightsManifest) {\n    const weightSpecs = [];\n    const paths = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n      paths.push(...entry.paths);\n    }\n    const pathToFile = this.checkManifestAndWeightFiles(weightsManifest);\n    const promises = paths.map((path) => this.loadWeightsFile(path, pathToFile[path]));\n    return Promise.all(promises).then((buffers) => [weightSpecs, concatenateArrayBuffers(buffers)]);\n  }\n  loadWeightsFile(path, file) {\n    return new Promise((resolve, reject) => {\n      const weightFileReader = new FileReader();\n      weightFileReader.onload = (event) => {\n        const weightData = event.target.result;\n        resolve(weightData);\n      };\n      weightFileReader.onerror = (error) => reject(`Failed to weights data from file of path '${path}'.`);\n      weightFileReader.readAsArrayBuffer(file);\n    });\n  }\n  checkManifestAndWeightFiles(manifest) {\n    const basenames = [];\n    const fileNames = this.weightsFiles.map((file) => basename(file.name));\n    const pathToFile = {};\n    for (const group of manifest) {\n      group.paths.forEach((path) => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(`Duplicate file basename found in weights manifest: '${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n    if (basenames.length !== this.weightsFiles.length) {\n      throw new Error(`Mismatch in the number of files in weights manifest (${basenames.length}) and the number of weight files provided (${this.weightsFiles.length}).`);\n    }\n    return pathToFile;\n  }\n};\nvar browserDownloadsRouter = (url) => {\n  if (!env().getBool(\"IS_BROWSER\")) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\nfunction browserDownloads(fileNamePrefix = \"model\") {\n  return new BrowserDownloads(fileNamePrefix);\n}\nfunction browserFiles(files) {\n  return new BrowserFiles(files);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/io/progress.js\nfunction monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n  const registerMonitor = (promise) => {\n    promise.then((value) => {\n      const fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction);\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n  function checkPromises(promises2) {\n    assert(promises2 != null && Array.isArray(promises2) && promises2.length > 0, () => \"promises must be a none empty array\");\n  }\n  function checkFraction(startFraction2, endFraction2) {\n    assert(startFraction2 >= 0 && startFraction2 <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${startFraction2}`);\n    assert(endFraction2 >= 0 && endFraction2 <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${endFraction2}`);\n    assert(endFraction2 >= startFraction2, () => `startFraction must be no more than endFraction, but got startFraction ${startFraction2} and endFraction ${endFraction2}`);\n  }\n  return Promise.all(promises.map(registerMonitor));\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js\nasync function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {\n  if (loadOptions == null) {\n    loadOptions = {};\n  }\n  const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch : loadOptions.fetchFunc;\n  const requests = fetchURLs.map((fetchURL) => fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true }));\n  const fetchStartFraction = 0;\n  const fetchEndFraction = 0.5;\n  const responses = loadOptions.onProgress == null ? await Promise.all(requests) : await monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n  const bufferPromises = responses.map((response) => response.arrayBuffer());\n  const bufferStartFraction = 0.5;\n  const bufferEndFraction = 1;\n  const buffers = loadOptions.onProgress == null ? await Promise.all(bufferPromises) : await monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n  return buffers;\n}\nasync function loadWeights(manifest, filePathPrefix = \"\", weightNames, requestInit) {\n  const fetchWeights = (fetchUrls) => loadWeightsAsArrayBuffer(fetchUrls, { requestInit });\n  const loadWeights2 = weightsLoaderFactory(fetchWeights);\n  return loadWeights2(manifest, filePathPrefix, weightNames);\n}\nfunction weightsLoaderFactory(fetchWeightsFunction) {\n  return async (manifest, filePathPrefix = \"\", weightNames) => {\n    const groupIndicesToFetchMap = manifest.map(() => false);\n    const groupWeightsToFetch = {};\n    const weightsFound = weightNames != null ? weightNames.map(() => false) : [];\n    const allManifestWeightNames = [];\n    manifest.forEach((manifestGroupConfig, groupIndex) => {\n      let groupOffset = 0;\n      manifestGroupConfig.weights.forEach((weightsEntry) => {\n        const rawDtype = \"quantization\" in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;\n        const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] * sizeFromShape(weightsEntry.shape);\n        const enqueueWeightsForFetchingFn = () => {\n          groupIndicesToFetchMap[groupIndex] = true;\n          if (groupWeightsToFetch[groupIndex] == null) {\n            groupWeightsToFetch[groupIndex] = [];\n          }\n          groupWeightsToFetch[groupIndex].push({\n            manifestEntry: weightsEntry,\n            groupOffset,\n            sizeBytes: weightsBytes\n          });\n        };\n        if (weightNames != null) {\n          weightNames.forEach((weightName, weightIndex) => {\n            if (weightName === weightsEntry.name) {\n              enqueueWeightsForFetchingFn();\n              weightsFound[weightIndex] = true;\n            }\n          });\n        } else {\n          enqueueWeightsForFetchingFn();\n        }\n        allManifestWeightNames.push(weightsEntry.name);\n        groupOffset += weightsBytes;\n      });\n    });\n    if (!weightsFound.every((found) => found)) {\n      const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n      throw new Error(`Could not find weights in manifest with names: ${weightsNotFound.join(\", \")}. \nManifest JSON has weights with names: ${allManifestWeightNames.join(\", \")}.`);\n    }\n    const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n      if (shouldFetch) {\n        accumulator.push(i);\n      }\n      return accumulator;\n    }, []);\n    const fetchUrls = [];\n    groupIndicesToFetch.forEach((i) => {\n      manifest[i].paths.forEach((filepath) => {\n        const fetchUrl = filePathPrefix + (!filePathPrefix.endsWith(\"/\") ? \"/\" : \"\") + filepath;\n        fetchUrls.push(fetchUrl);\n      });\n    });\n    const buffers = await fetchWeightsFunction(fetchUrls);\n    const weightsTensorMap = {};\n    let bufferIndexOffset = 0;\n    groupIndicesToFetch.forEach((i) => {\n      const numBuffers = manifest[i].paths.length;\n      let groupBytes = 0;\n      for (let i2 = 0; i2 < numBuffers; i2++) {\n        groupBytes += buffers[bufferIndexOffset + i2].byteLength;\n      }\n      const groupBuffer = new ArrayBuffer(groupBytes);\n      const groupByteBuffer = new Uint8Array(groupBuffer);\n      let groupBufferOffset = 0;\n      for (let i2 = 0; i2 < numBuffers; i2++) {\n        const buffer2 = new Uint8Array(buffers[bufferIndexOffset + i2]);\n        groupByteBuffer.set(buffer2, groupBufferOffset);\n        groupBufferOffset += buffer2.byteLength;\n      }\n      const weightsEntries = groupWeightsToFetch[i];\n      weightsEntries.forEach((weightsEntry) => {\n        const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n        const nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n        for (const name in nameToTensorMap) {\n          weightsTensorMap[name] = nameToTensorMap[name];\n        }\n      });\n      bufferIndexOffset += numBuffers;\n    });\n    return weightsTensorMap;\n  };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/io/http.js\nvar OCTET_STREAM_MIME_TYPE = \"application/octet-stream\";\nvar JSON_TYPE = \"application/json\";\nvar HTTPRequest = class {\n  constructor(path, loadOptions) {\n    this.DEFAULT_METHOD = \"POST\";\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n    if (loadOptions.fetchFunc != null) {\n      assert(typeof loadOptions.fetchFunc === \"function\", () => \"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\");\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n    assert(path != null && path.length > 0, () => \"URL path for http must not be null, undefined or empty.\");\n    if (Array.isArray(path)) {\n      assert(path.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${path.length}).`);\n    }\n    this.path = path;\n    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {\n      throw new Error(\"requestInit is expected to have no pre-existing body, but has one.\");\n    }\n    this.requestInit = loadOptions.requestInit || {};\n  }\n  async save(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\"BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.\");\n    }\n    const init2 = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);\n    init2.body = new FormData();\n    const weightsManifest = [{\n      paths: [\"./model.weights.bin\"],\n      weights: modelArtifacts.weightSpecs\n    }];\n    const modelTopologyAndWeightManifest = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n    init2.body.append(\"model.json\", new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), \"model.json\");\n    if (modelArtifacts.weightData != null) {\n      init2.body.append(\"model.weights.bin\", new Blob([modelArtifacts.weightData], { type: OCTET_STREAM_MIME_TYPE }), \"model.weights.bin\");\n    }\n    const response = await this.fetch(this.path, init2);\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response]\n      };\n    } else {\n      throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${response.status}.`);\n    }\n  }\n  async load() {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n    if (!modelConfigRequest.ok) {\n      throw new Error(`Request to ${this.path} failed with status code ${modelConfigRequest.status}. Please verify this URL points to the model JSON of the model to load.`);\n    }\n    let modelJSON;\n    try {\n      modelJSON = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`;\n      if (this.path.endsWith(\".pb\")) {\n        message += \" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.\";\n      } else {\n        message += \" Please make sure the server is serving valid JSON for this request.\";\n      }\n      throw new Error(message);\n    }\n    const modelTopology = modelJSON.modelTopology;\n    const weightsManifest = modelJSON.weightsManifest;\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);\n    }\n    return getModelArtifactsForJSON(modelJSON, (weightsManifest2) => this.loadWeights(weightsManifest2));\n  }\n  async loadWeights(weightsManifest) {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n    const weightSpecs = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n    }\n    const fetchURLs = [];\n    const urlPromises = [];\n    for (const weightsGroup of weightsManifest) {\n      for (const path of weightsGroup.paths) {\n        if (this.weightUrlConverter != null) {\n          urlPromises.push(this.weightUrlConverter(path));\n        } else {\n          fetchURLs.push(pathPrefix + path + suffix);\n        }\n      }\n    }\n    if (this.weightUrlConverter) {\n      fetchURLs.push(...await Promise.all(urlPromises));\n    }\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n      requestInit: this.requestInit,\n      fetchFunc: this.fetch,\n      onProgress: this.onProgress\n    });\n    return [weightSpecs, concatenateArrayBuffers(buffers)];\n  }\n};\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\nfunction parseUrl(url) {\n  const lastSlash = url.lastIndexOf(\"/\");\n  const lastSearchParam = url.lastIndexOf(\"?\");\n  const prefix = url.substring(0, lastSlash);\n  const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : \"\";\n  return [prefix + \"/\", suffix];\n}\nfunction isHTTPScheme(url) {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nvar httpRouter = (url, loadOptions) => {\n  if (typeof fetch === \"undefined\" && (loadOptions == null || loadOptions.fetchFunc == null)) {\n    return null;\n  } else {\n    let isHTTP = true;\n    if (Array.isArray(url)) {\n      isHTTP = url.every((urlItem) => isHTTPScheme(urlItem));\n    } else {\n      isHTTP = isHTTPScheme(url);\n    }\n    if (isHTTP) {\n      return http(url, loadOptions);\n    }\n  }\n  return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\nfunction http(path, loadOptions) {\n  return new HTTPRequest(path, loadOptions);\n}\nfunction browserHTTPRequest(path, loadOptions) {\n  return http(path, loadOptions);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js\nvar PassthroughLoader = class {\n  constructor(modelArtifacts) {\n    this.modelArtifacts = modelArtifacts;\n  }\n  async load() {\n    return this.modelArtifacts;\n  }\n};\nvar PassthroughSaver = class {\n  constructor(saveHandler) {\n    this.saveHandler = saveHandler;\n  }\n  async save(modelArtifacts) {\n    return this.saveHandler(modelArtifacts);\n  }\n};\nfunction fromMemory(modelArtifacts, weightSpecs, weightData, trainingConfig) {\n  if (arguments.length === 1) {\n    const isModelArtifacts = modelArtifacts.modelTopology != null || modelArtifacts.weightSpecs != null;\n    if (isModelArtifacts) {\n      return new PassthroughLoader(modelArtifacts);\n    } else {\n      console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\");\n      return new PassthroughLoader({ modelTopology: modelArtifacts });\n    }\n  } else {\n    console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\");\n    return new PassthroughLoader({\n      modelTopology: modelArtifacts,\n      weightSpecs,\n      weightData,\n      trainingConfig\n    });\n  }\n}\nfunction withSaveHandler(saveHandler) {\n  return new PassthroughSaver(saveHandler);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/math.js\nvar math_exports = {};\n__export(math_exports, {\n  confusionMatrix: () => confusionMatrix\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js\nfunction matMul_(a, b, transposeA = false, transposeB = false) {\n  let $a = convertToTensor(a, \"a\", \"matMul\");\n  let $b = convertToTensor(b, \"b\", \"matMul\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  const inputs = { a: $a, b: $b };\n  const attrs = { transposeA, transposeB };\n  return ENGINE.runKernel(BatchMatMul, inputs, attrs);\n}\nvar matMul = op({ matMul_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js\nfunction oneHot_(indices, depth, onValue = 1, offValue = 0) {\n  if (depth < 2) {\n    throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\n  }\n  const $indices = convertToTensor(indices, \"indices\", \"oneHot\", \"int32\");\n  const inputs = { indices: $indices };\n  const attrs = { depth, onValue, offValue };\n  return ENGINE.runKernel(OneHot, inputs, attrs);\n}\nvar oneHot = op({ oneHot_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js\nfunction transpose_(x, perm) {\n  const $x = convertToTensor(x, \"x\", \"transpose\");\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n  assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} must match length of perm ${perm}.`);\n  perm.forEach((axis) => {\n    assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1} but got ${perm}`);\n  });\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n  const inputs = { x: $x };\n  const attrs = { perm };\n  return ENGINE.runKernel(Transpose, inputs, attrs);\n}\nvar transpose = op({ transpose_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/confusion_matrix.js\nfunction confusionMatrix_(labels, predictions, numClasses) {\n  const $labels = convertToTensor(labels, \"labels\", \"confusionMatrix\");\n  const $predictions = convertToTensor(predictions, \"predictions\", \"confusionMatrix\");\n  assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), () => `If provided, numClasses must be a positive integer, but got ${numClasses}`);\n  assert($labels.rank === 1, () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);\n  assert($predictions.rank === 1, () => `Expected the rank of predictions to be 1, but got ${$predictions.rank}`);\n  assert($labels.shape[0] === $predictions.shape[0], () => `Mismatch in the number of examples: ${$labels.shape[0]} vs. ${$predictions.shape[0]}. Labels and predictions should have the same number of elements.`);\n  assert(numClasses > 0 && Number.isInteger(numClasses), () => `numClasses is required to be a positive integer, but got ${numClasses}`);\n  const oneHotLabels = oneHot(cast($labels, \"int32\"), numClasses);\n  const oneHotPredictions = oneHot(cast($predictions, \"int32\"), numClasses);\n  const oneHotLabelsT = transpose(oneHotLabels);\n  const product = matMul(oneHotLabelsT, oneHotPredictions);\n  return cast(product, \"int32\");\n}\nvar confusionMatrix = op({ confusionMatrix_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js\nvar broadcast_util_exports = {};\n__export(broadcast_util_exports, {\n  assertAndGetBroadcastShape: () => assertAndGetBroadcastShape,\n  getBroadcastDims: () => getBroadcastDims,\n  getReductionAxes: () => getReductionAxes\n});\nfunction getBroadcastDims(inShape, outShape) {\n  const inRank = inShape.length;\n  const dims = [];\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n  return dims;\n}\nfunction getReductionAxes(inShape, outShape) {\n  const result = [];\n  for (let i = 0; i < outShape.length; i++) {\n    const inDim = inShape[inShape.length - i - 1];\n    const outAxis = outShape.length - i - 1;\n    const outDim = outShape[outAxis];\n    if (inDim == null || inDim === 1 && outDim > 1) {\n      result.unshift(outAxis);\n    }\n  }\n  return result;\n}\nfunction assertAndGetBroadcastShape(shapeA, shapeB) {\n  const result = [];\n  const l = Math.max(shapeA.length, shapeB.length);\n  for (let i = 0; i < l; i++) {\n    let a = shapeA[shapeA.length - i - 1];\n    if (a == null) {\n      a = 1;\n    }\n    let b = shapeB[shapeB.length - i - 1];\n    if (b == null) {\n      b = 1;\n    }\n    if (a === 1) {\n      result.unshift(b);\n    } else if (b === 1) {\n      result.unshift(a);\n    } else if (a !== b) {\n      const errMsg = `Operands could not be broadcast together with shapes ${shapeA} and ${shapeB}.`;\n      throw Error(errMsg);\n    } else {\n      result.unshift(a);\n    }\n  }\n  return result;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/browser.js\nvar browser_exports = {};\n__export(browser_exports, {\n  fromPixels: () => fromPixels,\n  fromPixelsAsync: () => fromPixelsAsync,\n  toPixels: () => toPixels\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js\nfunction tensor3d(values, shape, dtype) {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 3) {\n    throw new Error(\"tensor3d() requires shape to have three numbers\");\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n    throw new Error(\"tensor3d() requires values to be number[][][] or flat/TypedArray\");\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\"tensor3d() requires shape to be provided when `values` are a flat array\");\n  }\n  return makeTensor(values, shape, inferredShape, dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/browser.js\nvar fromPixels2DContext;\nfunction fromPixels_(pixels, numChannels = 3) {\n  if (numChannels > 4) {\n    throw new Error(\"Cannot construct Tensor with more than 4 channels from pixels.\");\n  }\n  if (pixels == null) {\n    throw new Error(\"pixels passed to tf.browser.fromPixels() can not be null\");\n  }\n  let isPixelData2 = false;\n  let isImageData = false;\n  let isVideo = false;\n  let isImage = false;\n  let isCanvasLike = false;\n  let isImageBitmap = false;\n  if (pixels.data instanceof Uint8Array) {\n    isPixelData2 = true;\n  } else if (typeof ImageData !== \"undefined\" && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (typeof HTMLVideoElement !== \"undefined\" && pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (typeof HTMLImageElement !== \"undefined\" && pixels instanceof HTMLImageElement) {\n    isImage = true;\n  } else if (pixels.getContext != null) {\n    isCanvasLike = true;\n  } else if (typeof ImageBitmap !== \"undefined\" && pixels instanceof ImageBitmap) {\n    isImageBitmap = true;\n  } else {\n    throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${pixels.constructor.name}`);\n  }\n  if (isVideo) {\n    const HAVE_CURRENT_DATA_READY_STATE = 2;\n    if (isVideo && pixels.readyState < HAVE_CURRENT_DATA_READY_STATE) {\n      throw new Error(\"The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.\");\n    }\n  }\n  const kernel = getKernel(FromPixels, ENGINE.backendName);\n  if (kernel != null) {\n    const inputs = { pixels };\n    const attrs = { numChannels };\n    return ENGINE.runKernel(FromPixels, inputs, attrs);\n  }\n  const [width, height] = isVideo ? [\n    pixels.videoWidth,\n    pixels.videoHeight\n  ] : [pixels.width, pixels.height];\n  let vals;\n  if (isCanvasLike) {\n    vals = pixels.getContext(\"2d\").getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData2) {\n    vals = pixels.data;\n  } else if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      if (typeof document === \"undefined\") {\n        if (typeof OffscreenCanvas !== \"undefined\" && typeof OffscreenCanvasRenderingContext2D !== \"undefined\") {\n          fromPixels2DContext = new OffscreenCanvas(1, 1).getContext(\"2d\");\n        } else {\n          throw new Error(\"Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.\");\n        }\n      } else {\n        fromPixels2DContext = document.createElement(\"canvas\").getContext(\"2d\");\n      }\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n  let values;\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    const numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n    for (let i = 0; i < numPixels; i++) {\n      for (let channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n  const outShape = [height, width, numChannels];\n  return tensor3d(values, outShape, \"int32\");\n}\nfunction isPixelData(pixels) {\n  return pixels != null && pixels.data instanceof Uint8Array;\n}\nfunction isImageBitmapFullySupported() {\n  return typeof window !== \"undefined\" && typeof ImageBitmap !== \"undefined\" && window.hasOwnProperty(\"createImageBitmap\");\n}\nfunction isNonEmptyPixels(pixels) {\n  return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\nfunction canWrapPixelsToImageBitmap(pixels) {\n  return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) && isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\nasync function fromPixelsAsync(pixels, numChannels = 3) {\n  let inputs = null;\n  if (env().getBool(\"WRAP_TO_IMAGEBITMAP\") && canWrapPixelsToImageBitmap(pixels)) {\n    let imageBitmap;\n    try {\n      imageBitmap = await createImageBitmap(pixels, { premultiplyAlpha: \"none\" });\n    } catch (e) {\n      imageBitmap = null;\n    }\n    if (imageBitmap != null && imageBitmap.width === pixels.width && imageBitmap.height === pixels.height) {\n      inputs = imageBitmap;\n    } else {\n      inputs = pixels;\n    }\n  } else {\n    inputs = pixels;\n  }\n  return fromPixels_(inputs, numChannels);\n}\nasync function toPixels(img, canvas) {\n  let $img = convertToTensor(img, \"img\", \"toPixels\");\n  if (!(img instanceof Tensor)) {\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, \"int32\");\n    originalImgTensor.dispose();\n  }\n  if ($img.rank !== 2 && $img.rank !== 3) {\n    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\n  }\n  const [height, width] = $img.shape.slice(0, 2);\n  const depth = $img.rank === 2 ? 1 : $img.shape[2];\n  if (depth > 4 || depth === 2) {\n    throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${depth}`);\n  }\n  if ($img.dtype !== \"float32\" && $img.dtype !== \"int32\") {\n    throw new Error(`Unsupported type for toPixels: ${$img.dtype}. Please use float32 or int32 tensors.`);\n  }\n  const data = await $img.data();\n  const multiplier = $img.dtype === \"float32\" ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255];\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n      if ($img.dtype === \"float32\") {\n        if (value < 0 || value > 1) {\n          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${value}.`);\n        }\n      } else if ($img.dtype === \"int32\") {\n        if (value < 0 || value > 255) {\n          throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${value}.`);\n        }\n      }\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n  if (canvas != null) {\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext(\"2d\");\n    const imageData = new ImageData(bytes, width, height);\n    ctx.putImageData(imageData, 0, 0);\n  }\n  if ($img !== img) {\n    $img.dispose();\n  }\n  return bytes;\n}\nvar fromPixels = op({ fromPixels_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js\nvar gather_nd_util_exports = {};\n__export(gather_nd_util_exports, {\n  prepareAndValidate: () => prepareAndValidate\n});\nfunction prepareAndValidate(tensor2, indices) {\n  const tensorRank = tensor2.shape.length;\n  const indicesRank = indices.shape.length;\n  if (tensorRank < 1) {\n    throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${tensorRank}.`);\n  }\n  if (indicesRank < 1) {\n    throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${indicesRank}.`);\n  }\n  if (indices.dtype !== \"int32\") {\n    throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${indices.dtype}.`);\n  }\n  if (indices.shape[indicesRank - 1] > tensorRank) {\n    throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${indices.shape[indicesRank - 1]} vs. ${tensorRank}`);\n  }\n  if (sizeFromShape(tensor2.shape) === 0) {\n    throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${tensor2.shape}.`);\n  }\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  let nResult = 1;\n  for (let i = 0; i < indicesShape.length - 1; ++i) {\n    nResult *= indicesShape[i];\n  }\n  const inputShape = tensor2.shape;\n  const resultShape = indicesShape.slice();\n  resultShape.pop();\n  let sliceSize = 1;\n  for (let i = sliceRank; i < tensorRank; ++i) {\n    sliceSize *= inputShape[i];\n    resultShape.push(inputShape[i]);\n  }\n  const strides = [\n    ...computeStrides(tensor2.shape).map((stride) => stride / sliceSize),\n    1\n  ].slice(0, sliceRank);\n  return [resultShape, nResult, sliceSize, strides];\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js\nvar scatter_nd_util_exports = {};\n__export(scatter_nd_util_exports, {\n  calculateShapes: () => calculateShapes,\n  validateInput: () => validateInput,\n  validateUpdateShape: () => validateUpdateShape\n});\nfunction validateUpdateShape(shape, indices, updates) {\n  const sliceDim = indices.rank > 1 ? indices.shape[indices.rank - 1] : 1;\n  const batchDim = indices.rank > 1 ? indices.rank - 1 : 1;\n  const shapeError = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${updates.shape}, indices.shape: ${indices.shape}, shape: ${shape}, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;\n  if (updates.rank < batchDim) {\n    throw new Error(shapeError + ` update.rank < ${batchDim}. `);\n  }\n  if (shape.length < sliceDim + (updates.rank - batchDim)) {\n    throw new Error(shapeError + ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);\n  }\n  if (updates.rank !== batchDim + shape.length - sliceDim) {\n    throw new Error(shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);\n  }\n  for (let d = 0; d < batchDim; ++d) {\n    if (updates.shape[d] !== indices.shape[d]) {\n      throw new Error(shapeError + ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${indices.shape[d]}).`);\n    }\n  }\n  for (let d = 0; d < updates.rank - batchDim; ++d) {\n    if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {\n      throw new Error(shapeError + ` updates.shape[${d + batchDim}] (${updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${shape[d + batchDim]})`);\n    }\n  }\n}\nfunction validateInput(updates, indices, shape) {\n  if (indices.rank < 1) {\n    throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${indices.rank}.`);\n  }\n  if (updates.rank < 1) {\n    throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${updates.rank}.`);\n  }\n  if (indices.dtype !== \"int32\") {\n    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${indices.dtype}`);\n  }\n  if (shape.length < 1) {\n    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${shape}`);\n  }\n  if (shape.length === 0) {\n    if (indices.size === 0) {\n      throw new Error(`Indices specified for empty output. indices shape: ${indices.shape}`);\n    }\n    if (updates.size === 0) {\n      throw new Error(`Updates specified for empty output. updates shape: ${updates.shape}`);\n    }\n  }\n  validateUpdateShape(shape, indices, updates);\n}\nfunction calculateShapes(updates, indices, shape) {\n  const indicesRank = indices.shape.length;\n  const sliceRank = indicesRank > 1 ? indices.shape[indicesRank - 1] : 1;\n  const totalNd = shape.length;\n  let sliceSize = 1;\n  for (let i = sliceRank; i < totalNd; ++i) {\n    sliceSize *= shape[i];\n  }\n  const safeSliceDim = sliceRank < 1 ? 1 : sliceRank;\n  const numUpdates = sizeFromShape(indices.shape) / safeSliceDim;\n  const strides = [...computeStrides(shape.slice(0, sliceRank)), 1];\n  const outputSize = sizeFromShape(shape);\n  return { sliceRank, numUpdates, sliceSize, strides, outputSize };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js\nvar slice_util_exports = {};\n__export(slice_util_exports, {\n  assertParamsValid: () => assertParamsValid,\n  computeFlatOffset: () => computeFlatOffset,\n  computeOutShape: () => computeOutShape,\n  getNormalizedAxes: () => getNormalizedAxes,\n  isSliceContinous: () => isSliceContinous,\n  maskToAxes: () => maskToAxes,\n  parseSliceParams: () => parseSliceParams,\n  sliceInfo: () => sliceInfo,\n  startForAxis: () => startForAxis,\n  startIndicesWithElidedDims: () => startIndicesWithElidedDims,\n  stopForAxis: () => stopForAxis,\n  stopIndicesWithElidedDims: () => stopIndicesWithElidedDims,\n  stridesForAxis: () => stridesForAxis,\n  stridesWithElidedDims: () => stridesWithElidedDims\n});\nvar NEW_AXIS = -2;\nvar SHRINK_AXIS = -1;\nfunction assertParamsValid(input2, begin, size) {\n  const inputRank = input2.shape.length;\n  assert(inputRank === begin.length, () => `Error in slice${inputRank}D: Length of begin ${begin} must match the rank of the array (${inputRank}).`);\n  assert(inputRank === size.length, () => `Error in slice${inputRank}D: Length of size ${size} must match the rank of the array (${inputRank}).`);\n  for (let i = 0; i < inputRank; ++i) {\n    assert(begin[i] + size[i] <= input2.shape[i], () => `Error in slice${inputRank}D: begin[${i}] + size[${i}] (${begin[i] + size[i]}) would overflow input.shape[${i}] (${input2.shape[i]})`);\n  }\n}\nfunction maskToAxes(mask) {\n  const axes = [];\n  let axis = 0;\n  while (mask > 0) {\n    if (mask & 1) {\n      axes.push(axis);\n    }\n    mask /= 2;\n    axis++;\n  }\n  return axes;\n}\nfunction computeOutShape(begin, end, strides) {\n  const size = [];\n  for (let axis = 0; axis < begin.length; axis++) {\n    size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);\n  }\n  return size;\n}\nfunction stridesWithElidedDims(strides, ellipsisInsertionIndex, numElidedAxes, inputShape) {\n  const newStrides = [...strides];\n  for (let i = newStrides.length; i < inputShape.length; i++) {\n    newStrides.push(1);\n  }\n  for (let i = 0; i < numElidedAxes; i++) {\n    if (i === 0) {\n      newStrides[ellipsisInsertionIndex] = 1;\n    } else {\n      newStrides.splice(ellipsisInsertionIndex, 0, 1);\n      newStrides.pop();\n    }\n  }\n  return newStrides;\n}\nfunction unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, normalizedAxis) {\n  if (normalizedAxis <= ellipsisInsertionIndex) {\n    return normalizedAxis;\n  }\n  return normalizedAxis - (numElidedAxes - 1);\n}\nfunction getElidedAxes(numElidedAxes, ellipsisInsertionIndex) {\n  const elidedAxes = [];\n  for (let i = 0; i < numElidedAxes; i++) {\n    elidedAxes.push(ellipsisInsertionIndex + i);\n  }\n  return elidedAxes;\n}\nfunction getNormalizedAxes(inputShape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask) {\n  const inputRank = inputShape.length;\n  let normalizedBegin = new Array(inputRank), normalizedEnd = new Array(inputRank), normalizedStrides = new Array(inputRank);\n  if (ellipsisAxes.length && numInterpolatedAxes > 0) {\n    const fullIndex = ellipsisAxes[0];\n    const numElidedAxes = numInterpolatedAxes + 1;\n    normalizedBegin = startIndicesWithElidedDims(beginMask, fullIndex, numElidedAxes, begin, inputShape);\n    normalizedEnd = stopIndicesWithElidedDims(endMask, fullIndex, numElidedAxes, end, inputShape);\n    normalizedStrides = stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);\n  } else {\n    for (let axis = 0; axis < inputRank; axis++) {\n      normalizedBegin[axis] = startForAxis(beginMask, begin, strides, inputShape, axis, ellipsisMask);\n      normalizedEnd[axis] = stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);\n      normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);\n    }\n  }\n  return {\n    begin: normalizedBegin,\n    end: normalizedEnd,\n    strides: normalizedStrides\n  };\n}\nfunction startIndicesWithElidedDims(beginMask, ellipsisInsertionIndex, numElidedAxes, originalBegin, inputShape) {\n  const newIndices = [...inputShape];\n  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n  for (let axis = 0; axis < newIndices.length; axis++) {\n    if (elidedAxes.indexOf(axis) > -1) {\n      newIndices[axis] = 0;\n    } else {\n      const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n      let originalValue = originalBegin[originalAxis];\n      if (beginMask & 1 << originalAxis) {\n        originalValue = 0;\n      }\n      newIndices[axis] = originalValue;\n    }\n  }\n  return newIndices;\n}\nfunction stopIndicesWithElidedDims(endMask, ellipsisInsertionIndex, numElidedAxes, originalEnd, inputShape) {\n  const newIndices = [...inputShape];\n  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n  for (let axis = 0; axis < newIndices.length; axis++) {\n    if (elidedAxes.indexOf(axis) > -1) {\n      newIndices[axis] = Number.MAX_SAFE_INTEGER;\n    } else {\n      const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n      let originalValue = originalEnd[originalAxis];\n      if (endMask & 1 << originalAxis) {\n        originalValue = Number.MAX_SAFE_INTEGER;\n      }\n      newIndices[axis] = originalValue;\n    }\n  }\n  for (let i = 0; i < newIndices.length; i++) {\n    const axisSize = inputShape[i];\n    if (newIndices[i] < 0) {\n      newIndices[i] += axisSize;\n    }\n    newIndices[i] = clamp(0, newIndices[i], inputShape[i]);\n  }\n  return newIndices;\n}\nfunction stridesForAxis(strides, axis, ellipsisMask) {\n  let stride = strides[axis];\n  if (ellipsisMask & 1 << axis || stride == null) {\n    stride = 1;\n  }\n  return stride;\n}\nfunction startForAxis(beginMask, startIndices, strides, inputShape, axis, ellipsisMask) {\n  let start = startIndices[axis];\n  const stride = strides[axis] || 1;\n  if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {\n    if (stride > 0) {\n      start = Number.MIN_SAFE_INTEGER;\n    } else {\n      start = Number.MAX_SAFE_INTEGER;\n    }\n  }\n  const axisSize = inputShape[axis];\n  if (start < 0) {\n    start += axisSize;\n  }\n  start = clamp(0, start, axisSize - 1);\n  return start;\n}\nfunction stopForAxis(endMask, stopIndices, strides, inputShape, axis, ellipsisMask) {\n  let stop = stopIndices[axis];\n  const stride = strides[axis] || 1;\n  if (endMask & 1 << axis || ellipsisMask & 1 << axis || stop == null) {\n    if (stride > 0) {\n      stop = Number.MAX_SAFE_INTEGER;\n    } else {\n      stop = Number.MIN_SAFE_INTEGER;\n    }\n  }\n  const axisSize = inputShape[axis];\n  if (stop < 0) {\n    stop += axisSize;\n  }\n  if (stride > 0) {\n    stop = clamp(0, stop, axisSize);\n  } else {\n    stop = clamp(-1, stop, axisSize - 1);\n  }\n  return stop;\n}\nfunction isSliceContinous(shape, begin, size) {\n  let firstNonOneAxis = size.length;\n  for (let i = 0; i < size.length; i++) {\n    if (size[i] > 1) {\n      firstNonOneAxis = i;\n      break;\n    }\n  }\n  for (let i = firstNonOneAxis + 1; i < size.length; i++) {\n    if (begin[i] > 0 || size[i] !== shape[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction computeFlatOffset(begin, strides) {\n  let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;\n  for (let i = 0; i < begin.length - 1; i++) {\n    flatOffset += begin[i] * strides[i];\n  }\n  return flatOffset;\n}\nfunction parseSliceParams(x, begin, size) {\n  let begin_;\n  const xRank = x.shape.length;\n  if (typeof begin === \"number\") {\n    begin_ = [begin, ...new Array(xRank - 1).fill(0)];\n  } else if (begin.length < xRank) {\n    begin_ = begin.concat(new Array(xRank - begin.length).fill(0));\n  } else {\n    begin_ = begin.slice();\n  }\n  begin_.forEach((d) => {\n    assert(d !== -1, () => \"slice() does not support negative begin indexing.\");\n  });\n  let size_;\n  if (size == null) {\n    size_ = new Array(xRank).fill(-1);\n  } else if (typeof size === \"number\") {\n    size_ = [size, ...new Array(xRank - 1).fill(-1)];\n  } else if (size.length < xRank) {\n    size_ = size.concat(new Array(xRank - size.length).fill(-1));\n  } else {\n    size_ = size;\n  }\n  size_ = size_.map((d, i) => {\n    if (d >= 0) {\n      return d;\n    } else {\n      assert(d === -1, () => `Negative size values should be exactly -1 but got ${d} for the slice() size at index ${i}.`);\n      return x.shape[i] - begin_[i];\n    }\n  });\n  return [begin_, size_];\n}\nfunction sliceInfo(xShape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {\n  let stridesNonNull;\n  if (strides == null) {\n    stridesNonNull = new Array(begin.length);\n    stridesNonNull.fill(1);\n  } else {\n    stridesNonNull = strides;\n  }\n  if (ellipsisMask != null && (ellipsisMask & ellipsisMask - 1) !== 0) {\n    throw new Error(\"Multiple ellipses in slice is not allowed.\");\n  }\n  let ellipsisSeen = false;\n  const sparseSpec = {\n    dims: stridesNonNull.length,\n    numAddAxisAfterEllipsis: 0,\n    begin: begin.slice(),\n    end: end.slice(),\n    strides: stridesNonNull.slice(),\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  };\n  for (let i = 0; i < sparseSpec.dims; i++) {\n    if (ellipsisSeen && (1 << i & newAxisMask) !== 0) {\n      sparseSpec.numAddAxisAfterEllipsis++;\n    }\n    if (1 << i & ellipsisMask) {\n      ellipsisSeen = true;\n    }\n  }\n  if (!ellipsisSeen) {\n    sparseSpec.ellipsisMask |= 1 << sparseSpec.dims;\n    sparseSpec.dims++;\n  }\n  const denseSpec = {\n    dims: xShape.length,\n    beginMask: 0,\n    endMask: 0,\n    beginValid: false,\n    endValid: false\n  };\n  buildDenseSpec(sparseSpec, denseSpec);\n  let isIdentity = true;\n  let sliceDim0 = true;\n  let isSimpleSlice = true;\n  const processingShape = [];\n  const finalShape = [];\n  for (let i = 0; i < xShape.length; ++i) {\n    if (denseSpec.strides[i] === 0) {\n      throw Error(`strides[${i}] must be non-zero`);\n    }\n    const shrinkI = !!(denseSpec.shrinkAxisMask & 1 << i);\n    const dimI = xShape[i];\n    if (dimI === -1) {\n      processingShape.push(shrinkI ? 1 : -1);\n      continue;\n    }\n    const masks = [denseSpec.beginMask & 1 << i, denseSpec.endMask & 1 << i];\n    const validRange = [\n      denseSpec.strides[i] > 0 ? 0 : -1,\n      denseSpec.strides[i] > 0 ? dimI : dimI - 1\n    ];\n    if (shrinkI && denseSpec.strides[i] <= 0) {\n      throw Error(\"only stride 1 allowed on non-range indexing.\");\n    }\n    isSimpleSlice = isSimpleSlice && denseSpec.strides[i] === 1;\n    const beginAndEndMasked = !!(denseSpec.beginMask & 1 << i && denseSpec.endMask & 1 << i);\n    if (denseSpec.beginValid && denseSpec.endValid) {\n      if (shrinkI) {\n        const xFwd = denseSpec.begin[i] < 0 ? dimI + denseSpec.begin[i] : denseSpec.begin[i];\n        denseSpec.begin[i] = xFwd;\n        denseSpec.end[i] = denseSpec.begin[i] + 1;\n        if (xFwd < 0 || xFwd >= dimI) {\n          throw Error(`slice index ${denseSpec.begin[i]} of dimension ${i} out of bounds.`);\n        }\n      } else {\n        denseSpec.begin[i] = canonical(denseSpec.begin[i], 0, denseSpec.strides[i], dimI, masks, validRange);\n        denseSpec.end[i] = canonical(denseSpec.end[i], 1, denseSpec.strides[i], dimI, masks, validRange);\n      }\n      const takeAllInDimension = denseSpec.strides[i] === 1 && denseSpec.begin[i] === 0 && denseSpec.end[i] === dimI;\n      isIdentity = isIdentity && takeAllInDimension;\n      sliceDim0 = sliceDim0 && (i === 0 && denseSpec.strides[i] === 1 || takeAllInDimension);\n    } else {\n      isIdentity = isIdentity && (denseSpec.strides[i] === 1 && beginAndEndMasked);\n      sliceDim0 = sliceDim0 && (i === 0 && denseSpec.strides[i] === 1 || beginAndEndMasked);\n    }\n    let intervalLength;\n    let knownInterval = false;\n    if (denseSpec.beginValid && denseSpec.endValid) {\n      intervalLength = denseSpec.end[i] - denseSpec.begin[i];\n      knownInterval = true;\n    } else if (shrinkI) {\n      intervalLength = 1;\n      knownInterval = true;\n    } else if (beginAndEndMasked) {\n      if (dimI >= 0) {\n        if (denseSpec.strides[i] < 0) {\n          intervalLength = -dimI;\n        } else {\n          intervalLength = dimI;\n        }\n        knownInterval = true;\n      }\n    }\n    if (knownInterval) {\n      let sizeI;\n      if (intervalLength === 0 || intervalLength < 0 !== denseSpec.strides[i] < 0) {\n        sizeI = 0;\n      } else {\n        sizeI = Math.trunc(intervalLength / denseSpec.strides[i]) + (intervalLength % denseSpec.strides[i] !== 0 ? 1 : 0);\n      }\n      processingShape.push(sizeI);\n    } else {\n      processingShape.push(-1);\n    }\n  }\n  for (let denseDim = 0; denseDim < denseSpec.finalShapeGatherIndices.length; ++denseDim) {\n    const gatherIndex = denseSpec.finalShapeGatherIndices[denseDim];\n    if (gatherIndex >= 0) {\n      finalShape.push(processingShape[gatherIndex]);\n    } else if (gatherIndex === NEW_AXIS) {\n      finalShape.push(1);\n    }\n  }\n  const finalShapeSparse = finalShape.filter((dim, i) => denseSpec.finalShapeGatherIndices[i] !== NEW_AXIS);\n  return {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: denseSpec.begin,\n    end: denseSpec.end,\n    strides: denseSpec.strides\n  };\n}\nfunction buildDenseSpec(sparse2, dense2) {\n  dense2.beginMask = 0;\n  dense2.endMask = 0;\n  dense2.shrinkAxisMask = 0;\n  let fullIndex = 0;\n  dense2.beginValid = sparse2.begin != null;\n  dense2.endValid = sparse2.end != null;\n  dense2.begin = new Array(dense2.dims);\n  dense2.end = new Array(dense2.dims);\n  dense2.strides = new Array(dense2.dims);\n  dense2.finalShapeGatherIndices = [];\n  dense2.finalShapeGatherIndicesSparse = [];\n  dense2.inputShapeGatherIndicesSparse = new Array(dense2.dims);\n  for (let i = 0; i < sparse2.dims; i++) {\n    if (1 << i & sparse2.ellipsisMask) {\n      const nextIndex = Math.min(dense2.dims - (sparse2.dims - i) + 1 + sparse2.numAddAxisAfterEllipsis, dense2.dims);\n      for (; fullIndex < nextIndex; fullIndex++) {\n        dense2.begin[fullIndex] = 0;\n        dense2.end[fullIndex] = 0;\n        dense2.strides[fullIndex] = 1;\n        dense2.beginMask |= 1 << fullIndex;\n        dense2.endMask |= 1 << fullIndex;\n        dense2.finalShapeGatherIndices.push(fullIndex);\n        dense2.finalShapeGatherIndicesSparse.push(-1);\n        dense2.inputShapeGatherIndicesSparse[fullIndex] = i;\n      }\n    } else if (1 << i & sparse2.newAxisMask) {\n      dense2.finalShapeGatherIndices.push(NEW_AXIS);\n      dense2.finalShapeGatherIndicesSparse.push(-1);\n    } else {\n      if (fullIndex === dense2.begin.length) {\n        throw Error(`Index out of range using input dim ${fullIndex}; input has only ${dense2.dims} dims, ${dense2.begin.length}.`);\n      }\n      if (sparse2.begin != null) {\n        dense2.begin[fullIndex] = sparse2.begin[i];\n      }\n      if (sparse2.end != null) {\n        dense2.end[fullIndex] = sparse2.end[i];\n      }\n      dense2.strides[fullIndex] = sparse2.strides[i];\n      if (sparse2.beginMask & 1 << i) {\n        dense2.beginMask |= 1 << fullIndex;\n      }\n      if (sparse2.endMask & 1 << i) {\n        dense2.endMask |= 1 << fullIndex;\n      }\n      if (sparse2.shrinkAxisMask & 1 << i) {\n        dense2.finalShapeGatherIndices.push(SHRINK_AXIS);\n        dense2.finalShapeGatherIndicesSparse.push(-1);\n        dense2.shrinkAxisMask |= 1 << fullIndex;\n      } else {\n        dense2.finalShapeGatherIndices.push(fullIndex);\n        dense2.finalShapeGatherIndicesSparse.push(i);\n      }\n      dense2.inputShapeGatherIndicesSparse[fullIndex] = i;\n      fullIndex++;\n    }\n  }\n}\nfunction canonical(x, c, strideI, dimI, masks, validRange) {\n  if (masks[c]) {\n    return strideI > 0 ? validRange[c] : validRange[c + 1 & 1];\n  } else {\n    const xFwd = x < 0 ? dimI + x : x;\n    return xFwd < validRange[0] ? validRange[0] : xFwd > validRange[1] ? validRange[1] : xFwd;\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/serialization.js\nvar serialization_exports = {};\n__export(serialization_exports, {\n  Serializable: () => Serializable,\n  SerializationMap: () => SerializationMap,\n  registerClass: () => registerClass\n});\nvar Serializable = class {\n  getClassName() {\n    return this.constructor.className;\n  }\n  static fromConfig(cls, config) {\n    return new cls(config);\n  }\n};\nvar SerializationMap = class {\n  constructor() {\n    this.classNameMap = {};\n  }\n  static getMap() {\n    if (SerializationMap.instance == null) {\n      SerializationMap.instance = new SerializationMap();\n    }\n    return SerializationMap.instance;\n  }\n  static register(cls) {\n    SerializationMap.getMap().classNameMap[cls.className] = [cls, cls.fromConfig];\n  }\n};\nfunction registerClass(cls) {\n  assert(cls.className != null, () => `Class being registered does not have the static className property defined.`);\n  assert(typeof cls.className === \"string\", () => `className is required to be a string, but got type ` + typeof cls.className);\n  assert(cls.className.length > 0, () => `Class being registered has an empty-string as its className, which is disallowed.`);\n  SerializationMap.register(cls);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/test_util.js\nvar test_util_exports = {};\n__export(test_util_exports, {\n  TEST_EPSILON_FLOAT16: () => TEST_EPSILON_FLOAT16,\n  encodeStrings: () => encodeStrings,\n  expectArrayBuffersEqual: () => expectArrayBuffersEqual,\n  expectArraysClose: () => expectArraysClose,\n  expectArraysEqual: () => expectArraysEqual,\n  expectNumbersClose: () => expectNumbersClose,\n  expectPromiseToFail: () => expectPromiseToFail,\n  expectValuesInRange: () => expectValuesInRange,\n  testEpsilon: () => testEpsilon\n});\nvar TEST_EPSILON_FLOAT32 = 1e-3;\nvar TEST_EPSILON_FLOAT16 = 0.1;\nfunction expectArraysClose(actual, expected, epsilon3) {\n  if (epsilon3 == null) {\n    epsilon3 = testEpsilon();\n  }\n  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon3));\n}\nfunction testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;\n}\nfunction expectArraysPredicate(actual, expected, predicate) {\n  let checkClassType = true;\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n    if (aType !== bType) {\n      throw new Error(`Arrays are of different type. Actual: ${aType}. Expected: ${bType}`);\n    }\n  }\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(`Arrays have different shapes. Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n    }\n  }\n  const actualFlat = isTypedArray(actual) ? actual : flatten(actual);\n  const expectedFlat = isTypedArray(expected) ? expected : flatten(expected);\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs expected: ${expectedFlat.length}.\nActual:   ${actualFlat}.\nExpected: ${expectedFlat}.`);\n  }\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n    if (!predicate(a, e)) {\n      throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\nActual:   ${actualFlat}.\nExpected: ${expectedFlat}.`);\n    }\n  }\n}\nfunction expectPromiseToFail(fn, done) {\n  fn().then(() => done.fail(), () => done());\n}\nfunction expectArraysEqual(actual, expected) {\n  const exp4 = typeof expected === \"string\" || typeof expected === \"number\" || typeof expected === \"boolean\" ? [expected] : expected;\n  if (isString(actual) || isString(actual[0]) || isString(expected) || isString(expected[0])) {\n    return expectArraysPredicate(actual, exp4, (a, b) => a == b);\n  }\n  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));\n}\nfunction expectNumbersClose(a, e, epsilon3) {\n  if (epsilon3 == null) {\n    epsilon3 = testEpsilon();\n  }\n  if (!areClose(a, e, epsilon3)) {\n    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n  }\n}\nfunction areClose(a, e, epsilon3) {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon3) {\n    return false;\n  }\n  return true;\n}\nfunction expectValuesInRange(actual, low, high) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n    }\n  }\n}\nfunction expectArrayBuffersEqual(actual, expected) {\n  const actualArray = new Float32Array(actual);\n  const expectedArray = new Float32Array(expected);\n  if (actualArray.length !== expectedArray.length) {\n    throw new Error(`Expected ArrayBuffer to be of length ${expectedArray.length}, but it was ${actualArray.length}`);\n  }\n  for (let i = 0; i < expectedArray.length; i++) {\n    if (actualArray[i] !== expectedArray[i]) {\n      throw new Error(`Expected ArrayBuffer value at ${i} to be ${expectedArray[i]} but got ${actualArray[i]} instead`);\n    }\n  }\n}\nfunction encodeStrings(a) {\n  for (let i = 0; i < a.length; i++) {\n    const val = a[i];\n    if (Array.isArray(val)) {\n      encodeStrings(val);\n    } else {\n      a[i] = encodeString(val);\n    }\n  }\n  return a;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/version.js\nvar version = \"3.13.0\";\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/globals.js\nfunction enableProdMode() {\n  env().set(\"PROD\", true);\n}\nfunction enableDebugMode() {\n  env().set(\"DEBUG\", true);\n}\nfunction disableDeprecationWarnings() {\n  env().set(\"DEPRECATION_WARNINGS_ENABLED\", false);\n  console.warn(`TensorFlow.js deprecation warnings have been disabled.`);\n}\nfunction deprecationWarn(msg) {\n  if (env().getBool(\"DEPRECATION_WARNINGS_ENABLED\")) {\n    console.warn(msg + \" You can disable deprecation warnings with tf.disableDeprecationWarnings().\");\n  }\n}\nsetDeprecationWarningFn(deprecationWarn);\nfunction disposeVariables() {\n  ENGINE.disposeVariables();\n}\nfunction engine() {\n  return ENGINE;\n}\nfunction memory() {\n  return ENGINE.memory();\n}\nfunction profile(f) {\n  return ENGINE.profile(f);\n}\nfunction tidy(nameOrFn, fn) {\n  return ENGINE.tidy(nameOrFn, fn);\n}\nfunction dispose(container) {\n  const tensors = getTensorsInContainer(container);\n  tensors.forEach((tensor2) => tensor2.dispose());\n}\nfunction keep(result) {\n  return ENGINE.keep(result);\n}\nfunction time(f) {\n  return ENGINE.time(f);\n}\nfunction setBackend(backendName) {\n  return ENGINE.setBackend(backendName);\n}\nfunction ready() {\n  return ENGINE.ready();\n}\nfunction getBackend() {\n  return ENGINE.backendName;\n}\nfunction removeBackend(name) {\n  ENGINE.removeBackend(name);\n}\nfunction findBackend(name) {\n  return ENGINE.findBackend(name);\n}\nfunction findBackendFactory(name) {\n  return ENGINE.findBackendFactory(name);\n}\nfunction registerBackend(name, factory, priority = 1) {\n  return ENGINE.registerBackend(name, factory, priority);\n}\nfunction backend() {\n  return ENGINE.backend;\n}\nfunction setPlatform(platformName, platform) {\n  env().setPlatform(platformName, platform);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/add.js\nfunction add_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"add\");\n  let $b = convertToTensor(b, \"b\", \"add\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(Add, inputs);\n}\nvar add2 = op({ add_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js\nfunction floorDiv_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"floorDiv\");\n  let $b = convertToTensor(b, \"b\", \"floorDiv\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(FloorDiv, inputs);\n}\nvar floorDiv = op({ floorDiv_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/div.js\nfunction div_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"div\");\n  let $b = convertToTensor(b, \"b\", \"div\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  if ($a.dtype === \"int32\" && $b.dtype === \"int32\") {\n    return floorDiv($a, $b);\n  }\n  const inputs = { a: $a, b: $b };\n  const attrs = {};\n  return ENGINE.runKernel(RealDiv, inputs, attrs);\n}\nvar div = op({ div_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/mul.js\nfunction mul_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"mul\");\n  let $b = convertToTensor(b, \"b\", \"mul\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(Multiply, inputs);\n}\nvar mul = op({ mul_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/abs.js\nfunction abs_(x) {\n  const $x = convertToTensor(x, \"x\", \"abs\");\n  if ($x.dtype === \"complex64\") {\n    const inputs = { x: $x };\n    return ENGINE.runKernel(ComplexAbs, inputs);\n  } else {\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Abs, inputs);\n  }\n}\nvar abs = op({ abs_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/acos.js\nfunction acos_(x) {\n  const $x = convertToTensor(x, \"x\", \"acos\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Acos, inputs);\n}\nvar acos = op({ acos_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/acosh.js\nfunction acosh_(x) {\n  const $x = convertToTensor(x, \"x\", \"acosh\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Acosh, inputs);\n}\nvar acosh = op({ acosh_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js\nfunction addN_(tensors) {\n  assert(Array.isArray(tensors), () => \"The argument passed to tf.addN() must be a list of tensors\");\n  assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${tensors.length}`);\n  const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, \"addN\"));\n  const firstTensor = $tensors[0];\n  $tensors.forEach((t) => {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error(\"All tensors passed to tf.addN() must have the same dtype\");\n    }\n  });\n  $tensors.forEach((t) => {\n    if (!arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error(\"All tensors passed to tf.addN() must have the same shape\");\n    }\n  });\n  const inputs = $tensors;\n  return ENGINE.runKernel(AddN, inputs);\n}\nvar addN = op({ addN_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/all.js\nfunction all_(x, axis = null, keepDims = false) {\n  const $x = convertToTensor(x, \"x\", \"all\", \"bool\");\n  const inputs = { x: $x };\n  const attrs = { axis, keepDims };\n  return ENGINE.runKernel(All, inputs, attrs);\n}\nvar all = op({ all_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/any.js\nfunction any_(x, axis = null, keepDims = false) {\n  const $x = convertToTensor(x, \"x\", \"any\", \"bool\");\n  const inputs = { x: $x };\n  const attrs = { axis, keepDims };\n  return ENGINE.runKernel(Any, inputs, attrs);\n}\nvar any = op({ any_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js\nfunction argMax_(x, axis = 0) {\n  const $x = convertToTensor(x, \"x\", \"argMax\");\n  const inputs = { x: $x };\n  const attrs = { axis };\n  return ENGINE.runKernel(ArgMax, inputs, attrs);\n}\nvar argMax = op({ argMax_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js\nfunction argMin_(x, axis = 0) {\n  const $x = convertToTensor(x, \"x\", \"argMin\");\n  const inputs = { x: $x };\n  const attrs = { axis };\n  return ENGINE.runKernel(ArgMin, inputs, attrs);\n}\nvar argMin = op({ argMin_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/asin.js\nfunction asin_(x) {\n  const $x = convertToTensor(x, \"x\", \"asin\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Asin, inputs);\n}\nvar asin = op({ asin_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/asinh.js\nfunction asinh_(x) {\n  const $x = convertToTensor(x, \"x\", \"asinh\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Asinh, inputs);\n}\nvar asinh = op({ asinh_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/atan.js\nfunction atan_(x) {\n  const $x = convertToTensor(x, \"x\", \"atan\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Atan, inputs);\n}\nvar atan = op({ atan_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js\nfunction atan2_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"atan2\");\n  let $b = convertToTensor(b, \"b\", \"atan2\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(Atan2, inputs);\n}\nvar atan2 = op({ atan2_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/atanh.js\nfunction atanh_(x) {\n  const $x = convertToTensor(x, \"x\", \"atanh\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Atanh, inputs);\n}\nvar atanh = op({ atanh_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js\nfunction computeDilation2DInfo(inputShape, filterShape, strides, pad3, dataFormat = \"NHWC\", dilations) {\n  const inputChannels = inputShape[3];\n  const $filterShape = [...filterShape, inputChannels];\n  const $dataFormat = convertConv2DDataFormat(dataFormat);\n  return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad3, null, null, $dataFormat);\n}\nfunction computePool2DInfo(inShape, filterSize, strides, dilations, pad3, roundingMode, dataFormat = \"channelsLast\") {\n  const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n  let filterShape;\n  if (dataFormat === \"channelsLast\") {\n    filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n  } else if (dataFormat === \"channelsFirst\") {\n    filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n  return computeConv2DInfo(inShape, filterShape, strides, dilations, pad3, roundingMode, false, dataFormat);\n}\nfunction computePool3DInfo(inShape, filterSize, strides, dilations, pad3, roundingMode, dataFormat = \"NDHWC\") {\n  const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n  let filterShape;\n  let $dataFormat;\n  if (dataFormat === \"NDHWC\") {\n    $dataFormat = \"channelsLast\";\n    filterShape = [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n  } else if (dataFormat === \"NCDHW\") {\n    $dataFormat = \"channelsFirst\";\n    filterShape = [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n  return computeConv3DInfo(inShape, filterShape, strides, dilations, pad3, false, $dataFormat, roundingMode);\n}\nfunction computeConv2DInfo(inShape, filterShape, strides, dilations, pad3, roundingMode, depthwise = false, dataFormat = \"channelsLast\") {\n  let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n  if (dataFormat === \"channelsLast\") {\n    [batchSize, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === \"channelsFirst\") {\n    [batchSize, inChannels, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n  const [filterHeight, filterWidth, , filterChannels] = filterShape;\n  const [strideHeight, strideWidth] = parseTupleParam(strides);\n  const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n  const { padInfo, outHeight, outWidth } = getPadAndOutInfo(pad3, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n  let outShape;\n  if (dataFormat === \"channelsFirst\") {\n    outShape = [batchSize, outChannels, outHeight, outWidth];\n  } else if (dataFormat === \"channelsLast\") {\n    outShape = [batchSize, outHeight, outWidth, outChannels];\n  }\n  return {\n    batchSize,\n    dataFormat,\n    inHeight,\n    inWidth,\n    inChannels,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideHeight,\n    strideWidth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\nfunction computeConv3DInfo(inShape, filterShape, strides, dilations, pad3, depthwise = false, dataFormat = \"channelsLast\", roundingMode) {\n  let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];\n  if (dataFormat === \"channelsLast\") {\n    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === \"channelsFirst\") {\n    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n  const [filterDepth, filterHeight, filterWidth, , filterChannels] = filterShape;\n  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n  const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);\n  const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);\n  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n  const { padInfo, outDepth, outHeight, outWidth } = get3DPadAndOutInfo(pad3, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n  let outShape;\n  if (dataFormat === \"channelsFirst\") {\n    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n  } else if (dataFormat === \"channelsLast\") {\n    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n  }\n  return {\n    batchSize,\n    dataFormat,\n    inDepth,\n    inHeight,\n    inWidth,\n    inChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\nfunction computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputRows = inShape[0];\n  const inputCols = inShape[1];\n  const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  return [outputRows, outputCols];\n}\nfunction computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputDepth = inShape[0];\n  const inputRows = inShape[1];\n  const inputCols = inShape[2];\n  const outputDepths = round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  return [outputDepths, outputRows, outputCols, outChannels];\n}\nfunction computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {\n  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n  return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\nfunction parseTupleParam(param) {\n  if (typeof param === \"number\") {\n    return [param, param, param];\n  }\n  if (param.length === 2) {\n    return [param[0], param[1], 1];\n  }\n  return param;\n}\nfunction parse3TupleParam(param) {\n  return typeof param === \"number\" ? [param, param, param] : param;\n}\nfunction getEffectiveFilterSize(filterSize, dilation) {\n  if (dilation <= 1) {\n    return filterSize;\n  }\n  return filterSize + (filterSize - 1) * (dilation - 1);\n}\nfunction getPadAndOutInfo(pad3, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {\n  let padInfo;\n  let outHeight;\n  let outWidth;\n  if (typeof pad3 === \"number\") {\n    const padType = pad3 === 0 ? \"VALID\" : \"NUMBER\";\n    padInfo = { top: pad3, bottom: pad3, left: pad3, right: pad3, type: padType };\n    const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad3, roundingMode);\n    outHeight = outShape[0];\n    outWidth = outShape[1];\n  } else if (pad3 === \"same\") {\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n    const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = { top, bottom, left, right, type: \"SAME\" };\n  } else if (pad3 === \"valid\") {\n    padInfo = { top: 0, bottom: 0, left: 0, right: 0, type: \"VALID\" };\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else if (typeof pad3 === \"object\") {\n    const top = dataFormat === \"channelsLast\" ? pad3[1][0] : pad3[2][0];\n    const bottom = dataFormat === \"channelsLast\" ? pad3[1][1] : pad3[2][1];\n    const left = dataFormat === \"channelsLast\" ? pad3[2][0] : pad3[3][0];\n    const right = dataFormat === \"channelsLast\" ? pad3[2][1] : pad3[3][1];\n    const padType = top === 0 && bottom === 0 && left === 0 && right === 0 ? \"VALID\" : \"EXPLICIT\";\n    padInfo = { top, bottom, left, right, type: padType };\n    outHeight = round((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);\n    outWidth = round((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad3}`);\n  }\n  return { padInfo, outHeight, outWidth };\n}\nfunction get3DPadAndOutInfo(pad3, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {\n  let padInfo;\n  let outDepth;\n  let outHeight;\n  let outWidth;\n  if (typeof pad3 === \"number\") {\n    const padType = pad3 === 0 ? \"VALID\" : \"NUMBER\";\n    padInfo = {\n      top: pad3,\n      bottom: pad3,\n      left: pad3,\n      right: pad3,\n      front: pad3,\n      back: pad3,\n      type: padType\n    };\n    const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad3, roundingMode);\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (pad3 === \"same\") {\n    outDepth = Math.ceil(inDepth / strideDepth);\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n    const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;\n    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n    const front = Math.floor(padAlongDepth / 2);\n    const back = padAlongDepth - front;\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = { top, bottom, left, right, front, back, type: \"SAME\" };\n  } else if (pad3 === \"valid\") {\n    padInfo = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      front: 0,\n      back: 0,\n      type: \"VALID\"\n    };\n    outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad3}`);\n  }\n  return { padInfo, outDepth, outHeight, outWidth };\n}\nfunction round(value, roundingMode) {\n  if (!roundingMode) {\n    return Math.trunc(value);\n  }\n  switch (roundingMode) {\n    case \"round\":\n      return Math.round(value);\n    case \"ceil\":\n      return Math.ceil(value);\n    case \"floor\":\n      return Math.floor(value);\n    default:\n      throw new Error(`Unknown roundingMode ${roundingMode}`);\n  }\n}\nfunction tupleValuesAreOne(param) {\n  const [dimA, dimB, dimC] = parseTupleParam(param);\n  return dimA === 1 && dimB === 1 && dimC === 1;\n}\nfunction eitherStridesOrDilationsAreOne(strides, dilations) {\n  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\nfunction convertConv2DDataFormat(dataFormat) {\n  if (dataFormat === \"NHWC\") {\n    return \"channelsLast\";\n  } else if (dataFormat === \"NCHW\") {\n    return \"channelsFirst\";\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n}\nfunction checkPadOnDimRoundingMode(opDesc, pad3, dimRoundingMode) {\n  if (dimRoundingMode != null) {\n    if (typeof pad3 === \"string\") {\n      throw Error(`Error in ${opDesc}: pad must be an integer when using dimRoundingMode ${dimRoundingMode} but got pad ${pad3}.`);\n    } else if (typeof pad3 === \"number\") {\n      assert(isInt(pad3), () => `Error in ${opDesc}: pad must be an integer when using dimRoundingMode ${dimRoundingMode} but got pad ${pad3}.`);\n    } else if (typeof pad3 === \"object\") {\n      pad3.forEach((p2) => {\n        p2.forEach((v) => {\n          assert(isInt(v), () => `Error in ${opDesc}: pad must be an integer when using dimRoundingMode ${dimRoundingMode} but got pad ${v}.`);\n        });\n      });\n    } else {\n      throw Error(`Error in ${opDesc}: Unknown padding parameter: ${pad3}`);\n    }\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js\nfunction reshape_(x, shape) {\n  const $x = convertToTensor(x, \"x\", \"reshape\", \"string_or_numeric\");\n  const inputs = { x: $x };\n  const attrs = { shape };\n  return ENGINE.runKernel(Reshape, inputs, attrs);\n}\nvar reshape = op({ reshape_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js\nfunction avgPool_(x, filterSize, strides, pad3, dimRoundingMode) {\n  const $x = convertToTensor(x, \"x\", \"avgPool\", \"float32\");\n  const dilations = 1;\n  assert(eitherStridesOrDilationsAreOne(strides, dilations), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  let x4D = $x;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  assert(x4D.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);\n  checkPadOnDimRoundingMode(\"avgPool\", pad3, dimRoundingMode);\n  const inputs = { x: x4D };\n  const attrs = { filterSize, strides, pad: pad3, dimRoundingMode };\n  let res = ENGINE.runKernel(AvgPool, inputs, attrs);\n  res = cast(res, $x.dtype);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nvar avgPool = op({ avgPool_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d.js\nfunction avgPool3d_(x, filterSize, strides, pad3, dimRoundingMode, dataFormat = \"NDHWC\") {\n  const $x = convertToTensor(x, \"x\", \"avgPool3d\", \"float32\");\n  let x5D = $x;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n  assert(x5D.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  assert(dataFormat === \"NDHWC\", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${dataFormat}`);\n  checkPadOnDimRoundingMode(\"avgPool3d\", pad3, dimRoundingMode);\n  const inputs = { x: x5D };\n  const attrs = { filterSize, strides, pad: pad3, dimRoundingMode, dataFormat };\n  let res = ENGINE.runKernel(AvgPool3D, inputs, attrs);\n  res = cast(res, x5D.dtype);\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n  return res;\n}\nvar avgPool3d = op({ avgPool3d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/concat.js\nfunction concat_(tensors, axis = 0) {\n  assert(tensors.length >= 1, () => \"Pass at least one tensor to concat\");\n  const $tensors = convertToTensorArray(tensors, \"tensors\", \"concat\", \"string_or_numeric\");\n  if ($tensors[0].dtype === \"complex64\") {\n    $tensors.forEach((tensor2) => {\n      if (tensor2.dtype !== \"complex64\") {\n        throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${tensor2.dtype}. `);\n      }\n    });\n  }\n  if ($tensors.length === 1) {\n    return clone($tensors[0]);\n  }\n  const inputs = $tensors;\n  const attr = { axis };\n  return ENGINE.runKernel(Concat, inputs, attr);\n}\nvar concat = op({ concat_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js\nfunction sigmoid_(x) {\n  const $x = convertToTensor(x, \"x\", \"sigmoid\", \"float32\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Sigmoid, inputs);\n}\nvar sigmoid = op({ sigmoid_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/slice.js\nfunction slice_(x, begin, size) {\n  const $x = convertToTensor(x, \"x\", \"slice\", \"string_or_numeric\");\n  if ($x.rank === 0) {\n    throw new Error(\"Slicing scalar is not possible\");\n  }\n  const inputs = { x: $x };\n  const attrs = { begin, size };\n  return ENGINE.runKernel(Slice, inputs, attrs);\n}\nvar slice = op({ slice_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js\nfunction tanh_(x) {\n  const $x = convertToTensor(x, \"x\", \"tanh\", \"float32\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Tanh, inputs);\n}\nvar tanh2 = op({ tanh_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/basic_lstm_cell.js\nfunction basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {\n  const $forgetBias = convertToTensor(forgetBias, \"forgetBias\", \"basicLSTMCell\");\n  const $lstmKernel = convertToTensor(lstmKernel, \"lstmKernel\", \"basicLSTMCell\");\n  const $lstmBias = convertToTensor(lstmBias, \"lstmBias\", \"basicLSTMCell\");\n  const $data = convertToTensor(data, \"data\", \"basicLSTMCell\");\n  const $c = convertToTensor(c, \"c\", \"basicLSTMCell\");\n  const $h = convertToTensor(h, \"h\", \"basicLSTMCell\");\n  const combined = concat([$data, $h], 1);\n  const weighted = matMul(combined, $lstmKernel);\n  const res = add2(weighted, $lstmBias);\n  const batchSize = res.shape[0];\n  const sliceCols = res.shape[1] / 4;\n  const sliceSize = [batchSize, sliceCols];\n  const i = slice(res, [0, 0], sliceSize);\n  const j = slice(res, [0, sliceCols], sliceSize);\n  const f = slice(res, [0, sliceCols * 2], sliceSize);\n  const o = slice(res, [0, sliceCols * 3], sliceSize);\n  const newC = add2(mul(sigmoid(i), tanh2(j)), mul($c, sigmoid(add2($forgetBias, f))));\n  const newH = mul(tanh2(newC), sigmoid(o));\n  return [newC, newH];\n}\nvar basicLSTMCell = op({ basicLSTMCell_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js\nfunction batchToSpaceND_(x, blockShape, crops) {\n  const $x = convertToTensor(x, \"x\", \"batchToSpaceND\");\n  const prod5 = blockShape.reduce((a, b) => a * b);\n  assert($x.rank >= 1 + blockShape.length, () => `input rank is ${$x.rank} but should be > than blockShape.length ${blockShape.length}`);\n  assert(crops.length === blockShape.length, () => `crops.length is ${crops.length} but should be equal to blockShape.length  ${blockShape.length}`);\n  assert($x.shape[0] % prod5 === 0, () => `input tensor batch is ${$x.shape[0]} but is not divisible by the product of the elements of blockShape ${blockShape.join(\" * \")} === ${prod5}`);\n  const inputs = { x: $x };\n  const attrs = { blockShape, crops };\n  return ENGINE.runKernel(BatchToSpaceND, inputs, attrs);\n}\nvar batchToSpaceND = op({ batchToSpaceND_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm_util.js\nfunction xAs4D(x) {\n  let x4D;\n  if (x.rank === 0 || x.rank === 1) {\n    x4D = reshape(x, [1, 1, 1, x.size]);\n  } else if (x.rank === 2) {\n    x4D = reshape(x, [1, 1, x.shape[0], x.shape[1]]);\n  } else if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  } else {\n    x4D = x;\n  }\n  return x4D;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js\nfunction batchNorm_(x, mean4, variance, offset, scale2, varianceEpsilon) {\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 1e-3;\n  }\n  const $x = convertToTensor(x, \"x\", \"batchNorm\");\n  const $mean = convertToTensor(mean4, \"mean\", \"batchNorm\");\n  const $variance = convertToTensor(variance, \"variance\", \"batchNorm\");\n  let $scale;\n  if (scale2 != null) {\n    $scale = convertToTensor(scale2, \"scale\", \"batchNorm\");\n  }\n  let $offset;\n  if (offset != null) {\n    $offset = convertToTensor(offset, \"offset\", \"batchNorm\");\n  }\n  assert($mean.rank === $variance.rank, () => \"Batch normalization gradient requires mean and variance to have equal ranks.\");\n  assert($offset == null || $mean.rank === $offset.rank, () => \"Batch normalization gradient requires mean and offset to have equal ranks.\");\n  assert($scale == null || $mean.rank === $scale.rank, () => \"Batch normalization gradient requires mean and scale to have equal ranks.\");\n  const x4D = xAs4D($x);\n  const inputs = {\n    x: x4D,\n    scale: $scale,\n    offset: $offset,\n    mean: $mean,\n    variance: $variance\n  };\n  const attrs = { varianceEpsilon };\n  const res = ENGINE.runKernel(FusedBatchNorm, inputs, attrs);\n  return reshape(res, $x.shape);\n}\nvar batchNorm = op({ batchNorm_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm2d.js\nfunction batchNorm2d_(x, mean4, variance, offset, scale2, varianceEpsilon) {\n  const $x = convertToTensor(x, \"x\", \"batchNorm\");\n  const $mean = convertToTensor(mean4, \"mean\", \"batchNorm\");\n  const $variance = convertToTensor(variance, \"variance\", \"batchNorm\");\n  let $scale;\n  if (scale2 != null) {\n    $scale = convertToTensor(scale2, \"scale\", \"batchNorm\");\n  }\n  let $offset;\n  if (offset != null) {\n    $offset = convertToTensor(offset, \"offset\", \"batchNorm\");\n  }\n  assert($x.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${$x.rank}.`);\n  assert($mean.rank === 2 || $mean.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${$mean.rank}.`);\n  assert($variance.rank === 2 || $variance.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    assert($scale.rank === 2 || $scale.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    assert($offset.rank === 2 || $offset.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${$offset.rank}.`);\n  }\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\nvar batchNorm2d = op({ batchNorm2d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm3d.js\nfunction batchNorm3d_(x, mean4, variance, offset, scale2, varianceEpsilon) {\n  const $x = convertToTensor(x, \"x\", \"batchNorm\");\n  const $mean = convertToTensor(mean4, \"mean\", \"batchNorm\");\n  const $variance = convertToTensor(variance, \"variance\", \"batchNorm\");\n  let $scale;\n  if (scale2 != null) {\n    $scale = convertToTensor(scale2, \"scale\", \"batchNorm\");\n  }\n  let $offset;\n  if (offset != null) {\n    $offset = convertToTensor(offset, \"offset\", \"batchNorm\");\n  }\n  assert($x.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${$x.rank}.`);\n  assert($mean.rank === 3 || $mean.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${$mean.rank}.`);\n  assert($variance.rank === 3 || $variance.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    assert($scale.rank === 3 || $scale.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    assert($offset.rank === 3 || $offset.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${$offset.rank}.`);\n  }\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\nvar batchNorm3d = op({ batchNorm3d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js\nfunction batchNorm4d_(x, mean4, variance, offset, scale2, varianceEpsilon) {\n  const $x = convertToTensor(x, \"x\", \"batchNorm\");\n  const $mean = convertToTensor(mean4, \"mean\", \"batchNorm\");\n  const $variance = convertToTensor(variance, \"variance\", \"batchNorm\");\n  let $scale;\n  if (scale2 != null) {\n    $scale = convertToTensor(scale2, \"scale\", \"batchNorm\");\n  }\n  let $offset;\n  if (offset != null) {\n    $offset = convertToTensor(offset, \"offset\", \"batchNorm\");\n  }\n  assert($x.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${$x.rank}.`);\n  assert($mean.rank === 4 || $mean.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${$mean.rank}.`);\n  assert($variance.rank === 4 || $variance.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    assert($scale.rank === 4 || $scale.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    assert($offset.rank === 4 || $offset.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${$offset.rank}.`);\n  }\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\nvar batchNorm4d = op({ batchNorm4d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/bincount.js\nfunction bincount_(x, weights, size) {\n  const $x = convertToTensor(x, \"x\", \"bincount\");\n  const $weights = convertToTensor(weights, \"weights\", \"bincount\");\n  assert($x.dtype === \"int32\", () => `Error in bincount: input dtype must be int32, but got ${$x.dtype}`);\n  assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  assert($weights.size === $x.size || $weights.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${$x.shape}, weights shape: ${$weights.shape}.`);\n  const inputs = { x: $x, weights: $weights };\n  const attrs = { size };\n  return ENGINE.runKernel(Bincount, inputs, attrs);\n}\nvar bincount = op({ bincount_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_args.js\nfunction broadcastArgs_(s0, s1) {\n  const shape1Input = convertToTensor(s0, \"s0\", \"broadcastArgs\", \"int32\");\n  const shape2Input = convertToTensor(s1, \"s1\", \"broadcastArgs\", \"int32\");\n  if (shape1Input.rank !== 1) {\n    throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${shape1Input.rank}`);\n  }\n  if (shape2Input.rank !== 1) {\n    throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${shape2Input.rank}`);\n  }\n  const inputs = { s0: shape1Input, s1: shape2Input };\n  return ENGINE.runKernel(BroadcastArgs, inputs);\n}\nvar broadcastArgs = op({ broadcastArgs_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js\nfunction broadcastTo_(x, shape) {\n  let input2 = convertToTensor(x, \"broadcastTo\", \"x\");\n  const xShape = input2.shape;\n  if (shape.some((d) => !(d > 0) || d % 1 !== 0)) {\n    throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);\n  }\n  if (shape.length < input2.rank) {\n    throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${input2.rank}.`);\n  }\n  if (shape.length > input2.rank) {\n    const newShape = input2.shape.slice();\n    while (newShape.length < shape.length) {\n      newShape.unshift(1);\n    }\n    input2 = reshape(input2, newShape);\n  }\n  const inputShape = input2.shape;\n  const reps = Array.from(shape);\n  for (let i = shape.length - 1; i >= 0; i--) {\n    if (inputShape[i] === shape[i]) {\n      reps[i] = 1;\n    } else if (input2.shape[i] !== 1) {\n      throw new Error(`broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);\n    }\n  }\n  const axes = reps.map((n, i) => n > 1 ? i : -1).filter((i) => i >= 0);\n  if (axes.length === 0) {\n    return clone(input2);\n  }\n  const inputs = { x: input2 };\n  const attrs = { reps };\n  return ENGINE.runKernel(Tile, inputs, attrs);\n}\nvar broadcastTo = op({ broadcastTo_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/ceil.js\nfunction ceil_(x) {\n  const $x = convertToTensor(x, \"x\", \"ceil\", \"float32\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Ceil, inputs);\n}\nvar ceil = op({ ceil_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js\nfunction clipByValue_(x, clipValueMin, clipValueMax) {\n  const $x = convertToTensor(x, \"x\", \"clipByValue\");\n  assert(clipValueMin <= clipValueMax, () => `Error in clip: min (${clipValueMin}) must be less than or equal to max (${clipValueMax}).`);\n  const inputs = { x: $x };\n  const attrs = { clipValueMin, clipValueMax };\n  return ENGINE.runKernel(ClipByValue, inputs, attrs);\n}\nvar clipByValue = op({ clipByValue_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/concat_1d.js\nfunction concat1d_(tensors) {\n  return concat(tensors, 0);\n}\nvar concat1d = op({ concat1d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/concat_2d.js\nfunction concat2d_(tensors, axis) {\n  return concat(tensors, axis);\n}\nvar concat2d = op({ concat2d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/concat_3d.js\nfunction concat3d_(tensors, axis) {\n  return concat(tensors, axis);\n}\nvar concat3d = op({ concat3d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/concat_4d.js\nfunction concat4d_(tensors, axis) {\n  return concat(tensors, axis);\n}\nvar concat4d = op({ concat4d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js\nfunction conv2d_(x, filter, strides, pad3, dataFormat = \"NHWC\", dilations = [1, 1], dimRoundingMode) {\n  const $x = convertToTensor(x, \"x\", \"conv2d\", \"float32\");\n  const $filter = convertToTensor(filter, \"filter\", \"conv2d\", \"float32\");\n  let x4D = $x;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  assert(x4D.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);\n  assert($filter.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${$filter.rank}.`);\n  checkPadOnDimRoundingMode(\"conv2d\", pad3, dimRoundingMode);\n  const inDepth = dataFormat === \"NHWC\" ? x4D.shape[3] : x4D.shape[1];\n  assert(inDepth === $filter.shape[2], () => `Error in conv2d: depth of input (${inDepth}) must match input depth for filter ${$filter.shape[2]}.`);\n  assert(eitherStridesOrDilationsAreOne(strides, dilations), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  const inputs = { x: x4D, filter: $filter };\n  const attrs = { strides, pad: pad3, dataFormat, dilations, dimRoundingMode };\n  const res = ENGINE.runKernel(Conv2D, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nvar conv2d = op({ conv2d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js\nfunction conv1d_(x, filter, stride, pad3, dataFormat = \"NWC\", dilation = 1, dimRoundingMode) {\n  const $x = convertToTensor(x, \"x\", \"conv1d\");\n  const $filter = convertToTensor(filter, \"filter\", \"conv1d\");\n  let x3D = $x;\n  let reshapedTo3D = false;\n  if ($x.rank === 2) {\n    reshapedTo3D = true;\n    x3D = reshape($x, [1, $x.shape[0], $x.shape[1]]);\n  }\n  assert(x3D.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);\n  assert($filter.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${$filter.rank}.`);\n  checkPadOnDimRoundingMode(\"conv1d\", pad3, dimRoundingMode);\n  assert(x3D.shape[2] === $filter.shape[1], () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match input depth for filter ${$filter.shape[1]}.`);\n  assert(eitherStridesOrDilationsAreOne(stride, dilation), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${stride} and dilation '${dilation}'`);\n  assert(dataFormat === \"NWC\", () => `Error in conv1d: got dataFormat of ${dataFormat} but only NWC is currently supported.`);\n  const filter4D = reshape($filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);\n  const input4D = reshape(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);\n  const strides = [1, stride];\n  const dilations = [1, dilation];\n  const conv2dDataFormat = \"NHWC\";\n  const res = conv2d(input4D, filter4D, strides, pad3, conv2dDataFormat, dilations, dimRoundingMode);\n  if (reshapedTo3D) {\n    return reshape(res, [res.shape[2], res.shape[3]]);\n  }\n  return reshape(res, [res.shape[0], res.shape[2], res.shape[3]]);\n}\nvar conv1d = op({ conv1d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js\nfunction conv2DBackpropInput_(xShape, dy, filter, strides, pad3, dataFormat = \"NHWC\", dimRoundingMode) {\n  assert(xShape.length === dy.rank, () => `Length of inShape (${xShape.length}) and rank of dy (${dy.rank}) must match`);\n  let xShape4D = xShape;\n  let dy4D = dy;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n  }\n  assert(xShape4D.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${xShape4D.length}.`);\n  assert(dy4D.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${dy4D.rank}`);\n  assert(filter.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${filter.rank}`);\n  const inDepth = dataFormat === \"NHWC\" ? xShape4D[3] : xShape4D[1];\n  const outDepth = dataFormat === \"NHWC\" ? dy4D.shape[3] : dy4D.shape[1];\n  assert(inDepth === filter.shape[2], () => `Error in conv2dDerInput: depth of input (${inDepth}) must match input depth for filter ${filter.shape[2]}.`);\n  assert(outDepth === filter.shape[3], () => `Error in conv2dDerInput: depth of output (${outDepth}) must match output depth for filter ${filter.shape[3]}.`);\n  checkPadOnDimRoundingMode(\"conv2dDerInput\", pad3, dimRoundingMode);\n  const inputs = { dy: dy4D, filter };\n  const attrs = { strides, pad: pad3, dataFormat, dimRoundingMode, inputShape: xShape4D };\n  const res = ENGINE.runKernel(Conv2DBackpropInput, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nvar conv2DBackpropInput = op({ conv2DBackpropInput_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js\nfunction conv2dTranspose_(x, filter, outputShape, strides, pad3, dimRoundingMode) {\n  const $x = convertToTensor(x, \"x\", \"conv2dTranspose\");\n  const $filter = convertToTensor(filter, \"filter\", \"conv2dTranspose\");\n  return conv2DBackpropInput(outputShape, $x, $filter, strides, pad3, \"NHWC\", dimRoundingMode);\n}\nvar conv2dTranspose = op({ conv2dTranspose_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/conv3d.js\nfunction conv3d_(x, filter, strides, pad3, dataFormat = \"NDHWC\", dilations = [1, 1, 1]) {\n  const $x = convertToTensor(x, \"x\", \"conv3d\");\n  const $filter = convertToTensor(filter, \"filter\", \"conv3d\");\n  let x5D = $x;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n  assert(x5D.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);\n  assert($filter.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${$filter.rank}.`);\n  assert(x5D.shape[4] === $filter.shape[3], () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match input depth for filter ${$filter.shape[3]}.`);\n  assert(eitherStridesOrDilationsAreOne(strides, dilations), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  assert(dataFormat === \"NDHWC\", () => `Error in conv3d: got dataFormat of ${dataFormat} but only NDHWC is currently supported.`);\n  const inputs = { x: x5D, filter: $filter };\n  const attrs = { strides, pad: pad3, dataFormat, dilations };\n  const res = ENGINE.runKernel(Conv3D, inputs, attrs);\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n  return res;\n}\nvar conv3d = op({ conv3d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js\nfunction conv3DBackpropInput_(xShape, dy, filter, strides, pad3) {\n  assert(xShape.length === dy.rank, () => `Length of inShape (${xShape.length}) and rank of dy (${dy.rank}) must match`);\n  let xShape5D = xShape;\n  let dy5D = dy;\n  let reshapedTo5D = false;\n  if (dy.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n  }\n  const inDepth = xShape5D[4];\n  const outDepth = dy5D.shape[4];\n  assert(xShape5D.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${xShape5D.length}.`);\n  assert(dy5D.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${dy5D.rank}`);\n  assert(filter.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${filter.rank}`);\n  assert(inDepth === filter.shape[3], () => `Error in conv3dDerInput: depth of input (${inDepth}) must match input depth for filter ${filter.shape[3]}.`);\n  assert(outDepth === filter.shape[4], () => `Error in conv3dDerInput: depth of output (${outDepth}) must match output depth for filter ${filter.shape[4]}.`);\n  const inputs = { dy: dy5D, filter };\n  const attrs = { pad: pad3, strides, inputShape: xShape5D };\n  const res = ENGINE.runKernel(Conv3DBackpropInputV2, inputs, attrs);\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n  return res;\n}\nvar conv3DBackpropInput = op({ conv3DBackpropInput_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_transpose.js\nfunction conv3dTranspose_(x, filter, outputShape, strides, pad3) {\n  const $x = convertToTensor(x, \"x\", \"conv3dTranspose\");\n  const $filter = convertToTensor(filter, \"filter\", \"conv3dTranspose\");\n  return conv3DBackpropInput(outputShape, $x, $filter, strides, pad3);\n}\nvar conv3dTranspose = op({ conv3dTranspose_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/cos.js\nfunction cos_(x) {\n  const $x = convertToTensor(x, \"x\", \"cos\", \"float32\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Cos, inputs);\n}\nvar cos = op({ cos_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js\nfunction cosh_(x) {\n  const $x = convertToTensor(x, \"x\", \"cosh\", \"float32\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Cosh, inputs);\n}\nvar cosh = op({ cosh_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js\nfunction cumsum_(x, axis = 0, exclusive = false, reverse5 = false) {\n  const $x = convertToTensor(x, \"x\", \"cumsum\");\n  const inputs = { x: $x };\n  const attrs = { axis, exclusive, reverse: reverse5 };\n  return ENGINE.runKernel(Cumsum, inputs, attrs);\n}\nvar cumsum = op({ cumsum_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/dense_bincount.js\nfunction denseBincount_(x, weights, size, binaryOutput = false) {\n  const $x = convertToTensor(x, \"x\", \"denseBincount\");\n  const $weights = convertToTensor(weights, \"weights\", \"denseBincount\");\n  assert($x.dtype === \"int32\", () => `Error in denseBincount: input dtype must be int32, but got ${$x.dtype}`);\n  assert($x.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${$x.rank}.`);\n  assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  assert($weights.size === $x.size || $weights.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${$x.shape}, weights shape: ${$weights.shape}.`);\n  const inputs = { x: $x, weights: $weights };\n  const attrs = { size, binaryOutput };\n  return ENGINE.runKernel(DenseBincount, inputs, attrs);\n}\nvar denseBincount = op({ denseBincount_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js\nfunction depthToSpace_(x, blockSize, dataFormat = \"NHWC\") {\n  const $x = convertToTensor(x, \"x\", \"depthToSpace\", \"float32\");\n  const inputHeight = dataFormat === \"NHWC\" ? $x.shape[1] : $x.shape[2];\n  const inputWidth = dataFormat === \"NHWC\" ? $x.shape[2] : $x.shape[3];\n  const inputDepth = dataFormat === \"NHWC\" ? $x.shape[3] : $x.shape[1];\n  assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n  assert(inputHeight * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying\n    ${inputHeight} and ${blockSize}  for depthToSpace with input shape\n    ${$x.shape}`);\n  assert(inputWidth * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying\n    ${inputWidth} and ${blockSize} for depthToSpace with input shape\n        ${$x.shape}`);\n  assert(inputDepth % (blockSize * blockSize) === 0, () => `Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);\n  const inputs = { x: $x };\n  const attrs = { blockSize, dataFormat };\n  return ENGINE.runKernel(DepthToSpace, inputs, attrs);\n}\nvar depthToSpace = op({ depthToSpace_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js\nfunction depthwiseConv2d_(x, filter, strides, pad3, dataFormat = \"NHWC\", dilations = [1, 1], dimRoundingMode) {\n  const $x = convertToTensor(x, \"x\", \"depthwiseConv2d\", \"float32\");\n  const $filter = convertToTensor(filter, \"filter\", \"depthwiseConv2d\", \"float32\");\n  let x4D = $x;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  assert(x4D.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${x4D.rank}.`);\n  assert($filter.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${$filter.rank}.`);\n  assert(x4D.shape[3] === $filter.shape[2], () => `Error in depthwiseConv2d: number of input channels (${x4D.shape[3]}) must match the inChannels dimension in filter ${$filter.shape[2]}.`);\n  checkPadOnDimRoundingMode(\"depthwiseConv2d\", pad3, dimRoundingMode);\n  const inputs = { x: x4D, filter: $filter };\n  const attrs = { strides, pad: pad3, dataFormat, dilations, dimRoundingMode };\n  const res = ENGINE.runKernel(DepthwiseConv2dNative, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nvar depthwiseConv2d = op({ depthwiseConv2d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/diag.js\nfunction diag_(x) {\n  const $x = convertToTensor(x, \"x\", \"diag\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Diag, inputs);\n}\nvar diag = op({ diag_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js\nfunction dilation2d_(x, filter, strides, pad3, dilations = [1, 1], dataFormat = \"NHWC\") {\n  const $x = convertToTensor(x, \"x\", \"dilation2d\");\n  const $filter = convertToTensor(filter, \"filter\", \"dilation2d\");\n  assert($x.rank === 3 || $x.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${$x.rank}.`);\n  assert($filter.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${$filter.rank}.`);\n  assert(dataFormat === \"NHWC\", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${dataFormat}`);\n  let x4D = $x;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    reshapedTo4D = true;\n  }\n  const inputs = { x: x4D, filter: $filter };\n  const attrs = { strides, pad: pad3, dilations };\n  const res = ENGINE.runKernel(Dilation2D, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nvar dilation2d = op({ dilation2d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/equal.js\nfunction equal_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"equal\", \"string_or_numeric\");\n  let $b = convertToTensor(b, \"b\", \"equal\", \"string_or_numeric\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(Equal, inputs);\n}\nvar equal = op({ equal_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/where.js\nfunction where_(condition, a, b) {\n  const $a = convertToTensor(a, \"a\", \"where\");\n  const $b = convertToTensor(b, \"b\", \"where\");\n  const $condition = convertToTensor(condition, \"condition\", \"where\", \"bool\");\n  const broadcastShape = assertAndGetBroadcastShape(assertAndGetBroadcastShape($condition.shape, $a.shape), $b.shape);\n  const $broadcastedCondition = broadcastTo($condition, broadcastShape);\n  const $broadcastedA = broadcastTo($a, broadcastShape);\n  const $broadcastedB = broadcastTo($b, broadcastShape);\n  const inputs = {\n    condition: $broadcastedCondition,\n    t: $broadcastedA,\n    e: $broadcastedB\n  };\n  return ENGINE.runKernel(Select, inputs);\n}\nvar where = op({ where_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js\nfunction zerosLike_(x) {\n  const $x = convertToTensor(x, \"x\", \"zerosLike\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(ZerosLike, inputs);\n}\nvar zerosLike = op({ zerosLike_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js\nfunction divNoNan_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"div\");\n  let $b = convertToTensor(b, \"b\", \"div\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  const divResult = div($a, $b);\n  const zeros4 = zerosLike(divResult);\n  const bEqualsZero = equal($b, zeros4);\n  return where(bEqualsZero, zeros4, divResult);\n}\nvar divNoNan = op({ divNoNan_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/dot.js\nfunction dot_(t1, t2) {\n  const $t1 = convertToTensor(t1, \"t1\", \"dot\");\n  const $t2 = convertToTensor(t2, \"t2\", \"dot\");\n  assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${$t1.rank} and ${$t2.rank}.`);\n  const t1Inner = $t1.rank === 1 ? $t1.size : $t1.shape[1];\n  const t2Inner = $t2.rank === 1 ? $t2.size : $t2.shape[0];\n  assert(t1Inner === t2Inner, () => `Error in dot: inner dimensions of inputs must match, but got ${t1Inner} and ${t2Inner}.`);\n  if ($t1.rank === 1 && $t2.rank === 1) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, []);\n  } else if ($t1.rank === 1 && $t2.rank === 2) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else if ($t1.rank === 2 && $t2.rank === 1) {\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul($t1, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else {\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul($t1, t22D);\n    return t1t2;\n  }\n}\nvar dot = op({ dot_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/einsum.js\nfunction einsum_(equation, ...tensors) {\n  const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, \"einsum\"));\n  const attrs = { equation };\n  return ENGINE.runKernel(Einsum, $tensors, attrs);\n}\nvar einsum = op({ einsum_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/elu.js\nfunction elu_(x) {\n  const $x = convertToTensor(x, \"x\", \"elu\", \"float32\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Elu, inputs);\n}\nvar elu = op({ elu_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/erf.js\nfunction erf_(x) {\n  let $x = convertToTensor(x, \"x\", \"erf\");\n  assert($x.dtype === \"int32\" || $x.dtype === \"float32\", () => \"Input dtype must be `int32` or `float32`.\");\n  if ($x.dtype === \"int32\") {\n    $x = cast($x, \"float32\");\n  }\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Erf, inputs);\n}\nvar erf = op({ erf_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/exp.js\nfunction exp_(x) {\n  const $x = convertToTensor(x, \"x\", \"exp\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Exp, inputs);\n}\nvar exp = op({ exp_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js\nfunction expandDims_(x, axis = 0) {\n  const $x = convertToTensor(x, \"x\", \"expandDims\", \"string_or_numeric\");\n  assert(axis <= $x.rank, () => \"Axis must be <= rank of the tensor\");\n  const inputs = { input: $x };\n  const attrs = { dim: axis };\n  return ENGINE.runKernel(ExpandDims, inputs, attrs);\n}\nvar expandDims = op({ expandDims_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/expm1.js\nfunction expm1_(x) {\n  const $x = convertToTensor(x, \"x\", \"expm1\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Expm1, inputs);\n}\nvar expm1 = op({ expm1_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/tile.js\nfunction tile_(x, reps) {\n  const $x = convertToTensor(x, \"x\", \"tile\", \"string_or_numeric\");\n  assert($x.rank === reps.length, () => `Error in transpose: rank of input ${$x.rank} must match length of reps ${reps}.`);\n  const inputs = { x: $x };\n  const attrs = { reps };\n  return ENGINE.runKernel(Tile, inputs, attrs);\n}\nvar tile = op({ tile_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/eye.js\nfunction eye_(numRows, numColumns, batchShape, dtype = \"float32\") {\n  if (numColumns == null) {\n    numColumns = numRows;\n  }\n  const buff = buffer([numRows, numColumns], dtype);\n  const n = numRows <= numColumns ? numRows : numColumns;\n  for (let i = 0; i < n; ++i) {\n    buff.set(1, i, i);\n  }\n  const out = reshape(buff.toTensor(), [numRows, numColumns]);\n  if (batchShape == null) {\n    return out;\n  } else {\n    if (batchShape.length === 1) {\n      return tile(expandDims(out, 0), [batchShape[0], 1, 1]);\n    } else if (batchShape.length === 2) {\n      return tile(expandDims(expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);\n    } else if (batchShape.length === 3) {\n      return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [\n        batchShape[0],\n        batchShape[1],\n        batchShape[2],\n        1,\n        1\n      ]);\n    } else {\n      throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${batchShape.length}D.`);\n    }\n  }\n}\nvar eye = op({ eye_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/fill.js\nfunction fill(shape, value, dtype) {\n  const attrs = { shape, value, dtype };\n  return ENGINE.runKernel(Fill, {}, attrs);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/floor.js\nfunction floor_(x) {\n  const $x = convertToTensor(x, \"x\", \"floor\", \"float32\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Floor, inputs);\n}\nvar floor = op({ floor_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/gather.js\nfunction gather_(x, indices, axis = 0, batchDims = 0) {\n  const $x = convertToTensor(x, \"x\", \"gather\");\n  const $indices = convertToTensor(indices, \"indices\", \"gather\", \"int32\");\n  const inputs = { x: $x, indices: $indices };\n  const attrs = { axis, batchDims };\n  return ENGINE.runKernel(GatherV2, inputs, attrs);\n}\nvar gather = op({ gather_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/greater.js\nfunction greater_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"greater\", \"string_or_numeric\");\n  let $b = convertToTensor(b, \"b\", \"greater\", \"string_or_numeric\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(Greater, inputs);\n}\nvar greater = op({ greater_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js\nfunction greaterEqual_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"greaterEqual\", \"string_or_numeric\");\n  let $b = convertToTensor(b, \"b\", \"greaterEqual\", \"string_or_numeric\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(GreaterEqual, inputs);\n}\nvar greaterEqual = op({ greaterEqual_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/imag.js\nfunction imag_(input2) {\n  const $input = convertToTensor(input2, \"input\", \"imag\");\n  const inputs = { input: $input };\n  return ENGINE.runKernel(Imag, inputs);\n}\nvar imag = op({ imag_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/is_finite.js\nfunction isFinite_(x) {\n  const $x = convertToTensor(x, \"x\", \"isFinite\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(IsFinite, inputs);\n}\nvar isFinite2 = op({ isFinite_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/is_inf.js\nfunction isInf_(x) {\n  const $x = convertToTensor(x, \"x\", \"isInf\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(IsInf, inputs);\n}\nvar isInf = op({ isInf_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/is_nan.js\nfunction isNaN_(x) {\n  const $x = convertToTensor(x, \"x\", \"isNaN\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(IsNan, inputs);\n}\nvar isNaN2 = op({ isNaN_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js\nfunction leakyRelu_(x, alpha = 0.2) {\n  const $x = convertToTensor(x, \"x\", \"leakyRelu\");\n  const inputs = { x: $x };\n  const attrs = { alpha };\n  return ENGINE.runKernel(LeakyRelu, inputs, attrs);\n}\nvar leakyRelu = op({ leakyRelu_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/less.js\nfunction less_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"less\", \"string_or_numeric\");\n  let $b = convertToTensor(b, \"b\", \"less\", \"string_or_numeric\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(Less, inputs);\n}\nvar less = op({ less_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js\nfunction lessEqual_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"lessEqual\", \"string_or_numeric\");\n  let $b = convertToTensor(b, \"b\", \"lessEqual\", \"string_or_numeric\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(LessEqual, inputs);\n}\nvar lessEqual = op({ lessEqual_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/linspace.js\nfunction linspace(start, stop, num) {\n  if (num <= 0) {\n    throw new Error(\"The number of values should be positive.\");\n  }\n  const attrs = { start, stop, num };\n  return ENGINE.runKernel(LinSpace, {}, attrs);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js\nfunction localResponseNormalization_(x, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {\n  const $x = convertToTensor(x, \"x\", \"localResponseNormalization\");\n  assert($x.rank === 4 || $x.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${$x.rank}.`);\n  assert(isInt(depthRadius), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${depthRadius}.`);\n  let x4D = $x;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  const inputs = { x: x4D };\n  const attrs = { depthRadius, bias, alpha, beta };\n  const res = ENGINE.runKernel(LRN, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  } else {\n    return res;\n  }\n}\nvar localResponseNormalization = op({ localResponseNormalization_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/log.js\nfunction log_(x) {\n  const $x = convertToTensor(x, \"x\", \"log\", \"float32\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Log, inputs);\n}\nvar log2 = op({ log_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js\nfunction log1p_(x) {\n  const $x = convertToTensor(x, \"x\", \"log1p\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Log1p, inputs);\n}\nvar log1p = op({ log1p_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients.js\nfunction grad(f) {\n  assert(isFunction(f), () => \"The f passed in grad(f) must be a function\");\n  return (x, dy) => {\n    const $x = convertToTensor(x, \"x\", \"tf.grad\", \"string_or_numeric\");\n    const $dy = dy != null ? convertToTensor(dy, \"dy\", \"tf.grad\") : null;\n    return ENGINE.tidy(() => {\n      const { value, grads: grads2 } = ENGINE.gradients(() => f($x), [$x], $dy);\n      if ($dy != null) {\n        assertShapesMatch(value.shape, $dy.shape, \"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)\");\n      }\n      checkGrads(grads2);\n      return grads2[0];\n    });\n  };\n}\nfunction grads(f) {\n  assert(isFunction(f), () => \"The f passed in grads(f) must be a function\");\n  return (args, dy) => {\n    assert(Array.isArray(args), () => \"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s\");\n    const $args = convertToTensorArray(args, \"args\", \"tf.grads\", \"string_or_numeric\");\n    const $dy = dy != null ? convertToTensor(dy, \"dy\", \"tf.grads\") : null;\n    return ENGINE.tidy(() => {\n      const { value, grads: grads2 } = ENGINE.gradients(() => f(...$args), $args, $dy);\n      if ($dy != null) {\n        assertShapesMatch(value.shape, $dy.shape, \"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])\");\n      }\n      checkGrads(grads2);\n      return grads2;\n    });\n  };\n}\nfunction valueAndGrad(f) {\n  assert(isFunction(f), () => \"The f passed in valueAndGrad(f) must be a function\");\n  return (x, dy) => {\n    assert(x instanceof Tensor, () => \"The x passed in valueAndGrad(f)(x) must be a tensor\");\n    assert(dy == null || dy instanceof Tensor, () => \"The dy passed in valueAndGrad(f)(x, dy) must be a tensor\");\n    const { grads: grads2, value } = ENGINE.gradients(() => f(x), [x], dy);\n    checkGrads(grads2);\n    return { grad: grads2[0], value };\n  };\n}\nfunction valueAndGrads(f) {\n  assert(isFunction(f), () => \"The f passed in valueAndGrads(f) must be a function\");\n  return (args, dy) => {\n    assert(Array.isArray(args) && args.every((arg) => arg instanceof Tensor), () => \"The args passed in valueAndGrads(f)(args) must be array of tensors\");\n    assert(dy == null || dy instanceof Tensor, () => \"The dy passed in valueAndGrads(f)(args, dy) must be a tensor\");\n    const res = ENGINE.gradients(() => f(...args), args, dy);\n    if (dy != null) {\n      assertShapesMatch(res.value.shape, dy.shape, \"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])\");\n    }\n    checkGrads(res.grads);\n    return res;\n  };\n}\nfunction variableGrads(f, varList) {\n  assert(isFunction(f), () => \"The f passed in variableGrads(f) must be a function\");\n  assert(varList == null || Array.isArray(varList) && varList.every((v) => v instanceof Variable), () => \"The varList passed in variableGrads(f, varList) must be an array of variables\");\n  const specifiedVarList = varList != null;\n  if (!specifiedVarList) {\n    varList = [];\n    for (const varName in ENGINE.registeredVariables) {\n      varList.push(ENGINE.registeredVariables[varName]);\n    }\n  }\n  const specifiedNonTrainable = specifiedVarList ? varList.filter((variable2) => !variable2.trainable) : null;\n  const originalVarCount = varList.length;\n  varList = varList.filter((variable2) => variable2.trainable);\n  assert(varList.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${originalVarCount} variables is trainable.`);\n  const allowNoGradients = true;\n  const { value, grads: grads2 } = ENGINE.gradients(f, varList, null, allowNoGradients);\n  assert(grads2.some((g) => g != null), () => \"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().\");\n  assert(value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${value.rank} tensor`);\n  const namedGrads = {};\n  varList.forEach((v, i) => {\n    if (grads2[i] != null) {\n      namedGrads[v.name] = grads2[i];\n    }\n  });\n  if (specifiedNonTrainable != null) {\n    specifiedNonTrainable.forEach((v) => namedGrads[v.name] = null);\n  }\n  return { value, grads: namedGrads };\n}\nfunction customGrad(f) {\n  return ENGINE.customGrad(f);\n}\nfunction checkGrads(grads2) {\n  const numNullGradients = grads2.filter((g) => g == null).length;\n  if (numNullGradients > 0) {\n    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/neg.js\nfunction neg_(x) {\n  const $x = convertToTensor(x, \"x\", \"neg\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Neg, inputs);\n}\nvar neg = op({ neg_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js\nfunction softplus_(x) {\n  const $x = convertToTensor(x, \"x\", \"softplus\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Softplus, inputs);\n}\nvar softplus = op({ softplus_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/log_sigmoid.js\nfunction logSigmoid_(x) {\n  const $x = convertToTensor(x, \"x\", \"logSigmoid\");\n  const customOp = customGrad((x2) => {\n    const value = neg(softplus(neg(x2)));\n    const gradFunc = (dy) => {\n      const derX = mul(dy, sigmoid(neg(x2)));\n      return derX;\n    };\n    return { value, gradFunc };\n  });\n  return customOp($x);\n}\nvar logSigmoid = op({ logSigmoid_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/max.js\nfunction max_(x, axis = null, keepDims = false) {\n  const $x = convertToTensor(x, \"x\", \"max\");\n  const inputs = { x: $x };\n  const attrs = { reductionIndices: axis, keepDims };\n  return ENGINE.runKernel(Max, inputs, attrs);\n}\nvar max = op({ max_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sub.js\nfunction sub_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"sub\");\n  let $b = convertToTensor(b, \"b\", \"sub\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(Sub, inputs);\n}\nvar sub = op({ sub_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sum.js\nfunction sum_(x, axis = null, keepDims = false) {\n  let $x = convertToTensor(x, \"x\", \"sum\");\n  if ($x.dtype === \"bool\") {\n    $x = cast($x, \"int32\");\n  }\n  const inputs = { x: $x };\n  const attrs = { axis, keepDims };\n  return ENGINE.runKernel(Sum, inputs, attrs);\n}\nvar sum2 = op({ sum_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js\nfunction logSoftmax_(logits, axis = -1) {\n  const $logits = convertToTensor(logits, \"logits\", \"logSoftmax\");\n  if (axis === -1) {\n    axis = $logits.rank - 1;\n  }\n  if (axis !== $logits.rank - 1) {\n    throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${$logits.rank} and axis was ${axis}`);\n  }\n  const customOp = customGrad((logits2, save) => {\n    const keepDims = true;\n    const xMax = max(logits2, axis, true);\n    const shifted = sub(logits2, xMax);\n    const value = sub(cast(shifted, \"float32\"), log2(sum2(exp(shifted), axis, keepDims)));\n    save([value]);\n    const gradFunc = (dy, saved) => {\n      const [value2] = saved;\n      const keepDims2 = true;\n      const softmax6 = exp(value2);\n      return sub(dy, mul(sum2(dy, axis, keepDims2), softmax6));\n    };\n    return { value, gradFunc };\n  });\n  return customOp($logits);\n}\nvar logSoftmax = op({ logSoftmax_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js\nfunction axesAreInnerMostDims(axes, rank) {\n  for (let i = 0; i < axes.length; ++i) {\n    if (axes[axes.length - i - 1] !== rank - 1 - i) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction combineLocations(outputLoc, reduceLoc, axes) {\n  const rank = outputLoc.length + reduceLoc.length;\n  const loc = [];\n  let outIdx = 0;\n  let reduceIdx = 0;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      loc.push(outputLoc[outIdx++]);\n    } else {\n      loc.push(reduceLoc[reduceIdx++]);\n    }\n  }\n  return loc;\n}\nfunction computeOutAndReduceShapes(aShape, axes) {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outShape.push(aShape[dim]);\n    }\n  }\n  const reduceShape = axes.map((dim) => aShape[dim]);\n  return [outShape, reduceShape];\n}\nfunction expandShapeToKeepDim(shape, axes) {\n  const reduceSubShape = axes.map((x) => 1);\n  return combineLocations(shape, reduceSubShape, axes);\n}\nfunction assertAxesAreInnerMostDims(msg, axes, rank) {\n  assert(axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. Got axes ${axes} and rank-${rank} input.`);\n}\nfunction getAxesPermutation(axes, rank) {\n  if (axesAreInnerMostDims(axes, rank)) {\n    return null;\n  }\n  const result = [];\n  for (let i = 0; i < rank; ++i) {\n    if (axes.indexOf(i) === -1) {\n      result.push(i);\n    }\n  }\n  axes.forEach((axis) => result.push(axis));\n  return result;\n}\nfunction getUndoAxesPermutation(axes) {\n  return axes.map((axis, i) => [i, axis]).sort((a, b) => a[1] - b[1]).map((x) => x[0]);\n}\nfunction getInnerMostAxes(numAxes, rank) {\n  const res = [];\n  for (let i = rank - numAxes; i < rank; ++i) {\n    res.push(i);\n  }\n  return res;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js\nfunction logSumExp_(x, axis = null, keepDims = false) {\n  const $x = convertToTensor(x, \"x\", \"logSumExp\");\n  const axes = parseAxisParam(axis, $x.shape);\n  const xMax = max($x, axes, true);\n  const a = sub($x, xMax);\n  const b = exp(a);\n  const c = sum2(b, axes);\n  const d = log2(c);\n  const res = add2(reshape(xMax, d.shape), d);\n  if (keepDims) {\n    const newShape = expandShapeToKeepDim(res.shape, axes);\n    return reshape(res, newShape);\n  }\n  return res;\n}\nvar logSumExp = op({ logSumExp_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js\nfunction logicalAnd_(a, b) {\n  const $a = convertToTensor(a, \"a\", \"logicalAnd\", \"bool\");\n  const $b = convertToTensor(b, \"b\", \"logicalAnd\", \"bool\");\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(LogicalAnd, inputs);\n}\nvar logicalAnd = op({ logicalAnd_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js\nfunction logicalNot_(x) {\n  const $x = convertToTensor(x, \"x\", \"logicalNot\", \"bool\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(LogicalNot, inputs);\n}\nvar logicalNot = op({ logicalNot_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js\nfunction logicalOr_(a, b) {\n  const $a = convertToTensor(a, \"a\", \"logicalOr\", \"bool\");\n  const $b = convertToTensor(b, \"b\", \"logicalOr\", \"bool\");\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(LogicalOr, inputs);\n}\nvar logicalOr = op({ logicalOr_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js\nfunction logicalXor_(a, b) {\n  const $a = convertToTensor(a, \"a\", \"logicalXor\", \"bool\");\n  const $b = convertToTensor(b, \"b\", \"logicalXor\", \"bool\");\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  return logicalAnd(logicalOr(a, b), logicalNot(logicalAnd(a, b)));\n}\nvar logicalXor = op({ logicalXor_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js\nfunction maxPool_(x, filterSize, strides, pad3, dimRoundingMode) {\n  const $x = convertToTensor(x, \"x\", \"maxPool\");\n  const dilations = 1;\n  let x4D = $x;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  assert(x4D.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);\n  assert(eitherStridesOrDilationsAreOne(strides, dilations), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  checkPadOnDimRoundingMode(\"maxPool\", pad3, dimRoundingMode);\n  const inputs = { x: x4D };\n  const attrs = { filterSize, strides, pad: pad3, dimRoundingMode };\n  const res = ENGINE.runKernel(MaxPool, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nvar maxPool = op({ maxPool_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d.js\nfunction maxPool3d_(x, filterSize = [1, 1, 1], strides, pad3, dimRoundingMode, dataFormat = \"NDHWC\") {\n  const $x = convertToTensor(x, \"x\", \"maxPool3d\");\n  let x5D = $x;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n  assert(x5D.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  assert(dataFormat === \"NDHWC\", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${dataFormat}`);\n  checkPadOnDimRoundingMode(\"maxPool3d\", pad3, dimRoundingMode);\n  const inputs = { x: x5D };\n  const attrs = { filterSize, strides, pad: pad3, dimRoundingMode, dataFormat };\n  const res = ENGINE.runKernel(MaxPool3D, inputs, attrs);\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n  return res;\n}\nvar maxPool3d = op({ maxPool3d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js\nfunction maxPoolWithArgmax_(x, filterSize, strides, pad3, includeBatchInIndex = false) {\n  const $x = convertToTensor(x, \"x\", \"maxPoolWithArgmax\");\n  const inputs = { x: $x };\n  const attrs = { filterSize, strides, pad: pad3, includeBatchInIndex };\n  const result = ENGINE.runKernel(MaxPoolWithArgmax, inputs, attrs);\n  return { result: result[0], indexes: result[1] };\n}\nvar maxPoolWithArgmax = op({ maxPoolWithArgmax_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js\nfunction maximum_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"maximum\");\n  let $b = convertToTensor(b, \"b\", \"maximum\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  if ($a.dtype === \"bool\") {\n    $a = cast($a, \"int32\");\n    $b = cast($b, \"int32\");\n  }\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(Maximum, inputs);\n}\nvar maximum = op({ maximum_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/mean.js\nfunction mean_(x, axis = null, keepDims = false) {\n  const $x = convertToTensor(x, \"x\", \"mean\");\n  const inputs = { x: $x };\n  const attrs = { axis, keepDims };\n  return ENGINE.runKernel(Mean, inputs, attrs);\n}\nvar mean = op({ mean_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js\nfunction zeros(shape, dtype = \"float32\") {\n  if (dtype === \"complex64\") {\n    const real4 = zeros(shape, \"float32\");\n    const imag4 = zeros(shape, \"float32\");\n    return complex(real4, imag4);\n  }\n  const values = makeZerosTypedArray(sizeFromShape(shape), dtype);\n  return ENGINE.makeTensor(values, shape, dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/ones.js\nfunction ones2(shape, dtype = \"float32\") {\n  if (dtype === \"complex64\") {\n    const real4 = ones2(shape, \"float32\");\n    const imag4 = zeros(shape, \"float32\");\n    return complex(real4, imag4);\n  }\n  const values = makeOnesTypedArray(sizeFromShape(shape), dtype);\n  return ENGINE.makeTensor(values, shape, dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/meshgrid.js\nfunction meshgrid(x, y, { indexing = \"xy\" } = {}) {\n  if (indexing !== \"xy\" && indexing !== \"ij\") {\n    throw new TypeError(`${indexing} is not a valid third argument to meshgrid`);\n  }\n  if (x === void 0) {\n    return [];\n  }\n  let $x = convertToTensor(x, \"x\", \"meshgrid\", x instanceof Tensor ? x.dtype : \"float32\");\n  if (y === void 0) {\n    return [$x];\n  }\n  let $y = convertToTensor(y, \"y\", \"meshgrid\", y instanceof Tensor ? y.dtype : \"float32\");\n  const w = sizeFromShape($x.shape);\n  const h = sizeFromShape($y.shape);\n  if (indexing === \"xy\") {\n    $x = reshape($x, [1, -1]);\n    $y = reshape($y, [-1, 1]);\n    return [\n      matMul(ones2([h, 1], $x.dtype), $x),\n      matMul($y, ones2([1, w], $y.dtype))\n    ];\n  }\n  $x = reshape($x, [-1, 1]);\n  $y = reshape($y, [1, -1]);\n  return [\n    matMul($x, ones2([1, h], $x.dtype)),\n    matMul(ones2([w, 1], $y.dtype), $y)\n  ];\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/min.js\nfunction min_(x, axis = null, keepDims = false) {\n  const $x = convertToTensor(x, \"x\", \"min\");\n  const inputs = { x: $x };\n  const attrs = { axis, keepDims };\n  return ENGINE.runKernel(Min, inputs, attrs);\n}\nvar min = op({ min_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js\nfunction minimum_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"minimum\");\n  let $b = convertToTensor(b, \"b\", \"minimum\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  if ($a.dtype === \"bool\") {\n    $a = cast($a, \"int32\");\n    $b = cast($b, \"int32\");\n  }\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(Minimum, inputs);\n}\nvar minimum = op({ minimum_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/mirror_pad.js\nfunction mirrorPad_(x, paddings, mode) {\n  assert(mode === \"reflect\" || mode === \"symmetric\", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${mode}.`);\n  const $x = convertToTensor(x, \"x\", \"mirrorPad\");\n  if ($x.rank === 0) {\n    throw new Error(\"mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad\");\n  }\n  assert(paddings.length === $x.rank, () => `Padding doesn't match input. Must be ${$x.rank}. Got ${paddings.length}.`);\n  const shapeOffset = mode === \"reflect\" ? 1 : 0;\n  for (let i = 0; i < $x.rank; i++) {\n    assert(paddings[i].length === 2, () => `Invalid number of paddings. Must be length of 2 each.`);\n    assert(paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset && paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, () => `Padding in dimension ${i} cannot be greater than or equal to ${$x.shape[i] - shapeOffset} or less than 0 for input of shape ${$x.shape}`);\n  }\n  const attrs = { paddings, mode };\n  const inputs = { x: $x };\n  return ENGINE.runKernel(MirrorPad, inputs, attrs);\n}\nvar mirrorPad = op({ mirrorPad_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/mod.js\nfunction mod_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"mod\");\n  let $b = convertToTensor(b, \"b\", \"mod\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(Mod, inputs);\n}\nvar mod = op({ mod_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/square.js\nfunction square_(x) {\n  const $x = convertToTensor(x, \"x\", \"square\");\n  const attrs = {};\n  return ENGINE.runKernel(\"Square\", { x: $x }, attrs);\n}\nvar square = op({ square_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/moments.js\nfunction moments_(x, axis = null, keepDims = false) {\n  x = convertToTensor(x, \"x\", \"moments\");\n  const axes = parseAxisParam(axis, x.shape);\n  const xMean = mean(x, axes, keepDims);\n  let keepDimsShape = xMean.shape;\n  if (!keepDims) {\n    keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);\n  }\n  const devSquared = square(sub(cast(x, \"float32\"), reshape(xMean, keepDimsShape)));\n  const variance = mean(devSquared, axes, keepDims);\n  return { mean: xMean, variance };\n}\nvar moments = op({ moments_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/multi_rnn_cell.js\nfunction multiRNNCell_(lstmCells, data, c, h) {\n  const $data = convertToTensor(data, \"data\", \"multiRNNCell\");\n  const $c = convertToTensorArray(c, \"c\", \"multiRNNCell\");\n  const $h = convertToTensorArray(h, \"h\", \"multiRNNCell\");\n  let input2 = $data;\n  const newStates = [];\n  for (let i = 0; i < lstmCells.length; i++) {\n    const output = lstmCells[i](input2, $c[i], $h[i]);\n    newStates.push(output[0]);\n    newStates.push(output[1]);\n    input2 = output[1];\n  }\n  const newC = [];\n  const newH = [];\n  for (let i = 0; i < newStates.length; i += 2) {\n    newC.push(newStates[i]);\n    newH.push(newStates[i + 1]);\n  }\n  return [newC, newH];\n}\nvar multiRNNCell = op({ multiRNNCell_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js\nfunction multinomial_(logits, numSamples, seed, normalized = false) {\n  const $logits = convertToTensor(logits, \"logits\", \"multinomial\");\n  const numOutcomes = $logits.size;\n  const origRank = $logits.rank;\n  if (numOutcomes < 2) {\n    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${numOutcomes}.`);\n  }\n  if (origRank > 2) {\n    throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n  }\n  seed = seed || Math.random();\n  const logits2D = origRank === 1 ? reshape($logits, [1, -1]) : $logits;\n  const inputs = { logits: logits2D };\n  const attrs = { numSamples, seed, normalized };\n  const res = ENGINE.runKernel(Multinomial, inputs, attrs);\n  return origRank === 1 ? reshape(res, [res.size]) : res;\n}\nvar multinomial = op({ multinomial_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js\nfunction notEqual_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"notEqual\", \"string_or_numeric\");\n  let $b = convertToTensor(b, \"b\", \"notEqual\", \"string_or_numeric\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = { a: $a, b: $b };\n  return ENGINE.runKernel(NotEqual, inputs);\n}\nvar notEqual = op({ notEqual_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/ones_like.js\nfunction onesLike_(x) {\n  const $x = convertToTensor(x, \"x\", \"onesLike\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(OnesLike, inputs);\n}\nvar onesLike = op({ onesLike_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/outer_product.js\nfunction outerProduct_(v1, v2) {\n  const $v1 = convertToTensor(v1, \"v1\", \"outerProduct\");\n  const $v2 = convertToTensor(v2, \"v2\", \"outerProduct\");\n  assert($v1.rank === 1 && $v2.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${$v1.rank} and ${$v2.rank}.`);\n  const v12D = reshape($v1, [-1, 1]);\n  const v22D = reshape($v2, [1, -1]);\n  return matMul(v12D, v22D);\n}\nvar outerProduct = op({ outerProduct_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/pad.js\nfunction pad_(x, paddings, constantValue = 0) {\n  const $x = convertToTensor(x, \"x\", \"pad\");\n  if ($x.rank === 0) {\n    throw new Error(\"pad(scalar) is not defined. Pass non-scalar to pad\");\n  }\n  const attrs = { paddings, constantValue };\n  const inputs = { x: $x };\n  return ENGINE.runKernel(PadV2, inputs, attrs);\n}\nvar pad = op({ pad_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/pad1d.js\nfunction pad1d_(x, paddings, constantValue = 0) {\n  assert(paddings.length === 2, () => \"Invalid number of paddings. Must be length of 2.\");\n  return pad(x, [paddings], constantValue);\n}\nvar pad1d = op({ pad1d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/pad2d.js\nfunction pad2d_(x, paddings, constantValue = 0) {\n  assert(paddings.length === 2 && paddings[0].length === 2 && paddings[1].length === 2, () => \"Invalid number of paddings. Must be length of 2 each.\");\n  return pad(x, paddings, constantValue);\n}\nvar pad2d = op({ pad2d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/pad3d.js\nfunction pad3d_(x, paddings, constantValue = 0) {\n  assert(paddings.length === 3 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2, () => \"Invalid number of paddings. Must be length of 2 each.\");\n  return pad(x, paddings, constantValue);\n}\nvar pad3d = op({ pad3d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/pad4d.js\nfunction pad4d_(x, paddings, constantValue = 0) {\n  assert(paddings.length === 4 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2 && paddings[3].length === 2, () => \"Invalid number of paddings. Must be length of 2 each.\");\n  return pad(x, paddings, constantValue);\n}\nvar pad4d = op({ pad4d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js\nfunction spaceToBatchND_(x, blockShape, paddings) {\n  const $x = convertToTensor(x, \"x\", \"spaceToBatchND\");\n  assert($x.rank >= 1 + blockShape.length, () => `input rank ${$x.rank} should be > than [blockShape] ${blockShape.length}`);\n  assert(paddings.length === blockShape.length, () => `paddings.shape[0] ${paddings.length} must be equal to [blockShape] ${blockShape.length}`);\n  assert($x.shape.reduce((a, b, i) => {\n    if (i > 0 && i <= blockShape.length) {\n      return a && (b + paddings[i - 1][0] + paddings[i - 1][1]) % blockShape[i - 1] === 0;\n    }\n    return a;\n  }, true), () => `input spatial dimensions ${$x.shape.slice(1)} with paddings ${paddings.toString()} must be divisible by blockShapes ${blockShape.toString()}`);\n  const inputs = { x: $x };\n  const attrs = { blockShape, paddings };\n  return ENGINE.runKernel(SpaceToBatchND, inputs, attrs);\n}\nvar spaceToBatchND = op({ spaceToBatchND_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/pool.js\nfunction pool_(input2, windowShape, poolingType, pad3, dilations, strides, dimRoundingMode) {\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  if (strides == null) {\n    strides = 1;\n  }\n  if (pad3 === 0) {\n    pad3 = \"valid\";\n  }\n  const $x = convertToTensor(input2, \"x\", \"maxPool\");\n  let x4D = $x;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  assert(eitherStridesOrDilationsAreOne(strides, dilations), () => `Error in pool: Either strides or dilations must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = computePool2DInfo(x4D.shape, windowShape, strides, dilations, pad3);\n  const dilation = [convInfo.dilationHeight, convInfo.dilationWidth];\n  let basePadding;\n  if (pad3 === \"same\") {\n    basePadding = withSpaceToBatchBasePaddings([convInfo.filterHeight, convInfo.filterWidth], dilation);\n  } else {\n    basePadding = [[0, 0], [0, 0]];\n  }\n  const isDilationOne = dilation[0] === 1 && dilation[1] === 1;\n  const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings([convInfo.inHeight, convInfo.inWidth], dilation, basePadding);\n  const convertedPad = isDilationOne ? pad3 : \"valid\";\n  const convertedX = isDilationOne ? x4D : spaceToBatchND(x4D, dilation, adjustedPadding);\n  const forwardOp = poolingType === \"avg\" ? () => avgPool(convertedX, windowShape, strides, convertedPad, dimRoundingMode) : () => maxPool(convertedX, windowShape, strides, convertedPad, dimRoundingMode);\n  const y = forwardOp();\n  const res = isDilationOne ? y : batchToSpaceND(y, dilation, adjustedCrops);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nfunction requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {\n  const padStart = basePadding.map((b) => b[0]);\n  const origPadEnd = basePadding.map((b) => b[1]);\n  const fullInputShape = inputShape.concat(padStart, origPadEnd);\n  const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);\n  const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);\n  const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);\n  const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);\n  return [paddings, crops];\n}\nfunction withSpaceToBatchBasePaddings(filterShape, dilation) {\n  const dilatedFilterShape = filterShape.map((s, i) => {\n    return s + (s - 1) * (dilation[i] - 1);\n  });\n  const padExtraShape = dilatedFilterShape.map((s) => s - 1);\n  const padExtraStart = padExtraShape.map((s) => Math.floor(s / 2));\n  const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);\n  return padExtraShape.map((_, i) => {\n    return [padExtraStart[i], padExtraEnd[i]];\n  });\n}\nvar pool = op({ pool_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/pow.js\nfunction pow_(base, exp4) {\n  let $base = convertToTensor(base, \"base\", \"pow\");\n  let $exp = convertToTensor(exp4, \"exp\", \"pow\");\n  [$base, $exp] = makeTypesMatch($base, $exp);\n  const inputs = { a: $base, b: $exp };\n  return ENGINE.runKernel(Pow, inputs);\n}\nvar pow = op({ pow_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js\nfunction prelu_(x, alpha) {\n  const $x = convertToTensor(x, \"x\", \"prelu\");\n  const $alpha = convertToTensor(alpha, \"alpha\", \"prelu\");\n  const inputs = { x: $x, alpha: $alpha };\n  return ENGINE.runKernel(Prelu, inputs);\n}\nvar prelu = op({ prelu_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/prod.js\nfunction prod_(x, axis = null, keepDims = false) {\n  let $x = convertToTensor(x, \"x\", \"prod\");\n  if ($x.dtype === \"bool\") {\n    $x = cast($x, \"int32\");\n  }\n  const inputs = { x: $x };\n  const attrs = { axis, keepDims };\n  return ENGINE.runKernel(Prod, inputs, attrs);\n}\nvar prod = op({ prod_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/rand.js\nfunction rand_(shape, randFunction, dtype) {\n  const size = sizeFromShape(shape);\n  let values = null;\n  if (dtype == null || dtype === \"float32\") {\n    values = new Float32Array(size);\n  } else if (dtype === \"int32\") {\n    values = new Int32Array(size);\n  } else if (dtype === \"bool\") {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  for (let i = 0; i < size; i++) {\n    values[i] = randFunction();\n  }\n  return ENGINE.makeTensor(values, shape, dtype);\n}\nvar rand = op({ rand_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js\nvar seedrandom = __toESM(require_seedrandom2());\nvar MPRandGauss = class {\n  constructor(mean4, stdDeviation, dtype, truncated, seed) {\n    this.mean = mean4;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n  nextValue() {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n    let resultX, resultY;\n    let isValid = false;\n    while (!isValid) {\n      let v1, v2, s;\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n      const mul2 = Math.sqrt(-2 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul2;\n      resultY = this.mean + this.stdDev * v2 * mul2;\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n    return this.convertValue(resultX);\n  }\n  convertValue(value) {\n    if (this.dtype == null || this.dtype === \"float32\") {\n      return value;\n    }\n    return Math.round(value);\n  }\n  isValidTruncated(value) {\n    return value <= this.upper && value >= this.lower;\n  }\n};\nvar RandGamma = class {\n  constructor(alpha, beta, dtype, seed) {\n    this.alpha = alpha;\n    this.beta = 1 / beta;\n    this.dtype = dtype;\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n    if (alpha < 1) {\n      this.d = alpha + 2 / 3;\n    } else {\n      this.d = alpha - 1 / 3;\n    }\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n  nextValue() {\n    let x2, v0, v1, x, u, v;\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + this.c * x;\n      } while (v <= 0);\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - 0.331 * x2 * x2;\n      v1 = 0.5 * x2 + this.d * (1 - v + Math.log(v));\n      u = this.randu();\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n    v = 1 / this.beta * this.d * v;\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n    return this.convertValue(v);\n  }\n  convertValue(value) {\n    if (this.dtype === \"float32\") {\n      return value;\n    }\n    return Math.round(value);\n  }\n};\nvar UniformRandom = class {\n  constructor(min6 = 0, max6 = 1, dtype, seed) {\n    this.canReturnFloat = () => this.dtype == null || this.dtype === \"float32\";\n    this.min = min6;\n    this.range = max6 - min6;\n    this.dtype = dtype;\n    if (seed == null) {\n      seed = Math.random();\n    }\n    if (typeof seed === \"number\") {\n      seed = seed.toString();\n    }\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(`The difference between ${min6} - ${max6} <= 1 and dtype is not float`);\n    }\n    this.random = seedrandom.alea(seed);\n  }\n  convertValue(value) {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n    return Math.round(value);\n  }\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/random_gamma.js\nfunction randomGamma_(shape, alpha, beta = 1, dtype = \"float32\", seed) {\n  if (beta == null) {\n    beta = 1;\n  }\n  if (dtype == null) {\n    dtype = \"float32\";\n  }\n  if (dtype !== \"float32\" && dtype !== \"int32\") {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const rgamma = new RandGamma(alpha, beta, dtype, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = rgamma.nextValue();\n  }\n  return res.toTensor();\n}\nvar randomGamma = op({ randomGamma_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/random_normal.js\nfunction randomNormal_(shape, mean4 = 0, stdDev = 1, dtype, seed) {\n  if (dtype != null && dtype === \"bool\") {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const randGauss = new MPRandGauss(mean4, stdDev, dtype, false, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n  return res.toTensor();\n}\nvar randomNormal = op({ randomNormal_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js\nfunction randomUniform_(shape, minval = 0, maxval = 1, dtype = \"float32\", seed) {\n  const res = buffer(shape, dtype);\n  const random = new UniformRandom(minval, maxval, null, seed);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = random.nextValue();\n  }\n  return res.toTensor();\n}\nvar randomUniform = op({ randomUniform_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/range.js\nfunction range(start, stop, step5 = 1, dtype = \"float32\") {\n  if (step5 === 0) {\n    throw new Error(\"Cannot have a step of zero\");\n  }\n  const attrs = { start, stop, step: step5, dtype };\n  return ENGINE.runKernel(Range, {}, attrs);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/real.js\nfunction real_(input2) {\n  const $input = convertToTensor(input2, \"input\", \"real\");\n  const inputs = { input: $input };\n  return ENGINE.runKernel(Real, inputs);\n}\nvar real = op({ real_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/reciprocal.js\nfunction reciprocal_(x) {\n  const $x = convertToTensor(x, \"x\", \"reciprocal\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Reciprocal, inputs);\n}\nvar reciprocal = op({ reciprocal_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/relu.js\nfunction relu_(x) {\n  const $x = convertToTensor(x, \"x\", \"relu\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Relu, inputs);\n}\nvar relu = op({ relu_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js\nfunction relu6_(x) {\n  const $x = convertToTensor(x, \"x\", \"relu6\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Relu6, inputs);\n}\nvar relu6 = op({ relu6_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js\nfunction reverse_(x, axis) {\n  const $x = convertToTensor(x, \"x\", \"reverse\");\n  const inputs = { x: $x };\n  const attrs = { dims: axis };\n  return ENGINE.runKernel(Reverse, inputs, attrs);\n}\nvar reverse = op({ reverse_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/reverse_1d.js\nfunction reverse1d_(x) {\n  const $x = convertToTensor(x, \"x\", \"reverse\");\n  assert($x.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);\n  return reverse($x, 0);\n}\nvar reverse1d = op({ reverse1d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/reverse_2d.js\nfunction reverse2d_(x, axis) {\n  const $x = convertToTensor(x, \"x\", \"reverse\");\n  assert($x.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\nvar reverse2d = op({ reverse2d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/reverse_3d.js\nfunction reverse3d_(x, axis) {\n  const $x = convertToTensor(x, \"x\", \"reverse\");\n  assert($x.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\nvar reverse3d = op({ reverse3d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/reverse_4d.js\nfunction reverse4d_(x, axis) {\n  const $x = convertToTensor(x, \"x\", \"reverse\");\n  assert($x.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\nvar reverse4d = op({ reverse4d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/round.js\nfunction round_(x) {\n  const $x = convertToTensor(x, \"x\", \"round\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Round, inputs);\n}\nvar round2 = op({ round_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js\nfunction rsqrt_(x) {\n  const $x = convertToTensor(x, \"x\", \"rsqrt\", \"float32\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Rsqrt, inputs);\n}\nvar rsqrt = op({ rsqrt_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js\nfunction scalar(value, dtype) {\n  if ((isTypedArray(value) && dtype !== \"string\" || Array.isArray(value)) && dtype !== \"complex64\") {\n    throw new Error(\"Error creating a new Scalar: value must be a primitive (number|boolean|string)\");\n  }\n  if (dtype === \"string\" && isTypedArray(value) && !(value instanceof Uint8Array)) {\n    throw new Error(\"When making a scalar from encoded string, the value must be `Uint8Array`.\");\n  }\n  const shape = [];\n  const inferredShape = [];\n  return makeTensor(value, shape, inferredShape, dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/selu.js\nfunction selu_(x) {\n  const $x = convertToTensor(x, \"x\", \"selu\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Selu, inputs);\n}\nvar selu = op({ selu_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js\nfunction separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad3, dilation = [1, 1], dataFormat = \"NHWC\") {\n  const $x = convertToTensor(x, \"x\", \"separableConv2d\");\n  const $depthwiseFilter = convertToTensor(depthwiseFilter, \"depthwiseFilter\", \"separableConv2d\");\n  const $pointwiseFilter = convertToTensor(pointwiseFilter, \"pointwiseFilter\", \"separableConv2d\");\n  let x4D = $x;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  if (dataFormat === \"NCHW\") {\n    throw new Error(\"separableConv2d currently does not support dataFormat NCHW; only NHWC is supported\");\n  }\n  assert(x4D.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${x4D.rank}.`);\n  assert($depthwiseFilter.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${$depthwiseFilter.rank}.`);\n  assert($pointwiseFilter.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${$depthwiseFilter.rank}.`);\n  assert($pointwiseFilter.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${$pointwiseFilter.shape[0]}.`);\n  assert($pointwiseFilter.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);\n  const inChannels = $depthwiseFilter.shape[2];\n  const channelMultiplier = $depthwiseFilter.shape[3];\n  assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${inChannels * channelMultiplier}, but got ${$pointwiseFilter.shape[2]}.`);\n  const depthwise = depthwiseConv2d(x4D, $depthwiseFilter, strides, pad3, dataFormat, dilation);\n  const pointwiseStride = 1;\n  const res = conv2d(depthwise, $pointwiseFilter, pointwiseStride, \"valid\", dataFormat);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nvar separableConv2d = op({ separableConv2d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/setdiff1d_async.js\nasync function setdiff1dAsync_(x, y) {\n  const $x = convertToTensor(x, \"x\", \"setdiff1d\");\n  const $y = convertToTensor(y, \"y\", \"setdiff1d\");\n  assert($x.dtype === $y.dtype, () => `x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);\n  assert($x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\n  assert($y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\n  const xVals = await $x.data();\n  const yVals = await $y.data();\n  const ySet = new Set(yVals);\n  let outputSize = 0;\n  for (let i = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      outputSize++;\n    }\n  }\n  const buffer2 = new TensorBuffer([outputSize], $x.dtype);\n  const indices = new TensorBuffer([outputSize], \"int32\");\n  for (let i = 0, p2 = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      buffer2.values[p2] = xVals[i];\n      indices.values[p2] = i;\n      p2++;\n    }\n  }\n  return [buffer2.toTensor(), indices.toTensor()];\n}\nvar setdiff1dAsync = setdiff1dAsync_;\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sign.js\nfunction sign_(x) {\n  const $x = convertToTensor(x, \"x\", \"sign\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Sign, inputs);\n}\nvar sign = op({ sign_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sin.js\nfunction sin_(x) {\n  const $x = convertToTensor(x, \"x\", \"sin\", \"float32\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Sin, inputs);\n}\nvar sin = op({ sin_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js\nfunction sinh_(x) {\n  const $x = convertToTensor(x, \"x\", \"sinh\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Sinh, inputs);\n}\nvar sinh = op({ sinh_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/slice1d.js\nfunction slice1d_(x, begin, size) {\n  const $x = convertToTensor(x, \"x\", \"slice1d\");\n  assert($x.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, [begin], [size]);\n}\nvar slice1d = op({ slice1d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/slice2d.js\nfunction slice2d_(x, begin, size) {\n  const $x = convertToTensor(x, \"x\", \"slice2d\");\n  assert($x.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\nvar slice2d = op({ slice2d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/slice3d.js\nfunction slice3d_(x, begin, size) {\n  const $x = convertToTensor(x, \"x\", \"slice3d\");\n  assert($x.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\nvar slice3d = op({ slice3d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/slice4d.js\nfunction slice4d_(x, begin, size) {\n  const $x = convertToTensor(x, \"x\", \"slice4d\");\n  assert($x.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\nvar slice4d = op({ slice4d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js\nfunction softmax_(logits, dim = -1) {\n  const $logits = convertToTensor(logits, \"logits\", \"softmax\", \"float32\");\n  if (dim === -1) {\n    dim = $logits.rank - 1;\n  }\n  if (dim !== $logits.rank - 1) {\n    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${$logits.rank} and dim was ${dim}`);\n  }\n  const inputs = { logits: $logits };\n  const attrs = { dim };\n  return ENGINE.runKernel(Softmax, inputs, attrs);\n}\nvar softmax = op({ softmax_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js\nfunction fft_(input2) {\n  assert(input2.dtype === \"complex64\", () => `The dtype for tf.spectral.fft() must be complex64 but got ${input2.dtype}.`);\n  const inputs = { input: input2 };\n  return ENGINE.runKernel(FFT, inputs);\n}\nvar fft = op({ fft_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js\nfunction ifft_(input2) {\n  assert(input2.dtype === \"complex64\", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${input2.dtype}.`);\n  const inputs = { input: input2 };\n  return ENGINE.runKernel(IFFT, inputs);\n}\nvar ifft = op({ ifft_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js\nfunction irfft_(input2) {\n  const innerDimensionSize = input2.shape[input2.shape.length - 1];\n  const batch = input2.size / innerDimensionSize;\n  let ret;\n  if (innerDimensionSize <= 2) {\n    const complexInput = reshape(input2, [batch, innerDimensionSize]);\n    ret = ifft(complexInput);\n  } else {\n    const outputShape = [batch, 2 * (innerDimensionSize - 1)];\n    const realInput = reshape(real(input2), [batch, innerDimensionSize]);\n    const imagInput = reshape(imag(input2), [batch, innerDimensionSize]);\n    const realConjugate = reverse(slice(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);\n    const imagConjugate = mul(reverse(slice(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1), scalar(-1));\n    const r = concat([realInput, realConjugate], 1);\n    const i = concat([imagInput, imagConjugate], 1);\n    const complexInput = reshape(complex(r, i), [outputShape[0], outputShape[1]]);\n    ret = ifft(complexInput);\n  }\n  ret = real(ret);\n  if (input2.rank === 3 && input2.shape[0] !== 0) {\n    const temp = ret;\n    const batch2 = input2.shape[0];\n    ret = reshape(ret, [batch2, ret.shape[0] / batch2, ret.shape[1]]);\n    temp.dispose();\n  }\n  return ret;\n}\nvar irfft = op({ irfft_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/split.js\nfunction split_(x, numOrSizeSplits, axis = 0) {\n  const $x = convertToTensor(x, \"x\", \"split\");\n  const inputs = { x: $x };\n  const attr = { numOrSizeSplits, axis };\n  return ENGINE.runKernel(SplitV, inputs, attr);\n}\nvar split = op({ split_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js\nfunction rfft_(input2, fftLength) {\n  assert(input2.dtype === \"float32\", () => `The dtype for rfft() must be real value but got ${input2.dtype}`);\n  let innerDimensionSize = input2.shape[input2.shape.length - 1];\n  const batch = input2.size / innerDimensionSize;\n  let adjustedInput;\n  if (fftLength != null && fftLength < innerDimensionSize) {\n    const begin = input2.shape.map((v) => 0);\n    const size = input2.shape.map((v) => v);\n    size[input2.shape.length - 1] = fftLength;\n    adjustedInput = slice(input2, begin, size);\n    innerDimensionSize = fftLength;\n  } else if (fftLength != null && fftLength > innerDimensionSize) {\n    const zerosShape = input2.shape.map((v) => v);\n    zerosShape[input2.shape.length - 1] = fftLength - innerDimensionSize;\n    adjustedInput = concat([input2, zeros(zerosShape)], input2.shape.length - 1);\n    innerDimensionSize = fftLength;\n  } else {\n    adjustedInput = input2;\n  }\n  const zerosInput = zerosLike(adjustedInput);\n  const complexInput = reshape(complex(adjustedInput, zerosInput), [batch, innerDimensionSize]);\n  const ret = fft(complexInput);\n  const half = Math.floor(innerDimensionSize / 2) + 1;\n  const realValues = real(ret);\n  const imagValues = imag(ret);\n  const realComplexConjugate = split(realValues, [half, innerDimensionSize - half], realValues.shape.length - 1);\n  const imagComplexConjugate = split(imagValues, [half, innerDimensionSize - half], imagValues.shape.length - 1);\n  const outputShape = adjustedInput.shape.slice();\n  outputShape[adjustedInput.shape.length - 1] = half;\n  return reshape(complex(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);\n}\nvar rfft = op({ rfft_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js\nfunction sqrt_(x) {\n  const $x = convertToTensor(x, \"x\", \"sqrt\", \"float32\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Sqrt, inputs);\n}\nvar sqrt = op({ sqrt_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js\nfunction squaredDifference_(a, b) {\n  let $a = convertToTensor(a, \"a\", \"squaredDifference\");\n  let $b = convertToTensor(b, \"b\", \"squaredDifference\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = { a: $a, b: $b };\n  const attrs = {};\n  return ENGINE.runKernel(SquaredDifference, inputs, attrs);\n}\nvar squaredDifference = op({ squaredDifference_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js\nfunction squeeze_(x, axis) {\n  const $x = convertToTensor(x, \"x\", \"squeeze\");\n  return reshape($x, squeezeShape($x.shape, axis).newShape);\n}\nvar squeeze = op({ squeeze_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/stack.js\nfunction stack_(tensors, axis = 0) {\n  const $tensors = convertToTensorArray(tensors, \"tensors\", \"stack\", \"string_or_numeric\");\n  assert($tensors.length >= 1, () => \"Pass at least one tensor to tf.stack\");\n  if ($tensors.length > 0) {\n    assert(axis <= $tensors[0].rank, () => \"Axis must be <= rank of the tensor\");\n  }\n  const inputs = $tensors;\n  const attrs = { axis };\n  return ENGINE.runKernel(Pack, inputs, attrs);\n}\nvar stack = op({ stack_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/step.js\nfunction step_(x, alpha = 0) {\n  const $x = convertToTensor(x, \"x\", \"step\");\n  const inputs = { x: $x };\n  const attrs = { alpha };\n  return ENGINE.runKernel(Step, inputs, attrs);\n}\nvar step = op({ step_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js\nfunction stridedSlice_(x, begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {\n  const $x = convertToTensor(x, \"x\", \"stridedSlice\", \"string_or_numeric\");\n  const inputs = { x: $x };\n  const attrs = {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  };\n  return ENGINE.runKernel(StridedSlice, inputs, attrs);\n}\nvar stridedSlice = op({ stridedSlice_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/tan.js\nfunction tan_(x) {\n  const $x = convertToTensor(x, \"x\", \"tan\", \"float32\");\n  const inputs = { x: $x };\n  return ENGINE.runKernel(Tan, inputs);\n}\nvar tan = op({ tan_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js\nfunction tensor1d(values, dtype) {\n  assertNonNull(values);\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 1) {\n    throw new Error(\"tensor1d() requires values to be a flat/TypedArray\");\n  }\n  const shape = null;\n  return makeTensor(values, shape, inferredShape, dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js\nfunction tensor2d(values, shape, dtype) {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 2) {\n    throw new Error(\"tensor2d() requires shape to have two numbers\");\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 2 && inferredShape.length !== 1) {\n    throw new Error(\"tensor2d() requires values to be number[][] or flat/TypedArray\");\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\"tensor2d() requires shape to be provided when `values` are a flat/TypedArray\");\n  }\n  return makeTensor(values, shape, inferredShape, dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/tensor4d.js\nfunction tensor4d(values, shape, dtype) {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 4) {\n    throw new Error(\"tensor4d() requires shape to have four numbers\");\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 4 && inferredShape.length !== 1) {\n    throw new Error(\"tensor4d() requires values to be number[][][][] or flat/TypedArray\");\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\"tensor4d() requires shape to be provided when `values` are a flat array\");\n  }\n  return makeTensor(values, shape, inferredShape, dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/tensor5d.js\nfunction tensor5d(values, shape, dtype) {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 5) {\n    throw new Error(\"tensor5d() requires shape to have five numbers\");\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 5 && inferredShape.length !== 1) {\n    throw new Error(\"tensor5d() requires values to be number[][][][][] or flat/TypedArray\");\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\"tensor5d() requires shape to be provided when `values` are a flat array\");\n  }\n  return makeTensor(values, shape, inferredShape, dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/tensor6d.js\nfunction tensor6d(values, shape, dtype) {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 6) {\n    throw new Error(\"tensor6d() requires shape to have six numbers\");\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 6 && inferredShape.length !== 1) {\n    throw new Error(\"tensor6d() requires values to be number[][][][][][] or flat/TypedArray\");\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\"tensor6d() requires shape to be provided when `values` are a flat array\");\n  }\n  shape = shape || inferredShape;\n  return makeTensor(values, shape, inferredShape, dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/topk.js\nfunction topk_(x, k = 1, sorted = true) {\n  const $x = convertToTensor(x, \"x\", \"topk\");\n  if ($x.rank === 0) {\n    throw new Error(\"topk() expects the input to be of rank 1 or higher\");\n  }\n  const lastDim = $x.shape[$x.shape.length - 1];\n  if (k < 0) {\n    throw new Error(`'k' passed to topk() must be >= 0 but got ${k}`);\n  }\n  if (k > lastDim) {\n    throw new Error(`'k' passed to topk() must be <= the last dimension (${lastDim}) but got ${k}`);\n  }\n  const inputs = { x: $x };\n  const attrs = { k, sorted };\n  const [values, indices] = ENGINE.runKernel(TopK, inputs, attrs);\n  return { values, indices };\n}\nvar topk = op({ topk_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js\nfunction truncatedNormal_(shape, mean4 = 0, stdDev = 1, dtype, seed) {\n  if (dtype != null && dtype === \"bool\") {\n    throw new Error(`Unsupported data type $ { dtype }`);\n  }\n  const randGauss = new MPRandGauss(mean4, stdDev, dtype, true, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n  return res.toTensor();\n}\nvar truncatedNormal = op({ truncatedNormal_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/unique.js\nfunction unique_(x, axis = 0) {\n  const $x = convertToTensor(x, \"x\", \"unique\", \"string_or_numeric\");\n  assert($x.rank > 0, () => \"The input tensor must be at least 1D\");\n  const inputs = { x: $x };\n  const attrs = { axis };\n  const [values, indices] = ENGINE.runKernel(Unique, inputs, attrs);\n  return { values, indices };\n}\nvar unique = op({ unique_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js\nfunction unsortedSegmentSum_(x, segmentIds, numSegments) {\n  const $x = convertToTensor(x, \"x\", \"unsortedSegmentSum\");\n  const $segmentIds = convertToTensor(segmentIds, \"segmentIds\", \"unsortedSegmentSum\", \"int32\");\n  assert(isInt(numSegments), () => \"numSegments must be of dtype int\");\n  const inputs = { x: $x, segmentIds: $segmentIds };\n  const attrs = { numSegments };\n  return ENGINE.runKernel(UnsortedSegmentSum, inputs, attrs);\n}\nvar unsortedSegmentSum = op({ unsortedSegmentSum_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js\nfunction unstack_(x, axis = 0) {\n  const $x = convertToTensor(x, \"x\", \"unstack\", \"string_or_numeric\");\n  assert(axis >= -$x.shape.length && axis < $x.shape.length, () => `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);\n  const inputs = { value: $x };\n  const attrs = { axis };\n  return ENGINE.runKernel(Unpack, inputs, attrs);\n}\nvar unstack = op({ unstack_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/variable.js\nfunction variable(initialValue, trainable = true, name, dtype) {\n  return ENGINE.makeVariable(initialValue, trainable, name, dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js\nfunction whereImpl(condShape, condVals) {\n  const indices = [];\n  for (let i = 0; i < condVals.length; i++) {\n    if (condVals[i]) {\n      indices.push(i);\n    }\n  }\n  const inBuffer = buffer(condShape, \"int32\");\n  const out = buffer([indices.length, condShape.length], \"int32\");\n  for (let i = 0; i < indices.length; i++) {\n    const loc = inBuffer.indexToLoc(indices[i]);\n    const offset = i * condShape.length;\n    out.values.set(loc, offset);\n  }\n  return out.toTensor();\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js\nasync function whereAsync_(condition) {\n  const $condition = convertToTensor(condition, \"condition\", \"whereAsync\", \"bool\");\n  const vals = await $condition.data();\n  const res = whereImpl($condition.shape, vals);\n  if (condition !== $condition) {\n    $condition.dispose();\n  }\n  return res;\n}\nvar whereAsync = whereAsync_;\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/boolean_mask.js\nasync function booleanMaskAsync_(tensor2, mask, axis) {\n  const $tensor = convertToTensor(tensor2, \"tensor\", \"boolMask\");\n  const $mask = convertToTensor(mask, \"mask\", \"boolMask\", \"bool\");\n  const axisFrom = axis == null ? 0 : axis;\n  const maskDim = $mask.rank;\n  const tensorShape = $tensor.shape;\n  assert(maskDim > 0, () => \"mask cannot be scalar\");\n  assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);\n  let leadingSize = 1;\n  for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n    leadingSize *= tensorShape[i];\n  }\n  const targetTensorShape = tensorShape.slice(0, axisFrom).concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n  const reshapedTensor = reshape($tensor, targetTensorShape);\n  const reshapedMask = reshape($mask, [-1]);\n  const positivePositions = await whereAsync(reshapedMask);\n  const indices = squeeze(positivePositions, [1]);\n  const res = gather(reshapedTensor, indices, axisFrom);\n  if (tensor2 !== $tensor) {\n    $tensor.dispose();\n  }\n  if (mask !== $mask) {\n    $mask.dispose();\n  }\n  indices.dispose();\n  reshapedTensor.dispose();\n  reshapedMask.dispose();\n  positivePositions.dispose();\n  return res;\n}\nvar booleanMaskAsync = booleanMaskAsync_;\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/norm.js\nfunction norm_(x, ord = \"euclidean\", axis = null, keepDims = false) {\n  x = convertToTensor(x, \"x\", \"norm\");\n  const norm2 = normImpl(x, ord, axis);\n  let keepDimsShape = norm2.shape;\n  if (keepDims) {\n    const axes = parseAxisParam(axis, x.shape);\n    keepDimsShape = expandShapeToKeepDim(norm2.shape, axes);\n  }\n  return reshape(norm2, keepDimsShape);\n}\nfunction normImpl(x, p2, axis = null) {\n  if (x.rank === 0) {\n    return abs(x);\n  }\n  if (x.rank !== 1 && axis === null) {\n    return normImpl(reshape(x, [-1]), p2, axis);\n  }\n  if (x.rank === 1 || typeof axis === \"number\" || Array.isArray(axis) && axis.length === 1) {\n    if (p2 === 1) {\n      return sum2(abs(x), axis);\n    }\n    if (p2 === Infinity) {\n      return max(abs(x), axis);\n    }\n    if (p2 === -Infinity) {\n      return min(abs(x), axis);\n    }\n    if (p2 === \"euclidean\" || p2 === 2) {\n      return sqrt(sum2(pow(abs(x), scalar(2, \"int32\")), axis));\n    }\n    throw new Error(`Error in norm: invalid ord value: ${p2}`);\n  }\n  if (Array.isArray(axis) && axis.length === 2) {\n    if (p2 === 1) {\n      return max(sum2(abs(x), axis[0]), axis[1] - 1);\n    }\n    if (p2 === Infinity) {\n      return max(sum2(abs(x), axis[1]), axis[0]);\n    }\n    if (p2 === -Infinity) {\n      return min(sum2(abs(x), axis[1]), axis[0]);\n    }\n    if (p2 === \"fro\" || p2 === \"euclidean\") {\n      return sqrt(sum2(square(x), axis));\n    }\n    throw new Error(`Error in norm: invalid ord value: ${p2}`);\n  }\n  throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\nvar norm = op({ norm_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/moving_average.js\nfunction movingAverage_(v, x, decay, step5, zeroDebias = true) {\n  const $v = convertToTensor(v, \"v\", \"movingAverage\");\n  const $x = convertToTensor(x, \"x\", \"movingAverage\");\n  const $decay = convertToTensor(decay, \"decay\", \"movingAverage\");\n  assertTypesMatch($v, $x);\n  assert(arraysEqual($v.shape, $x.shape), () => \"Shape mismatch in v and x\");\n  const one = scalar(1);\n  const oneMinusDecay = sub(one, $decay);\n  let update = mul(sub($x, $v), oneMinusDecay);\n  if (zeroDebias) {\n    assert(step5 != null, () => \"When using zeroDebias: true, step is required.\");\n    const $step = convertToTensor(step5, \"step\", \"movingAverage\");\n    update = div(update, sub(one, pow($decay, $step)));\n  }\n  return add2($v, update);\n}\nvar movingAverage = op({ movingAverage_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js\nfunction scatterND_(indices, updates, shape) {\n  const $indices = convertToTensor(indices, \"indices\", \"scatterND\", \"int32\");\n  const $updates = convertToTensor(updates, \"updates\", \"scatterND\");\n  validateInput($updates, $indices, shape);\n  const inputs = { indices: $indices, updates: $updates };\n  const attrs = { shape };\n  return ENGINE.runKernel(ScatterNd, inputs, attrs);\n}\nvar scatterND = op({ scatterND_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense_util.js\nfunction validateInput2(sparseIndices, sparseValues, outputShape, defaultValues) {\n  if (sparseIndices.dtype !== \"int32\") {\n    throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${sparseIndices.dtype}.`);\n  }\n  if (sparseIndices.rank > 2) {\n    throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${sparseIndices.shape}.`);\n  }\n  const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;\n  const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;\n  if (outputShape.length !== numDims) {\n    throw new Error(`outputShape has incorrect number of elements:, ${outputShape.length}, should be: ${numDims}.`);\n  }\n  const numValues = sparseValues.size;\n  if (!(sparseValues.rank === 0 || sparseValues.rank === 1 && numValues === numElems)) {\n    throw new Error(`sparseValues has incorrect shape ${sparseValues.shape}, should be [] or [${numElems}]`);\n  }\n  if (sparseValues.dtype !== defaultValues.dtype) {\n    throw new Error(\"sparseValues.dtype must match defaultValues.dtype\");\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js\nfunction sparseToDense_(sparseIndices, sparseValues, outputShape, defaultValue = 0) {\n  const $sparseIndices = convertToTensor(sparseIndices, \"sparseIndices\", \"sparseToDense\", \"int32\");\n  const $sparseValues = convertToTensor(sparseValues, \"sparseValues\", \"sparseToDense\");\n  const $defaultValue = convertToTensor(defaultValue, \"defaultValue\", \"sparseToDense\", $sparseValues.dtype);\n  validateInput2($sparseIndices, $sparseValues, outputShape, $defaultValue);\n  const inputs = {\n    sparseIndices: $sparseIndices,\n    sparseValues: $sparseValues,\n    defaultValue: $defaultValue\n  };\n  const attrs = { outputShape };\n  return ENGINE.runKernel(SparseToDense, inputs, attrs);\n}\nvar sparseToDense = op({ sparseToDense_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js\nfunction gatherND_(x, indices) {\n  const $indices = convertToTensor(indices, \"indices\", \"gatherND\", \"int32\");\n  const $x = convertToTensor(x, \"x\", \"gatherND\", \"string_or_numeric\");\n  const inputs = { params: $x, indices: $indices };\n  return ENGINE.runKernel(GatherNd, inputs);\n}\nvar gatherND = op({ gatherND_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/dropout_util.js\nfunction getNoiseShape(x, noiseShape) {\n  if (noiseShape == null) {\n    return x.shape.slice();\n  }\n  if (arraysEqual(x.shape, noiseShape)) {\n    return noiseShape;\n  }\n  if (x.shape.length === noiseShape.length) {\n    const newDimension = [];\n    for (let i = 0; i < x.shape.length; i++) {\n      if (noiseShape[i] == null && x.shape[i] != null) {\n        newDimension.push(x.shape[i]);\n      } else {\n        newDimension.push(noiseShape[i]);\n      }\n    }\n    return newDimension;\n  }\n  return noiseShape;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/dropout.js\nfunction dropout_(x, rate, noiseShape, seed) {\n  const $x = convertToTensor(x, \"x\", \"dropout\");\n  assert($x.dtype === \"float32\", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${$x.dtype} tensor instead.`);\n  assert(rate >= 0 && rate < 1, () => `rate must be a float in the range [0, 1), but got ${rate}.`);\n  if (rate === 0) {\n    return x instanceof Tensor ? $x.clone() : $x;\n  }\n  const $noiseShape = getNoiseShape($x, noiseShape);\n  const keepProb = 1 - rate;\n  const multiplier = div(floor(add2(randomUniform($noiseShape, 0, 1, \"float32\", seed), keepProb)), keepProb);\n  return mul($x, multiplier);\n}\nvar dropout = op({ dropout_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js\nfunction enclosingPowerOfTwo(value) {\n  return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2))));\n}\nfunction cosineWindow(windowLength, a, b) {\n  const even = 1 - windowLength % 2;\n  const newValues = new Float32Array(windowLength);\n  for (let i = 0; i < windowLength; ++i) {\n    const cosArg = 2 * Math.PI * i / (windowLength + even - 1);\n    newValues[i] = a - b * Math.cos(cosArg);\n  }\n  return tensor1d(newValues, \"float32\");\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/in_top_k.js\nasync function inTopKAsync_(predictions, targets, k = 1) {\n  const $predictions = convertToTensor(predictions, \"predictions\", \"inTopK\");\n  const $targets = convertToTensor(targets, \"targets\", \"inTopK\");\n  assert($predictions.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${$predictions.rank}`);\n  assert($predictions.rank - 1 === $targets.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${$predictions.rank} and targets rank ${$targets.rank}`);\n  assertShapesMatch($predictions.shape.slice(0, $predictions.shape.length - 1), $targets.shape, `predictions's shape should be align with the targets' shape, except the last dimension.`);\n  const lastDim = $predictions.shape[$predictions.shape.length - 1];\n  assert(k > 0 && k <= lastDim, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${lastDim}), but got ${k}`);\n  const predictionsVals = await $predictions.data();\n  const targetsVals = await $targets.data();\n  const [batch, size] = [predictionsVals.length / lastDim, lastDim];\n  const precision3 = getTypedArrayFromDType(\"bool\", batch);\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = predictionsVals.subarray(offset, offset + size);\n    const valAndInd = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({ value: vals[i], index: i });\n    }\n    valAndInd.sort((a, b2) => b2.value - a.value);\n    precision3[b] = 0;\n    for (let i = 0; i < k; i++) {\n      if (valAndInd[i].index === targetsVals[b]) {\n        precision3[b] = 1;\n        break;\n      }\n    }\n  }\n  if (predictions !== $predictions) {\n    $predictions.dispose();\n  }\n  if (targets !== $targets) {\n    $targets.dispose();\n  }\n  return tensor(precision3, $targets.shape, \"bool\");\n}\nvar inTopKAsync = inTopKAsync_;\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js\nvar fused_ops_exports = {};\n__export(fused_ops_exports, {\n  conv2d: () => conv2d2,\n  depthwiseConv2d: () => depthwiseConv2d2,\n  matMul: () => matMul2\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js\nfunction conv2DBackpropFilter_(x, dy, filterShape, strides, pad3, dataFormat = \"NHWC\", dimRoundingMode) {\n  let x4D = x;\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n  let dy4D = dy;\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n  assert(x4D.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${x4D.shape}.`);\n  assert(dy4D.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${dy4D.shape}.`);\n  assert(filterShape.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${filterShape}.`);\n  const inDepth = dataFormat === \"NHWC\" ? x4D.shape[3] : x4D.shape[1];\n  const outDepth = dataFormat === \"NHWC\" ? dy4D.shape[3] : dy4D.shape[1];\n  assert(inDepth === filterShape[2], () => `Error in conv2dDerFilter: depth of input ${inDepth}) must match input depth in filter (${filterShape[2]}.`);\n  assert(outDepth === filterShape[3], () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must match output depth for filter (${filterShape[3]}).`);\n  checkPadOnDimRoundingMode(\"conv2dDerFilter\", pad3, dimRoundingMode);\n  const inputs = { x: x4D, dy: dy4D };\n  const attrs = { strides, pad: pad3, dataFormat, dimRoundingMode, filterShape };\n  return ENGINE.runKernel(Conv2DBackpropFilter, inputs, attrs);\n}\nvar conv2DBackpropFilter = op({ conv2DBackpropFilter_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js\nfunction getFusedDyActivation(dy, y, activation2) {\n  if (activation2 == null || activation2 === \"linear\") {\n    return dy;\n  }\n  if (activation2 === \"relu\") {\n    return mul(dy, step(y));\n  }\n  throw new Error(`Cannot compute gradient for fused activation ${activation2}.`);\n}\nfunction getFusedBiasGradient(bias, dyActivation) {\n  let res = dyActivation;\n  const reduceAxes = getReductionAxes(bias.shape, dyActivation.shape);\n  if (reduceAxes.length > 0) {\n    res = sum2(res, reduceAxes);\n  }\n  return reshape(res, bias.shape);\n}\nfunction applyActivation(x, activation2, preluActivationWeights, leakyreluAlpha) {\n  if (activation2 === \"linear\") {\n    return x;\n  } else if (activation2 === \"relu\") {\n    return relu(x);\n  } else if (activation2 === \"elu\") {\n    return elu(x);\n  } else if (activation2 === \"relu6\") {\n    return relu6(x);\n  } else if (activation2 === \"prelu\") {\n    return prelu(x, preluActivationWeights);\n  } else if (activation2 === \"leakyrelu\") {\n    return leakyRelu(x, leakyreluAlpha);\n  } else if (activation2 === \"sigmoid\") {\n    return sigmoid(x);\n  }\n  throw new Error(`Unknown fused activation ${activation2}.`);\n}\nvar shouldFuse = (gradientDepth, activation2) => {\n  const gradientMode = gradientDepth > 0;\n  return !gradientMode || activation2 === \"linear\";\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/fused/conv2d.js\nfunction fusedConv2d_({ x, filter, strides, pad: pad3, dataFormat = \"NHWC\", dilations = [1, 1], dimRoundingMode, bias, activation: activation2 = \"linear\", preluActivationWeights, leakyreluAlpha }) {\n  activation2 = activation2 || \"linear\";\n  if (shouldFuse(ENGINE.state.gradientDepth, activation2) === false) {\n    let result = conv2d(x, filter, strides, pad3, dataFormat, dilations, dimRoundingMode);\n    if (bias != null) {\n      result = add2(result, bias);\n    }\n    return applyActivation(result, activation2, preluActivationWeights, leakyreluAlpha);\n  }\n  const $x = convertToTensor(x, \"x\", \"conv2d\", \"float32\");\n  const $filter = convertToTensor(filter, \"filter\", \"conv2d\", \"float32\");\n  let x4D = $x;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  assert(x4D.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${x4D.rank}.`);\n  assert($filter.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${$filter.rank}.`);\n  checkPadOnDimRoundingMode(\"fused conv2d\", pad3, dimRoundingMode);\n  assert(x4D.shape[3] === $filter.shape[2], () => `Error in conv2d: depth of input (${x4D.shape[3]}) must match input depth for filter ${$filter.shape[2]}.`);\n  assert(eitherStridesOrDilationsAreOne(strides, dilations), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  assert(dataFormat === \"NHWC\", () => `Error in conv2d: got dataFormat of ${dataFormat} but only NHWC is currently supported.`);\n  const convInfo = computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad3, dimRoundingMode);\n  let $bias;\n  if (bias != null) {\n    $bias = convertToTensor(bias, \"bias\", \"fused conv2d\");\n    [$bias] = makeTypesMatch($bias, $x);\n    assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n  }\n  let $preluActivationWeights;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(preluActivationWeights, \"prelu weights\", \"fused conv2d\");\n  }\n  const grad2 = (dy, saved) => {\n    const [$filter2, x4D2, y, $bias2] = saved;\n    const dyActivation = getFusedDyActivation(dy, y, activation2);\n    assert(tupleValuesAreOne(dilations), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${dilations}'`);\n    const xDer = conv2DBackpropInput(x4D2.shape, dyActivation, $filter2, strides, pad3);\n    const filterDer = conv2DBackpropFilter(x4D2, dyActivation, $filter2.shape, strides, pad3);\n    const der = [xDer, filterDer];\n    if ($bias2 != null) {\n      const biasDer = getFusedBiasGradient($bias2, dyActivation);\n      der.push(biasDer);\n    }\n    return der;\n  };\n  const inputs = {\n    x: x4D,\n    filter: $filter,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n  const attrs = {\n    strides,\n    pad: pad3,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation: activation2,\n    leakyreluAlpha\n  };\n  if (bias == null) {\n    const customOp = customGrad((x4D2, filter2, save) => {\n      let res = ENGINE.runKernel(FusedConv2D, inputs, attrs);\n      save([filter2, x4D2, res]);\n      if (reshapedTo4D) {\n        res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n      }\n      return { value: res, gradFunc: grad2 };\n    });\n    return customOp(x4D, $filter);\n  } else {\n    const customOpWithBias = customGrad((x4D2, filter2, bias2, save) => {\n      let res = ENGINE.runKernel(FusedConv2D, inputs, attrs);\n      save([filter2, x4D2, res, bias2]);\n      if (reshapedTo4D) {\n        res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n      }\n      return { value: res, gradFunc: grad2 };\n    });\n    return customOpWithBias(x4D, $filter, $bias);\n  }\n}\nvar conv2d2 = op({ fusedConv2d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js\nfunction depthwiseConv2dNativeBackpropFilter_(x, dy, filterShape, strides, pad3, dilations = [1, 1], dimRoundingMode) {\n  let x4D = x;\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n  let dy4D = dy;\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n  const inputs = { x: x4D, dy: dy4D };\n  const attrs = { strides, pad: pad3, dimRoundingMode, dilations, filterShape };\n  return ENGINE.runKernel(DepthwiseConv2dNativeBackpropFilter, inputs, attrs);\n}\nvar depthwiseConv2dNativeBackpropFilter = op({ depthwiseConv2dNativeBackpropFilter_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js\nfunction depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, strides, pad3, dilations = [1, 1], dimRoundingMode) {\n  let dy4D = dy;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n  const inputs = { dy: dy4D, filter };\n  const attrs = { strides, pad: pad3, dimRoundingMode, dilations, inputShape: xShape };\n  const res = ENGINE.runKernel(DepthwiseConv2dNativeBackpropInput, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nvar depthwiseConv2dNativeBackpropInput = op({ depthwiseConv2dNativeBackpropInput_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/fused/depthwise_conv2d.js\nfunction fusedDepthwiseConv2d_({ x, filter, strides, pad: pad3, dataFormat = \"NHWC\", dilations = [1, 1], dimRoundingMode, bias, activation: activation2 = \"linear\", preluActivationWeights, leakyreluAlpha }) {\n  if (shouldFuse(ENGINE.state.gradientDepth, activation2) === false) {\n    let result = depthwiseConv2d(x, filter, strides, pad3, dataFormat, dilations, dimRoundingMode);\n    if (bias != null) {\n      result = add2(result, bias);\n    }\n    return applyActivation(result, activation2, preluActivationWeights, leakyreluAlpha);\n  }\n  const $x = convertToTensor(x, \"x\", \"depthwiseConv2d\", \"float32\");\n  const $filter = convertToTensor(filter, \"filter\", \"depthwiseConv2d\", \"float32\");\n  let x4D = $x;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  assert(x4D.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${x4D.rank}.`);\n  assert($filter.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${$filter.rank}.`);\n  assert(x4D.shape[3] === $filter.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${x4D.shape[3]}) must match the inChannels dimension in filter ${$filter.shape[2]}.`);\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  assert(eitherStridesOrDilationsAreOne(strides, dilations), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  checkPadOnDimRoundingMode(\"fused depthwiseConv2d\", pad3, dimRoundingMode);\n  const convInfo = computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad3, dimRoundingMode, true);\n  let $bias;\n  if (bias != null) {\n    $bias = convertToTensor(bias, \"bias\", \"fused conv2d\");\n    [$bias] = makeTypesMatch($bias, $x);\n    assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n  }\n  let $preluActivationWeights;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(preluActivationWeights, \"prelu weights\", \"fused depthwiseConv2d\");\n  }\n  const grad2 = (dy, saved) => {\n    assert(tupleValuesAreOne(dilations), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${dilations}'`);\n    const [$filter2, x4D2, y, bias2] = saved;\n    const dyActivation = getFusedDyActivation(dy, y, activation2);\n    const xDer = depthwiseConv2dNativeBackpropInput(x4D2.shape, dyActivation, $filter2, strides, pad3, dilations, dimRoundingMode);\n    const filterDer = depthwiseConv2dNativeBackpropFilter(x4D2, dyActivation, $filter2.shape, strides, pad3, dilations, dimRoundingMode);\n    if (bias2 != null) {\n      const biasDer = getFusedBiasGradient($bias, dyActivation);\n      return [xDer, filterDer, biasDer];\n    }\n    return [xDer, filterDer];\n  };\n  const inputs = {\n    x: x4D,\n    filter: $filter,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n  const attrs = {\n    strides,\n    pad: pad3,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation: activation2,\n    leakyreluAlpha\n  };\n  if (bias == null) {\n    const customOp = customGrad((x4D2, filter2, save) => {\n      let res = ENGINE.runKernel(FusedDepthwiseConv2D, inputs, attrs);\n      save([filter2, x4D2, res]);\n      if (reshapedTo4D) {\n        res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n      }\n      return { value: res, gradFunc: grad2 };\n    });\n    return customOp(x4D, $filter);\n  } else {\n    const customOpWithBias = customGrad((x4D2, filter2, bias2, save) => {\n      let res = ENGINE.runKernel(FusedDepthwiseConv2D, inputs, attrs);\n      save([filter2, x4D2, res, bias2]);\n      if (reshapedTo4D) {\n        res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n      }\n      return { value: res, gradFunc: grad2 };\n    });\n    return customOpWithBias(x4D, $filter, $bias);\n  }\n}\nvar depthwiseConv2d2 = op({ fusedDepthwiseConv2d_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/fused/mat_mul.js\nfunction fusedMatMul_({ a, b, transposeA = false, transposeB = false, bias, activation: activation2 = \"linear\", preluActivationWeights, leakyreluAlpha }) {\n  if (shouldFuse(ENGINE.state.gradientDepth, activation2) === false) {\n    let result = matMul(a, b, transposeA, transposeB);\n    if (bias != null) {\n      result = add2(result, bias);\n    }\n    return applyActivation(result, activation2, preluActivationWeights, leakyreluAlpha);\n  }\n  let $a = convertToTensor(a, \"a\", \"fused matMul\");\n  let $b = convertToTensor(b, \"b\", \"fused matMul\");\n  [$a, $b] = makeTypesMatch($a, $b);\n  const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n  const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n  const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n  const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n  const outerDimsA = $a.shape.slice(0, -2);\n  const outerDimsB = $b.shape.slice(0, -2);\n  const batchDimA = sizeFromShape(outerDimsA);\n  const batchDimB = sizeFromShape(outerDimsB);\n  assert(innerShapeA === innerShapeB, () => `Error in fused matMul: inner shapes (${innerShapeA}) and (${innerShapeB}) of Tensors with shapes ${$a.shape} and ${$b.shape} and transposeA=${transposeA} and transposeB=${transposeB} must match.`);\n  const outShapeOuterDims = assertAndGetBroadcastShape($a.shape.slice(0, -2), $b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n  const a3D = transposeA ? reshape($a, [batchDimA, innerShapeA, outerShapeA]) : reshape($a, [batchDimA, outerShapeA, innerShapeA]);\n  const b3D = transposeB ? reshape($b, [batchDimB, outerShapeB, innerShapeB]) : reshape($b, [batchDimB, innerShapeB, outerShapeB]);\n  let $bias;\n  if (bias != null) {\n    $bias = convertToTensor(bias, \"bias\", \"fused matMul\");\n    [$bias] = makeTypesMatch($bias, $a);\n    assertAndGetBroadcastShape(outShape, $bias.shape);\n  }\n  let $preluActivationWeights;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(preluActivationWeights, \"prelu weights\", \"fused matMul\");\n  }\n  const grad2 = (dy, saved) => {\n    const [a3D2, b3D2, y, $bias2] = saved;\n    const dyActivation = getFusedDyActivation(reshape(dy, y.shape), y, activation2);\n    let aDer;\n    let bDer;\n    if (!transposeA && !transposeB) {\n      aDer = matMul(dyActivation, b3D2, false, true);\n      bDer = matMul(a3D2, dyActivation, true, false);\n    } else if (!transposeA && transposeB) {\n      aDer = matMul(dyActivation, b3D2, false, false);\n      bDer = matMul(dyActivation, a3D2, true, false);\n    } else if (transposeA && !transposeB) {\n      aDer = matMul(b3D2, dyActivation, false, true);\n      bDer = matMul(a3D2, dyActivation, false, false);\n    } else {\n      aDer = matMul(b3D2, dyActivation, true, true);\n      bDer = matMul(dyActivation, a3D2, true, true);\n    }\n    if (bias != null) {\n      const biasDer = getFusedBiasGradient($bias2, dyActivation);\n      return [aDer, bDer, biasDer];\n    } else {\n      return [aDer, bDer];\n    }\n  };\n  const inputs = {\n    a: a3D,\n    b: b3D,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n  const attrs = { transposeA, transposeB, activation: activation2, leakyreluAlpha };\n  if (bias == null) {\n    const customOp = customGrad((a3D2, b3D2, save) => {\n      const res = ENGINE.runKernel(_FusedMatMul, inputs, attrs);\n      save([a3D2, b3D2, res]);\n      return { value: reshape(res, outShape), gradFunc: grad2 };\n    });\n    return customOp(a3D, b3D);\n  } else {\n    const customOpWithBias = customGrad((a3D2, b3D2, $bias2, save) => {\n      const res = ENGINE.runKernel(_FusedMatMul, inputs, attrs);\n      save([a3D2, b3D2, res, $bias2]);\n      return { value: reshape(res, outShape), gradFunc: grad2 };\n    });\n    return customOpWithBias(a3D, b3D, $bias);\n  }\n}\nvar matMul2 = op({ fusedMatMul_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/signal/hamming_window.js\nfunction hammingWindow_(windowLength) {\n  return cosineWindow(windowLength, 0.54, 0.46);\n}\nvar hammingWindow = op({ hammingWindow_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js\nfunction hannWindow_(windowLength) {\n  return cosineWindow(windowLength, 0.5, 0.5);\n}\nvar hannWindow = op({ hannWindow_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js\nfunction frame_(signal2, frameLength, frameStep, padEnd = false, padValue = 0) {\n  let start = 0;\n  const output = [];\n  while (start + frameLength <= signal2.size) {\n    output.push(slice(signal2, start, frameLength));\n    start += frameStep;\n  }\n  if (padEnd) {\n    while (start < signal2.size) {\n      const padLen = start + frameLength - signal2.size;\n      const pad3 = concat([\n        slice(signal2, start, frameLength - padLen),\n        fill([padLen], padValue)\n      ]);\n      output.push(pad3);\n      start += frameStep;\n    }\n  }\n  if (output.length === 0) {\n    return tensor2d([], [0, frameLength]);\n  }\n  return reshape(concat(output), [output.length, frameLength]);\n}\nvar frame = op({ frame_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/signal/stft.js\nfunction stft_(signal2, frameLength, frameStep, fftLength, windowFn = hannWindow) {\n  if (fftLength == null) {\n    fftLength = enclosingPowerOfTwo(frameLength);\n  }\n  const framedSignal = frame(signal2, frameLength, frameStep);\n  const windowedSignal = mul(framedSignal, windowFn(frameLength));\n  return rfft(windowedSignal, fftLength);\n}\nvar stft = op({ stft_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js\nfunction cropAndResize_(image2, boxes, boxInd, cropSize, method = \"bilinear\", extrapolationValue = 0) {\n  const $image = convertToTensor(image2, \"image\", \"cropAndResize\");\n  const $boxes = convertToTensor(boxes, \"boxes\", \"cropAndResize\", \"float32\");\n  const $boxInd = convertToTensor(boxInd, \"boxInd\", \"cropAndResize\", \"int32\");\n  const numBoxes = $boxes.shape[0];\n  assert($image.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${$image.rank}.`);\n  assert($boxes.rank === 2 && $boxes.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] but had shape ${$boxes.shape}.`);\n  assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] but had shape ${$boxes.shape}.`);\n  assert(cropSize.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${cropSize.length}.`);\n  assert(cropSize[0] >= 1 && cropSize[1] >= 1, () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n  assert(method === \"bilinear\" || method === \"nearest\", () => `method must be bilinear or nearest, but was ${method}`);\n  const inputs = { image: $image, boxes: $boxes, boxInd: $boxInd };\n  const attrs = { method, extrapolationValue, cropSize };\n  const res = ENGINE.runKernel(CropAndResize, inputs, attrs);\n  return res;\n}\nvar cropAndResize = op({ cropAndResize_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/flip_left_right.js\nfunction flipLeftRight_(image2) {\n  const $image = convertToTensor(image2, \"image\", \"flipLeftRight\", \"float32\");\n  assert($image.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${$image.rank}.`);\n  const inputs = { image: $image };\n  const res = ENGINE.runKernel(FlipLeftRight, inputs, {});\n  return res;\n}\nvar flipLeftRight = op({ flipLeftRight_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/grayscale_to_rgb.js\nfunction grayscaleToRGB_(image2) {\n  const $image = convertToTensor(image2, \"image\", \"grayscaleToRGB\");\n  const lastDimsIdx = $image.rank - 1;\n  const lastDims = $image.shape[lastDimsIdx];\n  assert($image.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${$image.rank}.`);\n  assert(lastDims === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${lastDims}.`);\n  const reps = new Array($image.rank);\n  reps.fill(1, 0, lastDimsIdx);\n  reps[lastDimsIdx] = 3;\n  return tile($image, reps);\n}\nvar grayscaleToRGB = op({ grayscaleToRGB_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/rotate_with_offset.js\nfunction rotateWithOffset_(image2, radians, fillValue = 0, center = 0.5) {\n  const $image = convertToTensor(image2, \"image\", \"rotateWithOffset\", \"float32\");\n  assert($image.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${$image.rank}.`);\n  const inputs = { image: $image };\n  const attrs = { radians, fillValue, center };\n  const res = ENGINE.runKernel(RotateWithOffset, inputs, attrs);\n  return res;\n}\nvar rotateWithOffset = op({ rotateWithOffset_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js\nfunction nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n  if (softNmsSigma == null) {\n    softNmsSigma = 0;\n  }\n  const numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n  assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n  assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n  assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n  assert(scores.rank === 1, () => \"scores must be a 1D tensor\");\n  assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, but was ${scores.shape[0]}`);\n  assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n  return { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression.js\nfunction nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\n  const $boxes = convertToTensor(boxes, \"boxes\", \"nonMaxSuppression\", \"float32\");\n  const $scores = convertToTensor(scores, \"scores\", \"nonMaxSuppression\", \"float32\");\n  const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n  const attrs = { maxOutputSize, iouThreshold, scoreThreshold };\n  return ENGINE.runKernel(NonMaxSuppressionV3, { boxes: $boxes, scores: $scores }, attrs);\n}\nvar nonMaxSuppression = op({ nonMaxSuppression_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_util.js\nfunction binaryInsert(arr, element, comparator) {\n  const index = binarySearch(arr, element, comparator);\n  const insertionPoint = index < 0 ? -(index + 1) : index;\n  arr.splice(insertionPoint, 0, element);\n}\nfunction binarySearch(arr, target, comparator) {\n  return binarySearch_(arr, target, comparator || defaultComparator);\n}\nfunction defaultComparator(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\nfunction binarySearch_(arr, target, comparator) {\n  let left = 0;\n  let right = arr.length;\n  let middle = 0;\n  let found = false;\n  while (left < right) {\n    middle = left + (right - left >>> 1);\n    const compareResult = comparator(target, arr[middle]);\n    if (compareResult > 0) {\n      left = middle + 1;\n    } else {\n      right = middle;\n      found = !compareResult;\n    }\n  }\n  return found ? left : -left - 1;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js\nfunction nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0);\n}\nfunction nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {\n  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0, false, padToMaxOutputSize, true);\n}\nfunction nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true);\n}\nfunction nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false, returnValidOutputs = false) {\n  const candidates = [];\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] > scoreThreshold) {\n      candidates.push({ score: scores[i], boxIndex: i, suppressBeginIndex: 0 });\n    }\n  }\n  candidates.sort(ascendingComparator);\n  const scale2 = softNmsSigma > 0 ? -0.5 / softNmsSigma : 0;\n  const selectedIndices = [];\n  const selectedScores = [];\n  while (selectedIndices.length < maxOutputSize && candidates.length > 0) {\n    const candidate = candidates.pop();\n    const { score: originalScore, boxIndex, suppressBeginIndex } = candidate;\n    if (originalScore < scoreThreshold) {\n      break;\n    }\n    let ignoreCandidate = false;\n    for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {\n      const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);\n      if (iou >= iouThreshold) {\n        ignoreCandidate = true;\n        break;\n      }\n      candidate.score = candidate.score * suppressWeight(iouThreshold, scale2, iou);\n      if (candidate.score <= scoreThreshold) {\n        break;\n      }\n    }\n    candidate.suppressBeginIndex = selectedIndices.length;\n    if (!ignoreCandidate) {\n      if (candidate.score === originalScore) {\n        selectedIndices.push(boxIndex);\n        selectedScores.push(candidate.score);\n      } else if (candidate.score > scoreThreshold) {\n        binaryInsert(candidates, candidate, ascendingComparator);\n      }\n    }\n  }\n  const validOutputs = selectedIndices.length;\n  const elemsToPad = maxOutputSize - validOutputs;\n  if (padToMaxOutputSize && elemsToPad > 0) {\n    selectedIndices.push(...new Array(elemsToPad).fill(0));\n    selectedScores.push(...new Array(elemsToPad).fill(0));\n  }\n  const result = { selectedIndices };\n  if (returnScoresTensor) {\n    result[\"selectedScores\"] = selectedScores;\n  }\n  if (returnValidOutputs) {\n    result[\"validOutputs\"] = validOutputs;\n  }\n  return result;\n}\nfunction intersectionOverUnion(boxes, i, j) {\n  const iCoord = boxes.subarray(i * 4, i * 4 + 4);\n  const jCoord = boxes.subarray(j * 4, j * 4 + 4);\n  const yminI = Math.min(iCoord[0], iCoord[2]);\n  const xminI = Math.min(iCoord[1], iCoord[3]);\n  const ymaxI = Math.max(iCoord[0], iCoord[2]);\n  const xmaxI = Math.max(iCoord[1], iCoord[3]);\n  const yminJ = Math.min(jCoord[0], jCoord[2]);\n  const xminJ = Math.min(jCoord[1], jCoord[3]);\n  const ymaxJ = Math.max(jCoord[0], jCoord[2]);\n  const xmaxJ = Math.max(jCoord[1], jCoord[3]);\n  const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n  const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n  if (areaI <= 0 || areaJ <= 0) {\n    return 0;\n  }\n  const intersectionYmin = Math.max(yminI, yminJ);\n  const intersectionXmin = Math.max(xminI, xminJ);\n  const intersectionYmax = Math.min(ymaxI, ymaxJ);\n  const intersectionXmax = Math.min(xmaxI, xmaxJ);\n  const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0) * Math.max(intersectionXmax - intersectionXmin, 0);\n  return intersectionArea / (areaI + areaJ - intersectionArea);\n}\nfunction suppressWeight(iouThreshold, scale2, iou) {\n  const weight = Math.exp(scale2 * iou * iou);\n  return iou <= iouThreshold ? weight : 0;\n}\nfunction ascendingComparator(c1, c2) {\n  return c1.score - c2.score || c1.score === c2.score && c2.boxIndex - c1.boxIndex;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_async.js\nasync function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\n  const $boxes = convertToTensor(boxes, \"boxes\", \"nonMaxSuppressionAsync\");\n  const $scores = convertToTensor(scores, \"scores\", \"nonMaxSuppressionAsync\");\n  const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1];\n  const { selectedIndices } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n  return tensor1d(selectedIndices, \"int32\");\n}\nvar nonMaxSuppressionAsync = nonMaxSuppressionAsync_;\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score.js\nfunction nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0) {\n  const $boxes = convertToTensor(boxes, \"boxes\", \"nonMaxSuppression\");\n  const $scores = convertToTensor(scores, \"scores\", \"nonMaxSuppression\");\n  const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n  maxOutputSize = params.maxOutputSize;\n  iouThreshold = params.iouThreshold;\n  scoreThreshold = params.scoreThreshold;\n  softNmsSigma = params.softNmsSigma;\n  const inputs = { boxes: $boxes, scores: $scores };\n  const attrs = { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };\n  const result = ENGINE.runKernel(NonMaxSuppressionV5, inputs, attrs);\n  return { selectedIndices: result[0], selectedScores: result[1] };\n}\nvar nonMaxSuppressionWithScore = op({ nonMaxSuppressionWithScore_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score_async.js\nasync function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0) {\n  const $boxes = convertToTensor(boxes, \"boxes\", \"nonMaxSuppressionAsync\");\n  const $scores = convertToTensor(scores, \"scores\", \"nonMaxSuppressionAsync\");\n  const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n  maxOutputSize = params.maxOutputSize;\n  iouThreshold = params.iouThreshold;\n  scoreThreshold = params.scoreThreshold;\n  softNmsSigma = params.softNmsSigma;\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1];\n  const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n  return {\n    selectedIndices: tensor1d(selectedIndices, \"int32\"),\n    selectedScores: tensor1d(selectedScores)\n  };\n}\nvar nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded.js\nfunction nonMaxSuppressionPadded_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {\n  const $boxes = convertToTensor(boxes, \"boxes\", \"nonMaxSuppression\");\n  const $scores = convertToTensor(scores, \"scores\", \"nonMaxSuppression\");\n  const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null);\n  const $maxOutputSize = params.maxOutputSize;\n  const $iouThreshold = params.iouThreshold;\n  const $scoreThreshold = params.scoreThreshold;\n  const inputs = { boxes: $boxes, scores: $scores };\n  const attrs = {\n    maxOutputSize: $maxOutputSize,\n    iouThreshold: $iouThreshold,\n    scoreThreshold: $scoreThreshold,\n    padToMaxOutputSize\n  };\n  const result = ENGINE.runKernel(NonMaxSuppressionV4, inputs, attrs);\n  return { selectedIndices: result[0], validOutputs: result[1] };\n}\nvar nonMaxSuppressionPadded = op({ nonMaxSuppressionPadded_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded_async.js\nasync function nonMaxSuppressionPaddedAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {\n  const $boxes = convertToTensor(boxes, \"boxes\", \"nonMaxSuppressionAsync\");\n  const $scores = convertToTensor(scores, \"scores\", \"nonMaxSuppressionAsync\");\n  const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null);\n  const $maxOutputSize = params.maxOutputSize;\n  const $iouThreshold = params.iouThreshold;\n  const $scoreThreshold = params.scoreThreshold;\n  const [boxesVals, scoresVals] = await Promise.all([$boxes.data(), $scores.data()]);\n  const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n  return {\n    selectedIndices: tensor1d(selectedIndices, \"int32\"),\n    validOutputs: scalar(validOutputs, \"int32\")\n  };\n}\nvar nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js\nfunction resizeBilinear_(images, size, alignCorners = false, halfPixelCenters = false) {\n  const $images = convertToTensor(images, \"images\", \"resizeBilinear\");\n  assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${$images.rank}.`);\n  assert(size.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${size}.`);\n  assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.`);\n  let batchImages = $images;\n  let reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n  const [] = size;\n  const inputs = { images: batchImages };\n  const attrs = { alignCorners, halfPixelCenters, size };\n  const res = ENGINE.runKernel(ResizeBilinear, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nvar resizeBilinear = op({ resizeBilinear_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js\nfunction resizeNearestNeighbor_(images, size, alignCorners = false, halfPixelCenters = false) {\n  const $images = convertToTensor(images, \"images\", \"resizeNearestNeighbor\");\n  assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${$images.rank}.`);\n  assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${size}.`);\n  assert($images.dtype === \"float32\" || $images.dtype === \"int32\", () => \"`images` must have `int32` or `float32` as dtype\");\n  assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.`);\n  let batchImages = $images;\n  let reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n  const [] = size;\n  const inputs = { images: batchImages };\n  const attrs = { alignCorners, halfPixelCenters, size };\n  const res = ENGINE.runKernel(ResizeNearestNeighbor, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nvar resizeNearestNeighbor = op({ resizeNearestNeighbor_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/threshold.js\nfunction threshold_(image2, method = \"binary\", inverted = false, threshValue = 0.5) {\n  const $image = convertToTensor(image2, \"image\", \"threshold\");\n  const RED_INTENCITY_COEF = 0.2989;\n  const GREEN_INTENCITY_COEF = 0.587;\n  const BLUE_INTENCITY_COEF = 0.114;\n  const totalPixelsInImage = $image.shape[0] * $image.shape[1];\n  let $threshold = mul(tensor1d([threshValue]), 255);\n  let r, g, b, grayscale;\n  assert($image.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${$image.rank}.`);\n  assert($image.shape[2] === 3 || $image.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${$image.shape[2]}.`);\n  assert($image.dtype === \"int32\" || $image.dtype === \"float32\", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${$image.dtype}.`);\n  assert(method === \"otsu\" || method === \"binary\", () => `Method must be binary or otsu, but was ${method}`);\n  if ($image.shape[2] === 3) {\n    [r, g, b] = split($image, [1, 1, 1], -1);\n    const $r = mul(r, RED_INTENCITY_COEF);\n    const $g = mul(g, GREEN_INTENCITY_COEF);\n    const $b = mul(b, BLUE_INTENCITY_COEF);\n    grayscale = add2(add2($r, $g), $b);\n  } else {\n    grayscale = image2;\n  }\n  if (method === \"otsu\") {\n    const $histogram = bincount(cast(round2(grayscale), \"int32\"), tensor([]), 256);\n    $threshold = otsu($histogram, totalPixelsInImage);\n  }\n  const invCondition = inverted ? lessEqual(grayscale, $threshold) : greater(grayscale, $threshold);\n  const result = cast(mul(invCondition, 255), \"int32\");\n  return result;\n}\nfunction otsu(histogram, total) {\n  let bestThresh = tensor1d([-1]);\n  let bestInBetVar = tensor1d([0]);\n  let cInBetVar = tensor1d([0]);\n  let classFirst, classSecond, meanFirst, meanSec, weightForeground, weightBack;\n  for (let index = 0; index < histogram.size - 1; index++) {\n    classFirst = slice(histogram, 0, index + 1);\n    classSecond = slice(histogram, index + 1);\n    weightForeground = div(sum2(classFirst), total);\n    weightBack = div(sum2(classSecond), total);\n    const meanFirstDivA = sum2(mul(classFirst, range(0, classFirst.size)));\n    meanFirst = div(meanFirstDivA, sum2(classFirst));\n    const meanSecFill = fill(classSecond.shape, classFirst.size);\n    const meanSecAdd = add2(range(0, classSecond.size), meanSecFill);\n    const meanSecMul = mul(classSecond, meanSecAdd);\n    meanSec = div(sum2(meanSecMul), sum2(classSecond));\n    const cInBetVarSubA = sub(meanFirst, meanSec);\n    const cInBetVarSubB = sub(meanFirst, meanSec);\n    const cInBetVarMul = mul(weightForeground, weightBack);\n    cInBetVar = mul(mul(cInBetVarMul, cInBetVarSubA), cInBetVarSubB);\n    const condition = greater(cInBetVar, bestInBetVar);\n    bestInBetVar = where(condition, cInBetVar, bestInBetVar);\n    bestThresh = where(condition, tensor1d([index]), bestThresh);\n  }\n  return bestThresh;\n}\nvar threshold = op({ threshold_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/image/transform.js\nfunction transform_(image2, transforms, interpolation = \"nearest\", fillMode = \"constant\", fillValue = 0, outputShape) {\n  const $image = convertToTensor(image2, \"image\", \"transform\", \"float32\");\n  const $transforms = convertToTensor(transforms, \"transforms\", \"transform\", \"float32\");\n  assert($image.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${$image.rank}.`);\n  assert($transforms.rank === 2 && ($transforms.shape[0] === $image.shape[0] || $transforms.shape[0] === 1) && $transforms.shape[1] === 8, () => `Error in transform: Input transform should be batch x 8 or 1 x 8`);\n  assert(outputShape == null || outputShape.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${outputShape}.`);\n  const inputs = { image: $image, transforms: $transforms };\n  const attrs = { interpolation, fillMode, fillValue, outputShape };\n  return ENGINE.runKernel(Transform, inputs, attrs);\n}\nvar transform = op({ transform_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js\nfunction bandPart_(a, numLower, numUpper) {\n  assert(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);\n  assert(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);\n  const $a = convertToTensor(a, \"a\", \"bandPart\");\n  assert($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);\n  const shape = $a.shape;\n  const [M, N] = $a.shape.slice(-2);\n  if (!(numLower <= M)) {\n    throw new Error(`bandPart(): numLower (${numLower}) must not be greater than the number of rows (${M}).`);\n  }\n  if (!(numUpper <= N)) {\n    throw new Error(`bandPart(): numUpper (${numUpper}) must not be greater than the number of columns (${N}).`);\n  }\n  if (numLower < 0) {\n    numLower = M;\n  }\n  if (numUpper < 0) {\n    numUpper = N;\n  }\n  const i = reshape(range(0, M, 1, \"int32\"), [-1, 1]);\n  const j = range(0, N, 1, \"int32\");\n  const ij = sub(i, j);\n  const inBand = logicalAnd(lessEqual(ij, scalar(+numLower, \"int32\")), greaterEqual(ij, scalar(-numUpper, \"int32\")));\n  const zero = zeros([M, N], $a.dtype);\n  return reshape(stack(unstack(reshape($a, [-1, M, N])).map((mat) => where(inBand, mat, zero))), shape);\n}\nvar bandPart = op({ bandPart_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js\nfunction gramSchmidt_(xs) {\n  let inputIsTensor2D;\n  if (Array.isArray(xs)) {\n    inputIsTensor2D = false;\n    assert(xs != null && xs.length > 0, () => \"Gram-Schmidt process: input must not be null, undefined, or empty\");\n    const dim = xs[0].shape[0];\n    for (let i = 1; i < xs.length; ++i) {\n      assert(xs[i].shape[0] === dim, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${xs[i].shape[0]} vs. ${dim})`);\n    }\n  } else {\n    inputIsTensor2D = true;\n    xs = split(xs, xs.shape[0], 0).map((x) => squeeze(x, [0]));\n  }\n  assert(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds number of dimensions (${xs[0].shape[0]}).`);\n  const ys = [];\n  const xs1d = xs;\n  for (let i = 0; i < xs.length; ++i) {\n    ys.push(ENGINE.tidy(() => {\n      let x = xs1d[i];\n      if (i > 0) {\n        for (let j = 0; j < i; ++j) {\n          const proj = mul(sum2(mul(ys[j], x)), ys[j]);\n          x = sub(x, proj);\n        }\n      }\n      return div(x, norm(x, \"euclidean\"));\n    }));\n  }\n  if (inputIsTensor2D) {\n    return stack(ys, 0);\n  } else {\n    return ys;\n  }\n}\nvar gramSchmidt = op({ gramSchmidt_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js\nfunction qr_(x, fullMatrices = false) {\n  assert(x.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);\n  if (x.rank === 2) {\n    return qr2d(x, fullMatrices);\n  } else {\n    const outerDimsProd = x.shape.slice(0, x.shape.length - 2).reduce((value, prev) => value * prev);\n    const x2ds = unstack(reshape(x, [\n      outerDimsProd,\n      x.shape[x.shape.length - 2],\n      x.shape[x.shape.length - 1]\n    ]), 0);\n    const q2ds = [];\n    const r2ds = [];\n    x2ds.forEach((x2d) => {\n      const [q2d, r2d] = qr2d(x2d, fullMatrices);\n      q2ds.push(q2d);\n      r2ds.push(r2d);\n    });\n    const q = reshape(stack(q2ds, 0), x.shape);\n    const r = reshape(stack(r2ds, 0), x.shape);\n    return [q, r];\n  }\n}\nfunction qr2d(x, fullMatrices = false) {\n  return ENGINE.tidy(() => {\n    assert(x.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);\n    const m = x.shape[0];\n    const n = x.shape[1];\n    let q = eye(m);\n    let r = clone(x);\n    const one2D = tensor2d([[1]], [1, 1]);\n    let w = clone(one2D);\n    const iters = m >= n ? n : m;\n    for (let j = 0; j < iters; ++j) {\n      const rTemp = r;\n      const wTemp = w;\n      const qTemp = q;\n      [w, r, q] = ENGINE.tidy(() => {\n        const rjEnd1 = slice(r, [j, j], [m - j, 1]);\n        const normX = norm(rjEnd1);\n        const rjj = slice(r, [j, j], [1, 1]);\n        const s = where(greater(rjj, 0), tensor2d([[-1]]), tensor2d([[1]]));\n        const u1 = sub(rjj, mul(s, normX));\n        const wPre = div(rjEnd1, u1);\n        if (wPre.shape[0] === 1) {\n          w = clone(one2D);\n        } else {\n          w = concat([\n            one2D,\n            slice(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])\n          ], 0);\n        }\n        const tau = neg(div(matMul(s, u1), normX));\n        const rjEndAll = slice(r, [j, 0], [m - j, n]);\n        const tauTimesW = mul(tau, w);\n        const wT = transpose(w);\n        if (j === 0) {\n          r = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n        } else {\n          const rTimesTau = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n          r = concat([slice(r, [0, 0], [j, n]), rTimesTau], 0);\n        }\n        const tawTimesWT = transpose(tauTimesW);\n        const qAllJEnd = slice(q, [0, j], [m, q.shape[1] - j]);\n        if (j === 0) {\n          q = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n        } else {\n          const qTimesTau = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n          q = concat([slice(q, [0, 0], [m, j]), qTimesTau], 1);\n        }\n        return [w, r, q];\n      });\n      dispose([rTemp, wTemp, qTemp]);\n    }\n    if (!fullMatrices && m > n) {\n      q = slice(q, [0, 0], [m, n]);\n      r = slice(r, [0, 0], [n, n]);\n    }\n    return [q, r];\n  });\n}\nvar qr = op({ qr_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js\nvar Reduction;\n(function(Reduction2) {\n  Reduction2[Reduction2[\"NONE\"] = 0] = \"NONE\";\n  Reduction2[Reduction2[\"MEAN\"] = 1] = \"MEAN\";\n  Reduction2[Reduction2[\"SUM\"] = 2] = \"SUM\";\n  Reduction2[Reduction2[\"SUM_BY_NONZERO_WEIGHTS\"] = 3] = \"SUM_BY_NONZERO_WEIGHTS\";\n})(Reduction || (Reduction = {}));\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js\nfunction computeWeightedLoss_(losses2, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  const $losses = convertToTensor(losses2, \"losses\", \"computeWeightedLoss\");\n  let $weights = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, \"weights\", \"computeWeightedLoss\");\n  }\n  const weightedLoss = $weights == null ? $losses : mul($losses, $weights);\n  if (reduction === Reduction.NONE) {\n    return weightedLoss;\n  }\n  if (reduction === Reduction.SUM) {\n    return sum2(weightedLoss);\n  }\n  if (reduction === Reduction.MEAN) {\n    if ($weights == null) {\n      return mean(weightedLoss);\n    } else {\n      const broadcastFactor = $losses.size / $weights.size;\n      const result = div(sum2(weightedLoss), sum2($weights));\n      return broadcastFactor > 1 ? div(result, scalar(broadcastFactor)) : result;\n    }\n  }\n  if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    if ($weights == null) {\n      return div(sum2(weightedLoss), scalar($losses.size));\n    } else {\n      const broadcastedWeights = mul($weights, ones2($losses.shape));\n      const numNonZeros = cast(sum2(notEqual(broadcastedWeights, scalar(0))), \"float32\");\n      return div(sum2(weightedLoss), numNonZeros);\n    }\n  }\n  throw Error(`Unknown reduction: ${reduction}`);\n}\nvar computeWeightedLoss = op({ computeWeightedLoss_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/losses/absolute_difference.js\nfunction absoluteDifference_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  const $labels = convertToTensor(labels, \"labels\", \"absoluteDifference\");\n  const $predictions = convertToTensor(predictions, \"predictions\", \"absoluteDifference\");\n  let $weights = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, \"weights\", \"absoluteDifference\");\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, \"Error in absoluteDifference: \");\n  const losses2 = abs(sub($labels, $predictions));\n  return computeWeightedLoss(losses2, $weights, reduction);\n}\nvar absoluteDifference = op({ absoluteDifference_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js\nfunction cosineDistance_(labels, predictions, axis, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  const $labels = convertToTensor(labels, \"labels\", \"cosineDistance\");\n  const $predictions = convertToTensor(predictions, \"predictions\", \"cosineDistance\");\n  let $weights = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, \"weights\", \"cosineDistance\");\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, \"Error in cosineDistance: \");\n  const one = scalar(1);\n  const losses2 = sub(one, sum2(mul($labels, $predictions), axis, true));\n  return computeWeightedLoss(losses2, $weights, reduction);\n}\nvar cosineDistance = op({ cosineDistance_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js\nfunction hingeLoss_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  let $labels = convertToTensor(labels, \"labels\", \"hingeLoss\");\n  const $predictions = convertToTensor(predictions, \"predictions\", \"hingeLoss\");\n  let $weights = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, \"weights\", \"hingeLoss\");\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, \"Error in hingeLoss: \");\n  const one = scalar(1);\n  $labels = sub(mul(scalar(2), $labels), one);\n  const losses2 = relu(sub(one, mul($labels, $predictions)));\n  return computeWeightedLoss(losses2, $weights, reduction);\n}\nvar hingeLoss = op({ hingeLoss_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/losses/huber_loss.js\nfunction huberLoss_(labels, predictions, weights, delta = 1, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  const $labels = convertToTensor(labels, \"labels\", \"huberLoss\");\n  const $predictions = convertToTensor(predictions, \"predictions\", \"huberLoss\");\n  let $weights = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, \"weights\", \"huberLoss\");\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, \"Error in huberLoss: \");\n  const deltaScalar = scalar(delta);\n  const error = abs(sub($predictions, $labels));\n  const quadratic = minimum(error, deltaScalar);\n  const linear = sub(error, quadratic);\n  const losses2 = add2(mul(scalar(0.5), square(quadratic)), mul(deltaScalar, linear));\n  return computeWeightedLoss(losses2, $weights, reduction);\n}\nvar huberLoss = op({ huberLoss_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js\nfunction logLoss_(labels, predictions, weights, epsilon3 = 1e-7, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  const $labels = convertToTensor(labels, \"labels\", \"logLoss\");\n  const $predictions = convertToTensor(predictions, \"predictions\", \"logLoss\");\n  let $weights = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, \"weights\", \"logLoss\");\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, \"Error in logLoss: \");\n  const one = scalar(1);\n  const epsilonScalar = scalar(epsilon3);\n  const l13 = neg(mul($labels, log2(add2($predictions, epsilonScalar))));\n  const l23 = mul(sub(one, $labels), log2(add2(sub(one, $predictions), epsilonScalar)));\n  const losses2 = sub(l13, l23);\n  return computeWeightedLoss(losses2, $weights, reduction);\n}\nvar logLoss = op({ logLoss_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/losses/mean_squared_error.js\nfunction meanSquaredError_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  const $labels = convertToTensor(labels, \"labels\", \"meanSquaredError\");\n  const $predictions = convertToTensor(predictions, \"predictions\", \"meanSquaredError\");\n  let $weights = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, \"weights\", \"meanSquaredError\");\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, \"Error in meanSquaredError: \");\n  const losses2 = squaredDifference($labels, $predictions);\n  return computeWeightedLoss(losses2, $weights, reduction);\n}\nvar meanSquaredError = op({ meanSquaredError_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/losses/sigmoid_cross_entropy.js\nfunction sigmoidCrossEntropyWithLogits_(labels, logits) {\n  const $labels = convertToTensor(labels, \"labels\", \"sigmoidCrossEntropyWithLogits\");\n  const $logits = convertToTensor(logits, \"logits\", \"sigmoidCrossEntropyWithLogits\");\n  assertShapesMatch($labels.shape, $logits.shape, \"Error in sigmoidCrossEntropyWithLogits: \");\n  const maxOutput = relu($logits);\n  const outputXTarget = mul($logits, $labels);\n  const sigmoidOutput = log1p(exp(neg(abs($logits))));\n  return add2(sub(maxOutput, outputXTarget), sigmoidOutput);\n}\nfunction sigmoidCrossEntropy_(multiClassLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  let $multiClassLabels = convertToTensor(multiClassLabels, \"multiClassLabels\", \"sigmoidCrossEntropy\");\n  const $logits = convertToTensor(logits, \"logits\", \"sigmoidCrossEntropy\");\n  let $weights = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, \"weights\", \"sigmoidCrossEntropy\");\n  }\n  assertShapesMatch($multiClassLabels.shape, $logits.shape, \"Error in sigmoidCrossEntropy: \");\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const half = scalar(0.5);\n    $multiClassLabels = add2(mul($multiClassLabels, sub(one, labelSmoothingScalar)), mul(half, labelSmoothingScalar));\n  }\n  const losses2 = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);\n  return computeWeightedLoss(losses2, $weights, reduction);\n}\nvar sigmoidCrossEntropy = op({ sigmoidCrossEntropy_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/losses/softmax_cross_entropy.js\nfunction softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {\n  if (dim === -1) {\n    dim = logits.rank - 1;\n  }\n  if (dim !== logits.rank - 1) {\n    throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${logits.rank} and dim was ${dim}`);\n  }\n  const customOp = customGrad((labels2, logits2, save) => {\n    const keepDims = true;\n    const lse = logSumExp(logits2, [dim], keepDims);\n    const logResult = sub(cast(logits2, \"float32\"), lse);\n    save([labels2, logResult]);\n    const costVector = neg(mul(logResult, labels2));\n    const value = sum2(costVector, [dim]);\n    const gradFunc = (dy, saved) => {\n      const [labels3, logResult2] = saved;\n      const dyShape = expandShapeToKeepDim(dy.shape, [dim]);\n      return [\n        mul(reshape(dy, dyShape), sub(cast(labels3, \"float32\"), exp(logResult2))),\n        mul(reshape(dy, dyShape), sub(exp(logResult2), cast(labels3, \"float32\")))\n      ];\n    };\n    return { value, gradFunc };\n  });\n  return customOp(labels, logits);\n}\nfunction softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  let $onehotLabels = convertToTensor(onehotLabels, \"onehotLabels\", \"softmaxCrossEntropy\");\n  const $logits = convertToTensor(logits, \"logits\", \"softmaxCrossEntropy\");\n  let $weights = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, \"weights\", \"softmaxCrossEntropy\");\n  }\n  assertShapesMatch($onehotLabels.shape, $logits.shape, \"Error in softmaxCrossEntropy: \");\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const numClasses = scalar($onehotLabels.shape[1]);\n    $onehotLabels = add2(mul($onehotLabels, sub(one, labelSmoothingScalar)), div(labelSmoothingScalar, numClasses));\n  }\n  const losses2 = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);\n  return computeWeightedLoss(losses2, $weights, reduction);\n}\nvar softmaxCrossEntropy = op({ softmaxCrossEntropy_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_fill_empty_rows.js\nfunction sparseFillEmptyRows_(indices, values, denseShape, defaultValue) {\n  const $indices = convertToTensor(indices, \"indices\", \"sparseFillEmptyRows\", \"int32\");\n  const $values = convertToTensor(values, \"values\", \"sparseFillEmptyRows\");\n  const $denseShape = convertToTensor(denseShape, \"denseShape\", \"sparseFillEmptyRows\", \"int32\");\n  const $defaultValue = convertToTensor(defaultValue, \"defaultValue\", \"sparseFillEmptyRows\", $values.dtype);\n  if ($indices.rank !== 2) {\n    throw new Error(`Indices should be Tensor2D but received shape\n        ${$indices.shape}`);\n  }\n  if ($values.rank !== 1) {\n    throw new Error(`Values should be Tensor1D but received shape ${$values.shape}`);\n  }\n  if ($denseShape.rank !== 1) {\n    throw new Error(`Dense shape should be Tensor1D but received shape ${$denseShape.shape}`);\n  }\n  if ($defaultValue.rank !== 0) {\n    throw new Error(`Default value should be a scalar but received shape ${$defaultValue.shape}`);\n  }\n  const inputs = {\n    indices: $indices,\n    values: $values,\n    denseShape: $denseShape,\n    defaultValue: $defaultValue\n  };\n  const result = ENGINE.runKernel(SparseFillEmptyRows, inputs);\n  return {\n    outputIndices: result[0],\n    outputValues: result[1],\n    emptyRowIndicator: result[2],\n    reverseIndexMap: result[3]\n  };\n}\nvar sparseFillEmptyRows = op({ sparseFillEmptyRows_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_reshape.js\nfunction sparseReshape_(inputIndices, inputShape, newShape) {\n  const $inputIndices = convertToTensor(inputIndices, \"inputIndices\", \"sparseReshape\", \"int32\");\n  const $inputShape = convertToTensor(inputShape, \"inputShape\", \"sparseReshape\", \"int32\");\n  const $newShape = convertToTensor(newShape, \"newShape\", \"sparseReshape\", \"int32\");\n  if ($inputIndices.rank !== 2) {\n    throw new Error(`Input indices should be Tensor2D but received shape\n        ${$inputIndices.shape}`);\n  }\n  if ($inputShape.rank !== 1) {\n    throw new Error(`Input shape should be Tensor1D but received shape ${$inputShape.shape}`);\n  }\n  if ($newShape.rank !== 1) {\n    throw new Error(`New shape should be Tensor1D but received shape ${$newShape.shape}`);\n  }\n  const inputs = {\n    inputIndices: $inputIndices,\n    inputShape: $inputShape,\n    newShape: $newShape\n  };\n  const result = ENGINE.runKernel(SparseReshape, inputs);\n  return { outputIndices: result[0], outputShape: result[1] };\n}\nvar sparseReshape = op({ sparseReshape_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_segment_mean.js\nfunction sparseSegmentMean_(data, indices, segmentIds) {\n  const $data = convertToTensor(data, \"data\", \"sparseSegmentMean\");\n  const $indices = convertToTensor(indices, \"indices\", \"sparseSegmentMean\", \"int32\");\n  const $segmentIds = convertToTensor(segmentIds, \"segmentIds\", \"sparseSegmentMean\", \"int32\");\n  if ($data.rank < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n  if ($indices.rank !== 1) {\n    throw new Error(`Indices should be Tensor1D but received shape\n          ${$indices.shape}`);\n  }\n  if ($segmentIds.rank !== 1) {\n    throw new Error(`Segment ids should be Tensor1D but received shape\n          ${$segmentIds.shape}`);\n  }\n  const inputs = {\n    data: $data,\n    indices: $indices,\n    segmentIds: $segmentIds\n  };\n  return ENGINE.runKernel(SparseSegmentMean, inputs);\n}\nvar sparseSegmentMean = op({ sparseSegmentMean_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_segment_sum.js\nfunction sparseSegmentSum_(data, indices, segmentIds) {\n  const $data = convertToTensor(data, \"data\", \"sparseSegmentSum\");\n  const $indices = convertToTensor(indices, \"indices\", \"sparseSegmentSum\", \"int32\");\n  const $segmentIds = convertToTensor(segmentIds, \"segmentIds\", \"sparseSegmentSum\", \"int32\");\n  if ($data.rank < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n  if ($indices.rank !== 1) {\n    throw new Error(`Indices should be Tensor1D but received shape\n         ${$indices.shape}`);\n  }\n  if ($segmentIds.rank !== 1) {\n    throw new Error(`Segment ids should be Tensor1D but received shape\n         ${$segmentIds.shape}`);\n  }\n  const inputs = {\n    data: $data,\n    indices: $indices,\n    segmentIds: $segmentIds\n  };\n  return ENGINE.runKernel(SparseSegmentSum, inputs);\n}\nvar sparseSegmentSum = op({ sparseSegmentSum_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/string/string_n_grams.js\nfunction stringNGrams_(data, dataSplits, separator, nGramWidths, leftPad, rightPad2, padWidth, preserveShortSequences) {\n  const $data = convertToTensor(data, \"data\", \"stringNGrams\", \"string\");\n  if ($data.dtype !== \"string\") {\n    throw new Error(\"Data must be of datatype string\");\n  }\n  if ($data.shape.length !== 1) {\n    throw new Error(`Data must be a vector, saw: ${$data.shape}`);\n  }\n  const $dataSplits = convertToTensor(dataSplits, \"dataSplits\", \"stringNGrams\");\n  if ($dataSplits.dtype !== \"int32\") {\n    throw new Error(\"Data splits must be of datatype int32\");\n  }\n  const attrs = {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad: rightPad2,\n    padWidth,\n    preserveShortSequences\n  };\n  const inputs = { data: $data, dataSplits: $dataSplits };\n  const result = ENGINE.runKernel(StringNGrams, inputs, attrs);\n  return { nGrams: result[0], nGramsSplits: result[1] };\n}\nvar stringNGrams = op({ stringNGrams_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/string/string_split.js\nfunction stringSplit_(input2, delimiter, skipEmpty = true) {\n  const $input = convertToTensor(input2, \"input\", \"stringSplit\", \"string\");\n  const $delimiter = convertToTensor(delimiter, \"delimiter\", \"stringSplit\", \"string\");\n  if ($input.rank !== 1) {\n    throw new Error(`Input should be Tensor1D but received shape ${$input.shape}`);\n  }\n  if ($delimiter.rank !== 0) {\n    throw new Error(`Delimiter should be a scalar but received shape ${$delimiter.shape}`);\n  }\n  const attrs = { skipEmpty };\n  const inputs = { input: $input, delimiter: $delimiter };\n  const result = ENGINE.runKernel(StringSplit, inputs, attrs);\n  return { indices: result[0], values: result[1], shape: result[2] };\n}\nvar stringSplit = op({ stringSplit_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/string/string_to_hash_bucket_fast.js\nfunction stringToHashBucketFast_(input2, numBuckets) {\n  const $input = convertToTensor(input2, \"input\", \"stringToHashBucketFast\", \"string\");\n  const attrs = { numBuckets };\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n  const inputs = { input: $input };\n  return ENGINE.runKernel(StringToHashBucketFast, inputs, attrs);\n}\nvar stringToHashBucketFast = op({ stringToHashBucketFast_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\nvar spectral = {\n  fft,\n  ifft,\n  rfft,\n  irfft\n};\nvar signal = {\n  hammingWindow,\n  hannWindow,\n  frame,\n  stft\n};\nvar image = {\n  flipLeftRight,\n  grayscaleToRGB,\n  resizeNearestNeighbor,\n  resizeBilinear,\n  rotateWithOffset,\n  cropAndResize,\n  nonMaxSuppression,\n  nonMaxSuppressionAsync,\n  nonMaxSuppressionWithScore,\n  nonMaxSuppressionWithScoreAsync,\n  nonMaxSuppressionPadded,\n  nonMaxSuppressionPaddedAsync,\n  threshold,\n  transform\n};\nvar linalg = {\n  bandPart,\n  gramSchmidt,\n  qr\n};\nvar losses = {\n  absoluteDifference,\n  computeWeightedLoss,\n  cosineDistance,\n  hingeLoss,\n  huberLoss,\n  logLoss,\n  meanSquaredError,\n  sigmoidCrossEntropy,\n  softmaxCrossEntropy\n};\nvar sparse = {\n  sparseFillEmptyRows,\n  sparseReshape,\n  sparseSegmentMean,\n  sparseSegmentSum\n};\nvar string = {\n  stringNGrams,\n  stringSplit,\n  stringToHashBucketFast\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js\nvar Optimizer = class extends Serializable {\n  minimize(f, returnCost = false, varList) {\n    const { value, grads: grads2 } = this.computeGradients(f, varList);\n    if (varList != null) {\n      const gradArray = varList.map((v) => ({ name: v.name, tensor: grads2[v.name] }));\n      this.applyGradients(gradArray);\n    } else {\n      this.applyGradients(grads2);\n    }\n    dispose(grads2);\n    if (returnCost) {\n      return value;\n    } else {\n      value.dispose();\n      return null;\n    }\n  }\n  get iterations() {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return this.iterations_;\n  }\n  incrementIterations() {\n    this.iterations_ = this.iterations + 1;\n  }\n  computeGradients(f, varList) {\n    return variableGrads(f, varList);\n  }\n  dispose() {\n    if (this.iterations_ != null) {\n      dispose(this.iterations_);\n    }\n  }\n  async saveIterations() {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return {\n      name: \"iter\",\n      tensor: scalar(this.iterations_, \"int32\")\n    };\n  }\n  async getWeights() {\n    throw new Error(\"getWeights() is not implemented for this optimizer yet.\");\n  }\n  async setWeights(weightValues) {\n    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);\n  }\n  async extractIterations(weightValues) {\n    this.iterations_ = (await weightValues[0].tensor.data())[0];\n    return weightValues.slice(1);\n  }\n};\nObject.defineProperty(Optimizer, Symbol.hasInstance, {\n  value: (instance) => {\n    return instance.minimize != null && instance.computeGradients != null && instance.applyGradients != null;\n  }\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js\nvar AdadeltaOptimizer = class extends Optimizer {\n  constructor(learningRate, rho, epsilon3 = null) {\n    super();\n    this.learningRate = learningRate;\n    this.rho = rho;\n    this.epsilon = epsilon3;\n    this.accumulatedGrads = [];\n    this.accumulatedUpdates = [];\n    if (epsilon3 == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item) => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedGrads[i] == null) {\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accum_grad`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedUpdates[i] == null) {\n        this.accumulatedUpdates[i] = {\n          originalName: `${name}/accum_var`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n      const accumulatedUpdate = this.accumulatedUpdates[i].variable;\n      tidy(() => {\n        const newAccumulatedGrad = add2(mul(accumulatedGrad, this.rho), mul(square(gradient), 1 - this.rho));\n        const updates = mul(div(sqrt(add2(accumulatedUpdate, this.epsilon)), sqrt(add2(accumulatedGrad, this.epsilon))), gradient);\n        const newAccumulatedUpdate = add2(mul(accumulatedUpdate, this.rho), mul(square(updates), 1 - this.rho));\n        accumulatedGrad.assign(newAccumulatedGrad);\n        accumulatedUpdate.assign(newAccumulatedUpdate);\n        const newValue = add2(mul(updates, -this.learningRate), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n  dispose() {\n    if (this.accumulatedUpdates != null) {\n      dispose(this.accumulatedGrads.map((v) => v.variable));\n      dispose(this.accumulatedUpdates.map((v) => v.variable));\n    }\n  }\n  async getWeights() {\n    const variables = [...this.accumulatedGrads, ...this.accumulatedUpdates];\n    return [await this.saveIterations()].concat(variables.map((v) => ({ name: v.originalName, tensor: v.variable })));\n  }\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedGrads = weightValues.slice(0, variableCount).map((v) => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n    this.accumulatedUpdates = weightValues.slice(variableCount, variableCount * 2).map((v) => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n  }\n  getConfig() {\n    return {\n      \"learningRate\": this.learningRate,\n      \"rho\": this.rho,\n      \"epsilon\": this.epsilon\n    };\n  }\n  static fromConfig(cls, config) {\n    return new cls(config[\"learningRate\"], config[\"rho\"], config[\"epsilon\"]);\n  }\n};\nAdadeltaOptimizer.className = \"Adadelta\";\nregisterClass(AdadeltaOptimizer);\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js\nvar AdagradOptimizer = class extends Optimizer {\n  constructor(learningRate, initialAccumulatorValue = 0.1) {\n    super();\n    this.learningRate = learningRate;\n    this.initialAccumulatorValue = initialAccumulatorValue;\n    this.accumulatedGrads = [];\n  }\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item) => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulatedGrads[i] == null) {\n        const trainable = false;\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accumulator`,\n          variable: tidy(() => fill(value.shape, this.initialAccumulatorValue).variable(trainable))\n        };\n      }\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n      tidy(() => {\n        const newAccumulatedGrad = add2(accumulatedGrad, square(gradient));\n        accumulatedGrad.assign(newAccumulatedGrad);\n        const newValue = add2(mul(div(gradient, sqrt(add2(newAccumulatedGrad, ENGINE.backend.epsilon()))), -this.learningRate), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n  dispose() {\n    if (this.accumulatedGrads != null) {\n      dispose(this.accumulatedGrads.map((v) => v.variable));\n    }\n  }\n  async getWeights() {\n    return [await this.saveIterations()].concat(this.accumulatedGrads.map((v) => ({ name: v.originalName, tensor: v.variable })));\n  }\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulatedGrads = weightValues.map((v) => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));\n  }\n  getConfig() {\n    return {\n      \"learningRate\": this.learningRate,\n      \"initialAccumulatorValue\": this.initialAccumulatorValue\n    };\n  }\n  static fromConfig(cls, config) {\n    return new cls(config[\"learningRate\"], config[\"initialAccumulatorValue\"]);\n  }\n};\nAdagradOptimizer.className = \"Adagrad\";\nregisterClass(AdagradOptimizer);\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js\nvar AdamOptimizer = class extends Optimizer {\n  constructor(learningRate, beta1, beta2, epsilon3 = null) {\n    super();\n    this.learningRate = learningRate;\n    this.beta1 = beta1;\n    this.beta2 = beta2;\n    this.epsilon = epsilon3;\n    this.accumulatedFirstMoment = [];\n    this.accumulatedSecondMoment = [];\n    tidy(() => {\n      this.accBeta1 = scalar(beta1).variable();\n      this.accBeta2 = scalar(beta2).variable();\n    });\n    if (epsilon3 == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n  applyGradients(variableGradients) {\n    const varNames = Array.isArray(variableGradients) ? variableGradients.map((v) => v.name) : Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const oneMinusAccBeta2 = sub(1, this.accBeta2);\n      varNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n        if (this.accumulatedSecondMoment[i] == null) {\n          this.accumulatedSecondMoment[i] = {\n            originalName: `${name}/v`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n        const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const secondMoment = this.accumulatedSecondMoment[i].variable;\n        const newFirstMoment = add2(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n        const newSecondMoment = add2(mul(secondMoment, this.beta2), mul(square(gradient), 1 - this.beta2));\n        const biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n        const biasCorrectedSecondMoment = div(newSecondMoment, oneMinusAccBeta2);\n        firstMoment.assign(newFirstMoment);\n        secondMoment.assign(newSecondMoment);\n        const newValue = add2(mul(div(biasCorrectedFirstMoment, add2(sqrt(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);\n        value.assign(newValue);\n      });\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n      this.accBeta2.assign(mul(this.accBeta2, this.beta2));\n    });\n    this.incrementIterations();\n  }\n  dispose() {\n    this.accBeta1.dispose();\n    this.accBeta2.dispose();\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map((v) => v.variable));\n    }\n    if (this.accumulatedSecondMoment != null) {\n      dispose(this.accumulatedSecondMoment.map((v) => v.variable));\n    }\n  }\n  async getWeights() {\n    const variables = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n    return [await this.saveIterations()].concat(variables.map((v) => ({ name: v.originalName, tensor: v.variable })));\n  }\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    tidy(() => {\n      this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n      this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n    });\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedFirstMoment = weightValues.slice(0, variableCount).map((v) => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n    this.accumulatedSecondMoment = weightValues.slice(variableCount, variableCount * 2).map((v) => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n  }\n  getConfig() {\n    return {\n      \"learningRate\": this.learningRate,\n      \"beta1\": this.beta1,\n      \"beta2\": this.beta2,\n      \"epsilon\": this.epsilon\n    };\n  }\n  static fromConfig(cls, config) {\n    return new cls(config[\"learningRate\"], config[\"beta1\"], config[\"beta2\"], config[\"epsilon\"]);\n  }\n};\nAdamOptimizer.className = \"Adam\";\nregisterClass(AdamOptimizer);\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js\nvar AdamaxOptimizer = class extends Optimizer {\n  constructor(learningRate, beta1, beta2, epsilon3 = null, decay = 0) {\n    super();\n    this.learningRate = learningRate;\n    this.beta1 = beta1;\n    this.beta2 = beta2;\n    this.epsilon = epsilon3;\n    this.decay = decay;\n    this.accumulatedFirstMoment = [];\n    this.accumulatedWeightedInfNorm = [];\n    tidy(() => {\n      this.iteration = scalar(0).variable();\n      this.accBeta1 = scalar(beta1).variable();\n    });\n    if (epsilon3 == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item) => item.name) : Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const lr = div(-this.learningRate, add2(mul(this.iteration, this.decay), 1));\n      variableNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n        if (this.accumulatedWeightedInfNorm[i] == null) {\n          this.accumulatedWeightedInfNorm[i] = {\n            originalName: `${name}/v`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n        const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n        const newFirstMoment = add2(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n        const ut0 = mul(weightedInfNorm, this.beta2);\n        const ut1 = abs(gradient);\n        const newWeightedInfNorm = maximum(ut0, ut1);\n        firstMoment.assign(newFirstMoment);\n        weightedInfNorm.assign(newWeightedInfNorm);\n        const newValue = add2(mul(div(lr, oneMinusAccBeta1), div(newFirstMoment, add2(newWeightedInfNorm, this.epsilon))), value);\n        value.assign(newValue);\n      });\n      this.iteration.assign(add2(this.iteration, 1));\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n    });\n    this.incrementIterations();\n  }\n  dispose() {\n    this.accBeta1.dispose();\n    this.iteration.dispose();\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map((v) => v.variable));\n    }\n    if (this.accumulatedWeightedInfNorm != null) {\n      dispose(this.accumulatedWeightedInfNorm.map((v) => v.variable));\n    }\n  }\n  async getWeights() {\n    throw new Error(\"getWeights() is not implemented for Adamax yet.\");\n  }\n  async setWeights(weightValues) {\n    throw new Error(\"setWeights() is not implemented for Adamax yet.\");\n  }\n  getConfig() {\n    return {\n      \"learningRate\": this.learningRate,\n      \"beta1\": this.beta1,\n      \"beta2\": this.beta2,\n      \"epsilon\": this.epsilon,\n      \"decay\": this.decay\n    };\n  }\n  static fromConfig(cls, config) {\n    return new cls(config[\"learningRate\"], config[\"beta1\"], config[\"beta2\"], config[\"epsilon\"], config[\"decay\"]);\n  }\n};\nAdamaxOptimizer.className = \"Adamax\";\nregisterClass(AdamaxOptimizer);\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js\nvar SGDOptimizer = class extends Optimizer {\n  constructor(learningRate) {\n    super();\n    this.learningRate = learningRate;\n    this.setLearningRate(learningRate);\n  }\n  applyGradients(variableGradients) {\n    const varNames = Array.isArray(variableGradients) ? variableGradients.map((v) => v.name) : Object.keys(variableGradients);\n    varNames.forEach((name, i) => {\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n      const value = ENGINE.registeredVariables[name];\n      tidy(() => {\n        const newValue = add2(mul(this.c, gradient), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n  setLearningRate(learningRate) {\n    this.learningRate = learningRate;\n    if (this.c != null) {\n      this.c.dispose();\n    }\n    this.c = keep(scalar(-learningRate));\n  }\n  dispose() {\n    this.c.dispose();\n  }\n  async getWeights() {\n    return [await this.saveIterations()];\n  }\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    if (weightValues.length !== 0) {\n      throw new Error(\"SGD optimizer does not have settable weights.\");\n    }\n  }\n  getConfig() {\n    return { \"learningRate\": this.learningRate };\n  }\n  static fromConfig(cls, config) {\n    return new cls(config[\"learningRate\"]);\n  }\n};\nSGDOptimizer.className = \"SGD\";\nregisterClass(SGDOptimizer);\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js\nvar MomentumOptimizer = class extends SGDOptimizer {\n  constructor(learningRate, momentum, useNesterov = false) {\n    super(learningRate);\n    this.learningRate = learningRate;\n    this.momentum = momentum;\n    this.useNesterov = useNesterov;\n    this.accumulations = [];\n    this.m = scalar(this.momentum);\n  }\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item) => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulations[i] == null) {\n        const trainable = false;\n        this.accumulations[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      const accumulation = this.accumulations[i].variable;\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n      tidy(() => {\n        let newValue;\n        const newAccumulation = add2(mul(this.m, accumulation), gradient);\n        if (this.useNesterov) {\n          newValue = add2(mul(this.c, add2(gradient, mul(newAccumulation, this.m))), value);\n        } else {\n          newValue = add2(mul(this.c, newAccumulation), value);\n        }\n        accumulation.assign(newAccumulation);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n  dispose() {\n    this.m.dispose();\n    if (this.accumulations != null) {\n      dispose(this.accumulations.map((v) => v.variable));\n    }\n  }\n  setMomentum(momentum) {\n    this.momentum = momentum;\n  }\n  async getWeights() {\n    return [await this.saveIterations()].concat(this.accumulations.map((v) => ({ name: v.originalName, tensor: v.variable })));\n  }\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulations = weightValues.map((v) => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));\n  }\n  getConfig() {\n    return {\n      \"learningRate\": this.learningRate,\n      \"momentum\": this.momentum,\n      \"useNesterov\": this.useNesterov\n    };\n  }\n  static fromConfig(cls, config) {\n    return new cls(config[\"learningRate\"], config[\"momentum\"], config[\"useNesterov\"]);\n  }\n};\nMomentumOptimizer.className = \"Momentum\";\nregisterClass(MomentumOptimizer);\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js\nvar RMSPropOptimizer = class extends Optimizer {\n  constructor(learningRate, decay = 0.9, momentum = 0, epsilon3 = null, centered = false) {\n    super();\n    this.learningRate = learningRate;\n    this.decay = decay;\n    this.momentum = momentum;\n    this.epsilon = epsilon3;\n    this.accumulatedMeanSquares = [];\n    this.accumulatedMoments = [];\n    this.accumulatedMeanGrads = [];\n    this.centered = centered;\n    if (epsilon3 == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n    if (learningRate == null) {\n      throw new Error(`learningRate for RMSPropOptimizer must be defined.`);\n    }\n  }\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item) => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedMeanSquares[i] == null) {\n        this.accumulatedMeanSquares[i] = {\n          originalName: `${name}/rms`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedMoments[i] == null) {\n        this.accumulatedMoments[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedMeanGrads[i] == null && this.centered) {\n        this.accumulatedMeanGrads[i] = {\n          originalName: `${name}/mg`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n      const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;\n      const accumulatedMoments = this.accumulatedMoments[i].variable;\n      tidy(() => {\n        const newAccumulatedMeanSquare = add2(mul(accumulatedMeanSquare, this.decay), mul(square(gradient), 1 - this.decay));\n        if (this.centered) {\n          const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;\n          const newAccumulatedMeanGrad = add2(mul(accumulatedMeanGrad, this.decay), mul(gradient, 1 - this.decay));\n          const gradContribution = div(mul(gradient, this.learningRate), sqrt(sub(newAccumulatedMeanSquare, add2(square(newAccumulatedMeanGrad), this.epsilon))));\n          const newAccumulatedMoments = add2(mul(accumulatedMoments, this.momentum), gradContribution);\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n          accumulatedMoments.assign(newAccumulatedMoments);\n          const newValue = sub(value, newAccumulatedMoments);\n          value.assign(newValue);\n        } else {\n          const newAccumulatedMeanSquare2 = add2(mul(accumulatedMeanSquare, this.decay), mul(square(gradient), 1 - this.decay));\n          const newAccumulatedMoments = add2(mul(accumulatedMoments, this.momentum), div(mul(gradient, this.learningRate), sqrt(add2(newAccumulatedMeanSquare2, this.epsilon))));\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare2);\n          accumulatedMoments.assign(newAccumulatedMoments);\n          const newValue = sub(value, newAccumulatedMoments);\n          value.assign(newValue);\n        }\n      });\n    });\n    this.incrementIterations();\n  }\n  dispose() {\n    if (this.accumulatedMeanSquares != null) {\n      dispose(this.accumulatedMeanSquares.map((v) => v.variable));\n    }\n    if (this.accumulatedMeanGrads != null && this.centered) {\n      dispose(this.accumulatedMeanGrads.map((v) => v.variable));\n    }\n    if (this.accumulatedMoments != null) {\n      dispose(this.accumulatedMoments.map((v) => v.variable));\n    }\n  }\n  async getWeights() {\n    const variables = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];\n    if (this.centered) {\n      variables.push(...this.accumulatedMeanGrads);\n    }\n    return [await this.saveIterations()].concat(variables.map((v) => ({ name: v.originalName, tensor: v.variable })));\n  }\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedMeanSquares = weightValues.slice(0, variableCount).map((v) => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n    this.accumulatedMoments = weightValues.slice(variableCount, variableCount * 2).map((v) => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n    if (this.centered) {\n      this.accumulatedMeanGrads = weightValues.slice(variableCount * 2, variableCount * 3).map((v) => ({\n        originalName: v.name,\n        variable: v.tensor.variable(trainable)\n      }));\n    }\n  }\n  getConfig() {\n    return {\n      \"learningRate\": this.learningRate,\n      \"decay\": this.decay,\n      \"momentum\": this.momentum,\n      \"epsilon\": this.epsilon,\n      \"centered\": this.centered\n    };\n  }\n  static fromConfig(cls, config) {\n    return new cls(config[\"learningRate\"], config[\"decay\"], config[\"momentum\"], config[\"epsilon\"], config[\"centered\"]);\n  }\n};\nRMSPropOptimizer.className = \"RMSProp\";\nregisterClass(RMSPropOptimizer);\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js\nvar OptimizerConstructors = class {\n  static sgd(learningRate) {\n    return new SGDOptimizer(learningRate);\n  }\n  static momentum(learningRate, momentum, useNesterov = false) {\n    return new MomentumOptimizer(learningRate, momentum, useNesterov);\n  }\n  static rmsprop(learningRate, decay = 0.9, momentum = 0, epsilon3 = null, centered = false) {\n    return new RMSPropOptimizer(learningRate, decay, momentum, epsilon3, centered);\n  }\n  static adam(learningRate = 1e-3, beta1 = 0.9, beta2 = 0.999, epsilon3 = null) {\n    return new AdamOptimizer(learningRate, beta1, beta2, epsilon3);\n  }\n  static adadelta(learningRate = 1e-3, rho = 0.95, epsilon3 = null) {\n    return new AdadeltaOptimizer(learningRate, rho, epsilon3);\n  }\n  static adamax(learningRate = 2e-3, beta1 = 0.9, beta2 = 0.999, epsilon3 = null, decay = 0) {\n    return new AdamaxOptimizer(learningRate, beta1, beta2, epsilon3, decay);\n  }\n  static adagrad(learningRate, initialAccumulatorValue = 0.1) {\n    return new AdagradOptimizer(learningRate, initialAccumulatorValue);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/train.js\nvar train = {\n  sgd: OptimizerConstructors.sgd,\n  momentum: OptimizerConstructors.momentum,\n  adadelta: OptimizerConstructors.adadelta,\n  adagrad: OptimizerConstructors.adagrad,\n  rmsprop: OptimizerConstructors.rmsprop,\n  adamax: OptimizerConstructors.adamax,\n  adam: OptimizerConstructors.adam\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/browser_util.js\nvar delayCallback = (() => {\n  if (typeof requestAnimationFrame !== \"undefined\") {\n    return requestAnimationFrame;\n  } else if (typeof setImmediate !== \"undefined\") {\n    return setImmediate;\n  }\n  return (f) => f();\n})();\nfunction nextFrame() {\n  return new Promise((resolve) => delayCallback(() => resolve()));\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js\nvar backend_util_exports = {};\n__export(backend_util_exports, {\n  ERF_A1: () => ERF_A1,\n  ERF_A2: () => ERF_A2,\n  ERF_A3: () => ERF_A3,\n  ERF_A4: () => ERF_A4,\n  ERF_A5: () => ERF_A5,\n  ERF_P: () => ERF_P,\n  PARALLELIZE_THRESHOLD: () => PARALLELIZE_THRESHOLD,\n  SELU_SCALE: () => SELU_SCALE,\n  SELU_SCALEALPHA: () => SELU_SCALEALPHA,\n  applyActivation: () => applyActivation,\n  assertAndGetBroadcastShape: () => assertAndGetBroadcastShape,\n  assertAxesAreInnerMostDims: () => assertAxesAreInnerMostDims,\n  assertParamsConsistent: () => assertParamsConsistent,\n  assignToTypedArray: () => assignToTypedArray,\n  axesAreInnerMostDims: () => axesAreInnerMostDims,\n  calculateShapes: () => calculateShapes,\n  checkEinsumDimSizes: () => checkEinsumDimSizes,\n  checkPadOnDimRoundingMode: () => checkPadOnDimRoundingMode,\n  combineLocations: () => combineLocations,\n  complexWithEvenIndex: () => complexWithEvenIndex,\n  complexWithOddIndex: () => complexWithOddIndex,\n  computeConv2DInfo: () => computeConv2DInfo,\n  computeConv3DInfo: () => computeConv3DInfo,\n  computeDefaultPad: () => computeDefaultPad,\n  computeDilation2DInfo: () => computeDilation2DInfo,\n  computeOptimalWindowSize: () => computeOptimalWindowSize,\n  computeOutAndReduceShapes: () => computeOutAndReduceShapes,\n  computeOutShape: () => computeOutShape2,\n  computePool2DInfo: () => computePool2DInfo,\n  computePool3DInfo: () => computePool3DInfo,\n  convertConv2DDataFormat: () => convertConv2DDataFormat,\n  decodeEinsumEquation: () => decodeEinsumEquation,\n  eitherStridesOrDilationsAreOne: () => eitherStridesOrDilationsAreOne,\n  expandShapeToKeepDim: () => expandShapeToKeepDim,\n  exponent: () => exponent,\n  exponents: () => exponents,\n  fromStringArrayToUint8: () => fromStringArrayToUint8,\n  fromUint8ToStringArray: () => fromUint8ToStringArray,\n  getAxesPermutation: () => getAxesPermutation,\n  getBroadcastDims: () => getBroadcastDims,\n  getComplexWithIndex: () => getComplexWithIndex,\n  getEinsumComputePath: () => getEinsumComputePath,\n  getEinsumPermutation: () => getEinsumPermutation,\n  getFusedBiasGradient: () => getFusedBiasGradient,\n  getFusedDyActivation: () => getFusedDyActivation,\n  getImageCenter: () => getImageCenter,\n  getInnerMostAxes: () => getInnerMostAxes,\n  getPermuted: () => getPermuted,\n  getReductionAxes: () => getReductionAxes,\n  getReshaped: () => getReshaped,\n  getReshapedPermuted: () => getReshapedPermuted,\n  getSliceBeginCoords: () => getSliceBeginCoords,\n  getSliceSize: () => getSliceSize,\n  getSparseFillEmptyRowsIndicesDenseShapeMismatch: () => getSparseFillEmptyRowsIndicesDenseShapeMismatch,\n  getSparseFillEmptyRowsNegativeIndexErrorMessage: () => getSparseFillEmptyRowsNegativeIndexErrorMessage,\n  getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: () => getSparseFillEmptyRowsOutOfRangeIndexErrorMessage,\n  getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: () => getSparseReshapeEmptyTensorZeroOutputDimErrorMessage,\n  getSparseReshapeInputOutputMismatchErrorMessage: () => getSparseReshapeInputOutputMismatchErrorMessage,\n  getSparseReshapeInputOutputMultipleErrorMessage: () => getSparseReshapeInputOutputMultipleErrorMessage,\n  getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: () => getSparseReshapeMultipleNegativeOneOutputDimErrorMessage,\n  getSparseReshapeNegativeOutputDimErrorMessage: () => getSparseReshapeNegativeOutputDimErrorMessage,\n  getSparseSegmentReductionIndicesOutOfRangeErrorMessage: () => getSparseSegmentReductionIndicesOutOfRangeErrorMessage,\n  getSparseSegmentReductionNegativeSegmentIdsErrorMessage: () => getSparseSegmentReductionNegativeSegmentIdsErrorMessage,\n  getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: () => getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage,\n  getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: () => getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage,\n  getUndoAxesPermutation: () => getUndoAxesPermutation,\n  isIdentityPermutation: () => isIdentityPermutation,\n  log: () => log,\n  mergeRealAndImagArrays: () => mergeRealAndImagArrays,\n  prepareAndValidate: () => prepareAndValidate,\n  prepareSplitSize: () => prepareSplitSize,\n  segment_util: () => segment_util_exports,\n  shouldFuse: () => shouldFuse,\n  slice_util: () => slice_util_exports,\n  splitRealAndImagArrays: () => splitRealAndImagArrays,\n  tupleValuesAreOne: () => tupleValuesAreOne,\n  upcastType: () => upcastType,\n  validateInput: () => validateInput,\n  validateUpdateShape: () => validateUpdateShape,\n  warn: () => warn\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js\nfunction assertParamsConsistent(shapes, axis) {\n  const rank = shapes[0].length;\n  shapes.forEach((shape, i) => {\n    assert(shape.length === rank, () => `Error in concat${rank}D: rank of tensors[${i}] must be the same as the rank of the rest (${rank})`);\n  });\n  assert(axis >= 0 && axis < rank, () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);\n  const firstShape = shapes[0];\n  shapes.forEach((shape, i) => {\n    for (let r = 0; r < rank; r++) {\n      assert(r === axis || shape[r] === firstShape[r], () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) does not match the shape of the rest (${firstShape}) along the non-concatenated axis ${i}.`);\n    }\n  });\n}\nfunction computeOutShape2(shapes, axis) {\n  const outputShape = shapes[0].slice();\n  for (let i = 1; i < shapes.length; i++) {\n    outputShape[axis] += shapes[i][axis];\n  }\n  return outputShape;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js\nvar PARALLELIZE_THRESHOLD = 30;\nfunction computeOptimalWindowSize(inSize) {\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    return inSize;\n  }\n  return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/rotate_util.js\nfunction getImageCenter(center, imageHeight, imageWidth) {\n  const centerX = imageWidth * (typeof center === \"number\" ? center : center[0]);\n  const centerY = imageHeight * (typeof center === \"number\" ? center : center[1]);\n  return [centerX, centerY];\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js\nfunction getReshaped(inputShape, blockShape, prod5, batchToSpace = true) {\n  let reshaped = [];\n  if (batchToSpace) {\n    reshaped = reshaped.concat(blockShape.slice(0));\n    reshaped.push(inputShape[0] / prod5);\n    reshaped = reshaped.concat(inputShape.slice(1));\n  } else {\n    reshaped = reshaped.concat(inputShape[0]);\n    const spatialLength = blockShape.length;\n    for (let i = 0; i < spatialLength; ++i) {\n      reshaped = reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n    }\n    reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n  }\n  return reshaped;\n}\nfunction getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {\n  const permuted = [];\n  if (batchToSpace) {\n    permuted.push(blockShapeRank);\n    for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {\n      if (i <= 2 * blockShapeRank) {\n        permuted.push(i);\n        permuted.push(i - (blockShapeRank + 1));\n      } else {\n        permuted.push(i);\n      }\n    }\n  } else {\n    const permutedBeforeBatch = [];\n    const permutedAfterBatch = [];\n    for (let i = 1; i < reshapedRank; ++i) {\n      if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {\n        permutedAfterBatch.push(i);\n      } else {\n        permutedBeforeBatch.push(i);\n      }\n    }\n    permuted.push(...permutedBeforeBatch);\n    permuted.push(0);\n    permuted.push(...permutedAfterBatch);\n  }\n  return permuted;\n}\nfunction getReshapedPermuted(inputShape, blockShape, prod5, batchToSpace = true) {\n  const reshapedPermuted = [];\n  if (batchToSpace) {\n    reshapedPermuted.push(inputShape[0] / prod5);\n  } else {\n    reshapedPermuted.push(inputShape[0] * prod5);\n  }\n  for (let i = 1; i < inputShape.length; ++i) {\n    if (i <= blockShape.length) {\n      if (batchToSpace) {\n        reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n      } else {\n        reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n      }\n    } else {\n      reshapedPermuted.push(inputShape[i]);\n    }\n  }\n  return reshapedPermuted;\n}\nfunction getSliceBeginCoords(crops, blockShape) {\n  const sliceBeginCoords = [0];\n  for (let i = 0; i < blockShape; ++i) {\n    sliceBeginCoords.push(crops[i][0]);\n  }\n  return sliceBeginCoords;\n}\nfunction getSliceSize(uncroppedShape, crops, blockShape) {\n  const sliceSize = uncroppedShape.slice(0, 1);\n  for (let i = 0; i < blockShape; ++i) {\n    sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n  }\n  return sliceSize;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js\nvar SELU_SCALEALPHA = 1.7580993408473768;\nvar SELU_SCALE = 1.0507009873554805;\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/erf_util.js\nvar ERF_P = 0.3275911;\nvar ERF_A1 = 0.254829592;\nvar ERF_A2 = -0.284496736;\nvar ERF_A3 = 1.421413741;\nvar ERF_A4 = -1.453152027;\nvar ERF_A5 = 1.061405429;\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js\nfunction mergeRealAndImagArrays(real4, imag4) {\n  if (real4.length !== imag4.length) {\n    throw new Error(`Cannot merge real and imag arrays of different lengths. real:${real4.length}, imag: ${imag4.length}.`);\n  }\n  const result = new Float32Array(real4.length * 2);\n  for (let i = 0; i < result.length; i += 2) {\n    result[i] = real4[i / 2];\n    result[i + 1] = imag4[i / 2];\n  }\n  return result;\n}\nfunction splitRealAndImagArrays(complex4) {\n  const real4 = new Float32Array(complex4.length / 2);\n  const imag4 = new Float32Array(complex4.length / 2);\n  for (let i = 0; i < complex4.length; i += 2) {\n    real4[i / 2] = complex4[i];\n    imag4[i / 2] = complex4[i + 1];\n  }\n  return { real: real4, imag: imag4 };\n}\nfunction complexWithEvenIndex(complex4) {\n  const len = Math.ceil(complex4.length / 4);\n  const real4 = new Float32Array(len);\n  const imag4 = new Float32Array(len);\n  for (let i = 0; i < complex4.length; i += 4) {\n    real4[Math.floor(i / 4)] = complex4[i];\n    imag4[Math.floor(i / 4)] = complex4[i + 1];\n  }\n  return { real: real4, imag: imag4 };\n}\nfunction complexWithOddIndex(complex4) {\n  const len = Math.floor(complex4.length / 4);\n  const real4 = new Float32Array(len);\n  const imag4 = new Float32Array(len);\n  for (let i = 2; i < complex4.length; i += 4) {\n    real4[Math.floor(i / 4)] = complex4[i];\n    imag4[Math.floor(i / 4)] = complex4[i + 1];\n  }\n  return { real: real4, imag: imag4 };\n}\nfunction getComplexWithIndex(complex4, index) {\n  const real4 = complex4[index * 2];\n  const imag4 = complex4[index * 2 + 1];\n  return { real: real4, imag: imag4 };\n}\nfunction assignToTypedArray(data, real4, imag4, index) {\n  data[index * 2] = real4;\n  data[index * 2 + 1] = imag4;\n}\nfunction exponents(n, inverse) {\n  const real4 = new Float32Array(n / 2);\n  const imag4 = new Float32Array(n / 2);\n  for (let i = 0; i < Math.ceil(n / 2); i++) {\n    const x = (inverse ? 2 : -2) * Math.PI * (i / n);\n    real4[i] = Math.cos(x);\n    imag4[i] = Math.sin(x);\n  }\n  return { real: real4, imag: imag4 };\n}\nfunction exponent(k, n, inverse) {\n  const x = (inverse ? 2 : -2) * Math.PI * (k / n);\n  const real4 = Math.cos(x);\n  const imag4 = Math.sin(x);\n  return { real: real4, imag: imag4 };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/backends/einsum_util.js\nvar ARROW = \"->\";\nvar ARROW_REGEX = /->/g;\nvar COMMA = \",\";\nvar ELLIPSIS = \"...\";\nfunction decodeEinsumEquation(equation, numTensors) {\n  equation = equation.replace(/\\s/g, \"\");\n  const numArrows = (equation.length - equation.replace(ARROW_REGEX, \"\").length) / ARROW.length;\n  if (numArrows < 1) {\n    throw new Error(\"Equations without an arrow are not supported.\");\n  } else if (numArrows > 1) {\n    throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n  }\n  const [inputString, outputString] = equation.split(ARROW);\n  assert(inputString.indexOf(ELLIPSIS) === -1, () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n  const inputTerms = inputString.split(COMMA);\n  const numInputs = inputTerms.length;\n  if (numTensors !== numInputs) {\n    throw new Error(`Expected ${numInputs} input tensors, received ${numTensors}`);\n  }\n  if (numInputs > 2) {\n    throw new Error(\"Support for more than 2 input tensors is not implemented yet.\");\n  }\n  const allDims = [];\n  for (let i = 0; i < outputString.length; ++i) {\n    const dimName = outputString[i];\n    if (!inputTerms.some((inputTerm) => inputTerm.indexOf(dimName) !== -1)) {\n      throw new Error(`Output subscripts contain the label ${dimName} not present in the input subscripts.`);\n    }\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  }\n  for (let i = 0; i < inputString.length; ++i) {\n    const dimName = inputString[i];\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n  const idDims = new Array(inputTerms.length);\n  for (let i = 0; i < numInputs; ++i) {\n    if (new Set(inputTerms[i].split(\"\")).size !== inputTerms[i].length) {\n      throw new Error(`Found duplicate axes in input component ${inputTerms[i]}. Support for duplicate axes in input is not implemented yet.`);\n    }\n    idDims[i] = [];\n    for (let j = 0; j < inputTerms[i].length; ++j) {\n      idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n    }\n  }\n  const numDims = allDims.length;\n  const numOutDims = outputString.length;\n  const summedDims = [];\n  for (let i = numOutDims; i < numDims; ++i) {\n    summedDims.push(i);\n  }\n  return { allDims, summedDims, idDims };\n}\nfunction getEinsumPermutation(nDims, idDims) {\n  let permutationIndices = new Array(nDims);\n  permutationIndices.fill(-1);\n  for (let i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n  const expandDims6 = [];\n  for (let i = 0; i < nDims; ++i) {\n    if (permutationIndices[i] === -1) {\n      expandDims6.push(i);\n    }\n  }\n  permutationIndices = permutationIndices.filter((d) => d !== -1);\n  return { permutationIndices, expandDims: expandDims6 };\n}\nfunction checkEinsumDimSizes(nDims, idDims, tensors) {\n  const dimSizes = new Array(nDims);\n  for (let i = 0; i < tensors.length; ++i) {\n    const shape = tensors[i].shape;\n    for (let j = 0; j < idDims[i].length; ++j) {\n      if (dimSizes[idDims[i][j]] === void 0) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(dimSizes[idDims[i][j]] === shape[j], () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} of input shaped ${JSON.stringify(shape)}, but got dimension ${shape[j]}`);\n      }\n    }\n  }\n}\nfunction getEinsumComputePath(summedDims, idDims) {\n  const path = summedDims;\n  const steps = [];\n  let nSteps = 0;\n  if (summedDims.length === 0) {\n    path.push(-1);\n  }\n  nSteps = summedDims.length + 1;\n  for (let i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n  const computedTermIndices = [];\n  for (let i = 0; i < path.length; ++i) {\n    const summedDim = path[i];\n    const termIndices = findTermsWithDim(idDims, summedDim);\n    for (const termIndex of termIndices) {\n      if (computedTermIndices.indexOf(termIndex) === -1) {\n        steps[i].push(termIndex);\n        computedTermIndices.push(termIndex);\n      }\n    }\n  }\n  return { path, steps };\n}\nfunction isIdentityPermutation(perm) {\n  return perm.every((dim, index) => dim === index);\n}\nfunction findTermsWithDim(idDims, dim) {\n  const termIndices = [];\n  for (let i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n  return termIndices;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js\nfunction prepareSplitSize(x, numOrSizeSplits, axis = 0) {\n  let splitSizes = [];\n  if (typeof numOrSizeSplits === \"number\") {\n    assert(x.shape[axis] % numOrSizeSplits === 0, () => \"Number of splits must evenly divide the axis.\");\n    splitSizes = new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n  } else {\n    const numOfNegs = numOrSizeSplits.reduce((count2, value) => {\n      if (value === -1) {\n        count2 += 1;\n      }\n      return count2;\n    }, 0);\n    assert(numOfNegs <= 1, () => \"There should be only one negative value in split array.\");\n    const negIndex = numOrSizeSplits.indexOf(-1);\n    if (negIndex !== -1) {\n      const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);\n      numOrSizeSplits[negIndex] = x.shape[axis] - total;\n    }\n    assert(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => \"The sum of sizes must match the size of the axis dimension.\");\n    splitSizes = numOrSizeSplits;\n  }\n  return splitSizes;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_fill_empty_rows_util.js\nfunction getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesLength) {\n  return `Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${indicesLength}`;\n}\nfunction getSparseFillEmptyRowsNegativeIndexErrorMessage(index, value) {\n  return `indices(${index}, 0) is invalid: ${value} < 0`;\n}\nfunction getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(index, value, limit) {\n  return `indices(${index}, 0) is invalid: ${value} >= ${limit}`;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_reshape_util.js\nfunction getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(dim1, dim2) {\n  return `only one output dimension may be -1, not both ${dim1} and ${dim2}`;\n}\nfunction getSparseReshapeNegativeOutputDimErrorMessage(dim, value) {\n  return `size ${dim} must be non-negative, not ${value}`;\n}\nfunction getSparseReshapeEmptyTensorZeroOutputDimErrorMessage() {\n  return \"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero\";\n}\nfunction getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape) {\n  const inputSize = sizeFromShape(inputShape);\n  const outputSize = sizeFromShape(outputShape);\n  return `Input to reshape is a SparseTensor with ${inputSize}\n  dense values, but the requested shape requires a multiple of ${outputSize}. inputShape=${inputShape} outputShape= ${outputShape}`;\n}\nfunction getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape) {\n  const inputSize = sizeFromShape(inputShape);\n  const outputSize = sizeFromShape(outputShape);\n  return `Input to reshape is a tensor with ${inputSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_segment_reduction_util.js\nfunction getSparseSegmentReductionNegativeSegmentIdsErrorMessage() {\n  return `segment ids must be >= 0`;\n}\nfunction getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage() {\n  return `segment ids are not increasing`;\n}\nfunction getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(segmentId, outputRows) {\n  return `Segment id ${segmentId} out of range [0, ${outputRows}), possibly because segmentIds input is not sorted.`;\n}\nfunction getSparseSegmentReductionIndicesOutOfRangeErrorMessage(index, indexValue, inputRows) {\n  return `Bad: indices[${index}] == ${indexValue} out of range [0, ${inputRows})`;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js\nvar segment_util_exports = {};\n__export(segment_util_exports, {\n  collectGatherOpShapeInfo: () => collectGatherOpShapeInfo,\n  computeOutShape: () => computeOutShape3,\n  segOpComputeOptimalWindowSize: () => segOpComputeOptimalWindowSize\n});\nfunction segOpComputeOptimalWindowSize(inSize, numSegments) {\n  let done = false;\n  let res;\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\nfunction computeOutShape3(aShape, axis, numSegments) {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\nfunction collectGatherOpShapeInfo(x, indices, axis, batchDims) {\n  const indicesRank = indices.shape.length;\n  const xRank = x.shape.length;\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${indicesRank}], but got ${batchDims}`);\n    }\n  }\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n  if (batchDims > xRank) {\n    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n  }\n  if (axis < batchDims) {\n    throw new Error(`batchDims (${batchDims}) must be less than or equal to axis (${axis}).`);\n  }\n  for (let i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(`x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${i}]: ${indices.shape[i]}.`);\n    }\n  }\n  const dimSize = x.shape[axis];\n  const outputShape = [];\n  let batchSize = 1;\n  let outerSize = 1;\n  let sliceSize = 1;\n  for (let i = 0; i < batchDims; ++i) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n  for (let i = batchDims; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    outerSize *= x.shape[i];\n  }\n  for (let i = batchDims; i < indicesRank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n  for (let i = axis + 1; i < xRank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n  return { batchSize, sliceSize, outerSize, dimSize, outputShape };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js\nfunction fromUint8ToStringArray(vals) {\n  try {\n    return vals.map((val) => decodeString(val));\n  } catch (err) {\n    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${err}`);\n  }\n}\nfunction fromStringArrayToUint8(strings) {\n  return strings.map((s) => encodeString(s));\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js\nvar kernel_impls_exports = {};\n__export(kernel_impls_exports, {\n  nonMaxSuppressionV3Impl: () => nonMaxSuppressionV3Impl,\n  nonMaxSuppressionV4Impl: () => nonMaxSuppressionV4Impl,\n  nonMaxSuppressionV5Impl: () => nonMaxSuppressionV5Impl,\n  whereImpl: () => whereImpl\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Abs_grad.js\nvar absGradConfig = {\n  kernelName: Abs,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => mul(dy, step(cast(x, \"float32\"), -1)) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Acos_grad.js\nvar acosGradConfig = {\n  kernelName: Acos,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return {\n      x: () => {\n        const a = square(cast(x, \"float32\"));\n        const b = sqrt(sub(scalar(1), a));\n        return neg(div(dy, b));\n      }\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Acosh_grad.js\nvar acoshGradConfig = {\n  kernelName: Acosh,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return {\n      x: () => {\n        const a = sqrt(sub(square(cast(x, \"float32\")), 1));\n        return div(dy, a);\n      }\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Add_grad.js\nvar addGradConfig = {\n  kernelName: Add,\n  inputsToSave: [\"a\", \"b\"],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n    const derA = () => {\n      let res = dy;\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum2(res, reduceAxes);\n      }\n      return reshape(res, a.shape);\n    };\n    const derB = () => {\n      let res = dy;\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum2(res, reduceAxes);\n      }\n      return reshape(res, b.shape);\n    };\n    return { a: derA, b: derB };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/AddN_grad.js\nvar addNGradConfig = {\n  kernelName: AddN,\n  saveAllInputs: true,\n  gradFunc: (dy, saved) => {\n    const ders = {};\n    saved.forEach((_, i) => {\n      ders[i] = () => dy.clone();\n    });\n    return ders;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMax_grad.js\nvar argMaxGradConfig = {\n  kernelName: ArgMax,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => zerosLike(x) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMin_grad.js\nvar argMinGradConfig = {\n  kernelName: ArgMin,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => zerosLike(x) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Asin_grad.js\nvar asinGradConfig = {\n  kernelName: Asin,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => div(dy, sqrt(sub(scalar(1), square(cast(x, \"float32\"))))) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Asinh_grad.js\nvar asinhGradConfig = {\n  kernelName: Asinh,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return {\n      x: () => {\n        const a = sqrt(add2(scalar(1), square(cast(x, \"float32\"))));\n        return div(dy, a);\n      }\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js\nvar atan2GradConfig = {\n  kernelName: Atan2,\n  inputsToSave: [\"a\", \"b\"],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n    const derA = () => {\n      const d = add2(square(a), square(b));\n      let res = mul(dy, div(b, d));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum2(res, reduceAxes);\n      }\n      return reshape(res, a.shape);\n    };\n    const derB = () => {\n      const d = add2(square(a), square(b));\n      let res = neg(mul(dy, div(a, d)));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum2(res, reduceAxes);\n      }\n      return reshape(res, b.shape);\n    };\n    return { a: derA, b: derB };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Atan_grad.js\nvar atanGradConfig = {\n  kernelName: Atan,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => div(dy, add2(square(cast(x, \"float32\")), 1)) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Atanh_grad.js\nvar atanhGradConfig = {\n  kernelName: Atanh,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => div(dy, sub(scalar(1), square(cast(x, \"float32\")))) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d_grad.js\nfunction avgPool3dGrad_(dy, input2, filterSize, strides, pad3, dimRoundingMode) {\n  const $dy = convertToTensor(dy, \"dy\", \"avgPool3dGrad\");\n  const $input = convertToTensor(input2, \"input\", \"avgPool3dGrad\");\n  let dy5D = $dy;\n  let input5D = $input;\n  let reshapedTo5D = false;\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n    input5D = reshape($input, [\n      1,\n      $input.shape[0],\n      $input.shape[1],\n      $input.shape[2],\n      $input.shape[3]\n    ]);\n  }\n  assert(dy5D.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${dy5D.rank}.`);\n  assert(input5D.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${input5D.rank}.`);\n  checkPadOnDimRoundingMode(\"avgPool3dGrad\", pad3, dimRoundingMode);\n  const inputs = { dy: dy5D, input: input5D };\n  const attrs = { filterSize, strides, pad: pad3, dimRoundingMode };\n  const res = ENGINE.runKernel(AvgPool3DGrad, inputs, attrs);\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n  return res;\n}\nvar avgPool3dGrad = op({ avgPool3dGrad_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool3D_grad.js\nvar avgPool3DGradConfig = {\n  kernelName: AvgPool3D,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n    return {\n      x: () => avgPool3dGrad(dy, x, filterSize, strides, pad3, dimRoundingMode)\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_grad.js\nfunction avgPoolGrad_(dy, input2, filterSize, strides, pad3) {\n  const $dy = convertToTensor(dy, \"dy\", \"avgPoolGrad\");\n  const $input = convertToTensor(input2, \"input\", \"avgPoolGrad\");\n  assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);\n  let input4D = $input;\n  let dy4D = $dy;\n  let reshapedTo4D = false;\n  if ($input.rank === 3) {\n    reshapedTo4D = true;\n    input4D = reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);\n    dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);\n  }\n  assert(dy4D.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${dy4D.rank}.`);\n  assert(input4D.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${input4D.rank}.`);\n  const inputs = { dy: dy4D, input: input4D };\n  const attrs = { filterSize, strides, pad: pad3 };\n  const res = ENGINE.runKernel(AvgPoolGrad, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nvar avgPoolGrad = op({ avgPoolGrad_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool_grad.js\nvar avgPoolGradConfig = {\n  kernelName: AvgPool,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const { filterSize, strides, pad: pad3 } = attrs;\n    return { x: () => avgPoolGrad(dy, x, filterSize, strides, pad3) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/BatchMatMul_grad.js\nvar batchMatMulGradConfig = {\n  kernelName: BatchMatMul,\n  inputsToSave: [\"a\", \"b\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [a, b] = saved;\n    const { transposeA, transposeB } = attrs;\n    if (!transposeA && !transposeB) {\n      return {\n        a: () => matMul(dy, b, false, true),\n        b: () => matMul(a, dy, true, false)\n      };\n    } else if (!transposeA && transposeB) {\n      return {\n        a: () => matMul(dy, b, false, false),\n        b: () => matMul(dy, a, true, false)\n      };\n    } else if (transposeA && !transposeB) {\n      return {\n        a: () => matMul(b, dy, false, true),\n        b: () => matMul(a, dy, false, false)\n      };\n    } else {\n      return {\n        a: () => matMul(b, dy, true, true),\n        b: () => matMul(dy, a, true, true)\n      };\n    }\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/BatchToSpaceND_grad.js\nvar batchToSpaceNDGradConfig = {\n  kernelName: BatchToSpaceND,\n  gradFunc: (dy, saved, attrs) => {\n    const { blockShape, crops } = attrs;\n    return { x: () => spaceToBatchND(dy, blockShape, crops) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/BroadcastTo_grad.js\nvar broadcastToGradConfig = {\n  kernelName: BroadcastTo,\n  gradFunc: (dy, saved, attrs) => {\n    const broadCastToAttrs = attrs;\n    const inputShape = broadCastToAttrs.inputShape;\n    const outputShape = broadCastToAttrs.shape;\n    const reps = Array.from(outputShape);\n    for (let i = inputShape.length - 1; i >= 0; i--) {\n      if (inputShape[i] === outputShape[i]) {\n        reps[i] = 1;\n      } else if (inputShape[i] !== 1) {\n        throw new Error(`broadcastTo(): [${inputShape}] cannot be broadcast to [${outputShape}].`);\n      }\n    }\n    const axes = [];\n    for (let i = 0; i < reps.length; i++) {\n      if (reps[i] > 1) {\n        axes.push(i);\n      }\n    }\n    return { x: () => sum2(dy, axes, true) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Cast_grad.js\nvar castGradConfig = {\n  kernelName: Cast,\n  gradFunc: (dy) => {\n    return { x: () => dy.clone() };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Ceil_grad.js\nvar ceilGradConfig = {\n  kernelName: Ceil,\n  gradFunc: (dy) => {\n    return { x: () => zerosLike(dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/ClipByValue_grad.js\nvar clipByValueGradConfig = {\n  kernelName: ClipByValue,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const { clipValueMin, clipValueMax } = attrs;\n    return {\n      x: () => where(logicalAnd(greaterEqual(x, clipValueMin), lessEqual(x, clipValueMax)), dy, zerosLike(dy))\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/ComplexAbs_grad.js\nvar complexAbsGradConfig = {\n  kernelName: ComplexAbs,\n  inputsToSave: [\"x\"],\n  gradFunc: absGradConfig.gradFunc\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Concat_grad.js\nvar concatGradConfig = {\n  kernelName: Concat,\n  saveAllInputs: true,\n  gradFunc: (dy, saved, attrs) => {\n    const shapes = saved.map((t) => t.shape);\n    const { axis } = attrs;\n    const $axis = parseAxisParam(axis, saved[0].shape)[0];\n    const sizeSplits = shapes.map((s) => s[$axis]);\n    const derTensors = split(dy, sizeSplits, $axis);\n    return derTensors.map((t) => () => t);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2D_grad.js\nvar conv2DGradConfig = {\n  kernelName: Conv2D,\n  inputsToSave: [\"x\", \"filter\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [x4D, $filter] = saved;\n    const { dilations, strides, pad: pad3, dataFormat } = attrs;\n    assert(tupleValuesAreOne(dilations), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${dilations}'`);\n    return {\n      x: () => conv2DBackpropInput(x4D.shape, dy, $filter, strides, pad3, dataFormat),\n      filter: () => conv2DBackpropFilter(x4D, dy, $filter.shape, strides, pad3, dataFormat)\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2DBackpropInput_grad.js\nvar conv2DBackpropInputGradConfig = {\n  kernelName: Conv2DBackpropInput,\n  inputsToSave: [\"dy\", \"filter\"],\n  gradFunc: (ddx, saved, attrs) => {\n    const [dy, filter] = saved;\n    const { strides, pad: pad3, dataFormat, dimRoundingMode } = attrs;\n    return {\n      dy: () => conv2d(ddx, filter, strides, pad3, dataFormat, 1, dimRoundingMode),\n      filter: () => conv2DBackpropFilter(ddx, dy, filter.shape, strides, pad3, dataFormat, dimRoundingMode)\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js\nfunction conv3DBackpropFilter_(x, dy, filterShape, strides, pad3) {\n  let x5D = x;\n  if (x.rank === 4) {\n    x5D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);\n  }\n  let dy5D = dy;\n  if (dy5D.rank === 4) {\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n  }\n  assert(x5D.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${x5D.shape}.`);\n  assert(dy5D.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${dy5D.shape}.`);\n  assert(filterShape.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${filterShape}.`);\n  assert(x5D.shape[4] === filterShape[3], () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must match input depth in filter (${filterShape[3]}.`);\n  assert(dy5D.shape[4] === filterShape[4], () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must match output depth for filter (${filterShape[4]}).`);\n  const inputs = { x: x5D, dy: dy5D };\n  const attrs = { strides, pad: pad3, filterShape };\n  return ENGINE.runKernel(Conv3DBackpropFilterV2, inputs, attrs);\n}\nvar conv3DBackpropFilter = op({ conv3DBackpropFilter_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Conv3D_grad.js\nvar conv3DGradConfig = {\n  kernelName: Conv3D,\n  inputsToSave: [\"x\", \"filter\"],\n  gradFunc: (dy, saved, attrs) => {\n    const { dilations, strides, pad: pad3 } = attrs;\n    assert(tupleValuesAreOne(dilations), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${dilations}'`);\n    const [x5D, $filter] = saved;\n    return {\n      x: () => conv3DBackpropInput(x5D.shape, dy, $filter, strides, pad3),\n      filter: () => conv3DBackpropFilter(x5D, dy, $filter.shape, strides, pad3)\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Cos_grad.js\nvar cosGradConfig = {\n  kernelName: Cos,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => mul(neg(sin(cast(x, \"float32\"))), dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Cosh_grad.js\nvar coshGradConfig = {\n  kernelName: Cosh,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => mul(sinh(cast(x, \"float32\")), dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Cumsum_grad.js\nvar cumsumGradConfig = {\n  kernelName: Cumsum,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const { axis, exclusive, reverse: reverse5 } = attrs;\n    return {\n      x: () => {\n        const permutation = getAxesPermutation([axis], x.rank);\n        let out = cumsum(dy, axis, exclusive, !reverse5);\n        if (permutation != null) {\n          out = transpose(out, permutation);\n        }\n        return out;\n      }\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js\nvar depthwiseConv2dNativeGradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: [\"x\", \"filter\"],\n  gradFunc: (dy, saved, attrs) => {\n    const { dilations, strides, pad: pad3, dimRoundingMode } = attrs;\n    const $dilations = dilations == null ? [1, 1] : dilations;\n    assert(tupleValuesAreOne($dilations), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${$dilations}'`);\n    const [x, filter] = saved;\n    assert(x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${x.rank}.`);\n    assert(filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${filter.rank}.`);\n    assert(x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${x.shape[3]}) must match the inChannels dimension in filter ${filter.shape[2]}.`);\n    assert(eitherStridesOrDilationsAreOne(strides, $dilations), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${strides} and dilations '${$dilations}'.`);\n    checkPadOnDimRoundingMode(\"depthwiseConv2d\", pad3, dimRoundingMode);\n    return {\n      x: () => depthwiseConv2dNativeBackpropInput(x.shape, dy, filter, strides, pad3, $dilations, dimRoundingMode),\n      filter: () => depthwiseConv2dNativeBackpropFilter(x, dy, filter.shape, strides, pad3, $dilations, dimRoundingMode)\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Dilation2D_grad.js\nvar dilation2dGradConfig = {\n  kernelName: Dilation2D,\n  inputsToSave: [\"x\", \"filter\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [x, filter] = saved;\n    const inputInputs = { x, filter, dy };\n    const filterInputs = { x, filter, dy };\n    return {\n      x: () => ENGINE.runKernel(Dilation2DBackpropInput, inputInputs, attrs),\n      filter: () => ENGINE.runKernel(Dilation2DBackpropFilter, filterInputs, attrs)\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Elu_grad.js\nvar eluGradConfig = {\n  kernelName: Elu,\n  outputsToSave: [true],\n  gradFunc: (dy, saved) => {\n    const [y] = saved;\n    const inputs = { dy, y };\n    return { x: () => ENGINE.runKernel(EluGrad, inputs) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Erf_grad.js\nvar erfGradConfig = {\n  kernelName: Erf,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    const a = mul(exp(neg(square(x))), 2 / Math.sqrt(Math.PI));\n    return { x: () => mul(dy, a) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Exp_grad.js\nvar expGradConfig = {\n  kernelName: Exp,\n  outputsToSave: [true],\n  gradFunc: (dy, saved) => {\n    const [y] = saved;\n    return { x: () => mul(dy, y) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/ExpandDims_grad.js\nvar expandDimsGradConfig = {\n  kernelName: ExpandDims,\n  inputsToSave: [\"input\"],\n  gradFunc: (dy, saved) => {\n    const [input2] = saved;\n    return { input: () => reshape(dy, input2.shape) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Expm1_grad.js\nvar expm1GradConfig = {\n  kernelName: Expm1,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => mul(dy, exp(x)) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Floor_grad.js\nvar floorGradConfig = {\n  kernelName: Floor,\n  gradFunc: (dy) => {\n    return { x: () => zerosLike(dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/FloorDiv_grad.js\nvar floorDivGradConfig = {\n  kernelName: FloorDiv,\n  inputsToSave: [\"a\", \"b\"],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n    const derA = () => {\n      const res = div(dy, cast(b, \"float32\"));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum2(res, reduceAxes), a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      let res = mul(dy, cast(a, \"float32\"));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = reshape(sum2(res, reduceAxes), b.shape);\n      }\n      const tmp = square(b);\n      return neg(div(res, cast(tmp, \"float32\")));\n    };\n    return { a: derA, b: derB };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js\nvar fusedBatchNormGradConfig = {\n  kernelName: FusedBatchNorm,\n  inputsToSave: [\"x\", \"mean\", \"variance\", \"scale\"],\n  gradFunc: (dy, saved, attrs) => {\n    const { varianceEpsilon } = attrs;\n    const [x, mean4, variance, scale2] = saved;\n    const scaleValue = scale2 == null ? scalar(1) : scale2;\n    const reductionAxes = getReductionAxes(mean4.shape, x.shape);\n    const tileShape = [];\n    if (mean4.rank === 1) {\n      for (let i = 0; i < x.shape.length - 1; ++i) {\n        tileShape.push(x.shape[i]);\n      }\n      tileShape.push(1);\n    }\n    const xMinusMean = sub(x, mean4);\n    const dyTimesScaleValue = mul(dy, scaleValue);\n    const oneOverSqrtVariance = rsqrt(add2(variance, scalar(varianceEpsilon)));\n    const minusHalfRCube = mul(mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), scalar(-0.5));\n    const derX = () => {\n      if (mean4.rank === 1) {\n        return reshape(mul(mul(dy, tile(reshape(oneOverSqrtVariance, [1, 1, 1, mean4.shape[0]]), tileShape)), scaleValue), x.shape);\n      } else {\n        return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n      }\n    };\n    const derMean = () => {\n      let meanDer = mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n      if (mean4.rank === 1) {\n        meanDer = sum2(meanDer, reductionAxes);\n      }\n      return reshape(meanDer, mean4.shape);\n    };\n    const derVariance = () => {\n      let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n      if (mean4.rank === 1) {\n        varianceDer = sum2(varianceDer, reductionAxes);\n      }\n      return reshape(varianceDer, mean4.shape);\n    };\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n      let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n      if (mean4.rank === 1) {\n        scaleDer = sum2(scaleDer, reductionAxes);\n      }\n      return reshape(scaleDer, mean4.shape);\n    };\n    const derOffset = () => {\n      let offsetDer = dy;\n      if (mean4.rank === 1) {\n        offsetDer = sum2(offsetDer, reductionAxes);\n      }\n      return reshape(offsetDer, mean4.shape);\n    };\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/GatherV2_grad.js\nvar gatherGradConfig = {\n  kernelName: GatherV2,\n  inputsToSave: [\"x\", \"indices\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [x, indices] = saved;\n    const { axis } = attrs;\n    const parsedAxis = parseAxisParam(axis, x.shape)[0];\n    const derX = () => {\n      const paramsShape = x.shape;\n      const indicesSize = indices.size;\n      const outerShape = paramsShape.slice(0, parsedAxis);\n      const outerDims = outerShape.length;\n      const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);\n      const innerDims = innerShape.length;\n      const outerAxesIndices = arrayRange(0, outerDims);\n      const innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);\n      const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);\n      const values = reshape(dy, valuesShape);\n      const reshapedIndices = reshape(indices, [indicesSize]);\n      const transposeDims = arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);\n      const valuesTranspose = transpose(values, transposeDims);\n      let paramsGrad = unsortedSegmentSum(valuesTranspose, reshapedIndices, x.shape[parsedAxis]);\n      const invertTransposeDims = getUndoAxesPermutation(transposeDims);\n      paramsGrad = transpose(paramsGrad, invertTransposeDims);\n      return paramsGrad;\n    };\n    return { x: derX, indices: () => indices };\n  }\n};\nfunction arrayRange(start, stop) {\n  const result = [];\n  for (let i = start; i < stop; ++i) {\n    result.push(i);\n  }\n  return result;\n}\nfunction arrayConcat(arrays) {\n  const result = [];\n  for (let i = 0; i < arrays.length; ++i) {\n    for (let j = 0; j < arrays[i].length; ++j) {\n      result.push(arrays[i][j]);\n    }\n  }\n  return result;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/GreaterEqual_grad.js\nvar greaterEqualGradConfig = {\n  kernelName: GreaterEqual,\n  inputsToSave: [\"a\", \"b\"],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    return { a: () => zerosLike(a), b: () => zerosLike(b) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Identity_grad.js\nvar identityGradConfig = {\n  kernelName: Identity,\n  gradFunc: (dy) => {\n    return { x: () => cast(dy, \"float32\") };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/IsFinite_grad.js\nvar isFiniteGradConfig = {\n  kernelName: IsFinite,\n  gradFunc: (dy) => {\n    return { x: () => zerosLike(dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/IsInf_grad.js\nvar isInfGradConfig = {\n  kernelName: IsInf,\n  gradFunc: (dy) => {\n    return { x: () => zerosLike(dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/IsNan_grad.js\nvar isNanGradConfig = {\n  kernelName: IsNan,\n  gradFunc: (dy) => {\n    return { x: () => zerosLike(dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/LeakyRelu_grad.js\nvar leakyReluGradConfig = {\n  kernelName: LeakyRelu,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const { alpha } = attrs;\n    const mask = greater(x, 0);\n    return { x: () => where(mask, dy, mul(dy, alpha)) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Log1p_grad.js\nvar log1pGradConfig = {\n  kernelName: Log1p,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => div(dy, add2(x, 1)) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Log_grad.js\nvar logGradConfig = {\n  kernelName: Log,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => div(dy, cast(x, \"float32\")) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/LogSoftmax_grad.js\nvar logSoftmaxGradConfig = {\n  kernelName: LogSoftmax,\n  inputsToSave: [],\n  outputsToSave: [true],\n  gradFunc: (dy, saved, attrs) => {\n    const [value] = saved;\n    const { axis } = attrs;\n    return {\n      logits: () => {\n        const keepDims = true;\n        const softmax6 = exp(value);\n        return sub(dy, mul(sum2(dy, axis, keepDims), softmax6));\n      }\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop.js\nfunction localResponseNormalizationBackprop_(x, y, dy, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {\n  const inputs = { x, y, dy };\n  const attrs = { depthRadius, bias, alpha, beta };\n  return ENGINE.runKernel(LRNGrad, inputs, attrs);\n}\nvar localResponseNormalizationBackprop = op({ localResponseNormalizationBackprop_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/LRN_grad.js\nvar lrnGradConfig = {\n  kernelName: LRN,\n  inputsToSave: [\"x\"],\n  outputsToSave: [true],\n  gradFunc: (dy, saved, attrs) => {\n    const [x, y] = saved;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    return {\n      x: () => localResponseNormalizationBackprop(x, y, dy, depthRadius, bias, alpha, beta)\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js\nfunction gradForMinAndMax(dy, y, xOrig, origAxes) {\n  if (y.rank < xOrig.rank) {\n    y = reshape(y, expandShapeToKeepDim(y.shape, origAxes));\n  }\n  if (dy.rank < xOrig.rank) {\n    dy = reshape(dy, expandShapeToKeepDim(dy.shape, origAxes));\n  }\n  return {\n    x: () => {\n      const dx = mul(dy, cast(equal(xOrig, y), dy.dtype));\n      return dx;\n    }\n  };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Max_grad.js\nvar maxGradConfig = {\n  kernelName: Max,\n  inputsToSave: [\"x\"],\n  outputsToSave: [true],\n  gradFunc: (dy, saved, attrs) => {\n    const maxAttrs = attrs;\n    const { reductionIndices } = maxAttrs;\n    const x = saved[0];\n    const y = saved[1];\n    const origAxes = parseAxisParam(reductionIndices, x.shape);\n    const maxGrad = gradForMinAndMax(dy, y, x, origAxes);\n    return {\n      x: () => {\n        return maxGrad[\"x\"]();\n      }\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Maximum_grad.js\nvar maximumGradConfig = {\n  kernelName: Maximum,\n  inputsToSave: [\"a\", \"b\"],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const derA = () => mul(dy, cast(greaterEqual(a, b), \"float32\"));\n    const derB = () => mul(dy, cast(less(a, b), \"float32\"));\n    return { a: derA, b: derB };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d_grad.js\nfunction maxPool3dGrad_(dy, input2, output, filterSize, strides, pad3, dimRoundingMode) {\n  const $dy = convertToTensor(dy, \"dy\", \"maxPool3dGrad\");\n  const $input = convertToTensor(input2, \"input\", \"maxPool3dGrad\");\n  const $output = convertToTensor(output, \"output\", \"maxPool3dGrad\");\n  let dy5D = $dy;\n  let input5D = $input;\n  let output5D = $output;\n  let reshapedTo5D = false;\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n    input5D = reshape($input, [\n      1,\n      $input.shape[0],\n      $input.shape[1],\n      $input.shape[2],\n      $input.shape[3]\n    ]);\n    output5D = reshape($output, [\n      1,\n      $output.shape[0],\n      $output.shape[1],\n      $output.shape[2],\n      $output.shape[3]\n    ]);\n  }\n  assert(dy5D.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${dy5D.rank}.`);\n  assert(input5D.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${input5D.rank}.`);\n  assert(output5D.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${output5D.rank}.`);\n  checkPadOnDimRoundingMode(\"maxPool3dGrad\", pad3, dimRoundingMode);\n  const inputs = { dy: dy5D, input: input5D, output: output5D };\n  const attrs = { filterSize, strides, pad: pad3, dimRoundingMode };\n  const res = ENGINE.runKernel(MaxPool3DGrad, inputs, attrs);\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n  return res;\n}\nvar maxPool3dGrad = op({ maxPool3dGrad_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool3D_grad.js\nvar maxPool3DGradConfig = {\n  kernelName: MaxPool3D,\n  inputsToSave: [\"x\"],\n  outputsToSave: [true],\n  gradFunc: (dy, saved, attrs) => {\n    const [x, y] = saved;\n    const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n    return {\n      x: () => maxPool3dGrad(dy, x, y, filterSize, strides, pad3, dimRoundingMode)\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_grad.js\nfunction maxPoolGrad_(dy, input2, output, filterSize, strides, pad3, dimRoundingMode) {\n  const $dy = convertToTensor(dy, \"dy\", \"maxPoolGrad\");\n  const $input = convertToTensor(input2, \"input\", \"maxPoolGrad\");\n  const $output = convertToTensor(output, \"output\", \"maxPoolGrad\");\n  assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);\n  assert($dy.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${$dy.rank}.`);\n  assert($input.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${$input.rank}.`);\n  checkPadOnDimRoundingMode(\"maxPoolGrad\", pad3, dimRoundingMode);\n  const inputs = { dy: $dy, input: $input, output: $output };\n  const attrs = { filterSize, strides, pad: pad3, dimRoundingMode };\n  return ENGINE.runKernel(MaxPoolGrad, inputs, attrs);\n}\nvar maxPoolGrad = op({ maxPoolGrad_ });\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool_grad.js\nvar maxPoolGradConfig = {\n  kernelName: MaxPool,\n  inputsToSave: [\"x\"],\n  outputsToSave: [true],\n  gradFunc: (dy, saved, attrs) => {\n    const [x, y] = saved;\n    const { filterSize, strides, pad: pad3 } = attrs;\n    return {\n      x: () => maxPoolGrad(dy, x, y, filterSize, strides, pad3)\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Mean_grad.js\nvar meanGradConfig = {\n  kernelName: Mean,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const { axis } = attrs;\n    const axes = parseAxisParam(axis, x.shape);\n    const shapes = computeOutAndReduceShapes(x.shape, axes);\n    const reduceShape = shapes[1];\n    const reduceSize = sizeFromShape(reduceShape);\n    const derX = () => {\n      const expandedDyShape = x.shape.slice();\n      axes.forEach((axis2) => {\n        expandedDyShape[axis2] = 1;\n      });\n      const expandedDy = reshape(dy, expandedDyShape);\n      const res = div(mul(expandedDy, ones2(x.shape, \"float32\")), reduceSize);\n      return res;\n    };\n    return { x: derX };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Min_grad.js\nvar minGradConfig = {\n  kernelName: Min,\n  inputsToSave: [\"x\"],\n  outputsToSave: [true],\n  gradFunc: (dy, saved, attrs) => {\n    const minAttrs = attrs;\n    const { axis } = minAttrs;\n    const [x, y] = saved;\n    const origAxes = parseAxisParam(axis, x.shape);\n    const minGrad = gradForMinAndMax(dy, y, x, origAxes);\n    return {\n      x: () => {\n        return minGrad[\"x\"]();\n      }\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Minimum_grad.js\nvar minimumGradConfig = {\n  kernelName: Minimum,\n  inputsToSave: [\"a\", \"b\"],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const derA = () => mul(dy, cast(lessEqual(a, b), \"float32\"));\n    const derB = () => mul(dy, cast(greater(a, b), \"float32\"));\n    return { a: derA, b: derB };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/MirrorPad_grad.js\nvar mirrorPadGradConfig = {\n  kernelName: MirrorPad,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved, attrs) => {\n    const x = saved[0];\n    const { paddings } = attrs;\n    const begin = paddings.map((p2) => p2[0]);\n    return { x: () => slice(dy, begin, x.shape) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js\nvar modGradConfig = {\n  kernelName: Mod,\n  inputsToSave: [\"a\", \"b\"],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n    const derA = () => {\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum2(dy, reduceAxes), a.shape);\n      }\n      return dy;\n    };\n    const derB = () => {\n      const res = mul(dy, neg(floor(div(a, b))));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum2(res, reduceAxes), b.shape);\n      }\n      return res;\n    };\n    return { a: derA, b: derB };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Multiply_grad.js\nvar multiplyGradConfig = {\n  kernelName: Multiply,\n  inputsToSave: [\"a\", \"b\"],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n    const derA = () => {\n      const res = mul(dy, cast(b, \"float32\"));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum2(res, reduceAxes), a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      const res = mul(dy, cast(a, \"float32\"));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum2(res, reduceAxes), b.shape);\n      }\n      return res;\n    };\n    return { a: derA, b: derB };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Neg_grad.js\nvar negGradConfig = {\n  kernelName: Neg,\n  gradFunc: (dy) => {\n    return { x: () => neg(dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/OneHot_grad.js\nvar oneHotGradConfig = {\n  kernelName: OneHot,\n  inputsToSave: [\"indices\"],\n  gradFunc: (dy, saved) => {\n    const indices = saved[0];\n    return { indices: () => zeros(indices.shape, \"float32\") };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/OnesLike_grad.js\nvar onesLikeGradConfig = {\n  kernelName: OnesLike,\n  gradFunc: (dy) => {\n    return { x: () => zerosLike(dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Pack_grad.js\nvar packGradConfig = {\n  kernelName: Pack,\n  saveAllInputs: true,\n  gradFunc: (dy, saved, attrs) => {\n    const { axis } = attrs;\n    const derTensors = unstack(dy, axis);\n    return derTensors.map((t) => () => t);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/PadV2_grad.js\nvar padV2GradConfig = {\n  kernelName: PadV2,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved, attrs) => {\n    const x = saved[0];\n    const { paddings } = attrs;\n    const begin = paddings.map((p2) => p2[0]);\n    return { x: () => slice(dy, begin, x.shape) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Pow_grad.js\nvar powGradConfig = {\n  kernelName: Pow,\n  inputsToSave: [\"a\", \"b\"],\n  outputsToSave: [true],\n  gradFunc: (dy, saved) => {\n    const [a, b, y] = saved;\n    const base = a;\n    const exp4 = b;\n    const outShape = assertAndGetBroadcastShape(base.shape, exp4.shape);\n    const derBase = () => {\n      const expFloat = cast(exp4, \"float32\");\n      let res = mul(dy, mul(expFloat, pow(base, sub(expFloat, scalar(1)))));\n      const reduceAxes = getReductionAxes(base.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum2(res, reduceAxes);\n      }\n      return reshape(res, base.shape);\n    };\n    const derExp = () => {\n      const condition = greater(base, 0);\n      const logBase = where(condition, log2(base), zerosLike(base));\n      let res = mul(dy, mul(y, logBase));\n      const reduceAxes = getReductionAxes(exp4.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum2(res, reduceAxes);\n      }\n      return reshape(res, exp4.shape);\n    };\n    return { a: derBase, b: derExp };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Prelu_grad.js\nvar preluGradConfig = {\n  kernelName: Prelu,\n  inputsToSave: [\"x\", \"alpha\"],\n  gradFunc: (dy, saved) => {\n    const [x, alpha] = saved;\n    const mask = greater(x, 0);\n    return {\n      x: () => where(mask, dy, mul(dy, alpha)),\n      alpha: () => {\n        let res = where(mask, zerosLike(dy), mul(dy, x));\n        const reduceAxes = getReductionAxes(alpha.shape, dy.shape);\n        if (reduceAxes.length > 0) {\n          res = sum2(res, reduceAxes);\n        }\n        return reshape(res, alpha.shape);\n      }\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/RealDiv_grad.js\nvar divGradConfig = {\n  kernelName: RealDiv,\n  inputsToSave: [\"a\", \"b\"],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n    const derA = () => {\n      const res = div(dy, cast(b, \"float32\"));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum2(res, reduceAxes), a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      let res = mul(dy, cast(a, \"float32\"));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = reshape(sum2(res, reduceAxes), b.shape);\n      }\n      const tmp = square(b);\n      return neg(div(res, cast(tmp, \"float32\")));\n    };\n    return { a: derA, b: derB };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Reciprocal_grad.js\nvar reciprocalGradConfig = {\n  kernelName: Reciprocal,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => div(dy, neg(square(x))) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Relu6_grad.js\nvar relu6GradConfig = {\n  kernelName: Relu6,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    const mask = mul(lessEqual(x, 6), step(x));\n    return { x: () => mul(dy, cast(mask, \"float32\")) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Relu_grad.js\nvar reluGradConfig = {\n  kernelName: Relu,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => mul(dy, cast(step(x), \"float32\")) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Reshape_grad.js\nvar reshapeGradConfig = {\n  kernelName: Reshape,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => reshape(dy, x.shape) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeBilinear_grad.js\nvar resizeBilinearGradConfig = {\n  kernelName: ResizeBilinear,\n  inputsToSave: [\"images\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [images] = saved;\n    const inputs = { dy, images };\n    const imagesDer = () => ENGINE.runKernel(ResizeBilinearGrad, inputs, attrs);\n    return { images: imagesDer };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeNearestNeighbor_grad.js\nvar resizeNearestNeighborGradConfig = {\n  kernelName: ResizeNearestNeighbor,\n  inputsToSave: [\"images\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [images] = saved;\n    const inputs = { dy, images };\n    const imagesDer = () => ENGINE.runKernel(ResizeNearestNeighborGrad, inputs, attrs);\n    return { images: imagesDer };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Reverse_grad.js\nvar reverseGradConfig = {\n  kernelName: Reverse,\n  gradFunc: (dy, saved, attrs) => {\n    const { dims } = attrs;\n    const axes = parseAxisParam(dims, dy.shape);\n    return { x: () => reverse(dy, axes) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Round_grad.js\nvar roundGradConfig = {\n  kernelName: Round,\n  gradFunc: (dy) => {\n    return { x: () => zerosLike(dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Rsqrt_grad.js\nvar rsqrtGradConfig = {\n  kernelName: Rsqrt,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => neg(div(dy, mul(pow(x, 1.5), 2))) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Select_grad.js\nvar selectGradConfig = {\n  kernelName: Select,\n  inputsToSave: [\"condition\"],\n  gradFunc: (dy, saved) => {\n    const [condition] = saved;\n    return {\n      condition: () => cast(zerosLike(condition), \"float32\"),\n      t: () => mul(dy, cast(condition, dy.dtype)),\n      e: () => mul(dy, cast(logicalNot(condition), dy.dtype))\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Selu_grad.js\nvar seluGradConfig = {\n  kernelName: Selu,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return {\n      x: () => {\n        const mask = greater(x, scalar(0));\n        const scaleAlpha2 = scalar(SELU_SCALEALPHA);\n        const scale2 = scalar(SELU_SCALE);\n        const greaterThanZeroDer = mul(dy, scale2);\n        const lessEqualZeroDer = mul(mul(dy, scaleAlpha2), exp(cast(x, \"float32\")));\n        return where(mask, greaterThanZeroDer, lessEqualZeroDer);\n      }\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Sigmoid_grad.js\nvar sigmoidGradConfig = {\n  kernelName: Sigmoid,\n  outputsToSave: [true],\n  gradFunc: (dy, saved) => {\n    const [y] = saved;\n    return { x: () => mul(dy, mul(y, sub(scalar(1), y))) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Sign_grad.js\nvar signGradConfig = {\n  kernelName: Sign,\n  gradFunc: (dy) => {\n    return { x: () => zerosLike(dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Sin_grad.js\nvar sinGradConfig = {\n  kernelName: Sin,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => mul(cos(cast(x, \"float32\")), dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Sinh_grad.js\nvar sinhGradConfig = {\n  kernelName: Sinh,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => mul(cosh(cast(x, \"float32\")), dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Slice_grad.js\nvar sliceGradConfig = {\n  kernelName: Slice,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const { begin, size } = attrs;\n    const inputShape = x.shape;\n    const [begin_, size_] = parseSliceParams(x, begin, size);\n    const paddings = [];\n    for (let i = 0; i < dy.rank; i++) {\n      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n    }\n    return { x: () => pad(dy, paddings) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Softmax_grad.js\nvar softmaxGradConfig = {\n  kernelName: Softmax,\n  outputsToSave: [true],\n  gradFunc: (dy, saved, attrs) => {\n    const [y] = saved;\n    const { dim } = attrs;\n    const keepDims = true;\n    const dyTimesY = mul(dy, y);\n    return {\n      logits: () => sub(dyTimesY, mul(sum2(dyTimesY, [dim], keepDims), y))\n    };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Softplus_grad.js\nvar softplusGradConfig = {\n  kernelName: Softplus,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => mul(dy, sigmoid(x)) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/SpaceToBatchND_grad.js\nvar spaceToBatchNDGradConfig = {\n  kernelName: SpaceToBatchND,\n  gradFunc: (dy, saved, attrs) => {\n    const { blockShape, paddings } = attrs;\n    return { x: () => batchToSpaceND(dy, blockShape, paddings) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/SplitV_grad.js\nvar splitVGradConfig = {\n  kernelName: SplitV,\n  gradFunc: (dy, saved, attrs) => {\n    const { axis } = attrs;\n    return { x: () => concat(dy, axis) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Sqrt_grad.js\nvar sqrtGradConfig = {\n  kernelName: Sqrt,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => div(dy, mul(sqrt(cast(x, \"float32\")), 2)) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Square_grad.js\nvar squareGradConfig = {\n  kernelName: Square,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => mul(dy, mul(cast(x, \"float32\"), 2)) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/SquaredDifference_grad.js\nvar squaredDifferenceGradConfig = {\n  kernelName: SquaredDifference,\n  inputsToSave: [\"a\", \"b\"],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const two = scalar(2);\n    const derA = () => mul(dy, mul(two, sub(a, b)));\n    const derB = () => mul(dy, mul(two, sub(b, a)));\n    return { a: derA, b: derB };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Step_grad.js\nvar stepGradConfig = {\n  kernelName: Step,\n  gradFunc: (dy) => {\n    return { x: () => zerosLike(dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Sub_grad.js\nvar subGradConfig = {\n  kernelName: Sub,\n  inputsToSave: [\"a\", \"b\"],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n    const derA = () => {\n      let res = dy;\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum2(res, reduceAxes);\n      }\n      return reshape(res, a.shape);\n    };\n    const derB = () => {\n      let res = dy;\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum2(res, reduceAxes);\n      }\n      return reshape(neg(res), b.shape);\n    };\n    return { a: derA, b: derB };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Sum_grad.js\nvar sumGradConfig = {\n  kernelName: Sum,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const expandedDyShape = x.shape.slice();\n    const { axis } = attrs;\n    const axes = parseAxisParam(axis, x.shape);\n    axes.forEach((axis2) => {\n      expandedDyShape[axis2] = 1;\n    });\n    const expandedDy = reshape(dy, expandedDyShape);\n    const derX = mul(expandedDy, ones2(x.shape, \"float32\"));\n    return { x: () => derX };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Tan_grad.js\nvar tanGradConfig = {\n  kernelName: Tan,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved) => {\n    const [x] = saved;\n    return { x: () => div(dy, square(cos(x))) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Tanh_grad.js\nvar tanhGradConfig = {\n  kernelName: Tanh,\n  outputsToSave: [true],\n  gradFunc: (dy, saved) => {\n    const [y] = saved;\n    return { x: () => mul(sub(scalar(1), square(y)), dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Tile_grad.js\nvar tileGradConfig = {\n  kernelName: Tile,\n  inputsToSave: [\"x\"],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const { reps } = attrs;\n    const derX = () => {\n      let xGrad = zerosLike(x);\n      if (x.rank === 1) {\n        for (let i = 0; i < reps[0]; ++i) {\n          xGrad = add2(xGrad, slice(dy, [i * x.shape[0]], [x.shape[0]]));\n        }\n      } else if (x.rank === 2) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            xGrad = add2(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1]], [\n              x.shape[0],\n              x.shape[1]\n            ]));\n          }\n        }\n      } else if (x.rank === 3) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              xGrad = add2(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));\n            }\n          }\n        }\n      } else if (x.rank === 4) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              for (let l = 0; l < reps[3]; ++l) {\n                xGrad = add2(xGrad, slice(dy, [\n                  i * x.shape[0],\n                  j * x.shape[1],\n                  k * x.shape[2],\n                  l * x.shape[3]\n                ], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));\n              }\n            }\n          }\n        }\n      } else {\n        throw new Error(`Gradient for tile operation is not implemented for rank-${x.rank} tensors yet.`);\n      }\n      return xGrad;\n    };\n    return { x: derX };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Transpose_grad.js\nvar transposeGradConfig = {\n  kernelName: Transpose,\n  gradFunc: (dy, saved, attrs) => {\n    const transposeAttrs = attrs;\n    const { perm } = transposeAttrs;\n    const undoPerm = getUndoAxesPermutation(perm);\n    return { x: () => transpose(dy, undoPerm) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/Unpack_grad.js\nvar unpackGradConfig = {\n  kernelName: Unpack,\n  gradFunc: (dy, saved, attrs) => {\n    const unpackAttrs = attrs;\n    const { axis } = unpackAttrs;\n    return { value: () => stack(dy, axis) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/UnsortedSegmentSum_grad.js\nvar unsortedSegmentSumGradConfig = {\n  kernelName: UnsortedSegmentSum,\n  inputsToSave: [\"segmentIds\"],\n  gradFunc: (dy, saved) => {\n    const [segmentIds] = saved;\n    const derX = () => {\n      return gatherDropNegatives(dy, segmentIds);\n    };\n    return { x: derX };\n  }\n};\nfunction gatherDropNegatives(x, indices) {\n  const zeroClippedIndices = maximum(indices, zerosLike(indices));\n  const gathered = gather(x, zeroClippedIndices);\n  let isPositive = greaterEqual(indices, scalar(0, \"int32\"));\n  const numIters = gathered.rank - isPositive.rank;\n  for (let i = 0; i < numIters; ++i) {\n    isPositive = expandDims(isPositive, i + 1);\n  }\n  isPositive = logicalAnd(isPositive, ones2(gathered.shape, \"bool\"));\n  const zeroSlice = zerosLike(gathered);\n  return where(isPositive, gathered, zeroSlice);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/gradients/ZerosLike_grad.js\nvar zerosLikeGradConfig = {\n  kernelName: ZerosLike,\n  gradFunc: (dy) => {\n    return { x: () => zerosLike(dy) };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/register_all_gradients.js\nvar gradConfigs = [\n  absGradConfig,\n  acosGradConfig,\n  acoshGradConfig,\n  addGradConfig,\n  addNGradConfig,\n  argMaxGradConfig,\n  argMinGradConfig,\n  asinGradConfig,\n  asinhGradConfig,\n  atan2GradConfig,\n  atanGradConfig,\n  atanhGradConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulGradConfig,\n  batchToSpaceNDGradConfig,\n  broadcastToGradConfig,\n  castGradConfig,\n  ceilGradConfig,\n  clipByValueGradConfig,\n  complexAbsGradConfig,\n  concatGradConfig,\n  conv2DBackpropInputGradConfig,\n  conv2DGradConfig,\n  conv3DGradConfig,\n  cosGradConfig,\n  coshGradConfig,\n  cumsumGradConfig,\n  depthwiseConv2dNativeGradConfig,\n  dilation2dGradConfig,\n  divGradConfig,\n  eluGradConfig,\n  erfGradConfig,\n  expGradConfig,\n  expandDimsGradConfig,\n  expm1GradConfig,\n  floorDivGradConfig,\n  floorGradConfig,\n  fusedBatchNormGradConfig,\n  gatherGradConfig,\n  greaterEqualGradConfig,\n  identityGradConfig,\n  isFiniteGradConfig,\n  isInfGradConfig,\n  isNanGradConfig,\n  leakyReluGradConfig,\n  log1pGradConfig,\n  logGradConfig,\n  logSoftmaxGradConfig,\n  lrnGradConfig,\n  maxGradConfig,\n  maxGradConfig,\n  maximumGradConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  meanGradConfig,\n  minGradConfig,\n  minimumGradConfig,\n  mirrorPadGradConfig,\n  modGradConfig,\n  multiplyGradConfig,\n  negGradConfig,\n  oneHotGradConfig,\n  onesLikeGradConfig,\n  packGradConfig,\n  padV2GradConfig,\n  padV2GradConfig,\n  powGradConfig,\n  preluGradConfig,\n  reciprocalGradConfig,\n  relu6GradConfig,\n  reluGradConfig,\n  reshapeGradConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborGradConfig,\n  reverseGradConfig,\n  roundGradConfig,\n  rsqrtGradConfig,\n  selectGradConfig,\n  seluGradConfig,\n  sigmoidGradConfig,\n  signGradConfig,\n  sinGradConfig,\n  sinhGradConfig,\n  sliceGradConfig,\n  softmaxGradConfig,\n  softplusGradConfig,\n  spaceToBatchNDGradConfig,\n  spaceToBatchNDGradConfig,\n  splitVGradConfig,\n  splitVGradConfig,\n  sqrtGradConfig,\n  squaredDifferenceGradConfig,\n  squareGradConfig,\n  stepGradConfig,\n  subGradConfig,\n  sumGradConfig,\n  tanGradConfig,\n  tanhGradConfig,\n  tileGradConfig,\n  transposeGradConfig,\n  unpackGradConfig,\n  unsortedSegmentSumGradConfig,\n  zerosLikeGradConfig\n];\nfor (const gradientConfig of gradConfigs) {\n  registerGradient(gradientConfig);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/abs.js\ngetGlobalTensorClass().prototype.abs = function() {\n  this.throwIfDisposed();\n  return abs(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acos.js\ngetGlobalTensorClass().prototype.acos = function() {\n  this.throwIfDisposed();\n  return acos(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acosh.js\ngetGlobalTensorClass().prototype.acosh = function() {\n  this.throwIfDisposed();\n  return acosh(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add.js\ngetGlobalTensorClass().prototype.add = function(b) {\n  this.throwIfDisposed();\n  return add2(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/all.js\ngetGlobalTensorClass().prototype.all = function(axis, keepDims) {\n  this.throwIfDisposed();\n  return all(this, axis, keepDims);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/any.js\ngetGlobalTensorClass().prototype.any = function(axis, keepDims) {\n  this.throwIfDisposed();\n  return any(this, axis, keepDims);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_max.js\ngetGlobalTensorClass().prototype.argMax = function(axis) {\n  this.throwIfDisposed();\n  return argMax(this, axis);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_min.js\ngetGlobalTensorClass().prototype.argMin = function(axis) {\n  this.throwIfDisposed();\n  return argMin(this, axis);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_scalar.js\ngetGlobalTensorClass().prototype.asScalar = function() {\n  this.throwIfDisposed();\n  assert(this.size === 1, () => \"The array must have only 1 element.\");\n  return reshape(this, []);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_type.js\ngetGlobalTensorClass().prototype.asType = function(dtype) {\n  this.throwIfDisposed();\n  return cast(this, dtype);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as1d.js\ngetGlobalTensorClass().prototype.as1D = function() {\n  this.throwIfDisposed();\n  return reshape(this, [this.size]);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as2d.js\ngetGlobalTensorClass().prototype.as2D = function(rows, columns) {\n  this.throwIfDisposed();\n  return reshape(this, [rows, columns]);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as3d.js\ngetGlobalTensorClass().prototype.as3D = function(rows, columns, depth) {\n  this.throwIfDisposed();\n  return reshape(this, [rows, columns, depth]);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as4d.js\ngetGlobalTensorClass().prototype.as4D = function(rows, columns, depth, depth2) {\n  this.throwIfDisposed();\n  return reshape(this, [rows, columns, depth, depth2]);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as5d.js\ngetGlobalTensorClass().prototype.as5D = function(rows, columns, depth, depth2, depth3) {\n  this.throwIfDisposed();\n  return reshape(this, [rows, columns, depth, depth2, depth3]);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asin.js\ngetGlobalTensorClass().prototype.asin = function() {\n  this.throwIfDisposed();\n  return asin(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asinh.js\ngetGlobalTensorClass().prototype.asinh = function() {\n  this.throwIfDisposed();\n  return asinh(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan.js\ngetGlobalTensorClass().prototype.atan = function() {\n  this.throwIfDisposed();\n  return atan(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan2.js\ngetGlobalTensorClass().prototype.atan2 = function(b) {\n  this.throwIfDisposed();\n  return atan2(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atanh.js\ngetGlobalTensorClass().prototype.atanh = function() {\n  this.throwIfDisposed();\n  return atanh(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/avg_pool.js\ngetGlobalTensorClass().prototype.avgPool = function(filterSize, strides, pad3, dimRoundingMode) {\n  this.throwIfDisposed();\n  return avgPool(this, filterSize, strides, pad3, dimRoundingMode);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batch_to_space_nd.js\ngetGlobalTensorClass().prototype.batchToSpaceND = function(blockShape, crops) {\n  this.throwIfDisposed();\n  return batchToSpaceND(this, blockShape, crops);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batchnorm.js\ngetGlobalTensorClass().prototype.batchNorm = function(mean4, variance, offset, scale2, varianceEpsilon) {\n  this.throwIfDisposed();\n  return batchNorm(this, mean4, variance, offset, scale2, varianceEpsilon);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/broadcast_to.js\ngetGlobalTensorClass().prototype.broadcastTo = function(shape) {\n  this.throwIfDisposed();\n  return broadcastTo(this, shape);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cast.js\ngetGlobalTensorClass().prototype.cast = function(dtype) {\n  this.throwIfDisposed();\n  return cast(this, dtype);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ceil.js\ngetGlobalTensorClass().prototype.ceil = function() {\n  this.throwIfDisposed();\n  return ceil(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/clip_by_value.js\ngetGlobalTensorClass().prototype.clipByValue = function(min6, max6) {\n  this.throwIfDisposed();\n  return clipByValue(this, min6, max6);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/concat.js\ngetGlobalTensorClass().prototype.concat = function(x, axis) {\n  this.throwIfDisposed();\n  if (x instanceof Tensor) {\n    x = [x];\n  }\n  return concat([this, ...x], axis);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv1d.js\ngetGlobalTensorClass().prototype.conv1d = function(filter, stride, pad3, dataFormat, dilation, dimRoundingMode) {\n  this.throwIfDisposed();\n  return conv1d(this, filter, stride, pad3, dataFormat, dilation, dimRoundingMode);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d_transpose.js\ngetGlobalTensorClass().prototype.conv2dTranspose = function(filter, outputShape, strides, pad3, dimRoundingMode) {\n  this.throwIfDisposed();\n  return conv2dTranspose(this, filter, outputShape, strides, pad3, dimRoundingMode);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d.js\ngetGlobalTensorClass().prototype.conv2d = function(filter, strides, pad3, dataFormat, dilations, dimRoundingMode) {\n  this.throwIfDisposed();\n  return conv2d(this, filter, strides, pad3, dataFormat, dilations, dimRoundingMode);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cos.js\ngetGlobalTensorClass().prototype.cos = function() {\n  this.throwIfDisposed();\n  return cos(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cosh.js\ngetGlobalTensorClass().prototype.cosh = function() {\n  this.throwIfDisposed();\n  return cosh(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumsum.js\ngetGlobalTensorClass().prototype.cumsum = function(axis, exclusive, reverse5) {\n  this.throwIfDisposed();\n  return cumsum(this, axis, exclusive, reverse5);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depth_to_space.js\ngetGlobalTensorClass().prototype.depthToSpace = function(blockSize, dataFormat) {\n  this.throwIfDisposed();\n  return depthToSpace(this, blockSize, dataFormat);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2d.js\ngetGlobalTensorClass().prototype.depthwiseConv2d = function(filter, strides, pad3, dataFormat, dilations, dimRoundingMode) {\n  this.throwIfDisposed();\n  return depthwiseConv2d(this, filter, strides, pad3, dataFormat, dilations, dimRoundingMode);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dilation2d.js\ngetGlobalTensorClass().prototype.dilation2d = function(filter, strides, pad3, dilations, dataFormat) {\n  this.throwIfDisposed();\n  return dilation2d(this, filter, strides, pad3, dilations, dataFormat);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_no_nan.js\ngetGlobalTensorClass().prototype.divNoNan = function(b) {\n  this.throwIfDisposed();\n  return divNoNan(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div.js\ngetGlobalTensorClass().prototype.div = function(b) {\n  this.throwIfDisposed();\n  return div(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dot.js\ngetGlobalTensorClass().prototype.dot = function(b) {\n  this.throwIfDisposed();\n  return dot(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/elu.js\ngetGlobalTensorClass().prototype.elu = function() {\n  this.throwIfDisposed();\n  return elu(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal.js\ngetGlobalTensorClass().prototype.equal = function(b) {\n  this.throwIfDisposed();\n  return equal(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/erf.js\ngetGlobalTensorClass().prototype.erf = function() {\n  this.throwIfDisposed();\n  return erf(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/exp.js\ngetGlobalTensorClass().prototype.exp = function() {\n  this.throwIfDisposed();\n  return exp(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expand_dims.js\ngetGlobalTensorClass().prototype.expandDims = function(axis) {\n  this.throwIfDisposed();\n  return expandDims(this, axis);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expm1.js\ngetGlobalTensorClass().prototype.expm1 = function() {\n  this.throwIfDisposed();\n  return expm1(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/fft.js\ngetGlobalTensorClass().prototype.fft = function() {\n  this.throwIfDisposed();\n  return fft(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/flatten.js\ngetGlobalTensorClass().prototype.flatten = function() {\n  this.throwIfDisposed();\n  return reshape(this, [this.size]);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floor.js\ngetGlobalTensorClass().prototype.floor = function() {\n  this.throwIfDisposed();\n  return floor(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floorDiv.js\ngetGlobalTensorClass().prototype.floorDiv = function(b) {\n  this.throwIfDisposed();\n  return floorDiv(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/gather.js\ngetGlobalTensorClass().prototype.gather = function(indices, axis) {\n  this.throwIfDisposed();\n  return gather(this, indices, axis);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal.js\ngetGlobalTensorClass().prototype.greaterEqual = function(b) {\n  this.throwIfDisposed();\n  return greaterEqual(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater.js\ngetGlobalTensorClass().prototype.greater = function(b) {\n  this.throwIfDisposed();\n  return greater(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ifft.js\ngetGlobalTensorClass().prototype.ifft = function() {\n  this.throwIfDisposed();\n  return ifft(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/irfft.js\ngetGlobalTensorClass().prototype.irfft = function() {\n  this.throwIfDisposed();\n  return irfft(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_finite.js\ngetGlobalTensorClass().prototype.isFinite = function() {\n  this.throwIfDisposed();\n  return isFinite2(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_inf.js\ngetGlobalTensorClass().prototype.isInf = function() {\n  this.throwIfDisposed();\n  return isInf(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_nan.js\ngetGlobalTensorClass().prototype.isNaN = function() {\n  this.throwIfDisposed();\n  return isNaN2(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/leaky_relu.js\ngetGlobalTensorClass().prototype.leakyRelu = function(alpha) {\n  this.throwIfDisposed();\n  return leakyRelu(this, alpha);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal.js\ngetGlobalTensorClass().prototype.lessEqual = function(b) {\n  this.throwIfDisposed();\n  return lessEqual(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less.js\ngetGlobalTensorClass().prototype.less = function(b) {\n  this.throwIfDisposed();\n  return less(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/local_response_normalization.js\ngetGlobalTensorClass().prototype.localResponseNormalization = function(depthRadius, bias, alpha, beta) {\n  this.throwIfDisposed();\n  return localResponseNormalization(this, depthRadius, bias, alpha, beta);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sigmoid.js\ngetGlobalTensorClass().prototype.logSigmoid = function() {\n  this.throwIfDisposed();\n  return logSigmoid(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_softmax.js\ngetGlobalTensorClass().prototype.logSoftmax = function(axis) {\n  this.throwIfDisposed();\n  return logSoftmax(this, axis);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sum_exp.js\ngetGlobalTensorClass().prototype.logSumExp = function(axis, keepDims) {\n  this.throwIfDisposed();\n  return logSumExp(this, axis, keepDims);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log.js\ngetGlobalTensorClass().prototype.log = function() {\n  this.throwIfDisposed();\n  return log2(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log1p.js\ngetGlobalTensorClass().prototype.log1p = function() {\n  this.throwIfDisposed();\n  return log1p(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_and.js\ngetGlobalTensorClass().prototype.logicalAnd = function(b) {\n  this.throwIfDisposed();\n  return logicalAnd(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_not.js\ngetGlobalTensorClass().prototype.logicalNot = function() {\n  this.throwIfDisposed();\n  return logicalNot(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_or.js\ngetGlobalTensorClass().prototype.logicalOr = function(b) {\n  this.throwIfDisposed();\n  return logicalOr(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_xor.js\ngetGlobalTensorClass().prototype.logicalXor = function(b) {\n  this.throwIfDisposed();\n  return logicalXor(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul.js\ngetGlobalTensorClass().prototype.matMul = function(b, transposeA, transposeB) {\n  this.throwIfDisposed();\n  return matMul(this, b, transposeA, transposeB);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max_pool.js\ngetGlobalTensorClass().prototype.maxPool = function(filterSize, strides, pad3, dimRoundingMode) {\n  this.throwIfDisposed();\n  return maxPool(this, filterSize, strides, pad3, dimRoundingMode);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max.js\ngetGlobalTensorClass().prototype.max = function(axis, keepDims) {\n  this.throwIfDisposed();\n  return max(this, axis, keepDims);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum.js\ngetGlobalTensorClass().prototype.maximum = function(b) {\n  this.throwIfDisposed();\n  return maximum(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mean.js\ngetGlobalTensorClass().prototype.mean = function(axis, keepDims) {\n  this.throwIfDisposed();\n  return mean(this, axis, keepDims);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/min.js\ngetGlobalTensorClass().prototype.min = function(axis, keepDims) {\n  this.throwIfDisposed();\n  return min(this, axis, keepDims);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum.js\ngetGlobalTensorClass().prototype.minimum = function(b) {\n  this.throwIfDisposed();\n  return minimum(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mirror_pad.js\ngetGlobalTensorClass().prototype.mirrorPad = function(paddings, mode) {\n  this.throwIfDisposed();\n  return mirrorPad(this, paddings, mode);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod.js\ngetGlobalTensorClass().prototype.mod = function(b) {\n  this.throwIfDisposed();\n  return mod(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul.js\ngetGlobalTensorClass().prototype.mul = function(b) {\n  this.throwIfDisposed();\n  return mul(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/neg.js\ngetGlobalTensorClass().prototype.neg = function() {\n  this.throwIfDisposed();\n  return neg(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/norm.js\ngetGlobalTensorClass().prototype.norm = function(ord, axis, keepDims) {\n  this.throwIfDisposed();\n  return norm(this, ord, axis, keepDims);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal.js\ngetGlobalTensorClass().prototype.notEqual = function(b) {\n  this.throwIfDisposed();\n  return notEqual(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/one_hot.js\ngetGlobalTensorClass().prototype.oneHot = function(depth, onValue = 1, offValue = 0) {\n  this.throwIfDisposed();\n  return oneHot(this, depth, onValue, offValue);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ones_like.js\ngetGlobalTensorClass().prototype.onesLike = function() {\n  this.throwIfDisposed();\n  return onesLike(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pad.js\ngetGlobalTensorClass().prototype.pad = function(paddings, constantValue) {\n  this.throwIfDisposed();\n  return pad(this, paddings, constantValue);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pool.js\ngetGlobalTensorClass().prototype.pool = function(windowShape, poolingType, padding, dilationRate, strides, dimRoundingMode) {\n  this.throwIfDisposed();\n  return pool(this, windowShape, poolingType, padding, dilationRate, strides, dimRoundingMode);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow.js\ngetGlobalTensorClass().prototype.pow = function(exp4) {\n  this.throwIfDisposed();\n  return pow(this, exp4);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prelu.js\ngetGlobalTensorClass().prototype.prelu = function(alpha) {\n  this.throwIfDisposed();\n  return prelu(this, alpha);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prod.js\ngetGlobalTensorClass().prototype.prod = function(axis, keepDims) {\n  this.throwIfDisposed();\n  return prod(this, axis, keepDims);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reciprocal.js\ngetGlobalTensorClass().prototype.reciprocal = function() {\n  this.throwIfDisposed();\n  return reciprocal(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu.js\ngetGlobalTensorClass().prototype.relu = function() {\n  this.throwIfDisposed();\n  return relu(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu6.js\ngetGlobalTensorClass().prototype.relu6 = function() {\n  this.throwIfDisposed();\n  return relu6(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape_as.js\ngetGlobalTensorClass().prototype.reshapeAs = function(x) {\n  this.throwIfDisposed();\n  return reshape(this, x.shape);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape.js\ngetGlobalTensorClass().prototype.reshape = function(shape) {\n  this.throwIfDisposed();\n  return reshape(this, shape);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_bilinear.js\ngetGlobalTensorClass().prototype.resizeBilinear = function(newShape2D, alignCorners, halfPixelCenters) {\n  this.throwIfDisposed();\n  return resizeBilinear(this, newShape2D, alignCorners, halfPixelCenters);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_nearest_neighbor.js\ngetGlobalTensorClass().prototype.resizeNearestNeighbor = function(newShape2D, alignCorners, halfFloatCenters) {\n  this.throwIfDisposed();\n  return resizeNearestNeighbor(this, newShape2D, alignCorners, halfFloatCenters);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reverse.js\ngetGlobalTensorClass().prototype.reverse = function(axis) {\n  this.throwIfDisposed();\n  return reverse(this, axis);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rfft.js\ngetGlobalTensorClass().prototype.rfft = function() {\n  this.throwIfDisposed();\n  return rfft(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/round.js\ngetGlobalTensorClass().prototype.round = function() {\n  this.throwIfDisposed();\n  return round2(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rsqrt.js\ngetGlobalTensorClass().prototype.rsqrt = function() {\n  this.throwIfDisposed();\n  return rsqrt(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/selu.js\ngetGlobalTensorClass().prototype.selu = function() {\n  this.throwIfDisposed();\n  return selu(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/separable_conv2d.js\ngetGlobalTensorClass().prototype.separableConv2d = function(depthwiseFilter, pointwiseFilter, strides, pad3, dilation, dataFormat) {\n  this.throwIfDisposed();\n  return separableConv2d(this, depthwiseFilter, pointwiseFilter, strides, pad3, dilation, dataFormat);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sigmoid.js\ngetGlobalTensorClass().prototype.sigmoid = function() {\n  this.throwIfDisposed();\n  return sigmoid(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sign.js\ngetGlobalTensorClass().prototype.sign = function() {\n  this.throwIfDisposed();\n  return sign(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sin.js\ngetGlobalTensorClass().prototype.sin = function() {\n  this.throwIfDisposed();\n  return sin(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sinh.js\ngetGlobalTensorClass().prototype.sinh = function() {\n  this.throwIfDisposed();\n  return sinh(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/slice.js\ngetGlobalTensorClass().prototype.slice = function(begin, size) {\n  this.throwIfDisposed();\n  return slice(this, begin, size);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softmax.js\ngetGlobalTensorClass().prototype.softmax = function(dim) {\n  this.throwIfDisposed();\n  return softmax(this, dim);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softplus.js\ngetGlobalTensorClass().prototype.softplus = function() {\n  this.throwIfDisposed();\n  return softplus(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/space_to_batch_nd.js\ngetGlobalTensorClass().prototype.spaceToBatchND = function(blockShape, paddings) {\n  this.throwIfDisposed();\n  return spaceToBatchND(this, blockShape, paddings);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/split.js\ngetGlobalTensorClass().prototype.split = function(numOrSizeSplits, axis) {\n  this.throwIfDisposed();\n  return split(this, numOrSizeSplits, axis);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sqrt.js\ngetGlobalTensorClass().prototype.sqrt = function() {\n  this.throwIfDisposed();\n  return sqrt(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/square.js\ngetGlobalTensorClass().prototype.square = function() {\n  this.throwIfDisposed();\n  return square(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference.js\ngetGlobalTensorClass().prototype.squaredDifference = function(b) {\n  this.throwIfDisposed();\n  return squaredDifference(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squeeze.js\ngetGlobalTensorClass().prototype.squeeze = function(axis) {\n  this.throwIfDisposed();\n  return squeeze(this, axis);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/stack.js\ngetGlobalTensorClass().prototype.stack = function(x, axis) {\n  this.throwIfDisposed();\n  const tensorsToBeStacked = x instanceof Tensor ? [this, x] : [this, ...x];\n  return stack(tensorsToBeStacked, axis);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/step.js\ngetGlobalTensorClass().prototype.step = function(alpha) {\n  this.throwIfDisposed();\n  return step(this, alpha);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/strided_slice.js\ngetGlobalTensorClass().prototype.stridedSlice = function(begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {\n  this.throwIfDisposed();\n  return stridedSlice(this, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub.js\ngetGlobalTensorClass().prototype.sub = function(b) {\n  this.throwIfDisposed();\n  return sub(this, b);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sum.js\ngetGlobalTensorClass().prototype.sum = function(axis, keepDims) {\n  this.throwIfDisposed();\n  return sum2(this, axis, keepDims);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tan.js\ngetGlobalTensorClass().prototype.tan = function() {\n  this.throwIfDisposed();\n  return tan(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tanh.js\ngetGlobalTensorClass().prototype.tanh = function() {\n  this.throwIfDisposed();\n  return tanh2(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tile.js\ngetGlobalTensorClass().prototype.tile = function(reps) {\n  this.throwIfDisposed();\n  return tile(this, reps);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_bool.js\ngetGlobalTensorClass().prototype.toBool = function() {\n  this.throwIfDisposed();\n  return cast(this, \"bool\");\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_float.js\ngetGlobalTensorClass().prototype.toFloat = function() {\n  this.throwIfDisposed();\n  return cast(this, \"float32\");\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_int.js\ngetGlobalTensorClass().prototype.toInt = function() {\n  this.throwIfDisposed();\n  return cast(this, \"int32\");\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/topk.js\ngetGlobalTensorClass().prototype.topk = function(k, sorted) {\n  this.throwIfDisposed();\n  return topk(this, k, sorted);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/transpose.js\ngetGlobalTensorClass().prototype.transpose = function(perm) {\n  this.throwIfDisposed();\n  return transpose(this, perm);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unique.js\ngetGlobalTensorClass().prototype.unique = function(axis) {\n  this.throwIfDisposed();\n  return unique(this, axis);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unsorted_segment_sum.js\ngetGlobalTensorClass().prototype.unsortedSegmentSum = function(segmentIds, numSegments) {\n  this.throwIfDisposed();\n  return unsortedSegmentSum(this, segmentIds, numSegments);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unstack.js\ngetGlobalTensorClass().prototype.unstack = function(axis) {\n  this.throwIfDisposed();\n  return unstack(this, axis);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/where.js\ngetGlobalTensorClass().prototype.where = function(condition, x) {\n  this.throwIfDisposed();\n  return where(condition, this, x);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/zeros_like.js\ngetGlobalTensorClass().prototype.zerosLike = function() {\n  this.throwIfDisposed();\n  return zerosLike(this);\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/exports_constraints.js\nvar exports_constraints_exports = {};\n__export(exports_constraints_exports, {\n  maxNorm: () => maxNorm,\n  minMaxNorm: () => minMaxNorm,\n  nonNeg: () => nonNeg,\n  unitNorm: () => unitNorm\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/backend/common.js\nvar _epsilon;\nfunction epsilon() {\n  if (_epsilon == null) {\n    _epsilon = backend().epsilon();\n  }\n  return _epsilon;\n}\nfunction imageDataFormat() {\n  return \"channelsLast\";\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/errors.js\nvar AttributeError = class extends Error {\n  constructor(message) {\n    super(message);\n    Object.setPrototypeOf(this, AttributeError.prototype);\n  }\n};\nvar RuntimeError = class extends Error {\n  constructor(message) {\n    super(message);\n    Object.setPrototypeOf(this, RuntimeError.prototype);\n  }\n};\nvar ValueError = class extends Error {\n  constructor(message) {\n    super(message);\n    Object.setPrototypeOf(this, ValueError.prototype);\n  }\n};\nvar NotImplementedError = class extends Error {\n  constructor(message) {\n    super(message);\n    Object.setPrototypeOf(this, NotImplementedError.prototype);\n  }\n};\nvar AssertionError = class extends Error {\n  constructor(message) {\n    super(message);\n    Object.setPrototypeOf(this, AssertionError.prototype);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\nfunction pyListRepeat(value, numValues) {\n  if (Array.isArray(value)) {\n    let newArray = [];\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\nfunction assert2(val, message) {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\nfunction count(array2, refernce) {\n  let counter = 0;\n  for (const item of array2) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n  return counter;\n}\nfunction singletonOrArray(xs) {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  return xs;\n}\nfunction toList(x) {\n  if (Array.isArray(x)) {\n    return x;\n  }\n  return [x];\n}\nfunction toSnakeCase(name) {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, \"$1_$2\");\n  const insecure = intermediate.replace(/([a-z])([A-Z])/g, \"$1_$2\").toLowerCase();\n  if (insecure[0] !== \"_\") {\n    return insecure;\n  }\n  return \"private\" + insecure;\n}\nfunction toCamelCase(identifier) {\n  if (identifier.length <= 1) {\n    return identifier;\n  }\n  if (identifier.indexOf(\"_\") === -1) {\n    return identifier;\n  }\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\nvar _GLOBAL_CUSTOM_OBJECTS = {};\nfunction serializeKerasObject(instance) {\n  if (instance === null || instance === void 0) {\n    return null;\n  }\n  const dict = {};\n  dict[\"className\"] = instance.getClassName();\n  dict[\"config\"] = instance.getConfig();\n  return dict;\n}\nfunction convertNDArrayScalarsInConfig(config) {\n  if (config == null || typeof config !== \"object\") {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach((configItem) => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n    for (const field of fields) {\n      const value = config[field];\n      if (value != null && typeof value === \"object\") {\n        if (!Array.isArray(value) && value[\"type\"] === \"ndarray\" && typeof value[\"value\"] === \"number\") {\n          config[field] = value[\"value\"];\n        } else {\n          convertNDArrayScalarsInConfig(value);\n        }\n      }\n    }\n  }\n}\nfunction deserializeKerasObject(identifier, moduleObjects = {}, customObjects = {}, printableModuleName = \"object\", fastWeightInit = false) {\n  if (typeof identifier === \"string\") {\n    const functionName = identifier;\n    let fn;\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n      if (fn == null) {\n        throw new ValueError(`Unknown ${printableModuleName}: ${identifier}. This may be due to one of the following reasons:\n1. The ${printableModuleName} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${printableModuleName} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);\n      }\n    }\n    return fn;\n  } else {\n    const config = identifier;\n    if (config[\"className\"] == null || config[\"config\"] == null) {\n      throw new ValueError(`${printableModuleName}: Improper config format: ${JSON.stringify(config)}.\n'className' and 'config' must set.`);\n    }\n    const className = config[\"className\"];\n    let cls, fromConfig;\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS[\"className\"];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n    if (cls == null) {\n      throw new ValueError(`Unknown ${printableModuleName}: ${className}. This may be due to one of the following reasons:\n1. The ${printableModuleName} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${printableModuleName} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);\n    }\n    if (fromConfig != null) {\n      const customObjectsCombined = {};\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      }\n      const nestedConfig = config[\"config\"];\n      nestedConfig[\"customObjects\"] = customObjectsCombined;\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      convertNDArrayScalarsInConfig(config[\"config\"]);\n      const returnObj = fromConfig(cls, config[\"config\"], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    } else {\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      const returnObj = new cls(config[\"config\"]);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    }\n  }\n}\nfunction numberCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\nfunction reverseNumberCompare(a, b) {\n  return -1 * numberCompare(a, b);\n}\nfunction unique2(xs) {\n  if (xs == null) {\n    return xs;\n  }\n  const out = [];\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n  return out;\n}\nfunction isObjectEmpty(obj) {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction checkStringTypeUnionValue(values, label, value) {\n  if (value == null) {\n    return;\n  }\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${values} or null/undefined.`);\n  }\n}\nfunction checkArrayTypeAndLength(x, expectedType, minLength = 0, maxLength = Infinity) {\n  assert2(minLength >= 0);\n  assert2(maxLength >= minLength);\n  return Array.isArray(x) && x.length >= minLength && x.length <= maxLength && x.every((e) => typeof e === expectedType);\n}\nfunction assertPositiveInteger(value, name) {\n  if (Array.isArray(value)) {\n    util_exports.assert(value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach((v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util_exports.assert(Number.isInteger(value) && value > 0, () => `Expected ${name} to be a positive integer, but got ${formatAsFriendlyString(value)}.`);\n  }\n}\nfunction formatAsFriendlyString(value) {\n  if (value === null) {\n    return \"null\";\n  } else if (Array.isArray(value)) {\n    return \"[\" + value.map((v) => formatAsFriendlyString(v)).join(\",\") + \"]\";\n  } else if (typeof value === \"string\") {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\nfunction debounce(f, waitMs, nowFunc) {\n  let lastTime = nowFunc != null ? nowFunc() : util_exports.now();\n  let lastResult;\n  const f2 = (...args) => {\n    const now2 = nowFunc != null ? nowFunc() : util_exports.now();\n    if (now2 - lastTime < waitMs) {\n      return lastResult;\n    }\n    lastTime = now2;\n    lastResult = f(...args);\n    return lastResult;\n  };\n  return f2;\n}\nfunction mapActivationToFusedKernel(activationName) {\n  if (activationName === \"relu\") {\n    return \"relu\";\n  }\n  if (activationName === \"linear\") {\n    return \"linear\";\n  }\n  if (activationName === \"elu\") {\n    return \"elu\";\n  }\n  return null;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/constraints.js\nfunction calcL2Norms(w, axis) {\n  return tidy(() => sqrt(sum2(mul(w, w), axis, true)));\n}\nvar Constraint = class extends serialization_exports.Serializable {\n  getConfig() {\n    return {};\n  }\n};\nvar MaxNorm = class extends Constraint {\n  constructor(args) {\n    super();\n    this.defaultMaxValue = 2;\n    this.defaultAxis = 0;\n    this.maxValue = args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n  apply(w) {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = clipByValue(norms, 0, this.maxValue);\n      return mul(w, div(desired, add2(epsilon(), norms)));\n    });\n  }\n  getConfig() {\n    return { maxValue: this.maxValue, axis: this.axis };\n  }\n};\nMaxNorm.className = \"MaxNorm\";\nserialization_exports.registerClass(MaxNorm);\nvar UnitNorm = class extends Constraint {\n  constructor(args) {\n    super();\n    this.defaultAxis = 0;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n  apply(w) {\n    return tidy(() => div(w, add2(epsilon(), calcL2Norms(w, this.axis))));\n  }\n  getConfig() {\n    return { axis: this.axis };\n  }\n};\nUnitNorm.className = \"UnitNorm\";\nserialization_exports.registerClass(UnitNorm);\nvar NonNeg = class extends Constraint {\n  apply(w) {\n    return relu(w);\n  }\n};\nNonNeg.className = \"NonNeg\";\nserialization_exports.registerClass(NonNeg);\nvar MinMaxNorm = class extends Constraint {\n  constructor(args) {\n    super();\n    this.defaultMinValue = 0;\n    this.defaultMaxValue = 1;\n    this.defaultRate = 1;\n    this.defaultAxis = 0;\n    this.minValue = args.minValue != null ? args.minValue : this.defaultMinValue;\n    this.maxValue = args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.rate = args.rate != null ? args.rate : this.defaultRate;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n  apply(w) {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = add2(mul(this.rate, clipByValue(norms, this.minValue, this.maxValue)), mul(1 - this.rate, norms));\n      return mul(w, div(desired, add2(epsilon(), norms)));\n    });\n  }\n  getConfig() {\n    return {\n      minValue: this.minValue,\n      maxValue: this.maxValue,\n      rate: this.rate,\n      axis: this.axis\n    };\n  }\n};\nMinMaxNorm.className = \"MinMaxNorm\";\nserialization_exports.registerClass(MinMaxNorm);\nvar CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  \"maxNorm\": \"MaxNorm\",\n  \"minMaxNorm\": \"MinMaxNorm\",\n  \"nonNeg\": \"NonNeg\",\n  \"unitNorm\": \"UnitNorm\"\n};\nfunction serializeConstraint(constraint) {\n  return serializeKerasObject(constraint);\n}\nfunction deserializeConstraint(config, customObjects = {}) {\n  return deserializeKerasObject(config, serialization_exports.SerializationMap.getMap().classNameMap, customObjects, \"constraint\");\n}\nfunction getConstraint(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === \"string\") {\n    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    const config = { className, config: {} };\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/exports_constraints.js\nfunction maxNorm(args) {\n  return new MaxNorm(args);\n}\nfunction unitNorm(args) {\n  return new UnitNorm(args);\n}\nfunction nonNeg() {\n  return new NonNeg();\n}\nfunction minMaxNorm(config) {\n  return new MinMaxNorm(config);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/exports_initializers.js\nvar exports_initializers_exports = {};\n__export(exports_initializers_exports, {\n  constant: () => constant,\n  glorotNormal: () => glorotNormal,\n  glorotUniform: () => glorotUniform,\n  heNormal: () => heNormal,\n  heUniform: () => heUniform,\n  identity: () => identity,\n  leCunNormal: () => leCunNormal,\n  leCunUniform: () => leCunUniform,\n  ones: () => ones3,\n  orthogonal: () => orthogonal,\n  randomNormal: () => randomNormal3,\n  randomUniform: () => randomUniform2,\n  truncatedNormal: () => truncatedNormal2,\n  varianceScaling: () => varianceScaling,\n  zeros: () => zeros2\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/keras_format/common.js\nvar VALID_DATA_FORMAT_VALUES = [\"channelsFirst\", \"channelsLast\"];\nvar VALID_INTERPOLATION_FORMAT_VALUES = [\"nearest\", \"bilinear\"];\nvar VALID_PADDING_MODE_VALUES = [\"valid\", \"same\", \"causal\"];\nvar VALID_POOL_MODE_VALUES = [\"max\", \"avg\"];\nvar VALID_BIDIRECTIONAL_MERGE_MODES = [\"sum\", \"mul\", \"concat\", \"ave\"];\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/common.js\nvar nameMap = /* @__PURE__ */ new Map();\nfunction checkDataFormat(value) {\n  checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES, \"DataFormat\", value);\n}\nfunction checkInterpolationFormat(value) {\n  checkStringTypeUnionValue(VALID_INTERPOLATION_FORMAT_VALUES, \"InterpolationFormat\", value);\n}\nfunction checkPaddingMode(value) {\n  checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES, \"PaddingMode\", value);\n}\nfunction checkPoolMode(value) {\n  checkStringTypeUnionValue(VALID_POOL_MODE_VALUES, \"PoolMode\", value);\n}\nvar _nameScopeStack = [];\nvar _nameScopeDivider = \"/\";\nfunction nameScope(name, fn) {\n  _nameScopeStack.push(name);\n  try {\n    const val = fn();\n    _nameScopeStack.pop();\n    return val;\n  } catch (e) {\n    _nameScopeStack.pop();\n    throw e;\n  }\n}\nfunction currentNameScopePrefix() {\n  if (_nameScopeStack.length === 0) {\n    return \"\";\n  } else {\n    return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;\n  }\n}\nfunction getScopedTensorName(tensorName) {\n  if (!isValidTensorName(tensorName)) {\n    throw new Error(\"Not a valid tensor name: '\" + tensorName + \"'\");\n  }\n  return currentNameScopePrefix() + tensorName;\n}\nfunction getUniqueTensorName(scopedName) {\n  if (!isValidTensorName(scopedName)) {\n    throw new Error(\"Not a valid tensor name: '\" + scopedName + \"'\");\n  }\n  if (!nameMap.has(scopedName)) {\n    nameMap.set(scopedName, 0);\n  }\n  const index = nameMap.get(scopedName);\n  nameMap.set(scopedName, nameMap.get(scopedName) + 1);\n  if (index > 0) {\n    const result = `${scopedName}_${index}`;\n    nameMap.set(result, 1);\n    return result;\n  } else {\n    return scopedName;\n  }\n}\nvar tensorNameRegex = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\\._\\/]*$/);\nfunction isValidTensorName(name) {\n  return !!name.match(tensorNameRegex);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js\nfunction isInteger(x) {\n  return x === parseInt(x.toString(), 10);\n}\nfunction arrayProd(array2, begin, end) {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array2.length;\n  }\n  let prod5 = 1;\n  for (let i = begin; i < end; ++i) {\n    prod5 *= array2[i];\n  }\n  return prod5;\n}\nfunction min2(array2) {\n  if (array2.length === 0) {\n    return Number.NaN;\n  }\n  let min6 = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < array2.length; i++) {\n    const value = array2[i];\n    if (value < min6) {\n      min6 = value;\n    }\n  }\n  return min6;\n}\nfunction max2(array2) {\n  if (array2.length === 0) {\n    return Number.NaN;\n  }\n  let max6 = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < array2.length; i++) {\n    const value = array2[i];\n    if (value > max6) {\n      max6 = value;\n    }\n  }\n  return max6;\n}\nfunction range2(begin, end) {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\nfunction cast2(x, dtype) {\n  return cast(x, dtype);\n}\nfunction expandDims2(x, axis = -1) {\n  const outShape = x.shape.slice();\n  if (axis < 0) {\n    axis = outShape.length + axis + 1;\n  }\n  outShape.splice(axis, 0, 1);\n  return reshape(x, outShape);\n}\nfunction repeat(x, n) {\n  return tidy(() => {\n    if (x.shape.length !== 2) {\n      throw new ValueError(`repeat() expects a rank-2 tensor, but received a rank-${x.shape.length} tensor.`);\n    }\n    const y = expandDims2(x, 1);\n    return tile2(y, [1, n, 1]);\n  });\n}\nfunction flatten2(x) {\n  const newShape = [arrayProd(x.shape)];\n  return reshape(x, newShape);\n}\nfunction batchFlatten(x) {\n  if (x.rank <= 1) {\n    throw new ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);\n  }\n  const newShape = [x.shape[0], arrayProd(x.shape, 1)];\n  return reshape(x, newShape);\n}\nfunction sliceAlongFirstAxis(array2, start, size) {\n  return tidy(() => {\n    switch (array2.rank) {\n      case 1:\n        return slice1d(array2, start, size);\n      case 2:\n        return slice2d(array2, [start, 0], [size, array2.shape[1]]);\n      case 3:\n        return slice3d(array2, [start, 0, 0], [size, array2.shape[1], array2.shape[2]]);\n      case 4:\n        return slice4d(array2, [start, 0, 0, 0], [size, array2.shape[1], array2.shape[2], array2.shape[3]]);\n      case 5:\n        return slice(array2, [start, 0, 0, 0, 0], [\n          size,\n          array2.shape[1],\n          array2.shape[2],\n          array2.shape[3],\n          array2.shape[4]\n        ]);\n      case 6:\n        return slice(array2, [start, 0, 0, 0, 0, 0], [\n          size,\n          array2.shape[1],\n          array2.shape[2],\n          array2.shape[3],\n          array2.shape[4],\n          array2.shape[5]\n        ]);\n      default:\n        throw new ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ${array2.rank}`);\n    }\n  });\n}\nfunction sliceAlongLastAxis(array2, start, size) {\n  return tidy(() => {\n    switch (array2.rank) {\n      case 1:\n        return slice1d(array2, start, size);\n      case 2:\n        return slice2d(array2, [0, start], [array2.shape[0], size]);\n      case 3:\n        return slice3d(array2, [0, 0, start], [array2.shape[0], array2.shape[1], size]);\n      case 4:\n        return slice4d(array2, [0, 0, 0, start], [array2.shape[0], array2.shape[1], array2.shape[2], size]);\n      default:\n        throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ${array2.rank}`);\n    }\n  });\n}\nfunction sliceAlongAxis(array2, start, size, axis) {\n  return tidy(() => {\n    switch (array2.rank) {\n      case 1:\n        return slice1d(array2, start, size);\n      case 2:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array2, start, size);\n          case 2:\n            return sliceAlongLastAxis(array2, start, size);\n          default:\n            throw new ValueError(`The axis is not within the rank of the tensor ${axis}`);\n        }\n      case 3:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array2, start, size);\n          case 2:\n            return slice3d(array2, [0, start, 0], [array2.shape[0], size, array2.shape[2]]);\n          case 3:\n            return sliceAlongLastAxis(array2, start, size);\n          default:\n            throw new ValueError(`The axis is not within the rank of the tensor ${axis}`);\n        }\n      case 4:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array2, start, size);\n          case 2:\n            return slice4d(array2, [0, start, 0, 0], [array2.shape[0], size, array2.shape[2], array2.shape[3]]);\n          case 3:\n            return slice4d(array2, [0, 0, start, 0], [array2.shape[0], array2.shape[1], size, array2.shape[3]]);\n          case 4:\n            return sliceAlongLastAxis(array2, start, size);\n          default:\n            throw new ValueError(`The axis is not within the rank of the tensor ${axis}`);\n        }\n      default:\n        throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ${array2.rank}`);\n    }\n  });\n}\nfunction concatenate(tensors, axis = -1) {\n  let rank;\n  if (axis < 0) {\n    rank = tensors[0].rank;\n    if (rank !== 0) {\n      axis = rank;\n    } else {\n      axis = 0;\n    }\n  }\n  if (axis === tensors[0].rank) {\n    axis = -1;\n  }\n  return concat(tensors, axis);\n}\nfunction concatAlongFirstAxis(a, b) {\n  switch (a.rank) {\n    case 1:\n      return concat1d([a, b]);\n    case 2:\n      return concat2d([a, b], 0);\n    case 3:\n      return concat3d([a, b], 0);\n    case 4:\n      return concat4d([a, b], 0);\n    default:\n      throw new ValueError(`concatAlongFirstAxis() received an unsupported tensor rank: ${a.rank}`);\n  }\n}\nfunction tile2(x, n) {\n  if (!Array.isArray(n)) {\n    n = [n];\n  }\n  if (x.rank !== n.length) {\n    throw new ValueError(`The length of input n (${n.length}) does not match the number of dimensions in input x (${x.rank})`);\n  }\n  return tile(x, n);\n}\nfunction randomNormal2(shape, mean4 = 0, stddev = 1, dtype, seed) {\n  return randomNormal(shape, mean4, stddev, dtype, seed);\n}\nfunction dot2(a, b, activation2, bias) {\n  if (a.rank < 2 || b.rank < 2) {\n    throw new NotImplementedError(`dot requires both inputs to be rank >= 2 but got x shape = ${a.shape} and y shape = ${b.shape}`);\n  }\n  if (b.rank >= 3) {\n    const xLastDim = a.shape.slice(-1)[0];\n    const ySecondLastDim = b.shape.slice(-2)[0];\n    if (xLastDim !== ySecondLastDim) {\n      throw new NotImplementedError(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${a.shape} and  y shape = ${b.shape}`);\n    }\n  }\n  if (a.rank === 2 && b.rank === 2) {\n    const transposeA = false;\n    const transposeB = false;\n    return fused_ops_exports.matMul({\n      a,\n      b,\n      transposeA,\n      transposeB,\n      bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n      activation: activation2\n    });\n  } else {\n    const aFirstDims = a.shape.slice();\n    const aLastDim = aFirstDims.pop();\n    a = reshape(a, [-1, aLastDim]);\n    const bShape = b.shape.slice();\n    const bLastDim = bShape.pop();\n    const ySecondLastDim = bShape.pop();\n    const yOtherDims = [...bShape, bLastDim];\n    const perm = Array.from({ length: b.rank }, (_, i) => {\n      if (i === 0) {\n        return b.rank - 2;\n      } else if (i <= b.rank - 2) {\n        return i - 1;\n      }\n      return i;\n    });\n    b = reshape(transpose(b, perm), [ySecondLastDim, -1]);\n    const outputShape = [...aFirstDims, ...yOtherDims];\n    const transposeA = false;\n    const transposeB = false;\n    return reshape(fused_ops_exports.matMul({\n      a,\n      b,\n      transposeA,\n      transposeB,\n      bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n      activation: activation2\n    }), outputShape);\n  }\n}\nfunction gather2(reference, indices, axis) {\n  return tidy(() => {\n    if (Array.isArray(indices)) {\n      indices = tensor1d(indices, \"int32\");\n    } else {\n      indices = cast(indices, \"int32\");\n    }\n    return gather(reference, indices, axis);\n  });\n}\nfunction square2(x) {\n  return mul(x, x);\n}\nfunction reshapeBias(xRank, bias, dataFormat) {\n  const biasShape = bias.shape;\n  if (bias.rank !== 1 && bias.rank !== xRank) {\n    throw new ValueError(`Unexpected bias dimensions: ${bias.rank}; expected it to be 1 or ${xRank}`);\n  }\n  if (xRank === 5) {\n    if (dataFormat === \"channelsFirst\") {\n      if (biasShape.length === 1) {\n        return reshape(bias, [1, biasShape[0], 1, 1, 1]);\n      } else {\n        return reshape(bias, [1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]);\n      }\n    } else if (dataFormat === \"channelsLast\") {\n      if (biasShape.length === 1) {\n        return reshape(bias, [1, 1, 1, 1, biasShape[0]]);\n      } else {\n        return reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank === 4) {\n    if (dataFormat === \"channelsFirst\") {\n      if (biasShape.length === 1) {\n        return reshape(bias, [1, biasShape[0], 1, 1]);\n      } else {\n        return reshape(bias, [1, biasShape[2], biasShape[0], biasShape[1]]);\n      }\n    } else if (dataFormat === \"channelsLast\") {\n      if (biasShape.length === 1) {\n        return reshape(bias, [1, 1, 1, biasShape[0]]);\n      } else {\n        return reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank === 3) {\n    if (dataFormat === \"channelsFirst\") {\n      if (biasShape.length === 1) {\n        return reshape(bias, [1, biasShape[0], 1]);\n      } else {\n        return reshape(bias, [1, biasShape[1], biasShape[0]]);\n      }\n    } else if (dataFormat === \"channelsLast\") {\n      if (biasShape.length === 1) {\n        return reshape(bias, [1, 1, biasShape[0]]);\n      } else {\n        return reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank < 3) {\n    return bias;\n  }\n  throw new ValueError(`Unsupported input rank by biasAdd: ${bias.rank}`);\n}\nfunction biasAdd(x, bias, dataFormat) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    return add2(x, reshapeBias(x.rank, bias, dataFormat));\n  });\n}\nfunction elu2(x, alpha = 1) {\n  if (alpha !== 1) {\n    throw new NotImplementedError(`Support for alpha values other than 1 (${alpha}) is not implemented yet.`);\n  }\n  return elu(x);\n}\nfunction softsign(x) {\n  return tidy(() => div(x, add2(abs(x), 1)));\n}\nfunction dropout2(x, level, noiseShape, seed) {\n  return tidy(() => dropout(x, level, noiseShape, seed));\n}\nfunction hardSigmoid(x) {\n  return tidy(() => {\n    const y = add2(0.5, mul(0.2, x));\n    return clipByValue(y, 0, 1);\n  });\n}\nfunction inTrainPhase(x, alt, training = false) {\n  return training ? x() : alt();\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/keras_format/initializer_config.js\nvar VALID_FAN_MODE_VALUES = [\"fanIn\", \"fanOut\", \"fanAvg\"];\nvar VALID_DISTRIBUTION_VALUES = [\"normal\", \"uniform\", \"truncatedNormal\"];\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/initializers.js\nfunction checkFanMode(value) {\n  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, \"FanMode\", value);\n}\nfunction checkDistribution(value) {\n  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, \"Distribution\", value);\n}\nvar Initializer = class extends serialization_exports.Serializable {\n  fromConfigUsesCustomObjects() {\n    return false;\n  }\n  getConfig() {\n    return {};\n  }\n};\nvar Zeros = class extends Initializer {\n  apply(shape, dtype) {\n    return zeros(shape, dtype);\n  }\n};\nZeros.className = \"Zeros\";\nserialization_exports.registerClass(Zeros);\nvar Ones = class extends Initializer {\n  apply(shape, dtype) {\n    return ones2(shape, dtype);\n  }\n};\nOnes.className = \"Ones\";\nserialization_exports.registerClass(Ones);\nvar Constant = class extends Initializer {\n  constructor(args) {\n    super();\n    if (typeof args !== \"object\") {\n      throw new ValueError(`Expected argument of type ConstantConfig but got ${args}`);\n    }\n    if (args.value === void 0) {\n      throw new ValueError(`config must have value set but got ${args}`);\n    }\n    this.value = args.value;\n  }\n  apply(shape, dtype) {\n    return tidy(() => mul(scalar(this.value), ones2(shape, dtype)));\n  }\n  getConfig() {\n    return {\n      value: this.value\n    };\n  }\n};\nConstant.className = \"Constant\";\nserialization_exports.registerClass(Constant);\nvar RandomUniform = class extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_MINVAL = -0.05;\n    this.DEFAULT_MAXVAL = 0.05;\n    this.minval = args.minval || this.DEFAULT_MINVAL;\n    this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n    this.seed = args.seed;\n  }\n  apply(shape, dtype) {\n    return randomUniform(shape, this.minval, this.maxval, dtype);\n  }\n  getConfig() {\n    return { minval: this.minval, maxval: this.maxval, seed: this.seed };\n  }\n};\nRandomUniform.className = \"RandomUniform\";\nserialization_exports.registerClass(RandomUniform);\nvar RandomNormal = class extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_MEAN = 0;\n    this.DEFAULT_STDDEV = 0.05;\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n  apply(shape, dtype) {\n    dtype = dtype || \"float32\";\n    if (dtype !== \"float32\" && dtype !== \"int32\") {\n      throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n    }\n    return randomNormal2(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n  getConfig() {\n    return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n  }\n};\nRandomNormal.className = \"RandomNormal\";\nserialization_exports.registerClass(RandomNormal);\nvar TruncatedNormal = class extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_MEAN = 0;\n    this.DEFAULT_STDDEV = 0.05;\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n  apply(shape, dtype) {\n    dtype = dtype || \"float32\";\n    if (dtype !== \"float32\" && dtype !== \"int32\") {\n      throw new NotImplementedError(`truncatedNormal does not support dType ${dtype}.`);\n    }\n    return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n  getConfig() {\n    return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n  }\n};\nTruncatedNormal.className = \"TruncatedNormal\";\nserialization_exports.registerClass(TruncatedNormal);\nvar Identity2 = class extends Initializer {\n  constructor(args) {\n    super();\n    this.gain = args.gain != null ? args.gain : 1;\n  }\n  apply(shape, dtype) {\n    return tidy(() => {\n      if (shape.length !== 2 || shape[0] !== shape[1]) {\n        throw new ValueError(\"Identity matrix initializer can only be used for 2D square matrices.\");\n      } else {\n        return mul(this.gain, eye(shape[0]));\n      }\n    });\n  }\n  getConfig() {\n    return { gain: this.gain };\n  }\n};\nIdentity2.className = \"Identity\";\nserialization_exports.registerClass(Identity2);\nfunction computeFans(shape, dataFormat = \"channelsLast\") {\n  let fanIn;\n  let fanOut;\n  checkDataFormat(dataFormat);\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === \"channelsFirst\") {\n      const receptiveFieldSize = arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === \"channelsLast\") {\n      const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n      fanIn = shape[shape.length - 2] * receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * receptiveFieldSize;\n    }\n  } else {\n    const shapeProd = arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n  return [fanIn, fanOut];\n}\nvar VarianceScaling = class extends Initializer {\n  constructor(args) {\n    super();\n    if (args.scale < 0) {\n      throw new ValueError(`scale must be a positive float. Got: ${args.scale}`);\n    }\n    this.scale = args.scale == null ? 1 : args.scale;\n    this.mode = args.mode == null ? \"fanIn\" : args.mode;\n    checkFanMode(this.mode);\n    this.distribution = args.distribution == null ? \"normal\" : args.distribution;\n    checkDistribution(this.distribution);\n    this.seed = args.seed;\n  }\n  apply(shape, dtype) {\n    const fans = computeFans(shape);\n    const fanIn = fans[0];\n    const fanOut = fans[1];\n    let scale2 = this.scale;\n    if (this.mode === \"fanIn\") {\n      scale2 /= Math.max(1, fanIn);\n    } else if (this.mode === \"fanOut\") {\n      scale2 /= Math.max(1, fanOut);\n    } else {\n      scale2 /= Math.max(1, (fanIn + fanOut) / 2);\n    }\n    if (this.distribution === \"normal\") {\n      const stddev = Math.sqrt(scale2);\n      dtype = dtype || \"float32\";\n      if (dtype !== \"float32\" && dtype !== \"int32\") {\n        throw new NotImplementedError(`${this.getClassName()} does not support dType ${dtype}.`);\n      }\n      return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n    } else {\n      const limit = Math.sqrt(3 * scale2);\n      return randomUniform(shape, -limit, limit, dtype);\n    }\n  }\n  getConfig() {\n    return {\n      scale: this.scale,\n      mode: this.mode,\n      distribution: this.distribution,\n      seed: this.seed\n    };\n  }\n};\nVarianceScaling.className = \"VarianceScaling\";\nserialization_exports.registerClass(VarianceScaling);\nvar GlorotUniform = class extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 1,\n      mode: \"fanAvg\",\n      distribution: \"uniform\",\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    return VarianceScaling.className;\n  }\n};\nGlorotUniform.className = \"GlorotUniform\";\nserialization_exports.registerClass(GlorotUniform);\nvar GlorotNormal = class extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 1,\n      mode: \"fanAvg\",\n      distribution: \"normal\",\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    return VarianceScaling.className;\n  }\n};\nGlorotNormal.className = \"GlorotNormal\";\nserialization_exports.registerClass(GlorotNormal);\nvar HeNormal = class extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 2,\n      mode: \"fanIn\",\n      distribution: \"normal\",\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    return VarianceScaling.className;\n  }\n};\nHeNormal.className = \"HeNormal\";\nserialization_exports.registerClass(HeNormal);\nvar HeUniform = class extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 2,\n      mode: \"fanIn\",\n      distribution: \"uniform\",\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    return VarianceScaling.className;\n  }\n};\nHeUniform.className = \"HeUniform\";\nserialization_exports.registerClass(HeUniform);\nvar LeCunNormal = class extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 1,\n      mode: \"fanIn\",\n      distribution: \"normal\",\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    return VarianceScaling.className;\n  }\n};\nLeCunNormal.className = \"LeCunNormal\";\nserialization_exports.registerClass(LeCunNormal);\nvar LeCunUniform = class extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 1,\n      mode: \"fanIn\",\n      distribution: \"uniform\",\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    return VarianceScaling.className;\n  }\n};\nLeCunUniform.className = \"LeCunNormal\";\nserialization_exports.registerClass(LeCunUniform);\nvar Orthogonal = class extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_GAIN = 1;\n    this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n    this.seed = args.seed;\n    if (this.seed != null) {\n      throw new NotImplementedError(\"Random seed is not implemented for Orthogonal Initializer yet.\");\n    }\n  }\n  apply(shape, dtype) {\n    return tidy(() => {\n      if (shape.length < 2) {\n        throw new NotImplementedError(\"Shape must be at least 2D.\");\n      }\n      if (shape[0] * shape[1] > 2e3) {\n        console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${shape[0] * shape[1]}) elements: Slowness may result.`);\n      }\n      const normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n      const a = randomNormal2(normalizedShape, 0, 1, \"float32\");\n      let q = linalg.gramSchmidt(a);\n      if (shape[0] > shape[1]) {\n        q = transpose(q);\n      }\n      return mul(this.gain, q);\n    });\n  }\n  getConfig() {\n    return {\n      gain: this.gain,\n      seed: this.seed\n    };\n  }\n};\nOrthogonal.className = \"Orthogonal\";\nserialization_exports.registerClass(Orthogonal);\nvar INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  \"constant\": \"Constant\",\n  \"glorotNormal\": \"GlorotNormal\",\n  \"glorotUniform\": \"GlorotUniform\",\n  \"heNormal\": \"HeNormal\",\n  \"heUniform\": \"HeUniform\",\n  \"identity\": \"Identity\",\n  \"leCunNormal\": \"LeCunNormal\",\n  \"leCunUniform\": \"LeCunUniform\",\n  \"ones\": \"Ones\",\n  \"orthogonal\": \"Orthogonal\",\n  \"randomNormal\": \"RandomNormal\",\n  \"randomUniform\": \"RandomUniform\",\n  \"truncatedNormal\": \"TruncatedNormal\",\n  \"varianceScaling\": \"VarianceScaling\",\n  \"zeros\": \"Zeros\"\n};\nfunction deserializeInitializer(config, customObjects = {}) {\n  return deserializeKerasObject(config, serialization_exports.SerializationMap.getMap().classNameMap, customObjects, \"initializer\");\n}\nfunction serializeInitializer(initializer) {\n  return serializeKerasObject(initializer);\n}\nfunction getInitializer(identifier) {\n  if (typeof identifier === \"string\") {\n    const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    if (className === \"GlorotNormal\") {\n      return new GlorotNormal();\n    } else if (className === \"GlorotUniform\") {\n      return new GlorotUniform();\n    } else if (className === \"HeNormal\") {\n      return new HeNormal();\n    } else if (className === \"HeUniform\") {\n      return new HeUniform();\n    } else if (className === \"LeCunNormal\") {\n      return new LeCunNormal();\n    } else if (className === \"LeCunUniform\") {\n      return new LeCunUniform();\n    } else {\n      const config = {};\n      config[\"className\"] = className;\n      config[\"config\"] = {};\n      return deserializeInitializer(config);\n    }\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/exports_initializers.js\nfunction zeros2() {\n  return new Zeros();\n}\nfunction ones3() {\n  return new Ones();\n}\nfunction constant(args) {\n  return new Constant(args);\n}\nfunction randomUniform2(args) {\n  return new RandomUniform(args);\n}\nfunction randomNormal3(args) {\n  return new RandomNormal(args);\n}\nfunction truncatedNormal2(args) {\n  return new TruncatedNormal(args);\n}\nfunction identity(args) {\n  return new Identity2(args);\n}\nfunction varianceScaling(config) {\n  return new VarianceScaling(config);\n}\nfunction glorotUniform(args) {\n  return new GlorotUniform(args);\n}\nfunction glorotNormal(args) {\n  return new GlorotNormal(args);\n}\nfunction heNormal(args) {\n  return new HeNormal(args);\n}\nfunction heUniform(args) {\n  return new HeUniform(args);\n}\nfunction leCunNormal(args) {\n  return new LeCunNormal(args);\n}\nfunction leCunUniform(args) {\n  return new LeCunUniform(args);\n}\nfunction orthogonal(args) {\n  return new Orthogonal(args);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js\nvar exports_layers_exports = {};\n__export(exports_layers_exports, {\n  Layer: () => Layer,\n  RNN: () => RNN,\n  RNNCell: () => RNNCell,\n  activation: () => activation,\n  add: () => add3,\n  alphaDropout: () => alphaDropout,\n  average: () => average,\n  averagePooling1d: () => averagePooling1d,\n  averagePooling2d: () => averagePooling2d,\n  averagePooling3d: () => averagePooling3d,\n  avgPool1d: () => avgPool1d,\n  avgPool2d: () => avgPool2d,\n  avgPool3d: () => avgPool3d2,\n  avgPooling1d: () => avgPooling1d,\n  avgPooling2d: () => avgPooling2d,\n  avgPooling3d: () => avgPooling3d,\n  batchNormalization: () => batchNormalization2,\n  bidirectional: () => bidirectional,\n  concatenate: () => concatenate2,\n  conv1d: () => conv1d2,\n  conv2d: () => conv2d3,\n  conv2dTranspose: () => conv2dTranspose2,\n  conv3d: () => conv3d2,\n  conv3dTranspose: () => conv3dTranspose2,\n  convLstm2d: () => convLstm2d,\n  convLstm2dCell: () => convLstm2dCell,\n  cropping2D: () => cropping2D,\n  dense: () => dense,\n  depthwiseConv2d: () => depthwiseConv2d4,\n  dot: () => dot3,\n  dropout: () => dropout3,\n  elu: () => elu3,\n  embedding: () => embedding,\n  flatten: () => flatten3,\n  gaussianDropout: () => gaussianDropout,\n  gaussianNoise: () => gaussianNoise,\n  globalAveragePooling1d: () => globalAveragePooling1d,\n  globalAveragePooling2d: () => globalAveragePooling2d,\n  globalMaxPool1d: () => globalMaxPool1d,\n  globalMaxPool2d: () => globalMaxPool2d,\n  globalMaxPooling1d: () => globalMaxPooling1d,\n  globalMaxPooling2d: () => globalMaxPooling2d,\n  gru: () => gru,\n  gruCell: () => gruCell,\n  input: () => input,\n  inputLayer: () => inputLayer,\n  layerNormalization: () => layerNormalization,\n  leakyReLU: () => leakyReLU,\n  lstm: () => lstm,\n  lstmCell: () => lstmCell,\n  masking: () => masking,\n  maxPool1d: () => maxPool1d,\n  maxPool2d: () => maxPool2d,\n  maxPooling1d: () => maxPooling1d,\n  maxPooling2d: () => maxPooling2d,\n  maxPooling3d: () => maxPooling3d,\n  maximum: () => maximum2,\n  minimum: () => minimum2,\n  multiply: () => multiply,\n  permute: () => permute,\n  prelu: () => prelu2,\n  reLU: () => reLU,\n  repeatVector: () => repeatVector,\n  reshape: () => reshape2,\n  rnn: () => rnn2,\n  separableConv2d: () => separableConv2d2,\n  simpleRNN: () => simpleRNN,\n  simpleRNNCell: () => simpleRNNCell,\n  softmax: () => softmax2,\n  spatialDropout1d: () => spatialDropout1d,\n  stackedRNNCells: () => stackedRNNCells,\n  thresholdedReLU: () => thresholdedReLU,\n  timeDistributed: () => timeDistributed,\n  upSampling2d: () => upSampling2d,\n  zeroPadding2d: () => zeroPadding2d\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/backend/state.js\nvar _nextUniqueTensorId = 0;\nfunction getNextUniqueTensorId() {\n  return _nextUniqueTensorId++;\n}\nvar _uidPrefixes = {};\nfunction getUid(prefix = \"\") {\n  if (!(prefix in _uidPrefixes)) {\n    _uidPrefixes[prefix] = 0;\n  }\n  _uidPrefixes[prefix] += 1;\n  return prefix + _uidPrefixes[prefix].toString();\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/utils/types_utils.js\nfunction isArrayOfShapes(x) {\n  return Array.isArray(x) && Array.isArray(x[0]);\n}\nfunction normalizeShapeList(x) {\n  if (x.length === 0) {\n    return [];\n  }\n  if (!Array.isArray(x[0])) {\n    return [x];\n  }\n  return x;\n}\nfunction getExactlyOneTensor(xs) {\n  let x;\n  if (Array.isArray(xs)) {\n    if (xs.length !== 1) {\n      throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n    }\n    x = xs[0];\n  } else {\n    x = xs;\n  }\n  return x;\n}\nfunction getExactlyOneShape(shapes) {\n  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n    if (shapes.length === 1) {\n      shapes = shapes;\n      return shapes[0];\n    } else {\n      throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n    }\n  } else {\n    return shapes;\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/utils/variable_utils.js\nfunction countParamsInWeights(weights) {\n  let count2 = 0;\n  for (const weight of weights) {\n    if (weight.shape.length === 0) {\n      count2 += 1;\n    } else {\n      count2 += weight.shape.reduce((a, b) => a * b);\n    }\n  }\n  return count2;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/variables.js\nvar DEFAULT_VARIABLE_NAME_PREFIX = \"Variable\";\nvar LayerVariable = class {\n  constructor(val, dtype = \"float32\", name = DEFAULT_VARIABLE_NAME_PREFIX, trainable = true, constraint = null) {\n    this.dtype = dtype == null ? \"float32\" : dtype;\n    this.shape = val.shape;\n    this.id = getNextUniqueTensorId();\n    name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;\n    this.originalName = getScopedTensorName(name);\n    this.name = getUniqueTensorName(this.originalName);\n    this.trainable_ = trainable;\n    this.constraint = constraint;\n    this.val = variable(val, this.trainable_, this.name, this.dtype);\n  }\n  read() {\n    this.assertNotDisposed();\n    return this.val;\n  }\n  write(newVal) {\n    this.assertNotDisposed();\n    checkShapesMatch(this.val, newVal);\n    if (this.val.id !== newVal.id) {\n      this.val.assign(newVal);\n      if (this.constraint != null) {\n        this.val.assign(this.constraint.apply(this.val));\n      }\n    }\n    return this;\n  }\n  dispose() {\n    this.assertNotDisposed();\n    this.val.dispose();\n  }\n  assertNotDisposed() {\n    if (this.val.isDisposed) {\n      throw new Error(`LayersVariable ${this.name} is already disposed.`);\n    }\n  }\n  get trainable() {\n    return this.trainable_;\n  }\n  set trainable(trainable) {\n    this.trainable_ = trainable;\n    this.val.trainable = trainable;\n  }\n};\nfunction checkShapesMatch(x, y) {\n  if (x.shape.toString() !== y.shape.toString()) {\n    throw new Error(\"Shape mismatch: \" + JSON.stringify(x.shape) + \" vs. \" + JSON.stringify(y.shape));\n  }\n}\nfunction batchGetValue(xs) {\n  return xs.map((x) => x.read());\n}\nfunction batchSetValue(variablesAndValues) {\n  variablesAndValues.forEach((variableAndValue) => {\n    const variable2 = variableAndValue[0];\n    variable2.write(variableAndValue[1]);\n  });\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\nvar InputSpec = class {\n  constructor(args) {\n    this.dtype = args.dtype;\n    this.shape = args.shape;\n    if (args.shape != null) {\n      this.ndim = args.shape.length;\n    } else {\n      this.ndim = args.ndim;\n    }\n    this.maxNDim = args.maxNDim;\n    this.minNDim = args.minNDim;\n    this.axes = args.axes || {};\n  }\n};\nvar SymbolicTensor = class {\n  constructor(dtype, shape, sourceLayer, inputs, callArgs, name, outputTensorIndex) {\n    this.dtype = dtype;\n    this.shape = shape;\n    this.sourceLayer = sourceLayer;\n    this.inputs = inputs;\n    this.callArgs = callArgs;\n    this.outputTensorIndex = outputTensorIndex;\n    this.id = getNextUniqueTensorId();\n    if (name != null) {\n      this.originalName = getScopedTensorName(name);\n      this.name = getUniqueTensorName(this.originalName);\n    }\n    this.rank = shape.length;\n  }\n};\nvar _nextNodeID = 0;\nvar Node = class {\n  constructor(args, callArgs) {\n    this.callArgs = callArgs;\n    this.id = _nextNodeID++;\n    this.outboundLayer = args.outboundLayer;\n    this.inboundLayers = args.inboundLayers;\n    this.nodeIndices = args.nodeIndices;\n    this.tensorIndices = args.tensorIndices;\n    this.inputTensors = args.inputTensors;\n    this.outputTensors = args.outputTensors;\n    this.inputMasks = args.inputMasks;\n    this.outputMasks = args.outputMasks;\n    this.inputShapes = args.inputShapes;\n    this.outputShapes = args.outputShapes;\n    for (const layer of args.inboundLayers) {\n      if (layer != null) {\n        layer.outboundNodes.push(this);\n      }\n    }\n    args.outboundLayer.inboundNodes.push(this);\n  }\n  getConfig() {\n    const inboundNames = [];\n    for (const layer of this.inboundLayers) {\n      if (layer != null) {\n        inboundNames.push(layer.name);\n      } else {\n        inboundNames.push(null);\n      }\n    }\n    return {\n      outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,\n      inboundLayers: inboundNames,\n      nodeIndices: this.nodeIndices,\n      tensorIndices: this.tensorIndices\n    };\n  }\n};\nvar _nextLayerID = 0;\nvar Layer = class extends serialization_exports.Serializable {\n  constructor(args = {}) {\n    super();\n    this._callHook = null;\n    this._addedWeightNames = [];\n    this._stateful = false;\n    this.id = _nextLayerID++;\n    this.activityRegularizer = null;\n    this.inputSpec = null;\n    this.supportsMasking = false;\n    this._trainableWeights = [];\n    this._nonTrainableWeights = [];\n    this._losses = [];\n    this._updates = [];\n    this._built = false;\n    this.inboundNodes = [];\n    this.outboundNodes = [];\n    let name = args.name;\n    if (!name) {\n      const prefix = this.getClassName();\n      name = toSnakeCase(prefix) + \"_\" + getUid(prefix);\n    }\n    this.name = name;\n    this.trainable_ = args.trainable == null ? true : args.trainable;\n    if (args.inputShape != null || args.batchInputShape != null) {\n      let batchInputShape;\n      if (args.batchInputShape != null) {\n        batchInputShape = args.batchInputShape;\n      } else if (args.inputShape != null) {\n        let batchSize = null;\n        if (args.batchSize != null) {\n          batchSize = args.batchSize;\n        }\n        batchInputShape = [batchSize].concat(args.inputShape);\n      }\n      this.batchInputShape = batchInputShape;\n      let dtype = args.dtype;\n      if (dtype == null) {\n        dtype = args.inputDType;\n      }\n      if (dtype == null) {\n        dtype = \"float32\";\n      }\n      this.dtype = dtype;\n    }\n    if (args.weights != null) {\n      this.initialWeights = args.weights;\n    } else {\n      this.initialWeights = null;\n    }\n    this._refCount = null;\n    this.fastWeightInitDuringBuild = false;\n  }\n  static nodeKey(layer, nodeIndex) {\n    return layer.name + \"_ib-\" + nodeIndex.toString();\n  }\n  getNodeAtIndex(nodeIndex, attrName) {\n    if (this.inboundNodes.length === 0) {\n      throw new RuntimeError(`The layer has never been called and thus has no defined ${attrName}.`);\n    }\n    if (this.inboundNodes.length <= nodeIndex) {\n      throw new ValueError(`Asked to get ${attrName} at node ${nodeIndex}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);\n    }\n    return this.inboundNodes[nodeIndex];\n  }\n  getInputAt(nodeIndex) {\n    return singletonOrArray(this.getNodeAtIndex(nodeIndex, \"input\").inputTensors);\n  }\n  getOutputAt(nodeIndex) {\n    return singletonOrArray(this.getNodeAtIndex(nodeIndex, \"output\").outputTensors);\n  }\n  get input() {\n    if (this.inboundNodes.length > 1) {\n      throw new AttributeError(`Layer ${this.name} has multiple inbound nodes, hence the notion of \"layer input\" is ill-defined. Use \\`getInputAt(nodeIndex)\\` instead.`);\n    } else if (this.inboundNodes.length === 0) {\n      throw new AttributeError(`Layer ${this.name} is not connected, no input to return.`);\n    }\n    return singletonOrArray(this.getNodeAtIndex(0, \"input\").inputTensors);\n  }\n  get output() {\n    if (this.inboundNodes.length === 0) {\n      throw new AttributeError(`Layer ${this.name} has no inbound nodes.`);\n    }\n    if (this.inboundNodes.length > 1) {\n      throw new AttributeError(`Layer ${this.name} has multiple inbound nodes, hence the notion of \"layer output\" is ill-defined. Use \\`getOutputAt(nodeIndex)\\` instead.`);\n    }\n    return singletonOrArray(this.getNodeAtIndex(0, \"output\").outputTensors);\n  }\n  get losses() {\n    return this._losses;\n  }\n  calculateLosses() {\n    return this.losses.map((lossFn) => lossFn());\n  }\n  get updates() {\n    return this._updates;\n  }\n  get built() {\n    return this._built;\n  }\n  set built(built) {\n    this._built = built;\n  }\n  get trainable() {\n    return this.trainable_;\n  }\n  set trainable(trainable) {\n    this._trainableWeights.forEach((w) => w.trainable = trainable);\n    this.trainable_ = trainable;\n  }\n  get trainableWeights() {\n    if (this.trainable_) {\n      return this._trainableWeights.filter((w) => w.trainable);\n    } else {\n      return [];\n    }\n  }\n  set trainableWeights(weights) {\n    this._trainableWeights = weights;\n  }\n  get nonTrainableWeights() {\n    if (this.trainable) {\n      return this._trainableWeights.filter((w) => !w.trainable).concat(this._nonTrainableWeights);\n    } else {\n      return this._trainableWeights.concat(this._nonTrainableWeights);\n    }\n  }\n  set nonTrainableWeights(weights) {\n    this._nonTrainableWeights = weights;\n  }\n  get weights() {\n    return this.trainableWeights.concat(this.nonTrainableWeights);\n  }\n  get stateful() {\n    return this._stateful;\n  }\n  resetStates() {\n    if (!this.stateful) {\n      throw new Error(\"Cannot call the resetStates() method of a non-stateful Layer object.\");\n    }\n  }\n  assertInputCompatibility(inputs) {\n    inputs = toList(inputs);\n    if (this.inputSpec == null || this.inputSpec.length === 0) {\n      return;\n    }\n    const inputSpec = toList(this.inputSpec);\n    if (inputs.length !== inputSpec.length) {\n      throw new ValueError(`Layer ${this.name} expects ${inputSpec.length} inputs, but it received ${inputs.length} input tensors. Input received: ${inputs}`);\n    }\n    for (let inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n      const x = inputs[inputIndex];\n      const spec = inputSpec[inputIndex];\n      if (spec == null) {\n        continue;\n      }\n      const ndim = x.rank;\n      if (spec.ndim != null) {\n        if (ndim !== spec.ndim) {\n          throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}: expected ndim=${spec.ndim}, found ndim=${ndim}`);\n        }\n      }\n      if (spec.maxNDim != null) {\n        if (ndim > spec.maxNDim) {\n          throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}: expected max_ndim=${spec.maxNDim}, found ndim=${ndim}`);\n        }\n      }\n      if (spec.minNDim != null) {\n        if (ndim < spec.minNDim) {\n          throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}: expected min_ndim=${spec.minNDim}, found ndim=${ndim}.`);\n        }\n      }\n      if (spec.dtype != null) {\n        if (x.dtype !== spec.dtype) {\n          throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name} : expected dtype=${spec.dtype}, found dtype=${x.dtype}.`);\n        }\n      }\n      if (spec.axes) {\n        const xShape = x.shape;\n        for (const key in spec.axes) {\n          const axis = Number(key);\n          const value = spec.axes[key];\n          const xShapeAtAxis = axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];\n          if (value != null && [value, null].indexOf(xShapeAtAxis) === -1) {\n            throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}: expected axis ${axis} of input shape to have value ${value} but got shape ${xShape}.`);\n          }\n        }\n      }\n      if (spec.shape != null) {\n        for (let i = 0; i < spec.shape.length; ++i) {\n          const specDim = spec.shape[i];\n          const dim = x.shape[i];\n          if (specDim != null && dim != null) {\n            if (specDim !== dim) {\n              throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}: expected shape=${spec.shape}, found shape=${x.shape}.`);\n            }\n          }\n        }\n      }\n    }\n  }\n  call(inputs, kwargs) {\n    return inputs;\n  }\n  invokeCallHook(inputs, kwargs) {\n    if (this._callHook != null) {\n      this._callHook(inputs, kwargs);\n    }\n  }\n  setCallHook(callHook) {\n    this._callHook = callHook;\n  }\n  clearCallHook() {\n    this._callHook = null;\n  }\n  apply(inputs, kwargs) {\n    kwargs = kwargs || {};\n    this.assertNotDisposed();\n    const inputsList = toList(inputs);\n    let allAreSymbolic = true;\n    for (const input2 of inputsList) {\n      if (!(input2 instanceof SymbolicTensor)) {\n        allAreSymbolic = false;\n        break;\n      }\n    }\n    let noneAreSymbolic = true;\n    for (const input2 of inputsList) {\n      if (input2 instanceof SymbolicTensor) {\n        noneAreSymbolic = false;\n        break;\n      }\n    }\n    if (allAreSymbolic === noneAreSymbolic) {\n      throw new ValueError(\"Arguments to apply() must be all SymbolicTensors or all Tensors\");\n    }\n    return nameScope(this.name, () => {\n      if (!this.built) {\n        this.assertInputCompatibility(inputs);\n        const inputShapes = [];\n        for (const xElem of toList(inputs)) {\n          inputShapes.push(xElem.shape);\n        }\n        this.build(singletonOrArray(inputShapes));\n        this.built = true;\n        if (this.initialWeights) {\n          this.setWeights(this.initialWeights);\n        }\n        if (this._refCount === null && noneAreSymbolic) {\n          this._refCount = 1;\n        }\n      }\n      this.assertInputCompatibility(inputs);\n      if (noneAreSymbolic) {\n        let output = this.call(inputs, kwargs);\n        const outputList = toList(output);\n        const outputListCopy = [];\n        for (let x of outputList) {\n          if (inputsList.indexOf(x) !== -1) {\n            x = x.clone();\n          }\n          outputListCopy.push(x);\n        }\n        output = singletonOrArray(outputListCopy);\n        if (this.activityRegularizer != null) {\n          throw new NotImplementedError(\"Layer invocation in the presence of activity regularizer(s) is not supported yet.\");\n        }\n        return output;\n      } else {\n        const inputShape = collectInputShape(inputs);\n        const outputShape = this.computeOutputShape(inputShape);\n        let output;\n        const outputDType = guessOutputDType(inputs);\n        this.warnOnIncompatibleInputShape(Array.isArray(inputs) ? inputShape[0] : inputShape);\n        if (outputShape != null && outputShape.length > 0 && Array.isArray(outputShape[0])) {\n          output = outputShape.map((shape, index) => new SymbolicTensor(outputDType, shape, this, toList(inputs), kwargs, this.name, index));\n        } else {\n          output = new SymbolicTensor(outputDType, outputShape, this, toList(inputs), kwargs, this.name);\n        }\n        this.addInboundNode(inputs, output, null, null, inputShape, outputShape, kwargs);\n        this._refCount++;\n        if (this.activityRegularizer != null) {\n          throw new NotImplementedError(\"Layer invocation in the presence of activity regularizer(s) is not supported yet.\");\n        }\n        return output;\n      }\n    });\n  }\n  warnOnIncompatibleInputShape(inputShape) {\n    if (this.batchInputShape == null) {\n      return;\n    } else if (inputShape.length !== this.batchInputShape.length) {\n      console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(inputShape)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);\n    } else {\n      let dimMismatch = false;\n      this.batchInputShape.forEach((dimension, i) => {\n        if (dimension != null && inputShape[i] != null && inputShape[i] !== dimension) {\n          dimMismatch = true;\n        }\n      });\n      if (dimMismatch) {\n        console.warn(`The shape of the input tensor (${JSON.stringify(inputShape)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);\n      }\n    }\n  }\n  get outputShape() {\n    if (this.inboundNodes == null || this.inboundNodes.length === 0) {\n      throw new AttributeError(`The layer ${this.name} has never been called and thus has no defined output shape.`);\n    }\n    const allOutputShapes = [];\n    for (const node of this.inboundNodes) {\n      const shapeString = JSON.stringify(node.outputShapes);\n      if (allOutputShapes.indexOf(shapeString) === -1) {\n        allOutputShapes.push(shapeString);\n      }\n    }\n    if (allOutputShapes.length === 1) {\n      const outputShapes = this.inboundNodes[0].outputShapes;\n      if (Array.isArray(outputShapes) && Array.isArray(outputShapes[0]) && outputShapes.length === 1) {\n        return outputShapes[0];\n      } else {\n        return outputShapes;\n      }\n    } else {\n      throw new AttributeError(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of \"output shape\" is ill-defined for the layer.`);\n    }\n  }\n  countParams() {\n    if (!this.built) {\n      throw new RuntimeError(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);\n    }\n    return countParamsInWeights(this.weights);\n  }\n  build(inputShape) {\n    this.built = true;\n  }\n  getWeights(trainableOnly = false) {\n    return batchGetValue(trainableOnly ? this.trainableWeights : this.weights);\n  }\n  setWeights(weights) {\n    tidy(() => {\n      const params = this.weights;\n      if (params.length !== weights.length) {\n        throw new ValueError(`You called setWeights(weights) on layer \"${this.name}\" with a weight list of length ${weights.length}, but the layer was expecting ${params.length} weights. Provided weights: ${weights}...`);\n      }\n      if (params.length === 0) {\n        return;\n      }\n      const weightValueTuples = [];\n      const paramValues = batchGetValue(params);\n      for (let i = 0; i < paramValues.length; ++i) {\n        const pv = paramValues[i];\n        const p2 = params[i];\n        const w = weights[i];\n        if (!util_exports.arraysEqual(pv.shape, w.shape)) {\n          throw new ValueError(`Layer weight shape ${pv.shape} not compatible with provided weight shape ${w.shape}`);\n        }\n        weightValueTuples.push([p2, w]);\n      }\n      batchSetValue(weightValueTuples);\n    });\n  }\n  addWeight(name, shape, dtype, initializer, regularizer, trainable, constraint, getInitializerFunc) {\n    if (this._addedWeightNames.indexOf(name) !== -1) {\n      throw new ValueError(`Duplicate weight name ${name} for layer ${this.name}`);\n    }\n    this._addedWeightNames.push(name);\n    if (dtype == null) {\n      dtype = \"float32\";\n    }\n    if (this.fastWeightInitDuringBuild) {\n      initializer = getInitializerFunc != null ? getInitializerFunc() : getInitializer(\"zeros\");\n    }\n    const initValue = initializer.apply(shape, dtype);\n    const weight = new LayerVariable(initValue, dtype, name, trainable, constraint);\n    initValue.dispose();\n    if (regularizer != null) {\n      this.addLoss(() => regularizer.apply(weight.read()));\n    }\n    if (trainable == null) {\n      trainable = true;\n    }\n    if (trainable) {\n      this._trainableWeights.push(weight);\n    } else {\n      this._nonTrainableWeights.push(weight);\n    }\n    return weight;\n  }\n  setFastWeightInitDuringBuild(value) {\n    this.fastWeightInitDuringBuild = value;\n  }\n  addLoss(losses2) {\n    if (losses2 == null || Array.isArray(losses2) && losses2.length === 0) {\n      return;\n    }\n    losses2 = toList(losses2);\n    if (this._losses !== void 0 && this._losses !== null) {\n      this.losses.push(...losses2);\n    }\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  computeMask(inputs, mask) {\n    if (!this.supportsMasking) {\n      if (mask != null) {\n        if (Array.isArray(mask)) {\n          mask.forEach((maskElement) => {\n            if (maskElement != null) {\n              throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);\n            }\n          });\n        } else {\n          throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);\n        }\n      }\n      return null;\n    }\n    return mask;\n  }\n  addInboundNode(inputTensors, outputTensors, inputMasks, outputMasks, inputShapes, outputShapes, kwargs = null) {\n    const inputTensorList = toList(inputTensors);\n    outputTensors = toList(outputTensors);\n    inputMasks = toList(inputMasks);\n    outputMasks = toList(outputMasks);\n    inputShapes = normalizeShapeList(inputShapes);\n    outputShapes = normalizeShapeList(outputShapes);\n    const inboundLayers = [];\n    const nodeIndices = [];\n    const tensorIndices = [];\n    for (const x of inputTensorList) {\n      inboundLayers.push(x.sourceLayer);\n      nodeIndices.push(x.nodeIndex);\n      tensorIndices.push(x.tensorIndex);\n    }\n    new Node({\n      outboundLayer: this,\n      inboundLayers,\n      nodeIndices,\n      tensorIndices,\n      inputTensors: inputTensorList,\n      outputTensors,\n      inputMasks,\n      outputMasks,\n      inputShapes,\n      outputShapes\n    }, kwargs);\n    for (let i = 0; i < outputTensors.length; i++) {\n      outputTensors[i].sourceLayer = this;\n      outputTensors[i].nodeIndex = this.inboundNodes.length - 1;\n      outputTensors[i].tensorIndex = i;\n    }\n  }\n  getConfig() {\n    const config = { name: this.name, trainable: this.trainable };\n    if (this.batchInputShape != null) {\n      config[\"batchInputShape\"] = this.batchInputShape;\n    }\n    if (this.dtype != null) {\n      config[\"dtype\"] = this.dtype;\n    }\n    return config;\n  }\n  disposeWeights() {\n    this.weights.forEach((weight) => weight.dispose());\n    return this.weights.length;\n  }\n  assertNotDisposed() {\n    if (this._refCount === 0) {\n      throw new Error(`Layer '${this.name}' is already disposed.`);\n    }\n  }\n  dispose() {\n    if (!this.built) {\n      throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);\n    }\n    if (this._refCount === null) {\n      throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);\n    }\n    this.assertNotDisposed();\n    let numDisposedVariables = 0;\n    if (--this._refCount === 0) {\n      numDisposedVariables = this.disposeWeights();\n    }\n    return { refCountAfterDispose: this._refCount, numDisposedVariables };\n  }\n};\nfunction collectInputShape(inputTensors) {\n  inputTensors = toList(inputTensors);\n  const shapes = [];\n  for (const x of inputTensors) {\n    shapes.push(x.shape);\n  }\n  return singletonOrArray(shapes);\n}\nfunction guessOutputDType(inputTensors) {\n  return \"float32\";\n}\nfunction getSourceInputs(tensor2, layer, nodeIndex) {\n  if (layer == null || nodeIndex != null && nodeIndex > 0) {\n    layer = tensor2.sourceLayer;\n    nodeIndex = tensor2.nodeIndex;\n  }\n  if (layer.inboundNodes.length === 0) {\n    return [tensor2];\n  } else {\n    const node = layer.inboundNodes[nodeIndex];\n    if (node.inboundLayers.length === 0) {\n      return node.inputTensors;\n    } else {\n      const sourceTensors = [];\n      for (let i = 0; i < node.inboundLayers.length; i++) {\n        const x = node.inputTensors[i];\n        const layer2 = node.inboundLayers[i];\n        const nodeIndex2 = node.nodeIndices[i];\n        const previousSources = getSourceInputs(x, layer2, nodeIndex2);\n        for (const x2 of previousSources) {\n          if (sourceTensors.indexOf(x2) === -1) {\n            sourceTensors.push(x2);\n          }\n        }\n      }\n      return sourceTensors;\n    }\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/engine/input_layer.js\nvar InputLayer = class extends Layer {\n  constructor(args) {\n    super({\n      dtype: args.dtype,\n      name: args.name != null ? args.name : getUid(\"input\").toString()\n    });\n    if (args.batchSize == null) {\n      args.batchSize = null;\n    }\n    if (args.sparse == null) {\n      args.sparse = false;\n    }\n    this.trainable = false;\n    this.built = true;\n    this.sparse = args.sparse;\n    if (args.inputShape != null && args.batchInputShape != null) {\n      throw new ValueError(\"Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.\");\n    }\n    let batchInputShape = args.batchInputShape;\n    if (batchInputShape == null) {\n      if (args.inputShape == null) {\n        throw new ValueError(\"An InputLayer should be passed either a `batchInputShape` or an `inputShape`.\");\n      } else {\n        batchInputShape = [args.batchSize].concat(args.inputShape);\n      }\n    } else {\n      if (args.batchSize != null) {\n        throw new ValueError(\"Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.\");\n      }\n    }\n    const dtype = args.dtype || \"float32\";\n    this.batchInputShape = batchInputShape;\n    this.dtype = dtype;\n    this.inputSpec = [{ shape: batchInputShape }];\n    const inputTensor = new SymbolicTensor(this.dtype, this.batchInputShape, this, [], {}, this.name);\n    inputTensor.nodeIndex = 0;\n    inputTensor.tensorIndex = 0;\n    new Node({\n      outboundLayer: this,\n      inboundLayers: [],\n      nodeIndices: [],\n      tensorIndices: [],\n      inputTensors: [inputTensor],\n      outputTensors: [inputTensor],\n      inputMasks: [null],\n      outputMasks: [null],\n      inputShapes: [batchInputShape],\n      outputShapes: [batchInputShape]\n    });\n  }\n  apply(inputs, kwargs) {\n    throw new ValueError(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);\n  }\n  dispose() {\n    return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };\n  }\n  getConfig() {\n    return {\n      batchInputShape: this.batchInputShape,\n      dtype: this.dtype,\n      sparse: this.sparse,\n      name: this.name\n    };\n  }\n};\nInputLayer.className = \"InputLayer\";\nserialization_exports.registerClass(InputLayer);\nfunction Input(config) {\n  if (config.batchShape == null && config.shape == null) {\n    throw new Error(\"Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.\");\n  }\n  if (config.batchShape != null && config.shape != null) {\n    throw new ValueError(\"Please provide either a `shape` or `batchShape` argument to Input, but not both.\");\n  }\n  let batchShape = config.batchShape;\n  if (config.shape != null && batchShape == null) {\n    batchShape = [null].concat(config.shape);\n  }\n  let dtype = config.dtype;\n  if (dtype == null) {\n    dtype = \"float32\";\n  }\n  const inputLayer2 = new InputLayer({\n    batchInputShape: batchShape,\n    name: config.name,\n    dtype,\n    sparse: config.sparse\n  });\n  const outputs = inputLayer2.inboundNodes[0].outputTensors;\n  return outputs[0];\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/logs.js\nasync function resolveScalarsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n  const promises = [];\n  const keys = [];\n  const scalarsToDispose = [];\n  for (const key in logs) {\n    const value = logs[key];\n    if (typeof value !== \"number\") {\n      const valueScalar = value;\n      promises.push(valueScalar.data());\n      keys.push(key);\n      scalarsToDispose.push(valueScalar);\n    }\n  }\n  if (promises.length > 0) {\n    const values = await Promise.all(promises);\n    for (let i = 0; i < values.length; ++i) {\n      logs[keys[i]] = values[i][0];\n    }\n    dispose(scalarsToDispose);\n  }\n}\nfunction disposeTensorsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n  for (const key in logs) {\n    const value = logs[key];\n    if (typeof value !== \"number\") {\n      value.dispose();\n    }\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/base_callbacks.js\nvar ModelLoggingVerbosity;\n(function(ModelLoggingVerbosity2) {\n  ModelLoggingVerbosity2[ModelLoggingVerbosity2[\"SILENT\"] = 0] = \"SILENT\";\n  ModelLoggingVerbosity2[ModelLoggingVerbosity2[\"VERBOSE\"] = 1] = \"VERBOSE\";\n})(ModelLoggingVerbosity || (ModelLoggingVerbosity = {}));\nvar DEFAULT_YIELD_EVERY_MS = 125;\nvar BaseCallback = class {\n  constructor() {\n    this.validationData = null;\n  }\n  setParams(params) {\n    this.params = params;\n  }\n  async onEpochBegin(epoch, logs) {\n  }\n  async onEpochEnd(epoch, logs) {\n  }\n  async onBatchBegin(batch, logs) {\n  }\n  async onBatchEnd(batch, logs) {\n  }\n  async onTrainBegin(logs) {\n  }\n  async onTrainEnd(logs) {\n  }\n  setModel(model2) {\n  }\n};\nvar CallbackList = class {\n  constructor(callbacks2, queueLength = 10) {\n    if (callbacks2 == null) {\n      callbacks2 = [];\n    }\n    this.callbacks = callbacks2;\n    this.queueLength = queueLength;\n  }\n  append(callback) {\n    this.callbacks.push(callback);\n  }\n  setParams(params) {\n    for (const callback of this.callbacks) {\n      callback.setParams(params);\n    }\n  }\n  setModel(model2) {\n    for (const callback of this.callbacks) {\n      callback.setModel(model2);\n    }\n  }\n  async onEpochBegin(epoch, logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onEpochBegin(epoch, logs);\n    }\n  }\n  async onEpochEnd(epoch, logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onEpochEnd(epoch, logs);\n    }\n  }\n  async onBatchBegin(batch, logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onBatchBegin(batch, logs);\n    }\n  }\n  async onBatchEnd(batch, logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onBatchEnd(batch, logs);\n    }\n  }\n  async onTrainBegin(logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onTrainBegin(logs);\n    }\n  }\n  async onTrainEnd(logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onTrainEnd(logs);\n    }\n  }\n};\nvar BaseLogger = class extends BaseCallback {\n  constructor() {\n    super();\n  }\n  async onEpochBegin(epoch) {\n    this.seen = 0;\n    this.totals = {};\n  }\n  async onBatchEnd(batch, logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    const batchSize = logs[\"size\"] == null ? 0 : logs[\"size\"];\n    this.seen += batchSize;\n    for (const key in logs) {\n      const value = logs[key];\n      if (typeof value === \"number\") {\n        if (!this.totals.hasOwnProperty(key)) {\n          this.totals[key] = 0;\n        }\n        this.totals[key] = this.totals[key] + value * batchSize;\n      } else {\n        let oldTotalsToDispose;\n        if (key in this.totals) {\n          oldTotalsToDispose = this.totals[key];\n        } else {\n          this.totals[key] = 0;\n        }\n        const total = tidy(() => add2(this.totals[key], mul(value, batchSize)));\n        this.totals[key] = total;\n        if (oldTotalsToDispose != null) {\n          oldTotalsToDispose.dispose();\n        }\n      }\n    }\n  }\n  async onEpochEnd(epoch, logs) {\n    if (logs != null) {\n      for (const key of this.params[\"metrics\"]) {\n        if (this.totals[key] == null) {\n          continue;\n        }\n        if (typeof this.totals[key] === \"number\") {\n          logs[key] = this.totals[key] / this.seen;\n        } else {\n          tidy(() => {\n            const log5 = mul(div(1, this.seen), this.totals[key]);\n            logs[key] = log5;\n            this.totals[key].dispose();\n            keep(logs[key]);\n          });\n        }\n      }\n    }\n  }\n};\nvar History = class extends BaseCallback {\n  async onTrainBegin(logs) {\n    this.epoch = [];\n    this.history = {};\n  }\n  async onEpochEnd(epoch, logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    this.epoch.push(epoch);\n    for (const key in logs) {\n      if (this.history[key] == null) {\n        this.history[key] = [];\n      }\n      this.history[key].push(logs[key]);\n    }\n  }\n  async syncData() {\n    const promises = [];\n    const keys = [];\n    const indices = [];\n    for (const key in this.history) {\n      const valueArray = this.history[key];\n      for (let i = 0; i < valueArray.length; ++i) {\n        if (typeof valueArray[i] !== \"number\") {\n          const valueScalar = valueArray[i];\n          promises.push(valueScalar.data());\n          keys.push(key);\n          indices.push(i);\n        }\n      }\n    }\n    const values = await Promise.all(promises);\n    for (let n = 0; n < values.length; ++n) {\n      const tensorToDispose = this.history[keys[n]][indices[n]];\n      tensorToDispose.dispose();\n      this.history[keys[n]][indices[n]] = values[n][0];\n    }\n  }\n};\nvar CustomCallback = class extends BaseCallback {\n  constructor(args, yieldEvery) {\n    super();\n    this.currentEpoch = 0;\n    this.nowFunc = args.nowFunc;\n    this.nextFrameFunc = args.nextFrameFunc || nextFrame;\n    this.yieldEvery = yieldEvery || \"auto\";\n    if (this.yieldEvery === \"auto\") {\n      this.yieldEvery = DEFAULT_YIELD_EVERY_MS;\n    }\n    if (this.yieldEvery === \"never\" && args.onYield != null) {\n      throw new Error(\"yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback\");\n    }\n    if (util_exports.isNumber(this.yieldEvery)) {\n      this.maybeWait = debounce(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc);\n    }\n    this.trainBegin = args.onTrainBegin;\n    this.trainEnd = args.onTrainEnd;\n    this.epochBegin = args.onEpochBegin;\n    this.epochEnd = args.onEpochEnd;\n    this.batchBegin = args.onBatchBegin;\n    this.batchEnd = args.onBatchEnd;\n    this.yield = args.onYield;\n  }\n  async maybeWait(epoch, batch, logs) {\n    const ps = [];\n    if (this.yield != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.yield(epoch, batch, logs));\n    }\n    ps.push(this.nextFrameFunc());\n    await Promise.all(ps);\n  }\n  async onEpochBegin(epoch, logs) {\n    this.currentEpoch = epoch;\n    if (this.epochBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.epochBegin(epoch, logs);\n    }\n  }\n  async onEpochEnd(epoch, logs) {\n    const ps = [];\n    if (this.epochEnd != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.epochEnd(epoch, logs));\n    }\n    if (this.yieldEvery === \"epoch\") {\n      ps.push(this.nextFrameFunc());\n    }\n    await Promise.all(ps);\n  }\n  async onBatchBegin(batch, logs) {\n    if (this.batchBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.batchBegin(batch, logs);\n    }\n  }\n  async onBatchEnd(batch, logs) {\n    const ps = [];\n    if (this.batchEnd != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.batchEnd(batch, logs));\n    }\n    if (this.yieldEvery === \"batch\") {\n      ps.push(this.nextFrameFunc());\n    } else if (util_exports.isNumber(this.yieldEvery)) {\n      ps.push(this.maybeWait(this.currentEpoch, batch, logs));\n    }\n    await Promise.all(ps);\n  }\n  async onTrainBegin(logs) {\n    if (this.trainBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.trainBegin(logs);\n    }\n  }\n  async onTrainEnd(logs) {\n    if (this.trainEnd != null) {\n      await resolveScalarsInLogs(logs);\n      await this.trainEnd(logs);\n    }\n  }\n};\nfunction standardizeCallbacks(callbacks2, yieldEvery) {\n  if (callbacks2 == null) {\n    callbacks2 = {};\n  }\n  if (callbacks2 instanceof BaseCallback) {\n    return [callbacks2];\n  }\n  if (Array.isArray(callbacks2) && callbacks2[0] instanceof BaseCallback) {\n    return callbacks2;\n  }\n  const callbackConfigs = toList(callbacks2);\n  return callbackConfigs.map((callbackConfig) => new CustomCallback(callbackConfig, yieldEvery));\n}\nvar CallbackConstructorRegistry = class {\n  constructor() {\n  }\n  static registerCallbackConstructor(verbosityLevel, callbackConstructor) {\n    util_exports.assert(verbosityLevel >= 0 && Number.isInteger(verbosityLevel), () => `Verbosity level is expected to be an integer >= 0, but got ${verbosityLevel}`);\n    CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);\n    if (CallbackConstructorRegistry.constructors[verbosityLevel] == null) {\n      CallbackConstructorRegistry.constructors[verbosityLevel] = [];\n    }\n    CallbackConstructorRegistry.constructors[verbosityLevel].push(callbackConstructor);\n  }\n  static checkForDuplicate(callbackConstructor) {\n    for (const levelName in CallbackConstructorRegistry.constructors) {\n      const constructors = CallbackConstructorRegistry.constructors[+levelName];\n      constructors.forEach((ctor) => {\n        if (ctor === callbackConstructor) {\n          throw new ValueError(\"Duplicate callback constructor.\");\n        }\n      });\n    }\n  }\n  static clear() {\n    CallbackConstructorRegistry.constructors = {};\n  }\n  static createCallbacks(verbosityLevel) {\n    const constructors = [];\n    for (const levelName in CallbackConstructorRegistry.constructors) {\n      const level = +levelName;\n      if (verbosityLevel >= level) {\n        constructors.push(...CallbackConstructorRegistry.constructors[level]);\n      }\n    }\n    return constructors.map((ctor) => new ctor());\n  }\n};\nCallbackConstructorRegistry.constructors = {};\nfunction configureCallbacks(callbacks2, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics) {\n  const history = new History();\n  const actualCallbacks = [\n    new BaseLogger(),\n    ...CallbackConstructorRegistry.createCallbacks(verbose)\n  ];\n  if (callbacks2 != null) {\n    actualCallbacks.push(...callbacks2);\n  }\n  actualCallbacks.push(history);\n  const callbackList = new CallbackList(actualCallbacks);\n  callbackList.setParams({\n    epochs,\n    initialEpoch,\n    samples: numTrainSamples,\n    steps: stepsPerEpoch,\n    batchSize,\n    verbose,\n    doValidation,\n    metrics: callbackMetrics\n  });\n  return { callbackList, history };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js\nfunction deserialize(config, customObjects = {}, fastWeightInit = false) {\n  return deserializeKerasObject(config, serialization_exports.SerializationMap.getMap().classNameMap, customObjects, \"layer\", fastWeightInit);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/losses.js\nfunction l2Normalize(x, axis) {\n  return tidy(() => {\n    if (x.dtype !== \"float32\") {\n      x = cast(x, \"float32\");\n    }\n    const squareSum = sum2(square2(x), axis, true);\n    const epsilonTensor = fill(squareSum.shape, epsilon());\n    const norm2 = sqrt(maximum(squareSum, epsilonTensor));\n    return div(x, norm2);\n  });\n}\nfunction meanSquaredError2(yTrue, yPred) {\n  return tidy(() => mean(square2(sub(yPred, yTrue)), -1));\n}\nfunction meanAbsoluteError(yTrue, yPred) {\n  return tidy(() => mean(abs(sub(yPred, yTrue)), -1));\n}\nfunction meanAbsolutePercentageError(yTrue, yPred) {\n  return tidy(() => {\n    const diff = sub(yTrue, yPred);\n    const clippedTrue = clipByValue(abs(yTrue), epsilon(), Number.MAX_VALUE);\n    const absResult = abs(div(diff, clippedTrue));\n    return mul(100, mean(absResult, -1));\n  });\n}\nfunction meanSquaredLogarithmicError(yTrue, yPred) {\n  return tidy(() => {\n    const clippedPred = clipByValue(yPred, epsilon(), Number.MAX_VALUE);\n    const firstLog = log2(add2(1, clippedPred));\n    const clippedTrue = clipByValue(yTrue, epsilon(), Number.MAX_VALUE);\n    const secondLog = log2(add2(1, clippedTrue));\n    return mean(square2(sub(firstLog, secondLog)), -1);\n  });\n}\nfunction squaredHinge(yTrue, yPred) {\n  return tidy(() => {\n    const maxResult = maximum(0, sub(1, mul(yTrue, yPred)));\n    return mean(square2(maxResult), -1);\n  });\n}\nfunction hinge(yTrue, yPred) {\n  return tidy(() => {\n    const maxResult = maximum(0, sub(1, mul(yTrue, yPred)));\n    return mean(maxResult, -1);\n  });\n}\nfunction categoricalHinge(yTrue, yPred) {\n  return tidy(() => {\n    const pos = sum2(mul(yTrue, yPred), -1);\n    const neg4 = max(mul(sub(1, yTrue), yPred), -1);\n    return maximum(0, add2(1, sub(neg4, pos)));\n  });\n}\nfunction logcosh(yTrue, yPred) {\n  return tidy(() => {\n    const log22 = Math.log(2);\n    const predictionDiff = sub(yPred, yTrue);\n    const logcoshResult = sub(add2(predictionDiff, softplus(mul(-2, predictionDiff))), log22);\n    return mean(logcoshResult, -1);\n  });\n}\nfunction categoricalCrossentropy(target, output, fromLogits = false) {\n  return tidy(() => {\n    if (fromLogits) {\n      output = softmax(output);\n    } else {\n      const outputSum = sum2(output, output.shape.length - 1, true);\n      output = div(output, outputSum);\n    }\n    output = clipByValue(output, epsilon(), 1 - epsilon());\n    return neg(sum2(mul(cast(target, \"float32\"), log2(output)), output.shape.length - 1));\n  });\n}\nfunction sparseCategoricalCrossentropy(target, output, fromLogits = false) {\n  return tidy(() => {\n    const flatTarget = cast(floor(flatten2(target)), \"int32\");\n    output = clipByValue(output, epsilon(), 1 - epsilon());\n    const outputShape = output.shape;\n    const oneHotTarget = reshape(oneHot(flatTarget, outputShape[outputShape.length - 1]), outputShape);\n    return categoricalCrossentropy(oneHotTarget, output, fromLogits);\n  });\n}\nfunction sigmoidCrossEntropyWithLogits(labels, logits) {\n  if (!util_exports.arraysEqual(labels.shape, logits.shape)) {\n    throw new ValueError(`logits and labels must have the same shape, but got shapes ${JSON.stringify(labels.shape)} and ${JSON.stringify(logits.shape)}`);\n  }\n  return tidy(() => {\n    const reluLogits = relu(logits);\n    const negAbsLogits = neg(abs(logits));\n    return add2(sub(reluLogits, mul(logits, labels)), log1p(exp(negAbsLogits)));\n  });\n}\nfunction binaryCrossentropy(yTrue, yPred) {\n  return tidy(() => {\n    let y;\n    y = clipByValue(yPred, epsilon(), 1 - epsilon());\n    y = log2(div(y, sub(1, y)));\n    return mean(sigmoidCrossEntropyWithLogits(yTrue, y), -1);\n  });\n}\nfunction kullbackLeiblerDivergence(yTrue, yPred) {\n  return tidy(() => {\n    const clippedTrue = clipByValue(yTrue, epsilon(), 1);\n    const clippedPred = clipByValue(yPred, epsilon(), 1);\n    return sum2(mul(yTrue, log2(div(clippedTrue, clippedPred))), -1);\n  });\n}\nfunction poisson(yTrue, yPred) {\n  return tidy(() => {\n    const logPred = log2(add2(epsilon(), yPred));\n    return mean(sub(yPred, mul(yTrue, logPred)), -1);\n  });\n}\nfunction cosineProximity(yTrue, yPred) {\n  return tidy(() => {\n    const trueNormalized = l2Normalize(yTrue, -1);\n    const predNormalized = l2Normalize(yPred, -1);\n    const trueXPred = mul(trueNormalized, predNormalized);\n    return neg(sum2(trueXPred, -1));\n  });\n}\nvar lossesMap = {\n  meanSquaredError: meanSquaredError2,\n  meanAbsoluteError,\n  meanAbsolutePercentageError,\n  meanSquaredLogarithmicError,\n  squaredHinge,\n  hinge,\n  categoricalHinge,\n  logcosh,\n  categoricalCrossentropy,\n  sparseCategoricalCrossentropy,\n  binaryCrossentropy,\n  kullbackLeiblerDivergence,\n  poisson,\n  cosineProximity\n};\nfunction get(identifierOrFn) {\n  if (typeof identifierOrFn === \"string\") {\n    if (identifierOrFn in lossesMap) {\n      return lossesMap[identifierOrFn];\n    }\n    let errMsg = `Unknown loss ${identifierOrFn}`;\n    if (identifierOrFn.toLowerCase().includes(\"softmaxcrossentropy\")) {\n      errMsg = `Unknown loss ${identifierOrFn}. Use \"categoricalCrossentropy\" as the string name for tf.losses.softmaxCrossEntropy`;\n    }\n    throw new ValueError(errMsg);\n  } else {\n    return identifierOrFn;\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/metrics.js\nfunction binaryAccuracy(yTrue, yPred) {\n  return tidy(() => {\n    const threshold3 = mul(0.5, onesLike(yPred));\n    const yPredThresholded = cast2(greater(yPred, threshold3), yTrue.dtype);\n    return mean(equal(yTrue, yPredThresholded), -1);\n  });\n}\nfunction categoricalAccuracy(yTrue, yPred) {\n  return tidy(() => cast2(equal(argMax(yTrue, -1), argMax(yPred, -1)), \"float32\"));\n}\nfunction truePositives(yTrue, yPred) {\n  return tidy(() => {\n    return cast(sum2(logicalAnd(equal(yTrue, 1), equal(yPred, 1))), \"float32\");\n  });\n}\nfunction falseNegatives(yTrue, yPred) {\n  return tidy(() => {\n    return cast(sum2(logicalAnd(equal(yTrue, 1), equal(yPred, 0))), \"float32\");\n  });\n}\nfunction falsePositives(yTrue, yPred) {\n  return tidy(() => {\n    return cast(sum2(logicalAnd(equal(yTrue, 0), equal(yPred, 1))), \"float32\");\n  });\n}\nfunction precision(yTrue, yPred) {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fp = falsePositives(yTrue, yPred);\n    const denominator = add2(tp, fp);\n    return cast(where(greater(denominator, 0), div(tp, denominator), 0), \"float32\");\n  });\n}\nfunction recall(yTrue, yPred) {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fn = falseNegatives(yTrue, yPred);\n    const denominator = add2(tp, fn);\n    return cast(where(greater(denominator, 0), div(tp, denominator), 0), \"float32\");\n  });\n}\nfunction binaryCrossentropy2(yTrue, yPred) {\n  return binaryCrossentropy(yTrue, yPred);\n}\nfunction sparseCategoricalAccuracy(yTrue, yPred) {\n  if (yTrue.rank === yPred.rank) {\n    yTrue = squeeze(yTrue, [yTrue.rank - 1]);\n  }\n  yPred = argMax(yPred, -1);\n  if (yPred.dtype !== yTrue.dtype) {\n    yPred = cast(yPred, yTrue.dtype);\n  }\n  return cast(equal(yTrue, yPred), \"float32\");\n}\nvar mse = meanSquaredError2;\nvar MSE = meanSquaredError2;\nvar mae = meanAbsoluteError;\nvar MAE = meanAbsoluteError;\nvar mape = meanAbsolutePercentageError;\nvar MAPE = meanAbsolutePercentageError;\nvar categoricalCrossentropy2 = categoricalCrossentropy;\nvar cosine = cosineProximity;\nvar sparseCategoricalCrossentropy2 = sparseCategoricalCrossentropy;\nvar metricsMap = {\n  binaryAccuracy,\n  categoricalAccuracy,\n  precision,\n  categoricalCrossentropy: categoricalCrossentropy2,\n  sparseCategoricalCrossentropy: sparseCategoricalCrossentropy2,\n  mse,\n  MSE,\n  mae,\n  MAE,\n  mape,\n  MAPE,\n  cosine\n};\nfunction get2(identifier) {\n  if (typeof identifier === \"string\" && identifier in metricsMap) {\n    return metricsMap[identifier];\n  } else if (typeof identifier !== \"string\" && identifier != null) {\n    return identifier;\n  } else {\n    throw new ValueError(`Unknown metric ${identifier}`);\n  }\n}\nfunction getLossOrMetricName(fn) {\n  assert2(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n  if (typeof fn === \"string\") {\n    return fn;\n  } else {\n    let fnName;\n    for (const key of Object.keys(lossesMap)) {\n      if (lossesMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n    if (fnName !== void 0) {\n      return fnName;\n    }\n    for (const key of Object.keys(metricsMap)) {\n      if (metricsMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n    if (fnName !== void 0) {\n      return fnName;\n    }\n    return fn.name;\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/optimizers.js\nfunction getOptimizer(identifier) {\n  const optimizerMap = {\n    \"Adagrad\": () => train.adagrad(0.01),\n    \"Adadelta\": () => train.adadelta(1, 0.95, epsilon()),\n    \"Adam\": () => train.adam(1e-3, 0.9, 0.999, epsilon()),\n    \"Adamax\": () => train.adamax(2e-3, 0.9, 0.999, epsilon(), 0),\n    \"RMSProp\": () => train.rmsprop(1e-3, 0.9, 0, epsilon()),\n    \"SGD\": () => train.sgd(0.01)\n  };\n  optimizerMap[\"adagrad\"] = optimizerMap[\"Adagrad\"];\n  optimizerMap[\"adadelta\"] = optimizerMap[\"Adadelta\"];\n  optimizerMap[\"adam\"] = optimizerMap[\"Adam\"];\n  optimizerMap[\"adamax\"] = optimizerMap[\"Adamax\"];\n  optimizerMap[\"rmsprop\"] = optimizerMap[\"RMSProp\"];\n  optimizerMap[\"sgd\"] = optimizerMap[\"SGD\"];\n  if (identifier in optimizerMap) {\n    return optimizerMap[identifier]();\n  }\n  throw new ValueError(`Unknown Optimizer ${identifier}`);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/user_defined_metadata.js\nvar MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\nfunction checkUserDefinedMetadata(userDefinedMetadata, modelName, checkSize = false) {\n  if (userDefinedMetadata == null || typeof userDefinedMetadata !== \"object\" || Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype || !plainObjectCheck(userDefinedMetadata)) {\n    throw new Error(\"User-defined metadata is expected to be a JSON object, but is not.\");\n  }\n  if (checkSize) {\n    const out = JSON.stringify(userDefinedMetadata);\n    if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n      console.warn(`User-defined metadata of model \"${modelName}\" is too large in size (length=${out.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);\n    }\n  }\n}\nfunction plainObjectCheck(x) {\n  if (x === null) {\n    return true;\n  } else if (typeof x === \"object\") {\n    if (Object.getPrototypeOf(x) === Object.prototype) {\n      const keys = Object.keys(x);\n      for (const key of keys) {\n        if (typeof key !== \"string\") {\n          return false;\n        }\n        if (!plainObjectCheck(x[key])) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      if (Array.isArray(x)) {\n        for (const item of x) {\n          if (!plainObjectCheck(item)) {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }\n  } else {\n    const xType = typeof x;\n    return xType === \"string\" || xType === \"number\" || xType === \"boolean\";\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/utils/layer_utils.js\nfunction printSummary(model2, lineLength, positions, printFn = console.log) {\n  const sequentialLike = isModelSequentialLike(model2);\n  const toDisplay = [\"Layer (type)\", \"Output shape\", \"Param #\"];\n  if (sequentialLike) {\n    lineLength = lineLength || 65;\n    positions = positions || [0.45, 0.85, 1];\n  } else {\n    lineLength = lineLength || 98;\n    positions = positions || [0.33, 0.55, 0.67, 1];\n  }\n  if (positions[positions.length - 1] <= 1) {\n    positions = positions.map((p2) => Math.floor(lineLength * p2));\n  }\n  let relevantNodes;\n  if (!sequentialLike) {\n    toDisplay.push(\"Receives inputs\");\n    relevantNodes = [];\n    for (const depth in model2.nodesByDepth) {\n      relevantNodes.push(...model2.nodesByDepth[depth]);\n    }\n  }\n  printFn(\"_\".repeat(lineLength));\n  printRow(toDisplay, positions, printFn);\n  printFn(\"=\".repeat(lineLength));\n  const layers = model2.layers;\n  for (let i = 0; i < layers.length; ++i) {\n    if (sequentialLike) {\n      printLayerSummary(layers[i], positions, printFn);\n    } else {\n      printLayerSummaryWithConnections(layers[i], positions, relevantNodes, printFn);\n    }\n    printFn((i === layers.length - 1 ? \"=\" : \"_\").repeat(lineLength));\n  }\n  model2.checkTrainableWeightsConsistency();\n  const trainableCount = countTrainableParams(model2);\n  const nonTrainableCount = countParamsInWeights(model2.nonTrainableWeights);\n  printFn(`Total params: ${trainableCount + nonTrainableCount}`);\n  printFn(`Trainable params: ${trainableCount}`);\n  printFn(`Non-trainable params: ${nonTrainableCount}`);\n  printFn(\"_\".repeat(lineLength));\n}\nfunction countTrainableParams(model2) {\n  let trainableCount;\n  if (model2.collectedTrainableWeights != null) {\n    trainableCount = countParamsInWeights(model2.collectedTrainableWeights);\n  } else {\n    trainableCount = countParamsInWeights(model2.trainableWeights);\n  }\n  return trainableCount;\n}\nfunction isModelSequentialLike(model2) {\n  let sequentialLike = true;\n  const nodesByDepth = [];\n  const nodes = [];\n  for (const depth in model2.nodesByDepth) {\n    nodesByDepth.push(model2.nodesByDepth[depth]);\n  }\n  for (const depthNodes of nodesByDepth) {\n    if (depthNodes.length > 1 || depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n      sequentialLike = false;\n      break;\n    }\n    nodes.push(...depthNodes);\n  }\n  if (sequentialLike) {\n    for (const layer of model2.layers) {\n      let flag = false;\n      for (const node of layer.inboundNodes) {\n        if (nodes.indexOf(node) !== -1) {\n          if (flag) {\n            sequentialLike = false;\n            break;\n          } else {\n            flag = true;\n          }\n        }\n      }\n      if (!sequentialLike) {\n        break;\n      }\n    }\n  }\n  return sequentialLike;\n}\nfunction printRow(fields, positions, printFn = console.log) {\n  let line = \"\";\n  for (let i = 0; i < fields.length; ++i) {\n    if (i > 0) {\n      line = line.slice(0, line.length - 1) + \" \";\n    }\n    line += fields[i];\n    line = line.slice(0, positions[i]);\n    line += \" \".repeat(positions[i] - line.length);\n  }\n  printFn(line);\n}\nfunction printLayerSummary(layer, positions, printFn) {\n  let outputShape;\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = \"multiple\";\n  }\n  const name = layer.name;\n  const className = layer.getClassName();\n  const fields = [`${name} (${className})`, outputShape, layer.countParams().toString()];\n  printRow(fields, positions, printFn);\n}\nfunction printLayerSummaryWithConnections(layer, positions, relevantNodes, printFn) {\n  let outputShape;\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = \"multiple\";\n  }\n  const connections = [];\n  for (const node of layer.inboundNodes) {\n    if (relevantNodes != null && relevantNodes.length > 0 && relevantNodes.indexOf(node) === -1) {\n      continue;\n    }\n    for (let i = 0; i < node.inboundLayers.length; ++i) {\n      const inboundLayer = node.inboundLayers[i].name;\n      const inboundLayerIndex = node.nodeIndices[i];\n      const inboundTensorIndex = node.tensorIndices[i];\n      connections.push(`${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);\n    }\n  }\n  const name = layer.name;\n  const className = layer.getClassName();\n  const firstConnection = connections.length === 0 ? \"\" : connections[0];\n  const fields = [\n    `${name} (${className})`,\n    outputShape,\n    layer.countParams().toString(),\n    firstConnection\n  ];\n  printRow(fields, positions, printFn);\n  for (let i = 1; i < connections.length; ++i) {\n    printRow([\"\", \"\", \"\", connections[i]], positions, printFn);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/utils/serialization_utils.js\nfunction isArrayItemInputOrOutputName(key, index, value) {\n  return (key === \"inboundNodes\" || key === \"outputLayers\" || key === \"inputLayers\") && index === 0 && typeof value === \"string\";\n}\nfunction convertPythonicToTs(pythonicConfig, key) {\n  if (pythonicConfig === null) {\n    return null;\n  } else if (typeof pythonicConfig === \"string\") {\n    return toCamelCase(pythonicConfig);\n  } else if (typeof pythonicConfig === \"number\" || typeof pythonicConfig === \"boolean\") {\n    return pythonicConfig;\n  } else if (pythonicConfig instanceof Array) {\n    const tsArray = [];\n    const arrayLength = pythonicConfig.length;\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = pythonicConfig[i];\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        tsArray.push(item);\n      } else {\n        tsArray.push(convertPythonicToTs(item, key));\n      }\n    }\n    return tsArray;\n  } else {\n    const tsDict = {};\n    for (const pythonicKey of Object.keys(pythonicConfig)) {\n      const pythonicValue = pythonicConfig[pythonicKey];\n      if (pythonicKey === \"name\" && typeof pythonicValue === \"string\") {\n        tsDict[pythonicKey] = pythonicValue;\n      } else {\n        const tsKey = toCamelCase(pythonicKey);\n        tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\n      }\n    }\n    return tsDict;\n  }\n}\nfunction convertTsToPythonic(tsConfig, key) {\n  if (tsConfig === null || tsConfig === void 0) {\n    return null;\n  } else if (typeof tsConfig === \"string\") {\n    return toSnakeCase(tsConfig);\n  } else if (typeof tsConfig === \"number\" || typeof tsConfig === \"boolean\") {\n    return tsConfig;\n  } else if (tsConfig instanceof Array) {\n    const pyArray = [];\n    const arrayLength = tsConfig.length;\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = tsConfig[i];\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        pyArray.push(item);\n      } else {\n        pyArray.push(convertTsToPythonic(item, key));\n      }\n    }\n    return pyArray;\n  } else {\n    const pyDict = {};\n    for (const tsKey of Object.keys(tsConfig)) {\n      const tsValue = tsConfig[tsKey];\n      const pyKey = toSnakeCase(tsKey);\n      if ((tsKey === \"name\" || tsKey === \"className\") && typeof tsValue === \"string\") {\n        pyDict[pyKey] = tsValue;\n      } else {\n        pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\n      }\n    }\n    return pyDict;\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/version.js\nvar version2 = \"3.13.0\";\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js\nfunction assertFeedCompatibility(key, val) {\n  if (key.dtype == null || key.dtype === val.dtype) {\n    return val;\n  }\n  try {\n    return cast(val, key.dtype);\n  } catch (err) {\n    throw new ValueError(`The dtype of the feed (${val.dtype}) can not be cast to the dtype of the key '${key.name}' (${key.dtype}).`);\n  }\n}\nvar FeedDict = class {\n  constructor(feeds) {\n    this.id2Value = {};\n    this.id2Mask = {};\n    this.name2Id = {};\n    if (feeds instanceof FeedDict) {\n      for (const id in feeds.id2Value) {\n        this.id2Value[id] = feeds.id2Value[id];\n        if (id in feeds.id2Mask) {\n          this.id2Mask[id] = feeds.id2Mask[id];\n        }\n      }\n    } else {\n      if (feeds == null) {\n        return;\n      }\n      for (const feed of feeds) {\n        this.add(feed.key, feed.value);\n      }\n    }\n  }\n  add(key, value, mask) {\n    if (this.id2Value[key.id] == null) {\n      this.id2Value[key.id] = assertFeedCompatibility(key, value);\n      this.name2Id[key.name] = key.id;\n      if (mask != null) {\n        this.id2Mask[key.id] = mask;\n      }\n    } else {\n      throw new ValueError(`Duplicate key: name=${key.name}, id=${key.id}`);\n    }\n    return this;\n  }\n  addFeed(feed) {\n    this.add(feed.key, feed.value);\n  }\n  hasKey(key) {\n    return this.id2Value[key.id] != null;\n  }\n  names() {\n    return Object.keys(this.name2Id);\n  }\n  getValue(key) {\n    if (key instanceof SymbolicTensor) {\n      if (this.id2Value[key.id] == null) {\n        throw new ValueError(`Nonexistent key: ${key.name}`);\n      } else {\n        return this.id2Value[key.id];\n      }\n    } else {\n      const id = this.name2Id[key];\n      if (id == null) {\n        throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n      }\n      return this.id2Value[id];\n    }\n  }\n  getMask(key) {\n    if (key instanceof SymbolicTensor) {\n      if (this.id2Value[key.id] == null) {\n        throw new ValueError(`Nonexistent key: ${key.name}`);\n      } else {\n        return this.id2Mask[key.id];\n      }\n    } else {\n      const id = this.name2Id[key];\n      if (id == null) {\n        throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n      }\n      return this.id2Mask[id];\n    }\n  }\n  disposeMasks() {\n    if (this.id2Mask != null) {\n      dispose(this.id2Mask);\n    }\n  }\n};\nvar cachedSorted = {};\nvar cachedRecipientCounts = {};\nfunction execute(fetches, feedDict, kwargs, probe) {\n  const training = kwargs == null ? false : kwargs[\"training\"];\n  const arrayFetches = Array.isArray(fetches);\n  const fetchArray = arrayFetches ? fetches : [fetches];\n  const outputNames = fetchArray.map((t) => t.name);\n  const finalOutputs = [];\n  const feedNames = feedDict.names();\n  for (const outputName of outputNames) {\n    if (feedNames.indexOf(outputName) !== -1) {\n      finalOutputs.push(feedDict.getValue(outputName));\n    } else {\n      finalOutputs.push(null);\n    }\n  }\n  if (probe != null) {\n    probe.maxNumTensors = -Infinity;\n    probe.minNumTensors = Infinity;\n  }\n  const fetchAndFeedKey = outputNames.join(\",\") + \"|\" + feedDict.names().join(\",\");\n  let sorted;\n  let recipientCounts;\n  if (cachedSorted[fetchAndFeedKey] == null) {\n    const out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);\n    sorted = out.sorted;\n    recipientCounts = out.recipientCounts;\n    cachedSorted[fetchAndFeedKey] = sorted;\n    cachedRecipientCounts[fetchAndFeedKey] = recipientCounts;\n  }\n  sorted = cachedSorted[fetchAndFeedKey];\n  recipientCounts = {};\n  if (!training) {\n    Object.assign(recipientCounts, cachedRecipientCounts[fetchAndFeedKey]);\n  }\n  const internalFeedDict = new FeedDict(feedDict);\n  for (let i = 0; i < sorted.length; ++i) {\n    if (probe != null) {\n      const numTensors = memory().numTensors;\n      if (numTensors > probe.maxNumTensors) {\n        probe.maxNumTensors = numTensors;\n      }\n      if (numTensors < probe.minNumTensors) {\n        probe.minNumTensors = numTensors;\n      }\n    }\n    const symbolic = sorted[i];\n    const srcLayer = symbolic.sourceLayer;\n    if (srcLayer instanceof InputLayer) {\n      continue;\n    }\n    const inputValues = [];\n    const inputMasks = [];\n    const tensorsToDispose = [];\n    let maskExists = false;\n    for (const input2 of symbolic.inputs) {\n      const value = internalFeedDict.getValue(input2);\n      const mask = internalFeedDict.getMask(input2);\n      inputValues.push(value);\n      inputMasks.push(mask);\n      if (mask != null) {\n        maskExists = true;\n      }\n      if (!training) {\n        recipientCounts[input2.name]--;\n        if (recipientCounts[input2.name] === 0 && !feedDict.hasKey(input2) && outputNames.indexOf(input2.name) === -1 && !value.isDisposed && input2.sourceLayer.stateful !== true) {\n          tensorsToDispose.push(value);\n        }\n      }\n    }\n    if (maskExists) {\n      kwargs = kwargs || {};\n      kwargs[\"mask\"] = inputMasks[0];\n    }\n    const outputTensors = toList(srcLayer.apply(inputValues, kwargs));\n    let outputMask = null;\n    if (srcLayer.supportsMasking) {\n      outputMask = srcLayer.computeMask(inputValues, inputMasks);\n    }\n    const layerOutputs = getNodeOutputs(symbolic);\n    const outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n    for (let i2 = 0; i2 < outputSymbolicTensors.length; ++i2) {\n      if (!internalFeedDict.hasKey(outputSymbolicTensors[i2])) {\n        internalFeedDict.add(outputSymbolicTensors[i2], outputTensors[i2], Array.isArray(outputMask) ? outputMask[0] : outputMask);\n      }\n      const index = outputNames.indexOf(outputSymbolicTensors[i2].name);\n      if (index !== -1) {\n        finalOutputs[index] = outputTensors[i2];\n      }\n    }\n    if (!training) {\n      dispose(tensorsToDispose);\n    }\n  }\n  internalFeedDict.disposeMasks();\n  return arrayFetches ? finalOutputs : finalOutputs[0];\n}\nfunction getTopologicalSortAndRecipientCounts(fetches, feedDict) {\n  util_exports.assert(fetches != null && fetches.length > 0, () => `Expected at least one fetch, got none`);\n  let finalSorted = [];\n  let finalRecipientMap = {};\n  if (fetches.length === 1) {\n    const out = getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);\n    finalSorted = out.sorted;\n    finalRecipientMap = out.recipientMap;\n  } else {\n    const visited = /* @__PURE__ */ new Set();\n    for (const fetch4 of fetches) {\n      const { sorted, recipientMap } = getTopologicalSortAndRecipientCountsForOneFetch(fetch4, feedDict);\n      for (const symbolicTensor of sorted) {\n        if (!visited.has(symbolicTensor.name)) {\n          finalSorted.push(symbolicTensor);\n          visited.add(symbolicTensor.name);\n        }\n      }\n      for (const name in recipientMap) {\n        if (finalRecipientMap[name] == null) {\n          finalRecipientMap[name] = /* @__PURE__ */ new Set();\n        }\n        recipientMap[name].forEach((recipient) => finalRecipientMap[name].add(recipient));\n      }\n    }\n  }\n  return {\n    sorted: finalSorted,\n    recipientCounts: recipientMap2Counts(finalRecipientMap)\n  };\n}\nfunction recipientMap2Counts(recipientMap) {\n  const recipientCounts = {};\n  for (const name in recipientMap) {\n    recipientCounts[name] = recipientMap[name].size;\n  }\n  return recipientCounts;\n}\nfunction getTopologicalSortAndRecipientCountsForOneFetch(fetch4, feedDict) {\n  const visited = /* @__PURE__ */ new Set();\n  const sorted = [];\n  const recipientMap = {};\n  for (const key of feedDict.names()) {\n    visited.add(key);\n  }\n  const stack2 = [];\n  const marks = [];\n  stack2.push(fetch4);\n  while (stack2.length > 0) {\n    const top = stack2[stack2.length - 1];\n    if (visited.has(top.name)) {\n      stack2.pop();\n      continue;\n    }\n    const topIsMarked = marks[marks.length - 1] === stack2.length - 1;\n    if (top.inputs.length === 0 || topIsMarked) {\n      stack2.pop();\n      sorted.push(top);\n      visited.add(top.name);\n      if (topIsMarked) {\n        marks.pop();\n      }\n    } else {\n      marks.push(stack2.length - 1);\n      for (const input2 of top.inputs) {\n        if (recipientMap[input2.name] == null) {\n          recipientMap[input2.name] = /* @__PURE__ */ new Set();\n        }\n        recipientMap[input2.name].add(top.name);\n        if (visited.has(input2.name)) {\n          continue;\n        }\n        stack2.push(input2);\n      }\n    }\n  }\n  return { sorted, recipientMap };\n}\nfunction getNodeOutputs(fetch4) {\n  let layerOutputs;\n  if (fetch4.sourceLayer.inboundNodes.length === 1) {\n    layerOutputs = fetch4.sourceLayer.output;\n  } else {\n    let nodeIndex = null;\n    for (let i = 0; i < fetch4.sourceLayer.inboundNodes.length; ++i) {\n      for (const outputTensor of fetch4.sourceLayer.inboundNodes[i].outputTensors) {\n        if (outputTensor.id === fetch4.id) {\n          nodeIndex = i;\n          break;\n        }\n      }\n    }\n    layerOutputs = fetch4.sourceLayer.getOutputAt(nodeIndex);\n  }\n  return layerOutputs;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/engine/container.js\nvar Container = class extends Layer {\n  constructor(args) {\n    super({});\n    this.containerNodes = /* @__PURE__ */ new Set();\n    this.name = args.name;\n    if (this.name == null) {\n      const prefix = this.getClassName().toLowerCase();\n      this.name = getUid(prefix);\n    }\n    this.supportsMasking = false;\n    this.trainable_ = true;\n    if (Array.isArray(args.inputs)) {\n      this.inputs = args.inputs.slice();\n    } else {\n      this.inputs = [args.inputs];\n    }\n    if (Array.isArray(args.outputs)) {\n      this.outputs = args.outputs.slice();\n    } else {\n      this.outputs = [args.outputs];\n    }\n    if (unique2(this.inputs).length !== this.inputs.length) {\n      throw new ValueError(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((x) => x.name)}`);\n    }\n    if (unique2(this.outputs).length !== this.outputs.length) {\n      console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((x) => x.name)}`);\n    }\n    this.inputLayers = [];\n    this.inputLayersNodeIndices = [];\n    this.inputLayersTensorIndices = [];\n    this.outputLayers = [];\n    this.outputLayersNodeIndices = [];\n    this.outputLayersTensorIndices = [];\n    this.layers = [];\n    this.internalContainerRefs = [];\n    for (const x of this.outputs) {\n      const layer = x.sourceLayer;\n      const nodeIndex = x.nodeIndex;\n      const tensorIndex = x.tensorIndex;\n      this.outputLayers.push(layer);\n      this.outputLayersNodeIndices.push(nodeIndex);\n      this.outputLayersTensorIndices.push(tensorIndex);\n    }\n    for (const x of this.inputs) {\n      const layer = x.sourceLayer;\n      const nodeIndex = x.nodeIndex;\n      const tensorIndex = x.tensorIndex;\n      assert2(nodeIndex === 0, \"input layer has >1 nodes\");\n      assert2(tensorIndex === 0, \"input layer has >1 tensors\");\n      this.inputLayers.push(layer);\n      this.inputLayersNodeIndices.push(nodeIndex);\n      this.inputLayersTensorIndices.push(tensorIndex);\n    }\n    this.inputNames = [];\n    this.outputNames = [];\n    this.feedInputShapes = [];\n    this.feedInputNames = [];\n    this.feedOutputNames = [];\n    for (let i = 0; i < this.inputLayers.length; i++) {\n      const layer = this.inputLayers[i];\n      if (!(layer instanceof InputLayer)) {\n        throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${args.inputs}. Input ${i} (0-based) originates from layer type ${layer.getClassName()}.`);\n      }\n      this.inputNames.push(layer.name);\n      this.feedInputShapes.push(layer.batchInputShape);\n      this.feedInputNames.push(layer.name);\n    }\n    for (const layer of this.outputLayers) {\n      this.outputNames.push(layer.name);\n    }\n    this.internalInputShapes = this.inputs.map((x) => x.shape);\n    this.internalOutputShapes = this.outputs.map((x) => x.shape);\n    const nodesDepths = {};\n    const nodeIDToNode = {};\n    const layersDepths = {};\n    const layerIDToLayer = {};\n    const layerIndices = {};\n    const nodesInDecreasingDepth = [];\n    const buildMapOfGraph = (tensor2, finishedNodes2, nodesInProgress2, layer, nodeIndex, tensorIndex) => {\n      if (layer == null || nodeIndex == null || tensorIndex == null) {\n        layer = tensor2.sourceLayer;\n        nodeIndex = tensor2.nodeIndex;\n        tensorIndex = tensor2.tensorIndex;\n      }\n      const node = layer.inboundNodes[nodeIndex];\n      if (nodesInProgress2.indexOf(node) !== -1) {\n        throw new RuntimeError(`The tensor ${tensor2.name} at layer \"${layer.name}\" is part of a cycle.`);\n      }\n      if (finishedNodes2.indexOf(node) !== -1) {\n        return;\n      }\n      this.containerNodes.add(Container.nodeKey(layer, nodeIndex));\n      if (!(layer.id in layerIndices)) {\n        layerIndices[layer.id] = Object.keys(layerIndices).length;\n      }\n      if (nodesInProgress2.indexOf(node) === -1) {\n        nodesInProgress2.push(node);\n      }\n      const numInboundLayers = node.inboundLayers.length;\n      for (let i = 0; i < numInboundLayers; i++) {\n        const x = node.inputTensors[i];\n        const layer2 = node.inboundLayers[i];\n        const nodeIndex2 = node.nodeIndices[i];\n        const tensorIndex2 = node.tensorIndices[i];\n        buildMapOfGraph(x, finishedNodes2, nodesInProgress2, layer2, nodeIndex2, tensorIndex2);\n      }\n      finishedNodes2.push(node);\n      while (nodesInProgress2.indexOf(node) >= 0) {\n        nodesInProgress2.splice(nodesInProgress2.indexOf(node), 1);\n      }\n      nodesInDecreasingDepth.push(node);\n    };\n    const finishedNodes = [];\n    const nodesInProgress = [];\n    for (const x of this.outputs) {\n      buildMapOfGraph(x, finishedNodes, nodesInProgress);\n    }\n    const reversedNodesInDecreasingDepth = nodesInDecreasingDepth.slice().reverse();\n    for (const node of reversedNodesInDecreasingDepth) {\n      nodeIDToNode[node.id] = node;\n      if (!(node.id in nodesDepths)) {\n        nodesDepths[node.id] = 0;\n      }\n      let depth = nodesDepths[node.id];\n      const previousDepth = layersDepths[node.outboundLayer.id] == null ? 0 : layersDepths[node.outboundLayer.id];\n      depth = Math.max(depth, previousDepth);\n      layersDepths[node.outboundLayer.id] = depth;\n      layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;\n      nodesDepths[node.id] = depth;\n      for (let i = 0; i < node.inboundLayers.length; i++) {\n        const inboundLayer = node.inboundLayers[i];\n        const nodeIndex = node.nodeIndices[i];\n        const inboundNode = inboundLayer.inboundNodes[nodeIndex];\n        const previousDepth2 = nodesDepths[inboundNode.id] == null ? 0 : nodesDepths[inboundNode.id];\n        nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth2);\n        nodeIDToNode[inboundNode.id] = inboundNode;\n      }\n    }\n    const nodesByDepth = {};\n    for (const nodeID in nodesDepths) {\n      const depth = nodesDepths[nodeID];\n      if (!(depth in nodesByDepth)) {\n        nodesByDepth[depth] = [];\n      }\n      nodesByDepth[depth].push(nodeIDToNode[nodeID]);\n    }\n    const layersByDepth = {};\n    for (const layerID in layersDepths) {\n      const depth = layersDepths[layerID];\n      if (!(depth in layersByDepth)) {\n        layersByDepth[depth] = [];\n      }\n      layersByDepth[depth].push(layerIDToLayer[layerID]);\n    }\n    let depthKeys = Object.keys(layersByDepth).map((x) => parseInt(x, 10)).sort(reverseNumberCompare);\n    this.layers = [];\n    for (const depth of depthKeys) {\n      const layersForDepth = layersByDepth[depth];\n      layersForDepth.sort((a, b) => {\n        const aIndex = layerIndices[a.id];\n        const bIndex = layerIndices[b.id];\n        if (aIndex < bIndex) {\n          return -1;\n        }\n        if (aIndex > bIndex) {\n          return 1;\n        }\n        return 0;\n      });\n      for (const layer of layersForDepth) {\n        if (layer instanceof Container) {\n          this.internalContainerRefs.push(layer);\n        }\n        this.layers.push(layer);\n      }\n    }\n    this.layersByDepth = layersByDepth;\n    depthKeys = Object.keys(nodesByDepth).map((x) => parseInt(x, 10)).sort(reverseNumberCompare);\n    const computableTensors = this.inputs.slice();\n    const layersWithCompleteInput = [];\n    for (const depth of depthKeys) {\n      for (const node of nodesByDepth[depth]) {\n        const layer = node.outboundLayer;\n        if (layer != null) {\n          for (const x of node.inputTensors) {\n            if (computableTensors.indexOf(x) === -1) {\n              throw new RuntimeError(`Graph disconnected: cannot obtain value for tensor ${x} at layer \"${layer.name}\". The following previous layers were accessed without issue: ${layersWithCompleteInput}`);\n            }\n          }\n          for (const x of node.outputTensors) {\n            computableTensors.push(x);\n          }\n          layersWithCompleteInput.push(layer.name);\n        }\n      }\n    }\n    this.nodesByDepth = nodesByDepth;\n    const allNames = this.layers.map((x) => x.name);\n    for (const name of allNames) {\n      const numOccurrences = allNames.filter((x) => x === name).length;\n      if (numOccurrences !== 1) {\n        throw new RuntimeError(`The name \"${name}\" is used ${numOccurrences} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(allNames));\n      }\n    }\n    this.outboundNodes = [];\n    this.inboundNodes = [];\n    new Node({\n      outboundLayer: this,\n      inboundLayers: [],\n      nodeIndices: [],\n      tensorIndices: [],\n      inputTensors: this.inputs,\n      outputTensors: this.outputs,\n      inputMasks: this.inputs.map((x) => null),\n      outputMasks: this.outputs.map((x) => null),\n      inputShapes: this.inputs.map((x) => x.shape),\n      outputShapes: this.outputs.map((x) => x.shape)\n    });\n    this.built = true;\n    this._refCount = 1;\n  }\n  assertNotDisposed() {\n    if (this._refCount === 0) {\n      throw new Error(`Container '${this.name}' is already disposed.`);\n    }\n  }\n  dispose() {\n    this.assertNotDisposed();\n    const result = { refCountAfterDispose: null, numDisposedVariables: 0 };\n    if (--this._refCount === 0) {\n      for (const layer of this.layers) {\n        result.numDisposedVariables += layer.dispose().numDisposedVariables;\n      }\n      for (const container of this.internalContainerRefs) {\n        result.numDisposedVariables += container.dispose().numDisposedVariables;\n      }\n    }\n    result.refCountAfterDispose = this._refCount;\n    return result;\n  }\n  get trainable() {\n    return this.trainable_;\n  }\n  set trainable(trainable) {\n    this.layers.forEach((layer) => {\n      layer._trainableWeights.forEach((w) => w.trainable = trainable);\n    });\n    this.trainable_ = trainable;\n  }\n  get trainableWeights() {\n    if (this._trainableWeights.length > 0) {\n      throw new ValueError(\"Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.\");\n    }\n    if (!this.trainable) {\n      return [];\n    }\n    let weights = [];\n    for (const layer of this.layers) {\n      weights = weights.concat(layer.trainableWeights);\n    }\n    return weights;\n  }\n  get nonTrainableWeights() {\n    const weights = [];\n    for (const layer of this.layers) {\n      weights.push(...layer.nonTrainableWeights);\n    }\n    if (!this.trainable) {\n      const trainableWeights = [];\n      for (const layer of this.layers) {\n        trainableWeights.push(...layer.trainableWeights);\n      }\n      return trainableWeights.concat(weights);\n    }\n    return weights;\n  }\n  get weights() {\n    return this.trainableWeights.concat(this.nonTrainableWeights);\n  }\n  loadWeights(weights, strict = true) {\n    const nameToWeight = {};\n    let totalWeightsCount = 0;\n    for (const layer of this.layers) {\n      for (const weight of layer.weights) {\n        if (nameToWeight[weight.originalName] != null) {\n          throw new ValueError(`Duplicate weight name: ${weight.originalName}`);\n        }\n        nameToWeight[weight.originalName] = weight;\n        totalWeightsCount++;\n      }\n    }\n    const weightValueTuples = [];\n    for (const name in weights) {\n      let validatedName = name;\n      if (nameToWeight[name] == null) {\n        const tokens = name.split(\"/\");\n        const shortenNameArray = tokens.slice(0, -2).concat([tokens[tokens.length - 1]]);\n        validatedName = shortenNameArray.join(\"/\");\n      }\n      if (nameToWeight[validatedName] != null) {\n        weightValueTuples.push([nameToWeight[validatedName], weights[name]]);\n      } else if (strict) {\n        throw new ValueError(`Provided weight data has no target variable: ${name}`);\n      }\n      delete nameToWeight[validatedName];\n    }\n    if (strict) {\n      const unsetNames = [];\n      for (const name in nameToWeight) {\n        unsetNames.push(name);\n      }\n      if (unsetNames.length > 0) {\n        throw new ValueError(`${unsetNames.length} of ${totalWeightsCount} weights are not set: ${unsetNames}`);\n      }\n    }\n    batchSetValue(weightValueTuples);\n  }\n  updatedConfig() {\n    const theConfig = this.getConfig();\n    const modelConfig = {};\n    modelConfig[\"className\"] = this.getClassName();\n    modelConfig[\"config\"] = theConfig;\n    modelConfig[\"kerasVersion\"] = `tfjs-layers ${version2}`;\n    modelConfig[\"backend\"] = \"TensorFlow.js\";\n    return modelConfig;\n  }\n  toJSON(unused, returnString = true) {\n    const modelConfig = convertTsToPythonic(this.updatedConfig());\n    return returnString ? JSON.stringify(modelConfig) : modelConfig;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = toList(inputs);\n      const feedDict = new FeedDict();\n      for (let i = 0; i < this.inputs.length; ++i) {\n        feedDict.add(this.inputs[i], inputs[i]);\n      }\n      return execute(this.outputs, feedDict, kwargs);\n    });\n  }\n  computeMask(inputs, mask) {\n    return tidy(() => {\n      inputs = toList(inputs);\n      let masks;\n      if (mask == null) {\n        masks = pyListRepeat(null, inputs.length);\n      } else {\n        masks = toList(mask);\n      }\n      return this.runInternalGraph(inputs, masks)[1];\n    });\n  }\n  computeOutputShape(inputShape) {\n    const inputShapes = normalizeShapeList(inputShape);\n    if (inputShapes.length !== this.inputLayers.length) {\n      throw new ValueError(`Invalid inputShape argument ${inputShape}: model has ${this.inputLayers.length} tensor inputs.`);\n    }\n    const layersToOutputShapes = {};\n    for (let i = 0; i < inputShapes.length; i++) {\n      const layer = this.inputLayers[i];\n      const inputShape2 = inputShapes[i];\n      const shapeKey = layer.name + \"_0_0\";\n      layersToOutputShapes[shapeKey] = inputShape2;\n    }\n    const depthKeys = Object.keys(this.nodesByDepth).map((x) => parseInt(x, 10)).sort(reverseNumberCompare);\n    if (depthKeys.length > 1) {\n      for (const depth of depthKeys) {\n        const nodes = this.nodesByDepth[depth];\n        for (const node of nodes) {\n          const layer = node.outboundLayer;\n          if (this.inputLayers.map((x) => x.id).indexOf(layer.id) !== -1) {\n            continue;\n          }\n          const inputShapes2 = [];\n          for (let j = 0; j < node.inboundLayers.length; j++) {\n            const inboundLayer = node.inboundLayers[j];\n            const nodeIndex2 = node.nodeIndices[j];\n            const tensorIndex = node.tensorIndices[j];\n            const shapeKey = `${inboundLayer.name}_${nodeIndex2}_${tensorIndex}`;\n            const inputShape2 = layersToOutputShapes[shapeKey];\n            inputShapes2.push(inputShape2);\n          }\n          const outputShape = layer.computeOutputShape(singletonOrArray(inputShapes2));\n          const outputShapes2 = normalizeShapeList(outputShape);\n          const nodeIndex = layer.inboundNodes.indexOf(node);\n          for (let j = 0; j < outputShapes2.length; j++) {\n            const shapeKey = `${layer.name}_${nodeIndex}_${j}`;\n            layersToOutputShapes[shapeKey] = outputShapes2[j];\n          }\n        }\n      }\n    }\n    const outputShapes = [];\n    const outputShapeKeys = [];\n    for (let i = 0; i < this.outputLayers.length; i++) {\n      const layer = this.outputLayers[i];\n      const nodeIndex = this.outputLayersNodeIndices[i];\n      const tensorIndex = this.outputLayersTensorIndices[i];\n      const shapeKey = `${layer.name}_${nodeIndex}_${tensorIndex}`;\n      outputShapeKeys.push(shapeKey);\n    }\n    for (let i = 0; i < outputShapeKeys.length; i++) {\n      const key = outputShapeKeys[i];\n      assert2(key in layersToOutputShapes);\n      outputShapes.push(layersToOutputShapes[key]);\n    }\n    return singletonOrArray(outputShapes);\n  }\n  runInternalGraph(inputs, masks) {\n    if (masks == null) {\n      masks = pyListRepeat(null, inputs.length);\n    }\n    const tensorMap = {};\n    for (let i = 0; i < this.inputs.length; ++i) {\n      const x = this.inputs[i];\n      const y = inputs[i];\n      const mask = masks[i];\n      tensorMap[x.id] = [y, mask];\n    }\n    const depthKeys = Object.keys(this.nodesByDepth).map((x) => parseInt(x, 10)).sort(reverseNumberCompare);\n    for (const depth of depthKeys) {\n      const nodes = this.nodesByDepth[depth];\n      for (const node of nodes) {\n        const layer = node.outboundLayer;\n        const referenceInputTensors = node.inputTensors;\n        const referenceOutputTensors = node.outputTensors;\n        const computedData = new Array();\n        for (const x of referenceInputTensors) {\n          if (x.id in tensorMap) {\n            computedData.push(tensorMap[x.id]);\n          }\n        }\n        if (computedData.length === referenceInputTensors.length) {\n          let kwargs = {};\n          let computedTensors;\n          let computedMasks;\n          let outputTensors2;\n          let outputMasks2;\n          if (node.callArgs != null) {\n            kwargs = node.callArgs;\n          }\n          if (computedData.length === 1) {\n            const [computedTensor, computedMask] = computedData[0];\n            if (kwargs[\"mask\"] == null) {\n              kwargs[\"mask\"] = computedMask;\n            }\n            outputTensors2 = toList(layer.call(computedTensor, kwargs));\n            outputMasks2 = toList(layer.computeMask(computedTensor, computedMask));\n            computedTensors = [computedTensor];\n            computedMasks = [computedMask];\n          } else {\n            computedTensors = computedData.map((x) => x[0]);\n            computedMasks = computedData.map((x) => x[1]);\n            if (kwargs[\"mask\"] == null) {\n              kwargs[\"mask\"] = computedMasks;\n            }\n            outputTensors2 = toList(layer.call(computedTensors, kwargs));\n            outputMasks2 = toList(layer.computeMask(computedTensors, computedMasks));\n          }\n          if (layer.activityRegularizer) {\n            throw new NotImplementedError(\"LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.\");\n          }\n          for (let i = 0; i < referenceOutputTensors.length; ++i) {\n            const x = referenceOutputTensors[i];\n            const y = outputTensors2[i];\n            const mask = outputMasks2[i];\n            tensorMap[x.id] = [y, mask];\n          }\n        }\n      }\n    }\n    const outputTensors = [];\n    const outputMasks = [];\n    const outputShapes = [];\n    for (const x of this.outputs) {\n      assert2(x.id in tensorMap, `Could not compute output ${x.name} : ${x.id}`);\n      const [tensor2, mask] = tensorMap[x.id];\n      outputShapes.push(tensor2.shape);\n      outputTensors.push(tensor2);\n      outputMasks.push(mask);\n    }\n    return [outputTensors, outputMasks, outputShapes];\n  }\n  buildNodeConversionMap(layers) {\n    const nodeConversionMap = {};\n    let keptNodes;\n    for (const layer of this.layers) {\n      keptNodes = layer instanceof Container ? 1 : 0;\n      for (let originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n        const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n        if (this.containerNodes.has(nodeKey)) {\n          nodeConversionMap[nodeKey] = keptNodes;\n          keptNodes += 1;\n        }\n      }\n    }\n    return nodeConversionMap;\n  }\n  getLayer(name, index) {\n    if (index != null) {\n      if (this.layers.length <= index) {\n        throw new ValueError(`Was asked to retrieve layer at index ${index}, but model only has ${this.layers.length} layer(s).`);\n      } else {\n        return this.layers[index];\n      }\n    } else {\n      if (name == null) {\n        throw new ValueError(\"Provide either a layer name or layer index\");\n      }\n    }\n    for (const layer of this.layers) {\n      if (layer.name === name) {\n        return layer;\n      }\n    }\n    throw new ValueError(`No such layer: ${name}`);\n  }\n  calculateLosses() {\n    return tidy(() => {\n      const losses2 = [];\n      for (const layer of this.layers) {\n        for (let nodeIndex = 0; nodeIndex < layer.inboundNodes.length; ++nodeIndex) {\n          const nodeKey = Container.nodeKey(layer, nodeIndex);\n          if (this.containerNodes.has(nodeKey)) {\n            losses2.push(...layer.calculateLosses());\n          }\n        }\n      }\n      return losses2;\n    });\n  }\n  getConfig() {\n    const config = { name: this.name };\n    const nodeConversionMap = this.buildNodeConversionMap(this.layers);\n    const layerConfigs = [];\n    for (const layer of this.layers) {\n      const layerClassName = layer.getClassName();\n      const layerConfig = layer.getConfig();\n      const filteredInboundNodes = [];\n      for (let originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n        const node = layer.inboundNodes[originalNodeIndex];\n        const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n        let kwargs = {};\n        if (this.containerNodes.has(nodeKey)) {\n          if (node.callArgs) {\n            try {\n              JSON.stringify(node.callArgs);\n              kwargs = node.callArgs;\n            } catch (err) {\n              console.warn(`Layer ${layer.name} was passed non-serializable keyword arguments: ${node.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`);\n              kwargs = {};\n            }\n          }\n          if (node.inboundLayers.length > 0) {\n            const nodeData = [];\n            for (let i = 0; i < node.inboundLayers.length; i++) {\n              const inboundLayer = node.inboundLayers[i];\n              const nodeIndex = node.nodeIndices[i];\n              const tensorIndex = node.tensorIndices[i];\n              const nodeKey2 = Container.nodeKey(inboundLayer, nodeIndex);\n              let newNodeIndex = nodeConversionMap[nodeKey2];\n              if (newNodeIndex == null) {\n                newNodeIndex = 0;\n              }\n              nodeData.push([inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);\n            }\n            filteredInboundNodes.push(nodeData);\n          }\n        }\n      }\n      const dict = {};\n      dict[\"name\"] = layer.name;\n      dict[\"className\"] = layerClassName;\n      dict[\"config\"] = layerConfig;\n      dict[\"inboundNodes\"] = filteredInboundNodes;\n      layerConfigs.push(dict);\n    }\n    config[\"layers\"] = layerConfigs;\n    const modelInputs = [];\n    for (let i = 0; i < this.inputLayers.length; i++) {\n      const layer = this.inputLayers[i];\n      const nodeIndex = this.inputLayersNodeIndices[i];\n      const nodeKey = Container.nodeKey(layer, nodeIndex);\n      if (!this.containerNodes.has(nodeKey)) {\n        continue;\n      }\n      let newNodeIndex = nodeConversionMap[nodeKey];\n      if (newNodeIndex === null || newNodeIndex === void 0) {\n        newNodeIndex = 0;\n      }\n      const tensorIndex = this.inputLayersTensorIndices[i];\n      modelInputs.push([layer.name, newNodeIndex, tensorIndex]);\n    }\n    config[\"inputLayers\"] = modelInputs;\n    const modelOutputs = [];\n    for (let i = 0; i < this.outputLayers.length; i++) {\n      const layer = this.outputLayers[i];\n      const nodeIndex = this.outputLayersNodeIndices[i];\n      const nodeKey = Container.nodeKey(layer, nodeIndex);\n      if (!this.containerNodes.has(nodeKey)) {\n        continue;\n      }\n      let newNodeIndex = nodeConversionMap[nodeKey];\n      if (newNodeIndex === null || newNodeIndex === void 0) {\n        newNodeIndex = 0;\n      }\n      const tensorIndex = this.outputLayersTensorIndices[i];\n      modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);\n    }\n    config[\"outputLayers\"] = modelOutputs;\n    return config;\n  }\n  static fromConfig(cls, config, customObjects = {}, fastWeightInit = false) {\n    const createdLayers = {};\n    const unprocessedNodes = {};\n    function addUnprocessedNode(layer, nodeData) {\n      if (!(layer.name in unprocessedNodes)) {\n        unprocessedNodes[layer.name] = [nodeData];\n      } else {\n        unprocessedNodes[layer.name].push(nodeData);\n      }\n    }\n    function processNode(layer, nodeData) {\n      const inputTensors2 = [];\n      let kwargs;\n      for (const inputData of nodeData) {\n        const inboundLayerName = inputData[0];\n        const inboundNodeIndex = inputData[1];\n        const inboundTensorIndex = inputData[2];\n        kwargs = inputData[3] == null ? {} : inputData[3];\n        if (!(inboundLayerName in createdLayers)) {\n          addUnprocessedNode(layer, nodeData);\n          return;\n        }\n        const inboundLayer = createdLayers[inboundLayerName];\n        if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {\n          addUnprocessedNode(layer, nodeData);\n          return;\n        }\n        const inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];\n        inputTensors2.push(inboundNode.outputTensors[inboundTensorIndex]);\n      }\n      if (inputTensors2.length > 0) {\n        layer.apply(singletonOrArray(inputTensors2), kwargs);\n      }\n    }\n    function processLayer(layerData) {\n      const layerName = layerData[\"name\"];\n      const layer = deserialize(layerData, config[\"customObjects\"] != null ? config[\"customObjects\"] : {});\n      layer.setFastWeightInitDuringBuild(fastWeightInit);\n      createdLayers[layerName] = layer;\n      const inboundNodesData = layerData[\"inboundNodes\"];\n      inboundNodesData.forEach((nodeData) => {\n        if (!(nodeData instanceof Array)) {\n          throw new ValueError(`Corrupted configuration, expected array for nodeData: ${nodeData}`);\n        }\n        addUnprocessedNode(layer, nodeData);\n      });\n    }\n    const name = config[\"name\"];\n    const layersFromConfig = config[\"layers\"];\n    for (const layerData of layersFromConfig) {\n      processLayer(layerData);\n    }\n    while (!isObjectEmpty(unprocessedNodes)) {\n      for (const layerData of layersFromConfig) {\n        const layer = createdLayers[layerData[\"name\"]];\n        if (layer.name in unprocessedNodes) {\n          const currentUnprocessedNodesForLayer = unprocessedNodes[layer.name];\n          delete unprocessedNodes[layer.name];\n          for (const nodeData of currentUnprocessedNodesForLayer) {\n            processNode(layer, nodeData);\n          }\n        }\n      }\n    }\n    const inputTensors = [];\n    const outputTensors = [];\n    const inputLayersFromConfig = config[\"inputLayers\"];\n    for (const layerData of inputLayersFromConfig) {\n      const layerName = layerData[0];\n      const nodeIndex = layerData[1];\n      const tensorIndex = layerData[2];\n      assert2(layerName in createdLayers);\n      const layer = createdLayers[layerName];\n      const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n      inputTensors.push(layerOutputTensors[tensorIndex]);\n    }\n    const outputLayersFromConfig = config[\"outputLayers\"];\n    for (const layerData of outputLayersFromConfig) {\n      const layerName = layerData[0];\n      const nodeIndex = layerData[1];\n      const tensorIndex = layerData[2];\n      assert2(layerName in createdLayers);\n      const layer = createdLayers[layerName];\n      const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n      outputTensors.push(layerOutputTensors[tensorIndex]);\n    }\n    return new cls({ inputs: inputTensors, outputs: outputTensors, name });\n  }\n  get stateful() {\n    if (this._stateful) {\n      throw new ValueError(\"Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.\");\n    }\n    for (const layer of this.layers) {\n      if (layer.stateful) {\n        return true;\n      }\n    }\n    return false;\n  }\n  resetStates() {\n    tidy(() => {\n      this.layers.forEach((layer) => {\n        if (layer.stateful) {\n          layer.resetStates();\n        }\n      });\n    });\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/engine/training_utils.js\nfunction standardizeSampleOrClassWeights(xWeight, outputNames, weightType) {\n  const numOutputs = outputNames.length;\n  if (xWeight == null || Array.isArray(xWeight) && xWeight.length === 0) {\n    return outputNames.map((name) => null);\n  }\n  if (numOutputs === 1) {\n    if (Array.isArray(xWeight) && xWeight.length === 1) {\n      return xWeight;\n    } else if (typeof xWeight === \"object\" && outputNames[0] in xWeight) {\n      return [xWeight[outputNames[0]]];\n    } else {\n      return [xWeight];\n    }\n  }\n  if (Array.isArray(xWeight)) {\n    if (xWeight.length !== numOutputs) {\n      throw new Error(`Provided ${weightType} is an array of ${xWeight.length} element(s), but the model has ${numOutputs} outputs. Make sure a set of weights is provided for each model output.`);\n    }\n    return xWeight;\n  } else if (typeof xWeight === \"object\" && Object.keys(xWeight).length > 0 && typeof xWeight[Object.keys(xWeight)[0]] === \"object\") {\n    const output = [];\n    outputNames.forEach((outputName) => {\n      if (outputName in xWeight) {\n        output.push(xWeight[outputName]);\n      } else {\n        output.push(null);\n      }\n    });\n    return output;\n  } else {\n    throw new Error(`The model has multiple (${numOutputs}) outputs, so ${weightType} must be either an array with ${numOutputs} elements or an object with ${outputNames} keys. Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);\n  }\n}\nfunction standardizeClassWeights(classWeight, outputNames) {\n  return standardizeSampleOrClassWeights(classWeight, outputNames, \"classWeight\");\n}\nasync function standardizeWeights(y, sampleWeight, classWeight, sampleWeightMode) {\n  if (sampleWeight != null || sampleWeightMode != null) {\n    throw new Error(\"Support sampleWeight is not implemented yet\");\n  }\n  if (classWeight != null) {\n    const yClasses = tidy(() => {\n      if (y.shape.length === 1) {\n        return clone(y);\n      } else if (y.shape.length === 2) {\n        if (y.shape[1] > 1) {\n          const axis = 1;\n          return argMax(y, axis);\n        } else if (y.shape[1] === 1) {\n          return reshape(y, [y.shape[0]]);\n        } else {\n          throw new Error(`Encountered unexpected last-dimension size (${y.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);\n        }\n      } else {\n        throw new Error(`Unexpected rank of target (y) tensor (${y.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);\n      }\n    });\n    const yClassIndices = Array.from(await yClasses.data());\n    dispose(yClasses);\n    const classSampleWeight = [];\n    yClassIndices.forEach((classIndex) => {\n      if (classWeight[classIndex] == null) {\n        throw new Error(`classWeight must contain all classes in the training data. The class ${classIndex} exists in the data but not in classWeight`);\n      } else {\n        classSampleWeight.push(classWeight[classIndex]);\n      }\n    });\n    return tensor1d(classSampleWeight, \"float32\");\n  } else {\n    return null;\n  }\n}\nfunction computeWeightedLoss2(losses2, sampleWeights) {\n  return mul(losses2, sampleWeights);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/engine/training_dataset.js\nvar DEFAULT_VALIDATION_BATCH_SIZE = 32;\nfunction standardizeDataIteratorOutput(model2, iteratorOut) {\n  let xs;\n  let ys;\n  const iteratorOutObj = iteratorOut;\n  xs = iteratorOutObj[\"xs\"];\n  ys = iteratorOutObj[\"ys\"];\n  util_exports.assert(xs != null && ys != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \\`{xs: xVal, ys: yVal}\\`, where the two values may be \\`tf.Tensor\\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${iteratorOut}`);\n  const flattenedXs = flattenTensorOrArrayOrMap(\"input\", model2.inputNames, xs);\n  const flattenedYs = flattenTensorOrArrayOrMap(\"output\", model2.outputNames, ys);\n  const batchSize = flattenedXs[0].shape[0];\n  util_exports.assert(flattenedXs.length === model2.inputs.length, () => `LayersModel has ${model2.inputs.length} inputs, but the dataset provides ${flattenedXs.length} inputs.  (Expected input keys: ${JSON.stringify(model2.inputNames)})`);\n  util_exports.assert(flattenedYs.length === model2.outputs.length, () => `LayersModel has ${model2.outputs.length} outputs, but the dataset provides ${flattenedYs.length} outputs.  (Expected output keys: ${JSON.stringify(model2.outputNames)})`);\n  for (let xIndex = 0; xIndex < flattenedXs.length; xIndex++) {\n    util_exports.assert(flattenedXs[xIndex].shape[0] === batchSize, () => `Batch size mismatch: input ${model2.inputNames[xIndex]} has ${flattenedXs[xIndex].shape[0]}; expected  ${batchSize} based on input ${model2.inputNames[0]}.`);\n  }\n  for (let yIndex = 0; yIndex < flattenedYs.length; yIndex++) {\n    util_exports.assert(flattenedYs[yIndex].shape[0] === batchSize, () => `Batch size mismatch: output ${model2.outputNames[yIndex]} has ${flattenedYs[yIndex].shape[0]}; expected  ${batchSize} based on input ${model2.inputNames[0]}.`);\n  }\n  return { xs: flattenedXs, ys: flattenedYs };\n}\nfunction flattenTensorOrArrayOrMap(inputOrOutput, names, values) {\n  if (values instanceof Tensor) {\n    return [values];\n  } else if (Array.isArray(values)) {\n    util_exports.assert(values.length === names.length, () => `Received an array of ${values.length} Tensors, but expected ${names.length} to match the ${inputOrOutput} keys ${names}.`);\n    return values;\n  } else {\n    const result = [];\n    for (const name of names) {\n      if (values[name] == null) {\n        throw new ValueError(`The feature data generated by the dataset lacks the required ${inputOrOutput} key '${name}'.`);\n      }\n      result.push(values[name]);\n    }\n    return result;\n  }\n}\nfunction standardizeTensorValidationData(data) {\n  if (data.length === 3) {\n    throw new NotImplementedError(\"Validation with sample weights is not implemented yet.\");\n  }\n  return { xs: data[0], ys: data[1] };\n}\nasync function fitDataset(model2, dataset, args) {\n  const hasBatchesPerEpoch = args.batchesPerEpoch != null;\n  util_exports.assert(model2.optimizer != null, () => \"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).\");\n  util_exports.assert(args != null, () => `For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.`);\n  util_exports.assert(args.epochs != null && args.epochs > 0 && Number.isInteger(args.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${args.epochs}`);\n  util_exports.assert(!hasBatchesPerEpoch || args.batchesPerEpoch > 0 && Number.isInteger(args.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${args.batchesPerEpoch}`);\n  util_exports.assert(args[\"validationSplit\"] == null, () => \"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.\");\n  if (model2.isTraining) {\n    throw new Error(\"Cannot start training because another fit() call is ongoing.\");\n  }\n  model2.isTraining = true;\n  try {\n    const doValidation = args.validationData != null;\n    let valXs;\n    let valYs;\n    if (doValidation) {\n      if (isDatasetObject(args.validationData)) {\n        util_exports.assert(args.validationBatches == null || args.validationBatches > 0 && Number.isInteger(args.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${args.validationBatches}`);\n      } else {\n        const validationData = standardizeTensorValidationData(args.validationData);\n        valXs = validationData.xs;\n        valYs = validationData.ys;\n      }\n    }\n    const trainFunction = model2.makeTrainFunction();\n    const outLabels = model2.getDedupedMetricsNames();\n    let callbackMetrics;\n    if (doValidation) {\n      callbackMetrics = outLabels.slice().concat(outLabels.map((n) => \"val_\" + n));\n    } else {\n      callbackMetrics = outLabels.slice();\n    }\n    const callbacks2 = standardizeCallbacks(args.callbacks, args.yieldEvery);\n    const verbose = args.verbose == null ? 1 : args.verbose;\n    const { callbackList, history } = configureCallbacks(callbacks2, verbose, args.epochs, null, null, getStepsPerEpoch(dataset, args), null, doValidation, callbackMetrics);\n    callbackList.setModel(model2);\n    model2.history = history;\n    await callbackList.onTrainBegin();\n    model2.stopTraining_ = false;\n    let epoch = args.initialEpoch == null ? 0 : args.initialEpoch;\n    let dataIterator = await dataset.iterator();\n    while (epoch < args.epochs) {\n      const epochLogs = {};\n      await callbackList.onEpochBegin(epoch);\n      let stepsDone = 0;\n      let batchIndex = 0;\n      if (!hasBatchesPerEpoch) {\n        dataIterator = await dataset.iterator();\n      }\n      while (hasBatchesPerEpoch ? stepsDone < args.batchesPerEpoch : true) {\n        const iteratorOut = await dataIterator.next();\n        if (hasBatchesPerEpoch && iteratorOut.done) {\n          console.warn(`You provided \\`batchesPerEpoch\\` as ${args.batchesPerEpoch}, but your dataset iterator ran out of data after ${stepsDone} batches; interrupting training. Make sure that your dataset can generate at least \\`batchesPerEpoch * epochs\\` batches (in this case, ${args.batchesPerEpoch * args.epochs} batches). You may need to use the repeat() function when building your dataset.`);\n          break;\n        }\n        if (iteratorOut.value != null) {\n          const { xs, ys } = standardizeDataIteratorOutput(model2, iteratorOut.value);\n          const batchLogs = {};\n          batchLogs[\"batch\"] = batchIndex;\n          batchLogs[\"size\"] = xs[0].shape[0];\n          await callbackList.onBatchBegin(batchIndex, batchLogs);\n          const sampleWeights = [];\n          if (args.classWeight != null) {\n            const standardClassWeights = standardizeClassWeights(args.classWeight, model2.outputNames);\n            for (let i = 0; i < standardClassWeights.length; ++i) {\n              sampleWeights.push(await standardizeWeights(ys[i], null, standardClassWeights[i]));\n            }\n          }\n          const ins = xs.concat(ys).concat(sampleWeights);\n          const outs = trainFunction(ins);\n          dispose(ins);\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            keep(out);\n          }\n          await callbackList.onBatchEnd(batchIndex, batchLogs);\n          disposeTensorsInLogs(batchLogs);\n          batchIndex++;\n          stepsDone++;\n        }\n        if (hasBatchesPerEpoch ? stepsDone >= args.batchesPerEpoch : iteratorOut.done) {\n          if (doValidation) {\n            let valOuts;\n            if (isDatasetObject(args.validationData)) {\n              valOuts = toList(await model2.evaluateDataset(args.validationData, { batches: args.validationBatches }));\n            } else {\n              valOuts = toList(model2.evaluate(valXs, valYs, {\n                batchSize: args.validationBatchSize == null ? DEFAULT_VALIDATION_BATCH_SIZE : args.validationBatchSize,\n                verbose: 0\n              }));\n            }\n            for (let i = 0; i < model2.metricsNames.length; ++i) {\n              epochLogs[`val_${model2.metricsNames[i]}`] = valOuts[i];\n            }\n          }\n          break;\n        }\n        if (model2.stopTraining_) {\n          break;\n        }\n      }\n      await callbackList.onEpochEnd(epoch, epochLogs);\n      epoch++;\n      if (model2.stopTraining_) {\n        break;\n      }\n    }\n    await callbackList.onTrainEnd();\n    await model2.history.syncData();\n    return model2.history;\n  } finally {\n    model2.isTraining = false;\n  }\n}\nfunction getStepsPerEpoch(dataset, args) {\n  let stepsPerEpoch = null;\n  if (args.batchesPerEpoch != null) {\n    stepsPerEpoch = args.batchesPerEpoch;\n  } else if (Number.isFinite(dataset.size)) {\n    stepsPerEpoch = dataset.size;\n  }\n  return stepsPerEpoch;\n}\nfunction isDatasetObject(dataset) {\n  return typeof dataset.iterator === \"function\";\n}\nfunction isLazyIteratorObject(iterator) {\n  return typeof iterator.next === \"function\";\n}\nasync function evaluateDataset(model2, dataset, args) {\n  args = args || {};\n  const hasBatches = args.batches != null;\n  const f = model2.testFunction;\n  let outs = [];\n  if (args.verbose > 0) {\n    throw new NotImplementedError(\"Verbose mode is not implemented yet.\");\n  }\n  util_exports.assert(!hasBatches || args.batches > 0 && Number.isInteger(args.batches), () => `Test loop expects \\`batches\\` to be a positive integer, but received ${JSON.stringify(args.batches)}`);\n  const dataIterator = isLazyIteratorObject(dataset) ? dataset : await dataset.iterator();\n  let numExamples = 0;\n  let batch = 0;\n  while (hasBatches ? batch < args.batches : true) {\n    const iteratorOut = await dataIterator.next();\n    outs = tidy(() => {\n      if (iteratorOut.value) {\n        const { xs, ys } = standardizeDataIteratorOutput(model2, iteratorOut.value);\n        const xsAndYs = xs.concat(ys);\n        const batchOuts = tidy(() => f(xsAndYs));\n        dispose(xsAndYs);\n        if (batch === 0) {\n          for (let i = 0; i < batchOuts.length; ++i) {\n            outs.push(scalar(0));\n          }\n        }\n        const batchSize = xsAndYs[0].shape[0];\n        for (let i = 0; i < batchOuts.length; ++i) {\n          const batchOut = batchOuts[i];\n          const oldScalar = outs[i];\n          outs[i] = tidy(() => add2(outs[i], mul(batchSize, batchOut)));\n          if (batch > 0) {\n            dispose(oldScalar);\n          }\n        }\n        dispose(batchOuts);\n        numExamples += batchSize;\n        ++batch;\n      }\n      return outs;\n    });\n    if (iteratorOut.done) {\n      if (hasBatches) {\n        console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \\`batches\\` batches (in this case, ${args.batches} batches). You may need to use the repeat() function when building your dataset.`);\n      }\n      break;\n    }\n  }\n  for (let i = 0; i < outs.length; ++i) {\n    const oldScalar = outs[i];\n    outs[i] = div(outs[i], numExamples);\n    dispose(oldScalar);\n  }\n  return singletonOrArray(outs);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/engine/training_tensors.js\nfunction checkBatchSize(batchSize) {\n  util_exports.assert(batchSize > 0 && Number.isInteger(batchSize), () => `batchSize is required to be a positive integer, but got ${batchSize}`);\n}\nfunction sliceArrays(arrays, start, stop) {\n  if (arrays == null) {\n    return [null];\n  } else if (Array.isArray(arrays)) {\n    return arrays.map((array2) => sliceAlongFirstAxis(array2, start, stop - start));\n  } else {\n    return sliceAlongFirstAxis(arrays, start, stop - start);\n  }\n}\nfunction sliceArraysByIndices(arrays, indices) {\n  return tidy(() => {\n    if (arrays == null) {\n      return null;\n    } else if (Array.isArray(arrays)) {\n      return arrays.map((array2) => sliceArraysByIndices(array2, indices));\n    } else {\n      return gather2(arrays, indices.dtype === \"int32\" ? indices : cast(indices, \"int32\"));\n    }\n  });\n}\nfunction makeBatches(size, batchSize) {\n  const output = [];\n  let batchStart = 0;\n  let batchEnd = null;\n  while (batchStart < size) {\n    batchEnd = batchStart + batchSize;\n    if (batchEnd >= size) {\n      batchEnd = size;\n    }\n    output.push([batchStart, batchEnd]);\n    batchStart = batchEnd;\n  }\n  return output;\n}\nasync function fitLoop(model2, f, ins, outLabels, batchSize, epochs, verbose, callbacks2, valF, valIns, shuffle2, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {\n  if (batchSize == null) {\n    batchSize = 32;\n  }\n  if (epochs == null) {\n    epochs = 1;\n  }\n  if (shuffle2 == null) {\n    shuffle2 = true;\n  }\n  if (initialEpoch == null) {\n    initialEpoch = 0;\n  }\n  let doValidation = false;\n  if (valF != null && valIns != null) {\n    doValidation = true;\n  }\n  if (validationSteps != null) {\n    doValidation = true;\n    if (stepsPerEpoch == null) {\n      throw new ValueError(\"Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.\");\n    }\n  }\n  const numTrainSamples = model2.checkNumSamples(ins, batchSize, stepsPerEpoch, \"steps_per_epoch\");\n  let indexArray;\n  if (numTrainSamples != null) {\n    indexArray = range2(0, numTrainSamples);\n  }\n  if (verbose == null) {\n    verbose = 1;\n  }\n  const { callbackList, history } = configureCallbacks(callbacks2, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics);\n  callbackList.setModel(model2);\n  model2.history = history;\n  await callbackList.onTrainBegin();\n  model2.stopTraining_ = false;\n  for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n    await callbackList.onEpochBegin(epoch);\n    const epochLogs = {};\n    if (stepsPerEpoch != null) {\n      throw new NotImplementedError(\"stepsPerEpoch mode is not implemented yet.\");\n    } else {\n      if (shuffle2 === \"batch\") {\n        throw new NotImplementedError(\"batch shuffling is not implemneted yet\");\n      } else if (shuffle2) {\n        util_exports.shuffle(indexArray);\n      }\n      const epochIndexArray1D = tensor1d(indexArray);\n      const batches = makeBatches(numTrainSamples, batchSize);\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchLogs = {};\n        await callbackList.onBatchBegin(batchIndex, batchLogs);\n        tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds = sliceAlongFirstAxis(epochIndexArray1D, batchStart, batchEnd - batchStart);\n          batchLogs[\"batch\"] = batchIndex;\n          batchLogs[\"size\"] = batchEnd - batchStart;\n          const insBatch = sliceArraysByIndices(ins, batchIds);\n          const outs = f(insBatch);\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            keep(out);\n          }\n          if (batchIndex === batches.length - 1) {\n            if (doValidation) {\n              const valOuts = model2.testLoop(valF, valIns, batchSize);\n              for (let i = 0; i < outLabels.length; ++i) {\n                const label = outLabels[i];\n                const out = valOuts[i];\n                keep(out);\n                epochLogs[\"val_\" + label] = out;\n              }\n            }\n          }\n        });\n        await callbackList.onBatchEnd(batchIndex, batchLogs);\n        disposeTensorsInLogs(batchLogs);\n        if (model2.stopTraining_) {\n          break;\n        }\n      }\n      epochIndexArray1D.dispose();\n    }\n    await callbackList.onEpochEnd(epoch, epochLogs);\n    if (model2.stopTraining_) {\n      break;\n    }\n  }\n  await callbackList.onTrainEnd();\n  await model2.history.syncData();\n  return model2.history;\n}\nasync function fitTensors(model2, x, y, args = {}) {\n  if (model2.isTraining) {\n    throw new Error(\"Cannot start training because another fit() call is ongoing.\");\n  }\n  model2.isTraining = true;\n  let inputs;\n  let targets;\n  let originalInputs;\n  let originalTargets;\n  let inputValX;\n  let inputValY;\n  let valX;\n  let valY;\n  let sampleWeights;\n  try {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n    const checkBatchAxis = false;\n    const standardizedOuts = await model2.standardizeUserData(x, y, args.sampleWeight, args.classWeight, checkBatchAxis, batchSize);\n    inputs = standardizedOuts[0];\n    targets = standardizedOuts[1];\n    sampleWeights = standardizedOuts[2];\n    let doValidation = false;\n    let valIns;\n    if (args.validationData != null && args.validationData.length > 0) {\n      doValidation = true;\n      if (args.validationData.length === 2) {\n        inputValX = args.validationData[0];\n        inputValY = args.validationData[1];\n      } else if (args.validationData.length === 3) {\n        throw new NotImplementedError(\"validationData including sample weights is not supported yet.\");\n      } else {\n        throw new ValueError(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${args.validationData} is invalid.`);\n      }\n      const checkBatchAxis2 = true;\n      const valStandardized = await model2.standardizeUserData(inputValX, inputValY, null, null, checkBatchAxis2, batchSize);\n      valX = valStandardized[0];\n      valY = valStandardized[1];\n      valIns = valX.concat(valY);\n    } else if (args.validationSplit != null && args.validationSplit > 0 && args.validationSplit < 1) {\n      doValidation = true;\n      const splitAt = Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n      const originalBatchSize = inputs[0].shape[0];\n      valX = sliceArrays(inputs, splitAt, originalBatchSize);\n      originalInputs = inputs;\n      inputs = sliceArrays(inputs, 0, splitAt);\n      valY = sliceArrays(targets, splitAt, originalBatchSize);\n      originalTargets = targets;\n      targets = sliceArrays(targets, 0, splitAt);\n      valIns = valX.concat(valY);\n    } else if (args.validationSteps != null) {\n      doValidation = true;\n    }\n    const ins = inputs.concat(targets).concat(sampleWeights);\n    model2.checkTrainableWeightsConsistency();\n    const trainFunction = model2.makeTrainFunction();\n    const outLabels = model2.getDedupedMetricsNames();\n    let valFunction;\n    let callbackMetrics;\n    if (doValidation) {\n      model2.makeTestFunction();\n      valFunction = model2.testFunction;\n      callbackMetrics = outLabels.slice().concat(outLabels.map((n) => \"val_\" + n));\n    } else {\n      valFunction = null;\n      valIns = [];\n      callbackMetrics = outLabels.slice();\n    }\n    const callbacks2 = standardizeCallbacks(args.callbacks, args.yieldEvery);\n    const out = await fitLoop(model2, trainFunction, ins, outLabels, batchSize, args.epochs, args.verbose, callbacks2, valFunction, valIns, args.shuffle, callbackMetrics, args.initialEpoch, null, null);\n    return out;\n  } finally {\n    model2.isTraining = false;\n    disposeNewTensors(inputs, x);\n    disposeNewTensors(targets, y);\n    disposeNewTensors(originalInputs, x);\n    disposeNewTensors(originalTargets, y);\n    disposeNewTensors(valX, inputValX);\n    disposeNewTensors(valY, inputValY);\n    if (sampleWeights != null) {\n      dispose(sampleWeights);\n    }\n  }\n}\nfunction ensureTensorsRank2OrHigher(tensors) {\n  const outs = [];\n  if (tensors instanceof Tensor) {\n    tensors = [tensors];\n  }\n  for (let i = 0; i < tensors.length; ++i) {\n    const tensor2 = tensors[i];\n    if (tensor2.rank === 1) {\n      outs.push(expandDims2(tensor2, 1));\n    } else if (tensor2.rank === 0) {\n      throw new Error(\"Expected tensor to be at least 1D, but received a 0D tensor (scalar).\");\n    } else {\n      outs.push(tensor2);\n    }\n  }\n  return outs;\n}\nfunction disposeNewTensors(tensors, refTensors) {\n  if (tensors == null) {\n    return;\n  }\n  const oldTensorIds = [];\n  if (refTensors instanceof Tensor) {\n    oldTensorIds.push(refTensors.id);\n  } else if (Array.isArray(refTensors)) {\n    refTensors.forEach((t) => oldTensorIds.push(t.id));\n  } else if (refTensors != null) {\n    for (const name in refTensors) {\n      const oldTensor = refTensors[name];\n      oldTensorIds.push(oldTensor.id);\n    }\n  }\n  const tensorsToDispose = [];\n  if (tensors instanceof Tensor) {\n    if (oldTensorIds.indexOf(tensors.id) === -1) {\n      tensorsToDispose.push(tensors);\n    }\n  } else if (Array.isArray(tensors)) {\n    tensors.forEach((t) => {\n      if (oldTensorIds.indexOf(t.id) === -1) {\n        tensorsToDispose.push(t);\n      }\n    });\n  } else if (tensors != null) {\n    for (const name in tensors) {\n      const tensor2 = tensors[name];\n      if (oldTensorIds.indexOf(tensor2.id) === -1) {\n        tensorsToDispose.push(tensor2);\n      }\n    }\n  }\n  tensorsToDispose.forEach((t) => {\n    if (!t.isDisposed) {\n      t.dispose();\n    }\n  });\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/engine/training.js\nfunction isDataTensor(x) {\n  return x instanceof Tensor;\n}\nfunction isDataArray(x) {\n  return Array.isArray(x);\n}\nfunction isDataDict(x) {\n  return !isDataTensor(x) && !isDataArray(x);\n}\nfunction standardizeInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = \"\") {\n  if (names == null || names.length === 0) {\n    if (data != null) {\n      let gotUnexpectedData = false;\n      if (isDataArray(data) && data.length > 0) {\n        gotUnexpectedData = true;\n      } else if (isDataDict(data)) {\n        for (const key in data) {\n          if (data.hasOwnProperty(key)) {\n            gotUnexpectedData = true;\n            break;\n          }\n        }\n      } else {\n        gotUnexpectedData = true;\n      }\n      if (gotUnexpectedData) {\n        throw new ValueError(`Error when checking model ${exceptionPrefix} expected no data, but got ${data}`);\n      }\n    }\n    return [];\n  }\n  if (data == null) {\n    return names.map((name) => null);\n  }\n  let arrays;\n  if (isDataDict(data)) {\n    data = data;\n    arrays = [];\n    for (const name of names) {\n      if (data[name] == null) {\n        throw new ValueError(`No data provided for \"${name}\". Need data for each key in: ${names}`);\n      }\n      arrays.push(data[name]);\n    }\n  } else if (isDataArray(data)) {\n    data = data;\n    if (data.length !== names.length) {\n      throw new ValueError(`Error when checking model ${exceptionPrefix}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${names.length} Tensor(s), but instead got the following list of Tensor(s): ${data}`);\n    }\n    arrays = data;\n  } else {\n    data = data;\n    if (names.length > 1) {\n      throw new ValueError(`The model ${exceptionPrefix} expects ${names.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${data.shape}`);\n    }\n    arrays = [data];\n  }\n  arrays = ensureTensorsRank2OrHigher(arrays);\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array2 = arrays[i];\n      if (array2.shape.length !== shapes[i].length) {\n        throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} to have ${shapes[i].length} dimension(s). but got array with shape ${array2.shape}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          continue;\n        }\n        const dim = array2.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null && refDim >= 0 && dim !== refDim) {\n          throw new ValueError(`${exceptionPrefix} expected a batch of elements where each example has shape [${shapes[i].slice(1, shapes[i].length)}] (i.e.,tensor shape [*,${shapes[i].slice(1, shapes[i].length)}]) but the ${exceptionPrefix} received an input with ${array2.shape[0]} examples, each with shape [${array2.shape.slice(1, array2.shape.length)}] (tensor shape [${array2.shape}])`);\n        }\n      }\n    }\n  }\n  return arrays;\n}\nfunction checkArrayLengths(inputs, targets, weights) {\n  const setX = unique2(inputs.map((input2) => input2.shape[0]));\n  setX.sort();\n  const setY = unique2(targets.map((target) => target.shape[0]));\n  setY.sort();\n  if (setX.length > 1) {\n    throw new ValueError(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(inputs.map((input2) => input2.shape))}`);\n  }\n  if (setY.length > 1) {\n    throw new ValueError(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(targets.map((target) => target.shape))}`);\n  }\n  if (setX.length > 0 && setY.length > 0 && !util_exports.arraysEqual(setX, setY)) {\n    throw new ValueError(`Input Tensors should have the same number of samples as target Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target sample(s).`);\n  }\n}\nfunction checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {\n  const keyLosses = [\n    meanSquaredError2,\n    binaryCrossentropy,\n    categoricalCrossentropy\n  ];\n  for (let i = 0; i < targets.length; ++i) {\n    const y = targets[i];\n    const loss = lossFns[i];\n    const shape = outputShapes[i];\n    if (loss == null) {\n      continue;\n    }\n    if (loss === categoricalCrossentropy) {\n      if (y.shape[y.shape.length - 1] === 1) {\n        throw new ValueError(`You are passing a target array of shape ${y.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);\n      }\n    }\n    if (keyLosses.indexOf(loss) !== -1) {\n      const slicedYShape = y.shape.slice(1);\n      const slicedShape = shape.slice(1);\n      for (let j = 0; j < slicedYShape.length; ++j) {\n        const targetDim = slicedYShape[j];\n        const outDim = slicedShape[j];\n        if (outDim != null && targetDim !== outDim) {\n          throw new ValueError(`A target Tensor with shape ${y.shape} was passed for an output of shape ${shape}, while using a loss function that expects targets to have the same shape as the output.`);\n        }\n      }\n    }\n  }\n}\nfunction checkInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = \"\") {\n  let arrays;\n  if (Array.isArray(data)) {\n    if (data.length !== names.length) {\n      throw new ValueError(`Error when checking model ${exceptionPrefix}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${names.length} Tensor(s), but instead got ${data.length} Tensors(s).`);\n    }\n    arrays = data;\n  } else {\n    if (names.length > 1) {\n      throw new ValueError(`The model expects ${names.length} ${exceptionPrefix} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(data.shape)}.`);\n    }\n    arrays = [data];\n  }\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array2 = arrays[i];\n      if (array2.shape.length !== shapes[i].length) {\n        throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} to have ${shapes[i].length} dimension(s), but got array with shape ${JSON.stringify(array2.shape)}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          continue;\n        }\n        const dim = array2.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null) {\n          if (refDim !== dim) {\n            throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} to have shape ${JSON.stringify(shapes[i])} but got array with shape ${JSON.stringify(array2.shape)}.`);\n          }\n        }\n      }\n    }\n  }\n}\nfunction collectMetrics(metrics, outputNames) {\n  if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n    return outputNames.map((name) => []);\n  }\n  let wrappedMetrics;\n  if (typeof metrics === \"string\" || typeof metrics === \"function\") {\n    wrappedMetrics = [metrics];\n  } else if (Array.isArray(metrics) || typeof metrics === \"object\") {\n    wrappedMetrics = metrics;\n  } else {\n    throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${metrics}`);\n  }\n  if (Array.isArray(wrappedMetrics)) {\n    return outputNames.map((name) => wrappedMetrics);\n  } else {\n    const nestedMetrics = [];\n    for (const name of outputNames) {\n      let outputMetrics = wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];\n      if (!Array.isArray(outputMetrics)) {\n        outputMetrics = [outputMetrics];\n      }\n      nestedMetrics.push(outputMetrics);\n    }\n    return nestedMetrics;\n  }\n}\nvar LAYERS_MODEL_FORMAT_NAME = \"layers-model\";\nvar LayersModel = class extends Container {\n  constructor(args) {\n    super(args);\n    this.isTraining = false;\n  }\n  summary(lineLength, positions, printFn = console.log) {\n    if (!this.built) {\n      throw new ValueError(`This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).`);\n    }\n    printSummary(this, lineLength, positions, printFn);\n  }\n  compile(args) {\n    if (args.loss == null) {\n      args.loss = [];\n    }\n    this.loss = args.loss;\n    if (typeof args.optimizer === \"string\") {\n      this.optimizer_ = getOptimizer(args.optimizer);\n      this.isOptimizerOwned = true;\n    } else {\n      if (!(args.optimizer instanceof Optimizer)) {\n        throw new ValueError(`User-defined optimizer must be an instance of tf.Optimizer.`);\n      }\n      this.optimizer_ = args.optimizer;\n      this.isOptimizerOwned = false;\n    }\n    let lossFunctions = [];\n    if (!Array.isArray(args.loss) && typeof args.loss !== \"string\" && typeof args.loss !== \"function\") {\n      args.loss = args.loss;\n      for (const name in args.loss) {\n        if (this.outputNames.indexOf(name) === -1) {\n          throw new ValueError(`Unknown entry in loss dictionary: \"${name}\". Only expected the following keys: ${this.outputNames}`);\n        }\n      }\n      for (const name of this.outputNames) {\n        if (args.loss[name] == null) {\n          console.warn(`Output \"${name}\" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${name} during training`);\n        }\n        lossFunctions.push(get(args.loss[name]));\n      }\n    } else if (Array.isArray(args.loss)) {\n      if (args.loss.length !== this.outputs.length) {\n        throw new ValueError(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${args.loss}.`);\n      }\n      const theLosses = args.loss;\n      lossFunctions = theLosses.map((l) => get(l));\n    } else {\n      const lossFunction = get(args.loss);\n      this.outputs.forEach((_) => {\n        lossFunctions.push(lossFunction);\n      });\n    }\n    this.lossFunctions = lossFunctions;\n    this.feedOutputNames = [];\n    this.feedOutputShapes = [];\n    this.feedLossFns = [];\n    for (let i = 0; i < this.outputs.length; ++i) {\n      const shape = this.internalOutputShapes[i];\n      const name = this.outputNames[i];\n      this.feedOutputNames.push(name);\n      this.feedOutputShapes.push(shape);\n      this.feedLossFns.push(this.lossFunctions[i]);\n    }\n    const skipTargetIndices = [];\n    this.metrics = args.metrics;\n    this.metricsNames = [\"loss\"];\n    this.metricsTensors = [];\n    nameScope(\"loss\", () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        const weightedLoss = this.lossFunctions[i];\n        if (this.outputs.length > 1) {\n          this.metricsTensors.push([weightedLoss, i]);\n          this.metricsNames.push(this.outputNames[i] + \"_loss\");\n        }\n      }\n    });\n    const nestedMetrics = collectMetrics(args.metrics, this.outputNames);\n    const appendMetric = (outputIndex, metricName, metricTensor) => {\n      if (this.outputNames.length > 1) {\n        metricName = this.outputNames[outputIndex] + \"_\" + metricName;\n      }\n      this.metricsNames.push(metricName);\n      this.metricsTensors.push([metricTensor, outputIndex]);\n    };\n    nameScope(\"metric\", () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        const outputMetrics = nestedMetrics[i];\n        const handleMetrics = (metrics) => {\n          const metricNamePrefix = \"\";\n          let metricName;\n          let accFn;\n          let weightedMetricFn;\n          for (const metric of metrics) {\n            if (typeof metric === \"string\" && [\"accuracy\", \"acc\", \"crossentropy\", \"ce\"].indexOf(metric) !== -1) {\n              const outputShape = this.internalOutputShapes[i];\n              if (outputShape[outputShape.length - 1] === 1 || this.lossFunctions[i] === binaryCrossentropy) {\n                if ([\"accuracy\", \"acc\"].indexOf(metric) !== -1) {\n                  accFn = binaryAccuracy;\n                } else if ([\"crossentropy\", \"ce\"].indexOf(metric) !== -1) {\n                  accFn = binaryCrossentropy2;\n                }\n              } else if (this.lossFunctions[i] === sparseCategoricalCrossentropy) {\n                if ([\"accuracy\", \"acc\"].indexOf(metric) !== -1) {\n                  accFn = sparseCategoricalAccuracy;\n                } else if ([\"crossentropy\", \"ce\"].indexOf(metric) !== -1) {\n                  accFn = sparseCategoricalCrossentropy2;\n                }\n              } else {\n                if ([\"accuracy\", \"acc\"].indexOf(metric) !== -1) {\n                  accFn = categoricalAccuracy;\n                } else if ([\"crossentropy\", \"ce\"].indexOf(metric) !== -1) {\n                  accFn = categoricalCrossentropy2;\n                }\n              }\n              let suffix;\n              if ([\"accuracy\", \"acc\"].indexOf(metric) !== -1) {\n                suffix = \"acc\";\n              } else if ([\"crossentropy\", \"ce\"].indexOf(metric) !== -1) {\n                suffix = \"ce\";\n              }\n              weightedMetricFn = accFn;\n              metricName = metricNamePrefix + suffix;\n            } else {\n              const metricFn = get2(metric);\n              weightedMetricFn = metricFn;\n              metricName = metricNamePrefix + getLossOrMetricName(metric);\n            }\n            let metricResult;\n            nameScope(metricName, () => {\n              metricResult = weightedMetricFn;\n            });\n            appendMetric(i, metricName, metricResult);\n          }\n        };\n        handleMetrics(outputMetrics);\n      }\n    });\n    this.collectedTrainableWeights = this.trainableWeights;\n  }\n  checkTrainableWeightsConsistency() {\n    if (this.collectedTrainableWeights == null) {\n      return;\n    }\n    if (this.trainableWeights.length !== this.collectedTrainableWeights.length) {\n      console.warn(\"Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?\");\n    }\n  }\n  evaluate(x, y, args = {}) {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n    const checkBatchAxis = true;\n    const standardizedOuts = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n    try {\n      const ins = standardizedOuts[0].concat(standardizedOuts[1]);\n      this.makeTestFunction();\n      const f = this.testFunction;\n      const testOuts = this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n      return singletonOrArray(testOuts);\n    } finally {\n      disposeNewTensors(standardizedOuts[0], x);\n      disposeNewTensors(standardizedOuts[1], y);\n    }\n  }\n  async evaluateDataset(dataset, args) {\n    this.makeTestFunction();\n    return evaluateDataset(this, dataset, args);\n  }\n  checkNumSamples(ins, batchSize, steps, stepsName = \"steps\") {\n    let numSamples;\n    if (steps != null) {\n      numSamples = null;\n      if (batchSize != null) {\n        throw new ValueError(`If ${stepsName} is set, batchSize must be null or undefined.Got batchSize = ${batchSize}`);\n      }\n    } else if (ins != null) {\n      if (Array.isArray(ins)) {\n        numSamples = ins[0].shape[0];\n      } else {\n        numSamples = ins.shape[0];\n      }\n    } else {\n      throw new ValueError(`Either the input data should have a defined shape, or ${stepsName} shoud be specified.`);\n    }\n    return numSamples;\n  }\n  execute(inputs, outputs) {\n    if (Array.isArray(outputs) && outputs.length === 0) {\n      throw new ValueError(\"`outputs` is an empty Array, which is not allowed.\");\n    }\n    const outputsIsArray = Array.isArray(outputs);\n    const outputNames = outputsIsArray ? outputs : [outputs];\n    const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);\n    const feedDict = new FeedDict();\n    if (inputs instanceof Tensor) {\n      inputs = [inputs];\n    }\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== this.inputs.length) {\n        throw new ValueError(`The number of inputs provided (${inputs.length}) does not match the number of inputs of this model (${this.inputs.length}).`);\n      }\n      for (let i = 0; i < this.inputs.length; ++i) {\n        feedDict.add(this.inputs[i], inputs[i]);\n      }\n    } else {\n      for (const input2 of this.inputs) {\n        const tensorValue = inputs[input2.name];\n        if (tensorValue == null) {\n          throw new ValueError(`No value is provided for the model's input ${input2.name}`);\n        }\n        feedDict.add(input2, tensorValue);\n      }\n    }\n    const executeOutputs = execute(outputSymbolicTensors, feedDict);\n    return outputsIsArray ? executeOutputs : executeOutputs[0];\n  }\n  retrieveSymbolicTensors(symbolicTensorNames) {\n    const outputSymbolicTensors = pyListRepeat(null, symbolicTensorNames.length);\n    let outputsRemaining = symbolicTensorNames.length;\n    for (const layer of this.layers) {\n      const layerOutputs = Array.isArray(layer.output) ? layer.output : [layer.output];\n      const layerOutputNames = layerOutputs.map((output) => output.name);\n      for (let i = 0; i < symbolicTensorNames.length; ++i) {\n        const index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n        if (index !== -1) {\n          outputSymbolicTensors[i] = layerOutputs[index];\n          outputsRemaining--;\n        }\n        if (outputsRemaining === 0) {\n          break;\n        }\n      }\n      if (outputsRemaining === 0) {\n        break;\n      }\n    }\n    if (outputsRemaining > 0) {\n      const remainingNames = [];\n      outputSymbolicTensors.forEach((tensor2, i) => {\n        if (tensor2 == null) {\n          remainingNames.push(symbolicTensorNames[i]);\n        }\n      });\n      throw new ValueError(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(remainingNames)}`);\n    }\n    return outputSymbolicTensors;\n  }\n  predictLoop(ins, batchSize = 32, verbose = false) {\n    return tidy(() => {\n      const numSamples = this.checkNumSamples(ins);\n      if (verbose) {\n        throw new NotImplementedError(\"Verbose predictLoop() is not implemented yet.\");\n      }\n      const batches = makeBatches(numSamples, batchSize);\n      const outsBatches = this.outputs.map((output) => []);\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchOuts = tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const insBatch = sliceArrays(ins, batchStart, batchEnd);\n          const feeds = [];\n          if (Array.isArray(insBatch)) {\n            for (let i = 0; i < insBatch.length; ++i) {\n              feeds.push({ key: this.inputs[i], value: insBatch[i] });\n            }\n          } else {\n            feeds.push({ key: this.inputs[0], value: insBatch });\n          }\n          const feedDict = new FeedDict(feeds);\n          return execute(this.outputs, feedDict);\n        });\n        batchOuts.forEach((batchOut, i) => outsBatches[i].push(batchOut));\n      }\n      return singletonOrArray(outsBatches.map((batches2) => concat(batches2, 0)));\n    });\n  }\n  predict(x, args = {}) {\n    const xsRank2OrHigher = ensureTensorsRank2OrHigher(x);\n    checkInputData(xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n    try {\n      const batchSize = args.batchSize == null ? 32 : args.batchSize;\n      checkBatchSize(batchSize);\n      return this.predictLoop(xsRank2OrHigher, batchSize);\n    } finally {\n      disposeNewTensors(xsRank2OrHigher, x);\n    }\n  }\n  predictOnBatch(x) {\n    checkInputData(x, this.inputNames, this.feedInputShapes, true);\n    const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];\n    return this.predictLoop(x, batchSize);\n  }\n  standardizeUserDataXY(x, y, checkBatchAxis = true, batchSize) {\n    if (this.optimizer_ == null) {\n      throw new RuntimeError(\"You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).\");\n    }\n    const outputShapes = [];\n    for (let i = 0; i < this.feedOutputShapes.length; ++i) {\n      const outputShape = this.feedOutputShapes[i];\n      const lossFn = this.feedLossFns[i];\n      if (lossFn === sparseCategoricalCrossentropy) {\n        outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));\n      } else {\n        outputShapes.push(outputShape);\n      }\n    }\n    x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, \"input\");\n    y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, \"target\");\n    checkArrayLengths(x, y, null);\n    checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n    if (this.stateful && batchSize != null && batchSize > 0) {\n      if (x[0].shape[0] % batchSize !== 0) {\n        throw new ValueError(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${batchSize}. Found: ${x[0].shape[0]} sample(s).`);\n      }\n    }\n    return [x, y];\n  }\n  async standardizeUserData(x, y, sampleWeight, classWeight, checkBatchAxis = true, batchSize) {\n    const [standardXs, standardYs] = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n    if (sampleWeight != null) {\n      throw new Error(\"sample weight is not supported yet.\");\n    }\n    let standardSampleWeights = null;\n    if (classWeight != null) {\n      const classWeights = standardizeClassWeights(classWeight, this.outputNames);\n      standardSampleWeights = [];\n      for (let i = 0; i < classWeights.length; ++i) {\n        standardSampleWeights.push(await standardizeWeights(standardYs[i], null, classWeights[i]));\n      }\n    }\n    return [standardXs, standardYs, standardSampleWeights];\n  }\n  testLoop(f, ins, batchSize, verbose = 0, steps) {\n    return tidy(() => {\n      const numSamples = this.checkNumSamples(ins, batchSize, steps, \"steps\");\n      const outs = [];\n      if (verbose > 0) {\n        throw new NotImplementedError(\"Verbose mode is not implemented yet.\");\n      }\n      if (steps != null) {\n        throw new NotImplementedError(\"steps mode in testLoop() is not implemented yet\");\n      } else {\n        const batches = makeBatches(numSamples, batchSize);\n        const indexArray = tensor1d(range2(0, numSamples));\n        for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds = sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);\n          const insBatch = sliceArraysByIndices(ins, batchIds);\n          const batchOuts = f(insBatch);\n          if (batchIndex === 0) {\n            for (let i = 0; i < batchOuts.length; ++i) {\n              outs.push(scalar(0));\n            }\n          }\n          for (let i = 0; i < batchOuts.length; ++i) {\n            const batchOut = batchOuts[i];\n            outs[i] = add2(outs[i], mul(batchEnd - batchStart, batchOut));\n          }\n        }\n        for (let i = 0; i < outs.length; ++i) {\n          outs[i] = div(outs[i], numSamples);\n        }\n      }\n      return outs;\n    });\n  }\n  getDedupedMetricsNames() {\n    const outLabels = this.metricsNames;\n    const dedupedOutLabels = [];\n    for (let i = 0; i < outLabels.length; ++i) {\n      const label = outLabels[i];\n      let newLabel = label;\n      if (count(outLabels, label) > 1) {\n        const dupIndex = count(outLabels.slice(0, i), label);\n        newLabel += `_${dupIndex}`;\n      }\n      dedupedOutLabels.push(newLabel);\n    }\n    return dedupedOutLabels;\n  }\n  makeTrainFunction() {\n    return (data) => {\n      const lossValues = [];\n      const inputs = data.slice(0, this.inputs.length);\n      const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n      const sampleWeights = data.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2);\n      const metricsValues = [];\n      const totalLossFunction = () => {\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({ key: this.inputs[i], value: inputs[i] });\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs = execute(this.outputs, feedDict, { \"training\": true });\n        let totalLoss;\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          let loss = lossFunction(targets[i], outputs[i]);\n          if (sampleWeights[i] != null) {\n            loss = computeWeightedLoss2(loss, sampleWeights[i]);\n          }\n          const meanLoss = mean(loss);\n          lossValues.push(meanLoss);\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = add2(totalLoss, loss);\n          }\n        }\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          let weightedMetric;\n          if (this.outputs.length > 1 && i < this.outputs.length) {\n            weightedMetric = lossValues[i];\n          } else {\n            const metric = this.metricsTensors[i][0];\n            const outputIndex = this.metricsTensors[i][1];\n            weightedMetric = mean(metric(targets[outputIndex], outputs[outputIndex]));\n          }\n          keep(weightedMetric);\n          metricsValues.push(weightedMetric);\n        }\n        totalLoss = mean(totalLoss);\n        this.calculateLosses().forEach((regularizerLoss) => {\n          totalLoss = add2(totalLoss, regularizerLoss);\n        });\n        return totalLoss;\n      };\n      const variables = this.collectedTrainableWeights.map((param) => param.read());\n      const returnCost = true;\n      const totalLossValue = this.optimizer_.minimize(totalLossFunction, returnCost, variables);\n      return [totalLossValue].concat(metricsValues);\n    };\n  }\n  makeTestFunction() {\n    this.testFunction = (data) => {\n      return tidy(() => {\n        const valOutputs = [];\n        let totalLoss;\n        const inputs = data.slice(0, this.inputs.length);\n        const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({ key: this.inputs[i], value: inputs[i] });\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs = execute(this.outputs, feedDict);\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          const loss = mean(lossFunction(targets[i], outputs[i]));\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = add2(totalLoss, loss);\n          }\n          valOutputs.push(totalLoss);\n        }\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          const metric = this.metricsTensors[i][0];\n          const outputIndex = this.metricsTensors[i][1];\n          const meanMetric = mean(metric(targets[outputIndex], outputs[outputIndex]));\n          valOutputs.push(meanMetric);\n        }\n        return valOutputs;\n      });\n    };\n  }\n  async fit(x, y, args = {}) {\n    return fitTensors(this, x, y, args);\n  }\n  async fitDataset(dataset, args) {\n    return fitDataset(this, dataset, args);\n  }\n  async trainOnBatch(x, y) {\n    const standardizeOut = await this.standardizeUserData(x, y);\n    const inputs = standardizeOut[0];\n    const targets = standardizeOut[1];\n    const trainFunction = this.makeTrainFunction();\n    const losses2 = trainFunction(inputs.concat(targets));\n    const lossValues = [];\n    for (const loss of losses2) {\n      const v = await loss.data();\n      lossValues.push(v[0]);\n    }\n    dispose(losses2);\n    disposeNewTensors(standardizeOut[0], x);\n    disposeNewTensors(standardizeOut[1], y);\n    return singletonOrArray(lossValues);\n  }\n  getNamedWeights(config) {\n    const namedWeights = [];\n    const trainableOnly = config != null && config.trainableOnly;\n    const weights = trainableOnly ? this.trainableWeights : this.weights;\n    const weightValues = this.getWeights(trainableOnly);\n    for (let i = 0; i < weights.length; ++i) {\n      if (trainableOnly && !weights[i].trainable) {\n        continue;\n      }\n      namedWeights.push({ name: weights[i].originalName, tensor: weightValues[i] });\n    }\n    return namedWeights;\n  }\n  set stopTraining(stop) {\n    this.stopTraining_ = stop;\n  }\n  get stopTraining() {\n    return this.stopTraining_;\n  }\n  get optimizer() {\n    return this.optimizer_;\n  }\n  set optimizer(optimizer) {\n    if (this.optimizer_ !== optimizer) {\n      this.optimizer_ = optimizer;\n      this.isOptimizerOwned = false;\n    }\n  }\n  dispose() {\n    const result = super.dispose();\n    if (result.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {\n      const numTensorsBeforeOptmizerDisposal = memory().numTensors;\n      this.optimizer_.dispose();\n      result.numDisposedVariables += numTensorsBeforeOptmizerDisposal - memory().numTensors;\n    }\n    return result;\n  }\n  getLossIdentifiers() {\n    let lossNames;\n    if (typeof this.loss === \"string\") {\n      lossNames = toSnakeCase(this.loss);\n    } else if (Array.isArray(this.loss)) {\n      for (const loss of this.loss) {\n        if (typeof loss !== \"string\") {\n          throw new Error(\"Serialization of non-string loss is not supported.\");\n        }\n      }\n      lossNames = this.loss.map((name) => toSnakeCase(name));\n    } else {\n      const outputNames = Object.keys(this.loss);\n      lossNames = {};\n      const losses2 = this.loss;\n      for (const outputName of outputNames) {\n        if (typeof losses2[outputName] === \"string\") {\n          lossNames[outputName] = toSnakeCase(losses2[outputName]);\n        } else {\n          throw new Error(\"Serialization of non-string loss is not supported.\");\n        }\n      }\n    }\n    return lossNames;\n  }\n  getMetricIdentifiers() {\n    if (typeof this.metrics === \"string\" || typeof this.metrics === \"function\") {\n      return [toSnakeCase(getLossOrMetricName(this.metrics))];\n    } else if (Array.isArray(this.metrics)) {\n      return this.metrics.map((metric) => toSnakeCase(getLossOrMetricName(metric)));\n    } else {\n      const metricsIdentifiers = {};\n      for (const key in this.metrics) {\n        metricsIdentifiers[key] = toSnakeCase(getLossOrMetricName(this.metrics[key]));\n      }\n      return metricsIdentifiers;\n    }\n  }\n  getTrainingConfig() {\n    return {\n      loss: this.getLossIdentifiers(),\n      metrics: this.getMetricIdentifiers(),\n      optimizer_config: {\n        class_name: this.optimizer.getClassName(),\n        config: this.optimizer.getConfig()\n      }\n    };\n  }\n  loadTrainingConfig(trainingConfig) {\n    if (trainingConfig.weighted_metrics != null) {\n      throw new Error(\"Loading weight_metrics is not supported yet.\");\n    }\n    if (trainingConfig.loss_weights != null) {\n      throw new Error(\"Loading loss_weights is not supported yet.\");\n    }\n    if (trainingConfig.sample_weight_mode != null) {\n      throw new Error(\"Loading sample_weight_mode is not supported yet.\");\n    }\n    const tsConfig = convertPythonicToTs(trainingConfig.optimizer_config);\n    const optimizer = deserialize(tsConfig);\n    let loss;\n    if (typeof trainingConfig.loss === \"string\") {\n      loss = toCamelCase(trainingConfig.loss);\n    } else if (Array.isArray(trainingConfig.loss)) {\n      loss = trainingConfig.loss.map((lossEntry) => toCamelCase(lossEntry));\n    } else if (trainingConfig.loss != null) {\n      loss = {};\n      for (const key in trainingConfig.loss) {\n        loss[key] = toCamelCase(trainingConfig.loss[key]);\n      }\n    }\n    let metrics;\n    if (Array.isArray(trainingConfig.metrics)) {\n      metrics = trainingConfig.metrics.map((metric) => toCamelCase(metric));\n    } else if (trainingConfig.metrics != null) {\n      metrics = {};\n      for (const key in trainingConfig.metrics) {\n        metrics[key] = toCamelCase(trainingConfig.metrics[key]);\n      }\n    }\n    this.compile({ loss, metrics, optimizer });\n  }\n  async save(handlerOrURL, config) {\n    if (typeof handlerOrURL === \"string\") {\n      const handlers = io_exports.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new ValueError(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new ValueError(`Found more than one (${handlers.length}) save handlers for URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new ValueError(\"LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.\");\n    }\n    const weightDataAndSpecs = await io_exports.encodeWeights(this.getNamedWeights(config));\n    const returnString = false;\n    const unusedArg = null;\n    const modelConfig = this.toJSON(unusedArg, returnString);\n    const modelArtifacts = {\n      modelTopology: modelConfig,\n      format: LAYERS_MODEL_FORMAT_NAME,\n      generatedBy: `TensorFlow.js tfjs-layers v${version2}`,\n      convertedBy: null\n    };\n    const includeOptimizer = config == null ? false : config.includeOptimizer;\n    if (includeOptimizer && this.optimizer != null) {\n      modelArtifacts.trainingConfig = this.getTrainingConfig();\n      const weightType = \"optimizer\";\n      const { data: optimizerWeightData, specs: optimizerWeightSpecs } = await io_exports.encodeWeights(await this.optimizer.getWeights(), weightType);\n      weightDataAndSpecs.specs.push(...optimizerWeightSpecs);\n      weightDataAndSpecs.data = io_exports.concatenateArrayBuffers([weightDataAndSpecs.data, optimizerWeightData]);\n    }\n    if (this.userDefinedMetadata != null) {\n      const checkSize = true;\n      checkUserDefinedMetadata(this.userDefinedMetadata, this.name, checkSize);\n      modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;\n    }\n    modelArtifacts.weightData = weightDataAndSpecs.data;\n    modelArtifacts.weightSpecs = weightDataAndSpecs.specs;\n    return handlerOrURL.save(modelArtifacts);\n  }\n  setUserDefinedMetadata(userDefinedMetadata) {\n    checkUserDefinedMetadata(userDefinedMetadata, this.name);\n    this.userDefinedMetadata = userDefinedMetadata;\n  }\n  getUserDefinedMetadata() {\n    return this.userDefinedMetadata;\n  }\n};\nLayersModel.className = \"Model\";\nserialization_exports.registerClass(LayersModel);\nvar Functional = class extends LayersModel {\n};\nFunctional.className = \"Functional\";\nserialization_exports.registerClass(Functional);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/models.js\nasync function modelFromJSON(modelAndWeightsConfig, customObjects) {\n  if (!(\"modelTopology\" in modelAndWeightsConfig)) {\n    modelAndWeightsConfig = { modelTopology: modelAndWeightsConfig };\n  }\n  modelAndWeightsConfig = modelAndWeightsConfig;\n  let modelTopology = modelAndWeightsConfig.modelTopology;\n  if (modelTopology[\"model_config\"] != null) {\n    modelTopology = modelTopology[\"model_config\"];\n  }\n  const tsConfig = convertPythonicToTs(modelTopology);\n  const model2 = deserialize(tsConfig, customObjects);\n  if (modelAndWeightsConfig.weightsManifest != null) {\n    const weightValues = await io_exports.loadWeights(modelAndWeightsConfig.weightsManifest, modelAndWeightsConfig.pathPrefix, model2.weights.map((weight) => weight.originalName));\n    const uniqueWeightValues = {};\n    for (const weight of model2.weights) {\n      uniqueWeightValues[weight.originalName] = weightValues[weight.originalName];\n    }\n    model2.loadWeights(uniqueWeightValues);\n    dispose(weightValues);\n  }\n  return model2;\n}\nasync function loadLayersModelInternal(pathOrIOHandler, options) {\n  if (options == null) {\n    options = {};\n  }\n  if (typeof pathOrIOHandler === \"string\") {\n    const handlers = io_exports.getLoadHandlers(pathOrIOHandler, options);\n    if (handlers.length === 0) {\n      handlers.push(io_exports.browserHTTPRequest(pathOrIOHandler, options));\n    } else if (handlers.length > 1) {\n      throw new ValueError(`Found more than one (${handlers.length}) load handlers for URL '${pathOrIOHandler}'`);\n    }\n    pathOrIOHandler = handlers[0];\n  }\n  return loadLayersModelFromIOHandler(pathOrIOHandler, void 0, options);\n}\nasync function loadLayersModelFromIOHandler(handler, customObjects, options) {\n  if (options == null) {\n    options = {};\n  }\n  if (handler.load == null) {\n    throw new ValueError(\"Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.\");\n  }\n  const artifacts = await handler.load();\n  let modelTopology = artifacts.modelTopology;\n  if (modelTopology[\"model_config\"] != null) {\n    modelTopology = modelTopology[\"model_config\"];\n  }\n  const strict = options.strict == null ? true : options.strict;\n  const fastWeightInit = artifacts.weightData != null && artifacts.weightSpecs != null && strict;\n  const model2 = deserialize(convertPythonicToTs(modelTopology), customObjects, fastWeightInit);\n  const trainingConfig = artifacts.trainingConfig;\n  if (trainingConfig != null) {\n    model2.loadTrainingConfig(trainingConfig);\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    model2.setUserDefinedMetadata(artifacts.userDefinedMetadata);\n  }\n  if (artifacts.weightData != null) {\n    if (artifacts.weightSpecs == null) {\n      throw new ValueError(\"LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.\");\n    }\n    const { modelWeights, optimizerWeights } = decodeModelAndOptimizerWeights(artifacts.weightData, artifacts.weightSpecs);\n    model2.loadWeights(modelWeights, strict);\n    if (model2.optimizer != null && optimizerWeights.length > 0) {\n      await model2.optimizer.setWeights(optimizerWeights);\n    }\n    dispose(modelWeights);\n    dispose(optimizerWeights.map((w) => w.tensor));\n  }\n  return model2;\n}\nfunction decodeModelAndOptimizerWeights(buffer2, specs) {\n  const name2Tensor = io_exports.decodeWeights(buffer2, specs);\n  const modelWeights = {};\n  const optimizerWeights = [];\n  specs.forEach((spec) => {\n    if (spec.group === \"optimizer\") {\n      optimizerWeights.push({ name: spec.name, tensor: name2Tensor[spec.name] });\n    } else {\n      modelWeights[spec.name] = name2Tensor[spec.name];\n    }\n  });\n  return { modelWeights, optimizerWeights };\n}\nvar Sequential = class extends LayersModel {\n  constructor(args) {\n    super({ inputs: [], outputs: [] });\n    args = args || {};\n    this.trainable = true;\n    this.built = false;\n    this.name = args.name != null ? args.name : getUid(\"sequential_\");\n    if (args.layers != null) {\n      for (const layer of args.layers) {\n        this.add(layer);\n      }\n    }\n  }\n  checkShape(layer) {\n    const shape = layer.inboundNodes[0].outputTensors[0].shape;\n    if (shape.some((x) => x < 0)) {\n      throw new ValueError(`Negative dimension size caused by adding layer ${layer.name} with input shape [${layer.inboundNodes[0].inputTensors[0].shape}]`);\n    }\n  }\n  add(layer) {\n    const isLayerModelInstance = layer instanceof Sequential || layer instanceof LayersModel;\n    let modelLayer;\n    if (isLayerModelInstance) {\n      modelLayer = layer;\n      if (modelLayer.outputs.length !== 1) {\n        throw new ValueError(\"All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.\");\n      }\n      if (modelLayer.inputs.length !== 1) {\n        throw new ValueError(\"All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.\");\n      }\n    }\n    if (this.outputs.length === 0) {\n      if (layer.inboundNodes.length === 0) {\n        if (layer.batchInputShape == null) {\n          throw new ValueError(\"The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.\");\n        }\n        const x = Input({\n          batchShape: layer.batchInputShape,\n          dtype: layer.dtype,\n          name: layer.name + \"_input\"\n        });\n        layer.apply(x);\n      }\n      if (isLayerModelInstance) {\n        this.outputs = modelLayer.outputs;\n        this.inputs = modelLayer.inputs;\n      } else {\n        if (layer.inboundNodes.length !== 1) {\n          throw new ValueError(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${layer.name} which has ${layer.inboundNodes.length} pre-existing inbound connections.`);\n        }\n        if (layer.inboundNodes[0].outputTensors.length !== 1) {\n          throw new ValueError(\"All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.\");\n        }\n        this.checkShape(layer);\n        this.outputs = [layer.inboundNodes[0].outputTensors[0]];\n        this.inputs = getSourceInputs(this.outputs[0]);\n      }\n      this.inboundNodes = [];\n      new Node({\n        outboundLayer: this,\n        inboundLayers: [],\n        nodeIndices: [],\n        tensorIndices: [],\n        inputTensors: this.inputs,\n        outputTensors: this.outputs,\n        inputMasks: pyListRepeat(null, this.inputs.length),\n        outputMasks: [null],\n        inputShapes: this.inputs.map((x) => x.shape),\n        outputShapes: this.outputs[0].shape\n      });\n    } else {\n      const outputTensor = layer.apply(this.outputs[0]);\n      if (Array.isArray(outputTensor)) {\n        throw new TypeError(\"All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.\");\n      }\n      this.checkShape(layer);\n      this.outputs = [outputTensor];\n      this.inboundNodes[0].outputTensors = this.outputs;\n      this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n    }\n    this.layers.push(layer);\n    this.built = false;\n  }\n  pop() {\n    if (this.layers.length === 0) {\n      throw new TypeError(\"There are no layers in the model.\");\n    }\n    this.layers.pop();\n    if (this.layers.length === 0) {\n      this.outputs = [];\n      this.inboundNodes = [];\n      this.outboundNodes = [];\n    } else {\n      const lastLayerIndex = this.layers.length - 1;\n      this.layers[lastLayerIndex].outboundNodes = [];\n      this.outputs = [this.layers[lastLayerIndex].output];\n      this.inboundNodes[0].outputTensors = this.outputs;\n      this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n    }\n  }\n  call(inputs, kwargs) {\n    if (this.model == null) {\n      this.build();\n    }\n    return this.model.call(inputs, kwargs);\n  }\n  build(inputShape) {\n    getExactlyOneShape(inputShape);\n    if (this.inputs.length === 0 || this.outputs.length === 0) {\n      throw new TypeError(\"Sequential model cannot be built: model is empty. Add some layers first.\");\n    }\n    this.model = new LayersModel({\n      inputs: this.inputs,\n      outputs: this.outputs[0],\n      name: this.name + \"_model\"\n    });\n    this.model.trainable = this.trainable;\n    this.supportsMasking = this.model.supportsMasking;\n    this.inputLayers = this.model.inputLayers;\n    this.inputLayersNodeIndices = this.model.inputLayersNodeIndices;\n    this.inputLayersTensorIndices = this.model.inputLayersTensorIndices;\n    this.outputLayers = this.model.outputLayers;\n    this.outputLayersNodeIndices = this.model.outputLayersNodeIndices;\n    this.outputLayersTensorIndices = this.model.outputLayersTensorIndices;\n    this.nodesByDepth = this.model.nodesByDepth;\n    this.containerNodes = this.model.containerNodes;\n    this.outputNames = this.model.outputNames;\n    this.inputNames = this.model.inputNames;\n    this.built = true;\n  }\n  countParams() {\n    if (!this.built) {\n      this.build();\n    }\n    return super.countParams();\n  }\n  summary(lineLength, positions, printFn = console.log) {\n    if (!this.built) {\n      this.build();\n    }\n    super.summary(lineLength, positions, printFn);\n  }\n  setWeights(weights) {\n    if (this.model == null) {\n      this.build();\n    }\n    this.model.setWeights(weights);\n  }\n  evaluate(x, y, args = {}) {\n    if (!this.built) {\n      throw new RuntimeError(\"The model needs to be compiled before being used.\");\n    }\n    return this.model.evaluate(x, y, args);\n  }\n  async evaluateDataset(dataset, args) {\n    if (!this.built) {\n      throw new RuntimeError(\"The model needs to be compiled before being used.\");\n    }\n    return this.model.evaluateDataset(dataset, args);\n  }\n  predict(x, args = {}) {\n    if (this.model == null) {\n      this.build();\n    }\n    return this.model.predict(x, args);\n  }\n  predictOnBatch(x) {\n    if (this.model == null) {\n      this.build();\n    }\n    return this.model.predictOnBatch(x);\n  }\n  compile(args) {\n    this.build();\n    this.model.compile(args);\n    this.optimizer_ = this.model.optimizer;\n    this.isOptimizerOwned = this.model.isOptimizerOwned;\n    this.loss = this.model.loss;\n    this.metrics = this.model.metrics;\n    this.metricsTensors = this.model.metricsTensors;\n    this.metricsNames = this.model.metricsNames;\n  }\n  get optimizer() {\n    return this.model == null ? void 0 : this.model.optimizer;\n  }\n  set optimizer(optimizer) {\n    this.model.optimizer = optimizer;\n  }\n  async fit(x, y, args = {}) {\n    if (!this.built) {\n      throw new RuntimeError(\"The model needs to be compiled before being used.\");\n    }\n    return this.model.fit(x, y, args);\n  }\n  async fitDataset(dataset, args) {\n    if (!this.built) {\n      throw new RuntimeError(\"The model needs to be compiled before being used.\");\n    }\n    return this.model.fitDataset(dataset, args);\n  }\n  async trainOnBatch(x, y) {\n    return this.model.trainOnBatch(x, y);\n  }\n  static fromConfig(cls, config, customObjects = {}, fastWeightInit = false) {\n    let configArray;\n    let extraModelConfig = {};\n    if (config instanceof Array) {\n      if (!(config[0].className != null) || config[0][\"className\"] === \"Merge\") {\n        throw new ValueError(\"Legacy serialization format not supported yet.\");\n      }\n      configArray = config;\n    } else {\n      util_exports.assert(config[\"layers\"] != null, () => `When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.`);\n      configArray = config[\"layers\"];\n      delete config[\"layers\"];\n      extraModelConfig = config;\n    }\n    const model2 = new cls(extraModelConfig);\n    if (!(model2 instanceof Sequential)) {\n      throw new NotImplementedError(`Sequential.fromConfig called on non-Sequential input: ${model2}`);\n    }\n    for (const conf of configArray) {\n      const customObjects2 = void 0;\n      const layer = deserialize(conf, customObjects2, fastWeightInit);\n      if (fastWeightInit) {\n        layer.setFastWeightInitDuringBuild(true);\n      }\n      model2.add(layer);\n    }\n    return model2;\n  }\n  set stopTraining(stop) {\n    if (this.model == null) {\n      throw new ValueError(\"Cannot set the stopTraining property of a sequential model before it is compiled.\");\n    }\n    this.model.stopTraining = stop;\n  }\n  get stopTraining() {\n    if (this.model == null) {\n      throw new ValueError(\"Cannot get the stopTraining property of a sequential model before it is compiled.\");\n    }\n    return this.model.stopTraining;\n  }\n  getConfig() {\n    const layers = [];\n    for (const layer of this.layers) {\n      const dict = {};\n      dict[\"className\"] = layer.getClassName();\n      dict[\"config\"] = layer.getConfig();\n      layers.push(dict);\n    }\n    return { name: this.name, layers };\n  }\n};\nSequential.className = \"Sequential\";\nserialization_exports.registerClass(Sequential);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/exports.js\nfunction model(args) {\n  return new LayersModel(args);\n}\nfunction sequential(config) {\n  return new Sequential(config);\n}\nfunction loadLayersModel(pathOrIOHandler, options) {\n  if (options == null) {\n    options = {};\n  }\n  return loadLayersModelInternal(pathOrIOHandler, options);\n}\nfunction input(config) {\n  return Input(config);\n}\nfunction registerCallbackConstructor(verbosityLevel, callbackConstructor) {\n  CallbackConstructorRegistry.registerCallbackConstructor(verbosityLevel, callbackConstructor);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/activations.js\nvar Activation = class extends serialization_exports.Serializable {\n  getConfig() {\n    return {};\n  }\n};\nvar Elu2 = class extends Activation {\n  apply(x, alpha = 1) {\n    return elu2(x, alpha);\n  }\n};\nElu2.className = \"elu\";\nserialization_exports.registerClass(Elu2);\nvar Selu2 = class extends Activation {\n  apply(x) {\n    return selu(x);\n  }\n};\nSelu2.className = \"selu\";\nserialization_exports.registerClass(Selu2);\nvar Relu2 = class extends Activation {\n  apply(x) {\n    return relu(x);\n  }\n};\nRelu2.className = \"relu\";\nserialization_exports.registerClass(Relu2);\nvar Relu62 = class extends Activation {\n  apply(x) {\n    return tidy(() => minimum(6, relu(x)));\n  }\n};\nRelu62.className = \"relu6\";\nserialization_exports.registerClass(Relu62);\nvar Linear = class extends Activation {\n  apply(x) {\n    return x;\n  }\n};\nLinear.className = \"linear\";\nserialization_exports.registerClass(Linear);\nvar Sigmoid2 = class extends Activation {\n  apply(x) {\n    return sigmoid(x);\n  }\n};\nSigmoid2.className = \"sigmoid\";\nserialization_exports.registerClass(Sigmoid2);\nvar HardSigmoid = class extends Activation {\n  apply(x) {\n    return hardSigmoid(x);\n  }\n};\nHardSigmoid.className = \"hardSigmoid\";\nserialization_exports.registerClass(HardSigmoid);\nvar Softplus2 = class extends Activation {\n  apply(x) {\n    return softplus(x);\n  }\n};\nSoftplus2.className = \"softplus\";\nserialization_exports.registerClass(Softplus2);\nvar Softsign = class extends Activation {\n  apply(x) {\n    return softsign(x);\n  }\n};\nSoftsign.className = \"softsign\";\nserialization_exports.registerClass(Softsign);\nvar Tanh2 = class extends Activation {\n  apply(x) {\n    return tanh2(x);\n  }\n};\nTanh2.className = \"tanh\";\nserialization_exports.registerClass(Tanh2);\nvar Softmax2 = class extends Activation {\n  apply(x, axis = -1) {\n    return softmax(x, axis);\n  }\n};\nSoftmax2.className = \"softmax\";\nserialization_exports.registerClass(Softmax2);\nvar LogSoftmax2 = class extends Activation {\n  apply(x, axis = -1) {\n    return logSoftmax(x, axis);\n  }\n};\nLogSoftmax2.className = \"logSoftmax\";\nserialization_exports.registerClass(LogSoftmax2);\nvar Swish = class extends Activation {\n  apply(x, alpha = 1) {\n    return tidy(() => mul(sigmoid(mul(x, alpha)), x));\n  }\n};\nSwish.className = \"swish\";\nserialization_exports.registerClass(Swish);\nvar Mish = class extends Activation {\n  apply(x) {\n    return tidy(() => mul(x, tanh2(softplus(x))));\n  }\n};\nMish.className = \"mish\";\nserialization_exports.registerClass(Mish);\nfunction serializeActivation(activation2) {\n  return activation2.getClassName();\n}\nfunction deserializeActivation(config, customObjects = {}) {\n  return deserializeKerasObject(config, serialization_exports.SerializationMap.getMap().classNameMap, customObjects, \"activation\");\n}\nfunction getActivation(identifier) {\n  if (identifier == null) {\n    const config = {};\n    config[\"className\"] = \"linear\";\n    config[\"config\"] = {};\n    return deserializeActivation(config);\n  }\n  if (typeof identifier === \"string\") {\n    const config = {};\n    config[\"className\"] = identifier;\n    config[\"config\"] = {};\n    return deserializeActivation(config);\n  } else if (identifier instanceof Activation) {\n    return identifier;\n  } else {\n    return deserializeActivation(identifier);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/regularizers.js\nfunction assertObjectArgs(args) {\n  if (args != null && typeof args !== \"object\") {\n    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${args}`);\n  }\n}\nvar Regularizer = class extends serialization_exports.Serializable {\n};\nvar L1L2 = class extends Regularizer {\n  constructor(args) {\n    super();\n    assertObjectArgs(args);\n    this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n    this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n    this.hasL1 = this.l1 !== 0;\n    this.hasL2 = this.l2 !== 0;\n  }\n  apply(x) {\n    return tidy(() => {\n      let regularization = zeros([1]);\n      if (this.hasL1) {\n        regularization = add2(regularization, sum2(mul(this.l1, abs(x))));\n      }\n      if (this.hasL2) {\n        regularization = add2(regularization, sum2(mul(this.l2, square2(x))));\n      }\n      return reshape(regularization, []);\n    });\n  }\n  getConfig() {\n    return { \"l1\": this.l1, \"l2\": this.l2 };\n  }\n  static fromConfig(cls, config) {\n    return new cls({ l1: config[\"l1\"], l2: config[\"l2\"] });\n  }\n};\nL1L2.className = \"L1L2\";\nserialization_exports.registerClass(L1L2);\nfunction l1(args) {\n  assertObjectArgs(args);\n  return new L1L2({ l1: args != null ? args.l1 : null, l2: 0 });\n}\nfunction l2(args) {\n  assertObjectArgs(args);\n  return new L1L2({ l2: args != null ? args.l2 : null, l1: 0 });\n}\nvar REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  \"l1l2\": \"L1L2\"\n};\nfunction serializeRegularizer(constraint) {\n  return serializeKerasObject(constraint);\n}\nfunction deserializeRegularizer(config, customObjects = {}) {\n  return deserializeKerasObject(config, serialization_exports.SerializationMap.getMap().classNameMap, customObjects, \"regularizer\");\n}\nfunction getRegularizer(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === \"string\") {\n    const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    const config = { className, config: {} };\n    return deserializeRegularizer(config);\n  } else if (identifier instanceof Regularizer) {\n    return identifier;\n  } else {\n    return deserializeRegularizer(identifier);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/advanced_activations.js\nvar ReLU = class extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.supportsMasking = true;\n    if (args != null) {\n      this.maxValue = args.maxValue;\n    }\n  }\n  call(inputs, kwargs) {\n    inputs = getExactlyOneTensor(inputs);\n    let output = relu(inputs);\n    if (this.maxValue != null) {\n      output = clipByValue(output, 0, this.maxValue);\n    }\n    return output;\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  getConfig() {\n    const config = { maxValue: this.maxValue };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nReLU.className = \"ReLU\";\nserialization_exports.registerClass(ReLU);\nvar LeakyReLU = class extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.DEFAULT_ALPHA = 0.3;\n    if (args == null) {\n      args = {};\n    }\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n  call(inputs, kwargs) {\n    const x = getExactlyOneTensor(inputs);\n    return leakyRelu(x, this.alpha);\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  getConfig() {\n    const config = { alpha: this.alpha };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nLeakyReLU.className = \"LeakyReLU\";\nserialization_exports.registerClass(LeakyReLU);\nvar PReLU = class extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.DEFAULT_ALPHA_INITIALIZER = \"zeros\";\n    if (args == null) {\n      args = {};\n    }\n    this.supportsMasking = true;\n    this.alphaInitializer = getInitializer(args.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER);\n    this.alphaRegularizer = getRegularizer(args.alphaRegularizer);\n    this.alphaConstraint = getConstraint(args.alphaConstraint);\n    if (args.sharedAxes == null) {\n      this.sharedAxes = null;\n    } else if (Array.isArray(args.sharedAxes)) {\n      this.sharedAxes = args.sharedAxes;\n    } else if (typeof args.sharedAxes === \"number\") {\n      this.sharedAxes = [args.sharedAxes];\n    } else {\n      throw new ValueError(`Expected sharedAxes to be a number or an array of numbers, but got ${args.sharedAxes}`);\n    }\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const paramShape = inputShape.slice(1);\n    if (this.sharedAxes != null) {\n      for (const i of this.sharedAxes) {\n        paramShape[i - 1] = 1;\n      }\n    }\n    this.alpha = this.addWeight(\"alpha\", paramShape, \"float32\", this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint);\n    const axes = {};\n    if (this.sharedAxes != null) {\n      for (let i = 1; i < inputShape.length; ++i) {\n        axes[i] = inputShape[i];\n      }\n    }\n    this.inputSpec = [new InputSpec({\n      ndim: inputShape.length,\n      axes\n    })];\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    inputs = getExactlyOneTensor(inputs);\n    return prelu(inputs, this.alpha.read());\n  }\n  getConfig() {\n    const config = {\n      alphaInitializer: serializeInitializer(this.alphaInitializer),\n      alphaRegularizer: serializeRegularizer(this.alphaRegularizer),\n      alphaConstraint: serializeConstraint(this.alphaConstraint),\n      sharedAxes: this.sharedAxes\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nPReLU.className = \"PReLU\";\nserialization_exports.registerClass(PReLU);\nvar ELU = class extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.DEFAULT_ALPHA = 1;\n    if (args == null) {\n      args = {};\n    }\n    if (args.alpha != null && args.alpha !== this.DEFAULT_ALPHA) {\n      throw new NotImplementedError(`Non-default alpha value (${args.alpha}) is not supported by the ELU layer yet.`);\n    }\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n  call(inputs, kwargs) {\n    const x = getExactlyOneTensor(inputs);\n    return elu(x);\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  getConfig() {\n    const config = { alpha: this.alpha };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nELU.className = \"ELU\";\nserialization_exports.registerClass(ELU);\nvar ThresholdedReLU = class extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.DEFAULT_THETA = 1;\n    if (args == null) {\n      args = {};\n    }\n    this.theta = args.theta == null ? this.DEFAULT_THETA : args.theta;\n  }\n  call(inputs, kwargs) {\n    const x = getExactlyOneTensor(inputs);\n    return mul(x, cast(greater(x, this.theta), \"float32\"));\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  getConfig() {\n    const config = { theta: this.theta };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nThresholdedReLU.className = \"ThresholdedReLU\";\nserialization_exports.registerClass(ThresholdedReLU);\nvar Softmax3 = class extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.DEFAULT_AXIS = 1;\n    if (args == null) {\n      args = {};\n    }\n    this.softmax = new Softmax2().apply;\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n  }\n  call(inputs, kwargs) {\n    const x = getExactlyOneTensor(inputs);\n    return this.softmax(x, this.axis);\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  getConfig() {\n    const config = { axis: this.axis };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nSoftmax3.className = \"Softmax\";\nserialization_exports.registerClass(Softmax3);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/utils/conv_utils.js\nfunction normalizeArray(value, n, name) {\n  if (typeof value === \"number\") {\n    return pyListRepeat(value, n);\n  } else {\n    if (value.length !== n) {\n      throw new ValueError(`The ${name} argument must be an integer or tuple of ${n} integers. Received: ${value.length} elements.`);\n    }\n    for (let i = 0; i < n; ++i) {\n      const singleValue = value[i];\n      if (!isInteger(singleValue)) {\n        throw new ValueError(`The ${name} argument must be an integer or tuple of ${n} integers. Received: ${JSON.stringify(value)} including a non-integer number ${singleValue}`);\n      }\n    }\n    return value;\n  }\n}\nfunction convOutputLength(inputLength, filterSize, padding, stride, dilation = 1) {\n  if (inputLength == null) {\n    return inputLength;\n  }\n  const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n  let outputLength;\n  if (padding === \"same\") {\n    outputLength = inputLength;\n  } else {\n    outputLength = inputLength - dilatedFilterSize + 1;\n  }\n  return Math.floor((outputLength + stride - 1) / stride);\n}\nfunction deconvLength(dimSize, strideSize, kernelSize, padding) {\n  if (dimSize == null) {\n    return null;\n  }\n  if (padding === \"valid\") {\n    dimSize = dimSize * strideSize + max2([kernelSize - strideSize, 0]);\n  } else if (padding === \"same\") {\n    dimSize = dimSize * strideSize;\n  } else {\n    throw new ValueError(`Unsupport padding mode: ${padding}.`);\n  }\n  return dimSize;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js\nfunction preprocessConv2DInput(x, dataFormat) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === \"channelsFirst\") {\n      return transpose(x, [0, 2, 3, 1]);\n    } else {\n      return x;\n    }\n  });\n}\nfunction preprocessConv3DInput(x, dataFormat) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === \"channelsFirst\") {\n      return transpose(x, [0, 2, 3, 4, 1]);\n    } else {\n      return x;\n    }\n  });\n}\nfunction conv1dWithBias(x, kernel, bias, strides = 1, padding = \"valid\", dataFormat, dilationRate = 1) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.shape.length !== 3) {\n      throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ${x.shape.length} instead.`);\n    }\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ${kernel.shape.length} instead`);\n    }\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ${kernel.shape.length} instead`);\n    }\n    if (dataFormat === \"channelsFirst\") {\n      x = transpose(x, [0, 2, 1]);\n    }\n    if (padding === \"causal\") {\n      throw new NotImplementedError(\"The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.\");\n    }\n    let y = conv1d(x, kernel, strides, padding === \"same\" ? \"same\" : \"valid\", \"NWC\", dilationRate);\n    if (bias != null) {\n      y = biasAdd(y, bias);\n    }\n    return y;\n  });\n}\nfunction conv2dWithBiasActivation(x, kernel, bias, strides = [1, 1], padding = \"valid\", dataFormat, dilationRate, activation2 = null) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${x.rank}.`);\n    }\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${x.rank}.`);\n    }\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (padding === \"causal\") {\n      throw new NotImplementedError(\"The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.\");\n    }\n    y = fused_ops_exports.conv2d({\n      x: y,\n      filter: kernel,\n      strides,\n      pad: padding === \"same\" ? \"same\" : \"valid\",\n      dilations: dilationRate,\n      dataFormat: \"NHWC\",\n      bias,\n      activation: activation2\n    });\n    if (dataFormat === \"channelsFirst\") {\n      y = transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\nfunction conv3dWithBias(x, kernel, bias, strides = [1, 1, 1], padding = \"valid\", dataFormat, dilationRate) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ${x.rank}.`);\n    }\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${x.rank}.`);\n    }\n    let y = preprocessConv3DInput(x, dataFormat);\n    if (padding === \"causal\") {\n      throw new NotImplementedError(\"The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.\");\n    }\n    y = conv3d(y, kernel, strides, padding === \"same\" ? \"same\" : \"valid\", \"NDHWC\", dilationRate);\n    if (bias != null) {\n      y = biasAdd(y, bias);\n    }\n    if (dataFormat === \"channelsFirst\") {\n      y = transpose(y, [0, 4, 1, 2, 3]);\n    }\n    return y;\n  });\n}\nvar BaseConv = class extends Layer {\n  constructor(rank, args) {\n    super(args);\n    this.bias = null;\n    this.DEFAULT_KERNEL_INITIALIZER = \"glorotNormal\";\n    this.DEFAULT_BIAS_INITIALIZER = \"zeros\";\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    assertPositiveInteger(this.rank, \"rank\");\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);\n    }\n    this.kernelSize = normalizeArray(args.kernelSize, rank, \"kernelSize\");\n    this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, \"strides\");\n    this.padding = args.padding == null ? \"valid\" : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat = args.dataFormat == null ? \"channelsLast\" : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, \"dilationRate\");\n    if (this.rank === 1 && (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n      throw new ValueError(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === \"number\") {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === \"number\") {\n        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n  static verifyArgs(args) {\n    assert2(\"kernelSize\" in args, `required key 'kernelSize' not in config`);\n    if (typeof args.kernelSize !== \"number\" && !checkArrayTypeAndLength(args.kernelSize, \"number\", 1, 3)) {\n      throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n  getConfig() {\n    const config = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nvar Conv = class extends BaseConv {\n  constructor(rank, args) {\n    super(rank, args);\n    this.kernel = null;\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    assertPositiveInteger(this.filters, \"filters\");\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis = this.dataFormat === \"channelsFirst\" ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(`The channel dimension of the input should be defined. Found ${inputShape[channelAxis]}`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n    this.kernel = this.addWeight(\"kernel\", kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\"bias\", [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n    this.inputSpec = [{ ndim: this.rank + 2, axes: { [channelAxis]: inputDim } }];\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = mapActivationToFusedKernel(this.activation.getClassName());\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        } else {\n          throw new NotImplementedError(\"convolutions greater than 3D are not implemented yet.\");\n        }\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n      return outputs;\n    });\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace = [];\n    const space = this.dataFormat === \"channelsLast\" ? inputShape.slice(1, inputShape.length - 1) : inputShape.slice(2);\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === \"number\" ? this.dilationRate : this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n    let outputShape = [inputShape[0]];\n    if (this.dataFormat === \"channelsLast\") {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n    return outputShape;\n  }\n  getConfig() {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  static verifyArgs(args) {\n    if (!(\"filters\" in args) || typeof args.filters !== \"number\" || args.filters < 1) {\n      throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n};\nvar Conv2D2 = class extends Conv {\n  constructor(args) {\n    super(2, args);\n    Conv2D2.verifyArgs(args);\n  }\n  getConfig() {\n    const config = super.getConfig();\n    delete config[\"rank\"];\n    return config;\n  }\n  static verifyArgs(args) {\n    if (typeof args.kernelSize !== \"number\" && !checkArrayTypeAndLength(args.kernelSize, \"number\", 1, 2)) {\n      throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n};\nConv2D2.className = \"Conv2D\";\nserialization_exports.registerClass(Conv2D2);\nvar Conv3D2 = class extends Conv {\n  constructor(args) {\n    super(3, args);\n    Conv3D2.verifyArgs(args);\n  }\n  getConfig() {\n    const config = super.getConfig();\n    delete config[\"rank\"];\n    return config;\n  }\n  static verifyArgs(args) {\n    if (typeof args.kernelSize !== \"number\") {\n      if (!(Array.isArray(args.kernelSize) && (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n};\nConv3D2.className = \"Conv3D\";\nserialization_exports.registerClass(Conv3D2);\nvar Conv2DTranspose = class extends Conv2D2 {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [new InputSpec({ ndim: 4 })];\n    if (this.padding !== \"same\" && this.padding !== \"valid\") {\n      throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length !== 4) {\n      throw new ValueError(\"Input should have rank 4; Received input shape: \" + JSON.stringify(inputShape));\n    }\n    const channelAxis = this.dataFormat === \"channelsFirst\" ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\"The channel dimension of the inputs should be defined. Found `None`.\");\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n    this.kernel = this.addWeight(\"kernel\", kernelShape, \"float32\", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\"bias\", [this.filters], \"float32\", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n    this.inputSpec = [new InputSpec({ ndim: 4, axes: { [channelAxis]: inputDim } })];\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      let input2 = getExactlyOneTensor(inputs);\n      if (input2.shape.length !== 4) {\n        throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${input2.shape.length}`);\n      }\n      const inputShape = input2.shape;\n      const batchSize = inputShape[0];\n      let hAxis;\n      let wAxis;\n      if (this.dataFormat === \"channelsFirst\") {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1];\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n      const outputShape = [batchSize, outHeight, outWidth, this.filters];\n      if (this.dataFormat !== \"channelsLast\") {\n        input2 = transpose(input2, [0, 2, 3, 1]);\n      }\n      let outputs = conv2dTranspose(input2, this.kernel.read(), outputShape, this.strides, this.padding);\n      if (this.dataFormat !== \"channelsLast\") {\n        outputs = transpose(outputs, [0, 3, 1, 2]);\n      }\n      if (this.bias != null) {\n        outputs = biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    let channelAxis;\n    let heightAxis;\n    let widthAxis;\n    if (this.dataFormat === \"channelsFirst\") {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n  getConfig() {\n    const config = super.getConfig();\n    delete config[\"dilationRate\"];\n    return config;\n  }\n};\nConv2DTranspose.className = \"Conv2DTranspose\";\nserialization_exports.registerClass(Conv2DTranspose);\nvar Conv3DTranspose = class extends Conv3D2 {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [new InputSpec({ ndim: 5 })];\n    if (this.padding !== \"same\" && this.padding !== \"valid\") {\n      throw new ValueError(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length !== 5) {\n      throw new ValueError(\"Input should have rank 5; Received input shape: \" + JSON.stringify(inputShape));\n    }\n    const channelAxis = this.dataFormat === \"channelsFirst\" ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\"The channel dimension of the inputs should be defined. Found `None`.\");\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n    this.kernel = this.addWeight(\"kernel\", kernelShape, \"float32\", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\"bias\", [this.filters], \"float32\", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n    this.inputSpec = [new InputSpec({ ndim: 5, axes: { [channelAxis]: inputDim } })];\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      let input2 = getExactlyOneTensor(inputs);\n      if (input2.shape.length !== 5) {\n        throw new ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${input2.shape.length}`);\n      }\n      const inputShape = input2.shape;\n      const batchSize = inputShape[0];\n      let hAxis;\n      let wAxis;\n      let dAxis;\n      if (this.dataFormat === \"channelsFirst\") {\n        dAxis = 2;\n        hAxis = 3;\n        wAxis = 4;\n      } else {\n        dAxis = 1;\n        hAxis = 2;\n        wAxis = 3;\n      }\n      const depth = inputShape[dAxis];\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelD = this.kernelSize[0];\n      const kernelH = this.kernelSize[1];\n      const kernelW = this.kernelSize[2];\n      const strideD = this.strides[0];\n      const strideH = this.strides[1];\n      const strideW = this.strides[2];\n      const outDepth = deconvLength(depth, strideD, kernelD, this.padding);\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n      const outputShape = [batchSize, outDepth, outHeight, outWidth, this.filters];\n      if (this.dataFormat !== \"channelsLast\") {\n        input2 = transpose(input2, [0, 2, 3, 4, 1]);\n      }\n      let outputs = conv3dTranspose(input2, this.kernel.read(), outputShape, this.strides, this.padding);\n      if (this.dataFormat !== \"channelsLast\") {\n        outputs = transpose(outputs, [0, 4, 1, 2, 3]);\n      }\n      if (this.bias !== null) {\n        outputs = biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation !== null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    let channelAxis;\n    let depthAxis;\n    let heightAxis;\n    let widthAxis;\n    if (this.dataFormat === \"channelsFirst\") {\n      channelAxis = 1;\n      depthAxis = 2;\n      heightAxis = 3;\n      widthAxis = 4;\n    } else {\n      channelAxis = 4;\n      depthAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    }\n    const kernelD = this.kernelSize[0];\n    const kernelH = this.kernelSize[1];\n    const kernelW = this.kernelSize[2];\n    const strideD = this.strides[0];\n    const strideH = this.strides[1];\n    const strideW = this.strides[2];\n    outputShape[channelAxis] = this.filters;\n    outputShape[depthAxis] = deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n    outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n  getConfig() {\n    const config = super.getConfig();\n    delete config[\"dilationRate\"];\n    return config;\n  }\n};\nConv3DTranspose.className = \"Conv3DTranspose\";\nserialization_exports.registerClass(Conv3DTranspose);\nvar SeparableConv = class extends Conv {\n  constructor(rank, config) {\n    super(rank, config);\n    this.DEFAULT_DEPTHWISE_INITIALIZER = \"glorotUniform\";\n    this.DEFAULT_POINTWISE_INITIALIZER = \"glorotUniform\";\n    this.depthwiseKernel = null;\n    this.pointwiseKernel = null;\n    if (config.filters == null) {\n      throw new ValueError(\"The `filters` configuration field is required by SeparableConv, but is unspecified.\");\n    }\n    if (config.kernelInitializer != null || config.kernelRegularizer != null || config.kernelConstraint != null) {\n      throw new ValueError(\"Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.\");\n    }\n    if (config.padding != null && config.padding !== \"same\" && config.padding !== \"valid\") {\n      throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n    this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(inputShape)}`);\n    }\n    const channelAxis = this.dataFormat === \"channelsFirst\" ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight(\"depthwise_kernel\", depthwiseKernelShape, \"float32\", this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight(\"pointwise_kernel\", pointwiseKernelShape, \"float32\", this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\"bias\", [this.filters], \"float32\", this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.inputSpec = [new InputSpec({ ndim: this.rank + 2, axes: { [channelAxis]: inputDim } })];\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let output;\n      if (this.rank === 1) {\n        throw new NotImplementedError(\"1D separable convolution is not implemented yet.\");\n      } else if (this.rank === 2) {\n        if (this.dataFormat === \"channelsFirst\") {\n          inputs = transpose(inputs, [0, 2, 3, 1]);\n        }\n        output = separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, \"NHWC\");\n      }\n      if (this.useBias) {\n        output = biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n      if (this.dataFormat === \"channelsFirst\") {\n        output = transpose(output, [0, 3, 1, 2]);\n      }\n      return output;\n    });\n  }\n  getConfig() {\n    const config = super.getConfig();\n    delete config[\"rank\"];\n    delete config[\"kernelInitializer\"];\n    delete config[\"kernelRegularizer\"];\n    delete config[\"kernelConstraint\"];\n    config[\"depthwiseInitializer\"] = serializeInitializer(this.depthwiseInitializer);\n    config[\"pointwiseInitializer\"] = serializeInitializer(this.pointwiseInitializer);\n    config[\"depthwiseRegularizer\"] = serializeRegularizer(this.depthwiseRegularizer);\n    config[\"pointwiseRegularizer\"] = serializeRegularizer(this.pointwiseRegularizer);\n    config[\"depthwiseConstraint\"] = serializeConstraint(this.depthwiseConstraint);\n    config[\"pointwiseConstraint\"] = serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n};\nSeparableConv.className = \"SeparableConv\";\nvar SeparableConv2D = class extends SeparableConv {\n  constructor(args) {\n    super(2, args);\n  }\n};\nSeparableConv2D.className = \"SeparableConv2D\";\nserialization_exports.registerClass(SeparableConv2D);\nvar Conv1D = class extends Conv {\n  constructor(args) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{ ndim: 3 }];\n  }\n  getConfig() {\n    const config = super.getConfig();\n    delete config[\"rank\"];\n    delete config[\"dataFormat\"];\n    return config;\n  }\n  static verifyArgs(args) {\n    if (typeof args.kernelSize !== \"number\" && !checkArrayTypeAndLength(args.kernelSize, \"number\", 1, 1)) {\n      throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n};\nConv1D.className = \"Conv1D\";\nserialization_exports.registerClass(Conv1D);\nvar Cropping2D = class extends Layer {\n  constructor(args) {\n    super(args);\n    if (typeof args.cropping === \"number\") {\n      this.cropping = [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === \"number\") {\n      this.cropping = [\n        [args.cropping[0], args.cropping[0]],\n        [args.cropping[1], args.cropping[1]]\n      ];\n    } else {\n      this.cropping = args.cropping;\n    }\n    this.dataFormat = args.dataFormat === void 0 ? \"channelsLast\" : args.dataFormat;\n    this.inputSpec = [{ ndim: 4 }];\n  }\n  computeOutputShape(inputShape) {\n    if (this.dataFormat === \"channelsFirst\") {\n      return [\n        inputShape[0],\n        inputShape[1],\n        inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n      ];\n    } else {\n      return [\n        inputShape[0],\n        inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[2] - this.cropping[1][0] - this.cropping[1][1],\n        inputShape[3]\n      ];\n    }\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      if (this.dataFormat === \"channelsLast\") {\n        const hSliced = sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n  getConfig() {\n    const config = { cropping: this.cropping, dataFormat: this.dataFormat };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nCropping2D.className = \"Cropping2D\";\nserialization_exports.registerClass(Cropping2D);\nvar UpSampling2D = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_SIZE = [2, 2];\n    this.inputSpec = [{ ndim: 4 }];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat = args.dataFormat == null ? \"channelsLast\" : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.interpolation = args.interpolation == null ? \"nearest\" : args.interpolation;\n    checkInterpolationFormat(this.interpolation);\n  }\n  computeOutputShape(inputShape) {\n    if (this.dataFormat === \"channelsFirst\") {\n      const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      let input2 = getExactlyOneTensor(inputs);\n      const inputShape = input2.shape;\n      if (this.dataFormat === \"channelsFirst\") {\n        input2 = transpose(input2, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n        const resized = this.interpolation === \"nearest\" ? image.resizeNearestNeighbor(input2, [height, width]) : image.resizeBilinear(input2, [height, width]);\n        return transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return this.interpolation === \"nearest\" ? image.resizeNearestNeighbor(input2, [height, width]) : image.resizeBilinear(input2, [height, width]);\n      }\n    });\n  }\n  getConfig() {\n    const config = { size: this.size, dataFormat: this.dataFormat };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nUpSampling2D.className = \"UpSampling2D\";\nserialization_exports.registerClass(UpSampling2D);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js\nfunction depthwiseConv2d3(x, depthwiseKernel, strides = [1, 1], padding = \"valid\", dataFormat, dilationRate) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (x.rank !== 4) {\n      throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ${x.rank}-D`);\n    }\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ${depthwiseKernel.rank}-D`);\n    }\n    y = depthwiseConv2d(y, depthwiseKernel, strides, padding === \"same\" ? \"same\" : \"valid\", \"NHWC\", dilationRate);\n    if (dataFormat === \"channelsFirst\") {\n      y = transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\nvar DepthwiseConv2D = class extends BaseConv {\n  constructor(args) {\n    super(2, args);\n    this.depthwiseKernel = null;\n    this.depthMultiplier = args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 4) {\n      throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(inputShape)}.`);\n    }\n    const channelAxis = this.dataFormat === \"channelsFirst\" ? 1 : 3;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${inputShape[channelAxis]}).`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape = [\n      this.kernelSize[0],\n      this.kernelSize[1],\n      inputDim,\n      this.depthMultiplier\n    ];\n    this.depthwiseKernel = this.addWeight(\"depthwise_kernel\", depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\"bias\", [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs = depthwiseConv2d3(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);\n      if (this.useBias) {\n        outputs = biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const rows = this.dataFormat === \"channelsFirst\" ? inputShape[2] : inputShape[1];\n    const cols = this.dataFormat === \"channelsFirst\" ? inputShape[3] : inputShape[2];\n    const outFilters = this.dataFormat === \"channelsFirst\" ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;\n    const outRows = convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n    const outCols = convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === \"channelsFirst\") {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  }\n  getConfig() {\n    const config = super.getConfig();\n    config[\"depthMultiplier\"] = this.depthMultiplier;\n    config[\"depthwiseInitializer\"] = serializeInitializer(this.depthwiseInitializer);\n    config[\"depthwiseRegularizer\"] = serializeRegularizer(this.depthwiseRegularizer);\n    config[\"depthwiseConstraint\"] = serializeConstraint(this.depthwiseRegularizer);\n    return config;\n  }\n};\nDepthwiseConv2D.className = \"DepthwiseConv2D\";\nserialization_exports.registerClass(DepthwiseConv2D);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js\nfunction standardizeArgs(inputs, initialState, constants, numConstants) {\n  if (Array.isArray(inputs)) {\n    if (initialState != null || constants != null) {\n      throw new ValueError(\"When inputs is an array, neither initialState or constants should be provided\");\n    }\n    if (numConstants != null) {\n      constants = inputs.slice(inputs.length - numConstants, inputs.length);\n      inputs = inputs.slice(0, inputs.length - numConstants);\n    }\n    if (inputs.length > 1) {\n      initialState = inputs.slice(1, inputs.length);\n    }\n    inputs = inputs[0];\n  }\n  function toListOrNull(x) {\n    if (x == null || Array.isArray(x)) {\n      return x;\n    } else {\n      return [x];\n    }\n  }\n  initialState = toListOrNull(initialState);\n  constants = toListOrNull(constants);\n  return { inputs, initialState, constants };\n}\nfunction rnn(stepFunction, inputs, initialStates, goBackwards = false, mask, constants, unroll = false, needPerStepOutputs = false) {\n  return tidy(() => {\n    const ndim = inputs.shape.length;\n    if (ndim < 3) {\n      throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n    }\n    const axes = [1, 0].concat(range2(2, ndim));\n    inputs = transpose(inputs, axes);\n    if (constants != null) {\n      throw new NotImplementedError(\"The rnn() functoin of the deeplearn.js backend does not support constants yet.\");\n    }\n    if (unroll) {\n      console.warn(\"Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend.\");\n    }\n    if (mask != null) {\n      mask = cast(cast(mask, \"bool\"), \"float32\");\n      if (mask.rank === ndim - 1) {\n        mask = expandDims(mask, -1);\n      }\n      mask = transpose(mask, axes);\n    }\n    if (goBackwards) {\n      inputs = reverse(inputs, 0);\n      if (mask != null) {\n        mask = reverse(mask, 0);\n      }\n    }\n    const perStepOutputs = [];\n    let lastOutput;\n    let states = initialStates;\n    const timeSteps = inputs.shape[0];\n    const perStepInputs = unstack(inputs);\n    let perStepMasks;\n    if (mask != null) {\n      perStepMasks = unstack(mask);\n    }\n    for (let t = 0; t < timeSteps; ++t) {\n      const currentInput = perStepInputs[t];\n      const stepOutputs = tidy(() => stepFunction(currentInput, states));\n      if (mask == null) {\n        lastOutput = stepOutputs[0];\n        states = stepOutputs[1];\n      } else {\n        const maskedOutputs = tidy(() => {\n          const stepMask = perStepMasks[t];\n          const negStepMask = sub(onesLike(stepMask), stepMask);\n          const output = add2(mul(stepOutputs[0], stepMask), mul(states[0], negStepMask));\n          const newStates = states.map((state, i) => {\n            return add2(mul(stepOutputs[1][i], stepMask), mul(state, negStepMask));\n          });\n          return { output, newStates };\n        });\n        lastOutput = maskedOutputs.output;\n        states = maskedOutputs.newStates;\n      }\n      if (needPerStepOutputs) {\n        perStepOutputs.push(lastOutput);\n      }\n    }\n    let outputs;\n    if (needPerStepOutputs) {\n      const axis = 1;\n      outputs = stack(perStepOutputs, axis);\n    }\n    return [lastOutput, outputs, states];\n  });\n}\nvar RNN = class extends Layer {\n  constructor(args) {\n    super(args);\n    let cell;\n    if (args.cell == null) {\n      throw new ValueError(\"cell property is missing for the constructor of RNN.\");\n    } else if (Array.isArray(args.cell)) {\n      cell = new StackedRNNCells({ cells: args.cell });\n    } else {\n      cell = args.cell;\n    }\n    if (cell.stateSize == null) {\n      throw new ValueError(\"The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).\");\n    }\n    this.cell = cell;\n    this.returnSequences = args.returnSequences == null ? false : args.returnSequences;\n    this.returnState = args.returnState == null ? false : args.returnState;\n    this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n    this._stateful = args.stateful == null ? false : args.stateful;\n    this.unroll = args.unroll == null ? false : args.unroll;\n    this.supportsMasking = true;\n    this.inputSpec = [new InputSpec({ ndim: 3 })];\n    this.stateSpec = null;\n    this.states_ = null;\n    this.numConstants = null;\n    this.keptStates = [];\n  }\n  getStates() {\n    if (this.states_ == null) {\n      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      return range2(0, numStates).map((x) => null);\n    } else {\n      return this.states_;\n    }\n  }\n  setStates(states) {\n    this.states_ = states;\n  }\n  computeOutputShape(inputShape) {\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = inputShape[0];\n    }\n    inputShape = inputShape;\n    let stateSize = this.cell.stateSize;\n    if (!Array.isArray(stateSize)) {\n      stateSize = [stateSize];\n    }\n    const outputDim = stateSize[0];\n    let outputShape;\n    if (this.returnSequences) {\n      outputShape = [inputShape[0], inputShape[1], outputDim];\n    } else {\n      outputShape = [inputShape[0], outputDim];\n    }\n    if (this.returnState) {\n      const stateShape = [];\n      for (const dim of stateSize) {\n        stateShape.push([inputShape[0], dim]);\n      }\n      return [outputShape].concat(stateShape);\n    } else {\n      return outputShape;\n    }\n  }\n  computeMask(inputs, mask) {\n    return tidy(() => {\n      if (Array.isArray(mask)) {\n        mask = mask[0];\n      }\n      const outputMask = this.returnSequences ? mask : null;\n      if (this.returnState) {\n        const stateMask = this.states.map((s) => null);\n        return [outputMask].concat(stateMask);\n      } else {\n        return outputMask;\n      }\n    });\n  }\n  get states() {\n    if (this.states_ == null) {\n      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      const output = [];\n      for (let i = 0; i < numStates; ++i) {\n        output.push(null);\n      }\n      return output;\n    } else {\n      return this.states_;\n    }\n  }\n  set states(s) {\n    this.states_ = s;\n  }\n  build(inputShape) {\n    const constantShape = null;\n    if (this.numConstants != null) {\n      throw new NotImplementedError(\"Constants support is not implemented in RNN yet.\");\n    }\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = inputShape[0];\n    }\n    inputShape = inputShape;\n    const batchSize = this.stateful ? inputShape[0] : null;\n    const inputDim = inputShape.slice(2);\n    this.inputSpec[0] = new InputSpec({ shape: [batchSize, null, ...inputDim] });\n    const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    if (constantShape != null) {\n      throw new NotImplementedError(\"Constants support is not implemented in RNN yet.\");\n    } else {\n      this.cell.build(stepInputShape);\n    }\n    let stateSize;\n    if (Array.isArray(this.cell.stateSize)) {\n      stateSize = this.cell.stateSize;\n    } else {\n      stateSize = [this.cell.stateSize];\n    }\n    if (this.stateSpec != null) {\n      if (!util_exports.arraysEqual(this.stateSpec.map((spec) => spec.shape[spec.shape.length - 1]), stateSize)) {\n        throw new ValueError(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);\n      }\n    } else {\n      this.stateSpec = stateSize.map((dim) => new InputSpec({ shape: [null, dim] }));\n    }\n    if (this.stateful) {\n      this.resetStates();\n    }\n  }\n  resetStates(states, training = false) {\n    tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError(\"Cannot call resetStates() on an RNN Layer that is not stateful.\");\n      }\n      const batchSize = this.inputSpec[0].shape[0];\n      if (batchSize == null) {\n        throw new ValueError(\"If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \\n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.\");\n      }\n      if (this.states_ == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map((dim) => zeros([batchSize, dim]));\n        } else {\n          this.states_ = [zeros([batchSize, this.cell.stateSize])];\n        }\n      } else if (states == null) {\n        dispose(this.states_);\n        if (this.keptStates != null) {\n          dispose(this.keptStates);\n          this.keptStates = [];\n        }\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map((dim) => zeros([batchSize, dim]));\n        } else {\n          this.states_[0] = zeros([batchSize, this.cell.stateSize]);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n        if (states.length !== this.states_.length) {\n          throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${states.length} state value(s). Input received: ${states}`);\n        }\n        if (training === true) {\n          this.keptStates.push(this.states_.slice());\n        } else {\n          dispose(this.states_);\n        }\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const dim = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[index] : this.cell.stateSize;\n          const expectedShape = [batchSize, dim];\n          if (!util_exports.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(`State ${index} is incompatible with layer ${this.name}: expected shape=${expectedShape}, received shape=${value.shape}`);\n          }\n          this.states_[index] = value;\n        }\n      }\n      this.states_ = this.states_.map((state) => keep(state.clone()));\n    });\n  }\n  apply(inputs, kwargs) {\n    let initialState = kwargs == null ? null : kwargs[\"initialState\"];\n    let constants = kwargs == null ? null : kwargs[\"constants\"];\n    if (kwargs == null) {\n      kwargs = {};\n    }\n    const standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants;\n    let additionalInputs = [];\n    let additionalSpecs = [];\n    if (initialState != null) {\n      kwargs[\"initialState\"] = initialState;\n      additionalInputs = additionalInputs.concat(initialState);\n      this.stateSpec = [];\n      for (const state of initialState) {\n        this.stateSpec.push(new InputSpec({ shape: state.shape }));\n      }\n      additionalSpecs = additionalSpecs.concat(this.stateSpec);\n    }\n    if (constants != null) {\n      kwargs[\"constants\"] = constants;\n      additionalInputs = additionalInputs.concat(constants);\n      this.numConstants = constants.length;\n    }\n    const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n    if (isTensor) {\n      const fullInput = [inputs].concat(additionalInputs);\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output = super.apply(fullInput, kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const mask = kwargs == null ? null : kwargs[\"mask\"];\n      const training = kwargs == null ? null : kwargs[\"training\"];\n      let initialState = kwargs == null ? null : kwargs[\"initialState\"];\n      inputs = getExactlyOneTensor(inputs);\n      if (initialState == null) {\n        if (this.stateful) {\n          initialState = this.states_;\n        } else {\n          initialState = this.getInitialState(inputs);\n        }\n      }\n      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      if (initialState.length !== numStates) {\n        throw new ValueError(`RNN Layer has ${numStates} state(s) but was passed ${initialState.length} initial state(s).`);\n      }\n      if (this.unroll) {\n        console.warn(\"Ignoring unroll = true for RNN layer, due to imperative backend.\");\n      }\n      const cellCallKwargs = { training };\n      const step5 = (inputs2, states2) => {\n        const outputs2 = this.cell.call([inputs2].concat(states2), cellCallKwargs);\n        return [outputs2[0], outputs2.slice(1)];\n      };\n      const rnnOutputs = rnn(step5, inputs, initialState, this.goBackwards, mask, null, this.unroll, this.returnSequences);\n      const lastOutput = rnnOutputs[0];\n      const outputs = rnnOutputs[1];\n      const states = rnnOutputs[2];\n      if (this.stateful) {\n        this.resetStates(states, training);\n      }\n      const output = this.returnSequences ? outputs : lastOutput;\n      if (this.returnState) {\n        return [output].concat(states);\n      } else {\n        return output;\n      }\n    });\n  }\n  getInitialState(inputs) {\n    return tidy(() => {\n      let initialState = zeros(inputs.shape);\n      initialState = sum2(initialState, [1, 2]);\n      initialState = expandDims2(initialState);\n      if (Array.isArray(this.cell.stateSize)) {\n        return this.cell.stateSize.map((dim) => dim > 1 ? tile2(initialState, [1, dim]) : initialState);\n      } else {\n        return this.cell.stateSize > 1 ? [tile2(initialState, [1, this.cell.stateSize])] : [initialState];\n      }\n    });\n  }\n  get trainableWeights() {\n    if (!this.trainable) {\n      return [];\n    }\n    return this.cell.trainableWeights;\n  }\n  get nonTrainableWeights() {\n    if (!this.trainable) {\n      return this.cell.weights;\n    }\n    return this.cell.nonTrainableWeights;\n  }\n  setFastWeightInitDuringBuild(value) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.cell != null) {\n      this.cell.setFastWeightInitDuringBuild(value);\n    }\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      returnSequences: this.returnSequences,\n      returnState: this.returnState,\n      goBackwards: this.goBackwards,\n      stateful: this.stateful,\n      unroll: this.unroll\n    };\n    if (this.numConstants != null) {\n      config[\"numConstants\"] = this.numConstants;\n    }\n    const cellConfig = this.cell.getConfig();\n    if (this.getClassName() === RNN.className) {\n      config[\"cell\"] = {\n        \"className\": this.cell.getClassName(),\n        \"config\": cellConfig\n      };\n    }\n    return Object.assign({}, cellConfig, baseConfig, config);\n  }\n  static fromConfig(cls, config, customObjects = {}) {\n    const cellConfig = config[\"cell\"];\n    const cell = deserialize(cellConfig, customObjects);\n    return new cls(Object.assign(config, { cell }));\n  }\n};\nRNN.className = \"RNN\";\nserialization_exports.registerClass(RNN);\nvar RNNCell = class extends Layer {\n};\nvar SimpleRNNCell = class extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_ACTIVATION = \"tanh\";\n    this.DEFAULT_KERNEL_INITIALIZER = \"glorotNormal\";\n    this.DEFAULT_RECURRENT_INITIALIZER = \"orthogonal\";\n    this.DEFAULT_BIAS_INITIALIZER = \"zeros\";\n    this.units = args.units;\n    assertPositiveInteger(this.units, `units`);\n    this.activation = getActivation(args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.dropout = min2([1, max2([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = min2([\n      1,\n      max2([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    this.kernel = this.addWeight(\"kernel\", [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\"recurrent_kernel\", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\"bias\", [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n      if (inputs.length !== 2) {\n        throw new ValueError(`SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n      }\n      let prevOutput = inputs[1];\n      inputs = inputs[0];\n      const training = kwargs[\"training\"] == null ? false : kwargs[\"training\"];\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => onesLike(inputs),\n          rate: this.dropout,\n          training,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => onesLike(prevOutput),\n          rate: this.recurrentDropout,\n          training,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      let h;\n      const dpMask = this.dropoutMask;\n      const recDpMask = this.recurrentDropoutMask;\n      if (dpMask != null) {\n        h = dot2(mul(inputs, dpMask), this.kernel.read());\n      } else {\n        h = dot2(inputs, this.kernel.read());\n      }\n      if (this.bias != null) {\n        h = biasAdd(h, this.bias.read());\n      }\n      if (recDpMask != null) {\n        prevOutput = mul(prevOutput, recDpMask);\n      }\n      let output = add2(h, dot2(prevOutput, this.recurrentKernel.read()));\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n      return [output, output];\n    });\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n};\nSimpleRNNCell.className = \"SimpleRNNCell\";\nserialization_exports.registerClass(SimpleRNNCell);\nvar SimpleRNN = class extends RNN {\n  constructor(args) {\n    args.cell = new SimpleRNNCell(args);\n    super(args);\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs[\"mask\"];\n      const training = kwargs == null ? null : kwargs[\"training\"];\n      const initialState = kwargs == null ? null : kwargs[\"initialState\"];\n      return super.call(inputs, { mask, training, initialState });\n    });\n  }\n  static fromConfig(cls, config) {\n    return new cls(config);\n  }\n};\nSimpleRNN.className = \"SimpleRNN\";\nserialization_exports.registerClass(SimpleRNN);\nvar GRUCell = class extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_ACTIVATION = \"tanh\";\n    this.DEFAULT_RECURRENT_ACTIVATION = \"hardSigmoid\";\n    this.DEFAULT_KERNEL_INITIALIZER = \"glorotNormal\";\n    this.DEFAULT_RECURRENT_INITIALIZER = \"orthogonal\";\n    this.DEFAULT_BIAS_INITIALIZER = \"zeros\";\n    if (args.resetAfter) {\n      throw new ValueError(`GRUCell does not support reset_after parameter set to true.`);\n    }\n    this.units = args.units;\n    assertPositiveInteger(this.units, \"units\");\n    this.activation = getActivation(args.activation === void 0 ? this.DEFAULT_ACTIVATION : args.activation);\n    this.recurrentActivation = getActivation(args.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.dropout = min2([1, max2([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = min2([\n      1,\n      max2([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\"kernel\", [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\"recurrent_kernel\", [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\"bias\", [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n      if (inputs.length !== 2) {\n        throw new ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ${inputs.length}.`);\n      }\n      const training = kwargs[\"training\"] == null ? false : kwargs[\"training\"];\n      let hTMinus1 = inputs[1];\n      inputs = inputs[0];\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => onesLike(inputs),\n          rate: this.dropout,\n          training,\n          count: 3,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => onesLike(hTMinus1),\n          rate: this.recurrentDropout,\n          training,\n          count: 3,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      const dpMask = this.dropoutMask;\n      const recDpMask = this.recurrentDropoutMask;\n      let z;\n      let r;\n      let hh;\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = mul(inputs, dpMask[0]);\n      }\n      let matrixX = dot2(inputs, this.kernel.read());\n      if (this.useBias) {\n        matrixX = biasAdd(matrixX, this.bias.read());\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = mul(hTMinus1, recDpMask[0]);\n      }\n      const recurrentKernelValue = this.recurrentKernel.read();\n      const [rk1, rk2] = split(recurrentKernelValue, [2 * this.units, this.units], recurrentKernelValue.rank - 1);\n      const matrixInner = dot2(hTMinus1, rk1);\n      const [xZ, xR, xH] = split(matrixX, 3, matrixX.rank - 1);\n      const [recurrentZ, recurrentR] = split(matrixInner, 2, matrixInner.rank - 1);\n      z = this.recurrentActivation.apply(add2(xZ, recurrentZ));\n      r = this.recurrentActivation.apply(add2(xR, recurrentR));\n      const recurrentH = dot2(mul(r, hTMinus1), rk2);\n      hh = this.activation.apply(add2(xH, recurrentH));\n      const h = add2(mul(z, hTMinus1), mul(add2(1, neg(z)), hh));\n      return [h, h];\n    });\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n      resetAfter: false\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n};\nGRUCell.className = \"GRUCell\";\nserialization_exports.registerClass(GRUCell);\nvar GRU = class extends RNN {\n  constructor(args) {\n    if (args.implementation === 0) {\n      console.warn(\"`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call.\");\n    }\n    args.cell = new GRUCell(args);\n    super(args);\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs[\"mask\"];\n      const training = kwargs == null ? null : kwargs[\"training\"];\n      const initialState = kwargs == null ? null : kwargs[\"initialState\"];\n      return super.call(inputs, { mask, training, initialState });\n    });\n  }\n  static fromConfig(cls, config) {\n    if (config[\"implmentation\"] === 0) {\n      config[\"implementation\"] = 1;\n    }\n    return new cls(config);\n  }\n};\nGRU.className = \"GRU\";\nserialization_exports.registerClass(GRU);\nvar LSTMCell = class extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_ACTIVATION = \"tanh\";\n    this.DEFAULT_RECURRENT_ACTIVATION = \"hardSigmoid\";\n    this.DEFAULT_KERNEL_INITIALIZER = \"glorotNormal\";\n    this.DEFAULT_RECURRENT_INITIALIZER = \"orthogonal\";\n    this.DEFAULT_BIAS_INITIALIZER = \"zeros\";\n    this.units = args.units;\n    assertPositiveInteger(this.units, \"units\");\n    this.activation = getActivation(args.activation === void 0 ? this.DEFAULT_ACTIVATION : args.activation);\n    this.recurrentActivation = getActivation(args.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.unitForgetBias = args.unitForgetBias;\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.dropout = min2([1, max2([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = min2([\n      1,\n      max2([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = [this.units, this.units];\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n  build(inputShape) {\n    var _a;\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\"kernel\", [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\"recurrent_kernel\", [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n    let biasInitializer;\n    if (this.useBias) {\n      if (this.unitForgetBias) {\n        const capturedBiasInit = this.biasInitializer;\n        const capturedUnits = this.units;\n        biasInitializer = new (_a = class CustomInit extends Initializer {\n          apply(shape, dtype) {\n            const bI = capturedBiasInit.apply([capturedUnits]);\n            const bF = new Ones().apply([capturedUnits]);\n            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n            return concatAlongFirstAxis(concatAlongFirstAxis(bI, bF), bCAndH);\n          }\n        }, _a.className = \"CustomInit\", _a)();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n      this.bias = this.addWeight(\"bias\", [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const training = kwargs[\"training\"] == null ? false : kwargs[\"training\"];\n      inputs = inputs;\n      if (inputs.length !== 3) {\n        throw new ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${inputs.length}.`);\n      }\n      let hTMinus1 = inputs[1];\n      const cTMinus1 = inputs[2];\n      inputs = inputs[0];\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => onesLike(inputs),\n          rate: this.dropout,\n          training,\n          count: 4,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => onesLike(hTMinus1),\n          rate: this.recurrentDropout,\n          training,\n          count: 4,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      const dpMask = this.dropoutMask;\n      const recDpMask = this.recurrentDropoutMask;\n      let i;\n      let f;\n      let c;\n      let o;\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = mul(inputs, dpMask[0]);\n      }\n      let z = dot2(inputs, this.kernel.read());\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = mul(hTMinus1, recDpMask[0]);\n      }\n      z = add2(z, dot2(hTMinus1, this.recurrentKernel.read()));\n      if (this.useBias) {\n        z = biasAdd(z, this.bias.read());\n      }\n      const [z0, z1, z2, z3] = split(z, 4, z.rank - 1);\n      i = this.recurrentActivation.apply(z0);\n      f = this.recurrentActivation.apply(z1);\n      c = add2(mul(f, cTMinus1), mul(i, this.activation.apply(z2)));\n      o = this.recurrentActivation.apply(z3);\n      const h = mul(o, this.activation.apply(c));\n      return [h, h, c];\n    });\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      unitForgetBias: this.unitForgetBias,\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n};\nLSTMCell.className = \"LSTMCell\";\nserialization_exports.registerClass(LSTMCell);\nvar LSTM = class extends RNN {\n  constructor(args) {\n    if (args.implementation === 0) {\n      console.warn(\"`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call.\");\n    }\n    args.cell = new LSTMCell(args);\n    super(args);\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs[\"mask\"];\n      const training = kwargs == null ? null : kwargs[\"training\"];\n      const initialState = kwargs == null ? null : kwargs[\"initialState\"];\n      return super.call(inputs, { mask, training, initialState });\n    });\n  }\n  static fromConfig(cls, config) {\n    if (config[\"implmentation\"] === 0) {\n      config[\"implementation\"] = 1;\n    }\n    return new cls(config);\n  }\n};\nLSTM.className = \"LSTM\";\nserialization_exports.registerClass(LSTM);\nvar StackedRNNCells = class extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.cells = args.cells;\n  }\n  get stateSize() {\n    const stateSize = [];\n    for (const cell of this.cells.slice().reverse()) {\n      if (Array.isArray(cell.stateSize)) {\n        stateSize.push(...cell.stateSize);\n      } else {\n        stateSize.push(cell.stateSize);\n      }\n    }\n    return stateSize;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n      let states = inputs.slice(1);\n      const nestedStates = [];\n      for (const cell of this.cells.slice().reverse()) {\n        if (Array.isArray(cell.stateSize)) {\n          nestedStates.push(states.splice(0, cell.stateSize.length));\n        } else {\n          nestedStates.push(states.splice(0, 1));\n        }\n      }\n      nestedStates.reverse();\n      const newNestedStates = [];\n      let callInputs;\n      for (let i = 0; i < this.cells.length; ++i) {\n        const cell = this.cells[i];\n        states = nestedStates[i];\n        if (i === 0) {\n          callInputs = [inputs[0]].concat(states);\n        } else {\n          callInputs = [callInputs[0]].concat(states);\n        }\n        callInputs = cell.call(callInputs, kwargs);\n        newNestedStates.push(callInputs.slice(1));\n      }\n      states = [];\n      for (const cellStates of newNestedStates.slice().reverse()) {\n        states.push(...cellStates);\n      }\n      return [callInputs[0]].concat(states);\n    });\n  }\n  build(inputShape) {\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = inputShape[0];\n    }\n    inputShape = inputShape;\n    let outputDim;\n    this.cells.forEach((cell, i) => {\n      nameScope(`RNNCell_${i}`, () => {\n        cell.build(inputShape);\n        if (Array.isArray(cell.stateSize)) {\n          outputDim = cell.stateSize[0];\n        } else {\n          outputDim = cell.stateSize;\n        }\n        inputShape = [inputShape[0], outputDim];\n      });\n    });\n    this.built = true;\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const getCellConfig = (cell) => {\n      return {\n        \"className\": cell.getClassName(),\n        \"config\": cell.getConfig()\n      };\n    };\n    const cellConfigs = this.cells.map(getCellConfig);\n    const config = { \"cells\": cellConfigs };\n    return Object.assign({}, baseConfig, config);\n  }\n  static fromConfig(cls, config, customObjects = {}) {\n    const cells = [];\n    for (const cellConfig of config[\"cells\"]) {\n      cells.push(deserialize(cellConfig, customObjects));\n    }\n    return new cls({ cells });\n  }\n  get trainableWeights() {\n    if (!this.trainable) {\n      return [];\n    }\n    const weights = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.trainableWeights);\n    }\n    return weights;\n  }\n  get nonTrainableWeights() {\n    const weights = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.nonTrainableWeights);\n    }\n    if (!this.trainable) {\n      const trainableWeights = [];\n      for (const cell of this.cells) {\n        trainableWeights.push(...cell.trainableWeights);\n      }\n      return trainableWeights.concat(weights);\n    }\n    return weights;\n  }\n  getWeights() {\n    const weights = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.weights);\n    }\n    return batchGetValue(weights);\n  }\n  setWeights(weights) {\n    const tuples = [];\n    for (const cell of this.cells) {\n      const numParams = cell.weights.length;\n      const inputWeights = weights.splice(numParams);\n      for (let i = 0; i < cell.weights.length; ++i) {\n        tuples.push([cell.weights[i], inputWeights[i]]);\n      }\n    }\n    batchSetValue(tuples);\n  }\n};\nStackedRNNCells.className = \"StackedRNNCells\";\nserialization_exports.registerClass(StackedRNNCells);\nfunction generateDropoutMask(args) {\n  const { ones: ones4, rate, training = false, count: count2 = 1, dropoutFunc } = args;\n  const droppedInputs = () => dropoutFunc != null ? dropoutFunc(ones4(), rate) : dropout2(ones4(), rate);\n  const createMask = () => inTrainPhase(droppedInputs, ones4, training);\n  if (!count2 || count2 <= 1) {\n    return keep(createMask().clone());\n  }\n  const masks = Array(count2).fill(void 0).map(createMask);\n  return masks.map((m) => keep(m.clone()));\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_recurrent.js\nvar __rest = function(s, e) {\n  var t = {};\n  for (var p2 in s)\n    if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)\n      t[p2] = s[p2];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {\n      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))\n        t[p2[i]] = s[p2[i]];\n    }\n  return t;\n};\nvar ConvRNN2D = class extends RNN {\n  constructor(args) {\n    if (args.unroll) {\n      throw new NotImplementedError(\"Unrolling is not possible with convolutional RNNs.\");\n    }\n    if (Array.isArray(args.cell)) {\n      throw new NotImplementedError(\"It is not possible at the moment to stack convolutional cells.\");\n    }\n    super(args);\n    this.inputSpec = [new InputSpec({ ndim: 5 })];\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      if (kwargs && kwargs[\"constants\"]) {\n        throw new ValueError(\"ConvRNN2D cell does not support constants\");\n      }\n      const mask = kwargs == null ? null : kwargs[\"mask\"];\n      const training = kwargs == null ? null : kwargs[\"training\"];\n      const initialState = kwargs == null ? null : kwargs[\"initialState\"];\n      return super.call(inputs, { mask, training, initialState });\n    });\n  }\n  computeOutputShape(inputShape) {\n    let outShape = this.computeSingleOutputShape(inputShape);\n    if (!this.returnSequences) {\n      outShape = [outShape[0], ...outShape.slice(2)];\n    }\n    if (this.returnState) {\n      outShape = [outShape, ...Array(2).fill([inputShape[0], ...outShape.slice(-3)])];\n    }\n    return outShape;\n  }\n  getInitialState(inputs) {\n    return tidy(() => {\n      const { stateSize } = this.cell;\n      const inputShape = inputs.shape;\n      const outputShape = this.computeSingleOutputShape(inputShape);\n      const stateShape = [outputShape[0], ...outputShape.slice(2)];\n      const initialState = zeros(stateShape);\n      if (Array.isArray(stateSize)) {\n        return Array(stateSize.length).fill(initialState);\n      }\n      return [initialState];\n    });\n  }\n  resetStates(states, training = false) {\n    tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError(\"Cannot call resetStates() on an RNN Layer that is not stateful.\");\n      }\n      const inputShape = this.inputSpec[0].shape;\n      const outputShape = this.computeSingleOutputShape(inputShape);\n      const stateShape = [outputShape[0], ...outputShape.slice(2)];\n      const batchSize = inputShape[0];\n      if (batchSize == null) {\n        throw new ValueError(\"If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \\n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.\");\n      }\n      if (this.getStates() == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(() => zeros(stateShape));\n        } else {\n          this.states_ = [zeros(stateShape)];\n        }\n      } else if (states == null) {\n        dispose(this.states_);\n        if (this.keptStates != null) {\n          dispose(this.keptStates);\n          this.keptStates = [];\n        }\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(() => zeros(stateShape));\n        } else {\n          this.states_[0] = zeros(stateShape);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n        if (states.length !== this.states_.length) {\n          throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${states.length} state value(s). Input received: ${states}`);\n        }\n        if (training) {\n          this.keptStates.push(this.states_.slice());\n        } else {\n          dispose(this.states_);\n        }\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const expectedShape = stateShape;\n          if (!util_exports.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(`State ${index} is incompatible with layer ${this.name}: expected shape=${expectedShape}, received shape=${value.shape}`);\n          }\n          this.states_[index] = value;\n        }\n      }\n      this.states_ = this.states_.map((state) => keep(state.clone()));\n    });\n  }\n  computeSingleOutputShape(inputShape) {\n    const { dataFormat, filters, kernelSize, padding, strides, dilationRate } = this.cell;\n    const isChannelsFirst = dataFormat === \"channelsFirst\";\n    const h = inputShape[isChannelsFirst ? 3 : 2];\n    const w = inputShape[isChannelsFirst ? 4 : 3];\n    const hOut = convOutputLength(h, kernelSize[0], padding, strides[0], dilationRate[0]);\n    const wOut = convOutputLength(w, kernelSize[1], padding, strides[1], dilationRate[1]);\n    const outShape = [\n      ...inputShape.slice(0, 2),\n      ...isChannelsFirst ? [filters, hOut, wOut] : [hOut, wOut, filters]\n    ];\n    return outShape;\n  }\n};\nConvRNN2D.className = \"ConvRNN2D\";\nvar ConvLSTM2DCell = class extends LSTMCell {\n  constructor(args) {\n    const { filters, kernelSize, strides, padding, dataFormat, dilationRate } = args;\n    super(Object.assign({}, args, { units: filters }));\n    this.filters = filters;\n    assertPositiveInteger(this.filters, \"filters\");\n    this.kernelSize = normalizeArray(kernelSize, 2, \"kernelSize\");\n    this.kernelSize.forEach((size) => assertPositiveInteger(size, \"kernelSize\"));\n    this.strides = normalizeArray(strides || 1, 2, \"strides\");\n    this.strides.forEach((stride) => assertPositiveInteger(stride, \"strides\"));\n    this.padding = padding || \"valid\";\n    checkPaddingMode(this.padding);\n    this.dataFormat = dataFormat || \"channelsLast\";\n    checkDataFormat(this.dataFormat);\n    this.dilationRate = normalizeArray(dilationRate || 1, 2, \"dilationRate\");\n    this.dilationRate.forEach((rate) => assertPositiveInteger(rate, \"dilationRate\"));\n  }\n  build(inputShape) {\n    var _a;\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis = this.dataFormat === \"channelsFirst\" ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(`The channel dimension of the input should be defined. Found ${inputShape[channelAxis]}`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const numOfKernels = 4;\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters * numOfKernels]);\n    this.kernel = this.addWeight(\"kernel\", kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    const recurrentKernelShape = this.kernelSize.concat([this.filters, this.filters * numOfKernels]);\n    this.recurrentKernel = this.addWeight(\"recurrent_kernel\", recurrentKernelShape, null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n    if (this.useBias) {\n      let biasInitializer;\n      if (this.unitForgetBias) {\n        const init2 = this.biasInitializer;\n        const filters = this.filters;\n        biasInitializer = new (_a = class CustomInit extends Initializer {\n          apply(shape, dtype) {\n            const biasI = init2.apply([filters]);\n            const biasF = ones2([filters]);\n            const biasCAndO = init2.apply([filters * 2]);\n            return concatenate([biasI, biasF, biasCAndO]);\n          }\n        }, _a.className = \"CustomInit\", _a)();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n      this.bias = this.addWeight(\"bias\", [this.filters * numOfKernels], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (inputs.length !== 3) {\n        throw new ValueError(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${inputs.length}.`);\n      }\n      const training = kwargs[\"training\"] || false;\n      const x = inputs[0];\n      const hTMinus1 = inputs[1];\n      const cTMinus1 = inputs[2];\n      const numOfKernels = 4;\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => onesLike(x),\n          rate: this.dropout,\n          training,\n          count: numOfKernels,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      const dropoutMask = this.dropoutMask;\n      const applyDropout = (x2, mask, index) => {\n        if (!mask || !mask[index]) {\n          return x2;\n        }\n        return mul(mask[index], x2);\n      };\n      let xI = applyDropout(x, dropoutMask, 0);\n      let xF = applyDropout(x, dropoutMask, 1);\n      let xC = applyDropout(x, dropoutMask, 2);\n      let xO = applyDropout(x, dropoutMask, 3);\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => onesLike(hTMinus1),\n          rate: this.recurrentDropout,\n          training,\n          count: numOfKernels,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      const recDropoutMask = this.recurrentDropoutMask;\n      let hI = applyDropout(hTMinus1, recDropoutMask, 0);\n      let hF = applyDropout(hTMinus1, recDropoutMask, 1);\n      let hC = applyDropout(hTMinus1, recDropoutMask, 2);\n      let hO = applyDropout(hTMinus1, recDropoutMask, 3);\n      const kernelChannelAxis = 3;\n      const [kernelI, kernelF, kernelC, kernelO] = split(this.kernel.read(), numOfKernels, kernelChannelAxis);\n      const [biasI, biasF, biasC, biasO] = this.useBias ? split(this.bias.read(), numOfKernels) : [null, null, null, null];\n      xI = this.inputConv(xI, kernelI, biasI, this.padding);\n      xF = this.inputConv(xF, kernelF, biasF, this.padding);\n      xC = this.inputConv(xC, kernelC, biasC, this.padding);\n      xO = this.inputConv(xO, kernelO, biasO, this.padding);\n      const [recKernelI, recKernelF, recKernelC, recKernelO] = split(this.recurrentKernel.read(), numOfKernels, kernelChannelAxis);\n      hI = this.recurrentConv(hI, recKernelI);\n      hF = this.recurrentConv(hF, recKernelF);\n      hC = this.recurrentConv(hC, recKernelC);\n      hO = this.recurrentConv(hO, recKernelO);\n      const i = this.recurrentActivation.apply(add2(xI, hI));\n      const f = this.recurrentActivation.apply(add2(xF, hF));\n      const c = add2(mul(f, cTMinus1), mul(i, this.activation.apply(add2(xC, hC))));\n      const h = mul(this.recurrentActivation.apply(add2(xO, hO)), this.activation.apply(c));\n      return [h, h, c];\n    });\n  }\n  getConfig() {\n    const _a = super.getConfig(), { \"units\": _ } = _a, baseConfig = __rest(_a, [\"units\"]);\n    const config = {\n      filters: this.filters,\n      kernelSize: this.kernelSize,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      strides: this.strides\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n  inputConv(x, w, b, padding) {\n    const out = conv2d(x, w, this.strides, padding || \"valid\", this.dataFormat === \"channelsFirst\" ? \"NCHW\" : \"NHWC\", this.dilationRate);\n    if (b) {\n      return biasAdd(out, b, this.dataFormat);\n    }\n    return out;\n  }\n  recurrentConv(x, w) {\n    const strides = 1;\n    return conv2d(x, w, strides, \"same\", this.dataFormat === \"channelsFirst\" ? \"NCHW\" : \"NHWC\");\n  }\n};\nConvLSTM2DCell.className = \"ConvLSTM2DCell\";\nserialization_exports.registerClass(ConvLSTM2DCell);\nvar ConvLSTM2D = class extends ConvRNN2D {\n  constructor(args) {\n    const cell = new ConvLSTM2DCell(args);\n    super(Object.assign({}, args, { cell }));\n  }\n  static fromConfig(cls, config) {\n    return new cls(config);\n  }\n};\nConvLSTM2D.className = \"ConvLSTM2D\";\nserialization_exports.registerClass(ConvLSTM2D);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/core.js\nvar Dropout = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.rate = Math.max(Math.min(args.rate, 1), 0);\n    this.noiseShape = args.noiseShape;\n    this.seed = args.seed;\n    this.supportsMasking = true;\n  }\n  getNoiseShape(input2) {\n    if (this.noiseShape == null) {\n      return this.noiseShape;\n    }\n    const inputShape = input2.shape;\n    const noiseShape = [];\n    for (let i = 0; i < this.noiseShape.length; ++i) {\n      noiseShape.push(this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);\n    }\n    return noiseShape;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input2 = getExactlyOneTensor(inputs);\n      if (0 < this.rate && this.rate < 1) {\n        const training = kwargs[\"training\"] == null ? false : kwargs[\"training\"];\n        const noiseShape = this.getNoiseShape(input2);\n        const output = inTrainPhase(() => dropout2(input2, this.rate, noiseShape, this.seed), () => input2, training);\n        return output;\n      }\n      return inputs;\n    });\n  }\n  getConfig() {\n    const config = {\n      rate: this.rate,\n      noiseShape: this.noiseShape,\n      seed: this.seed\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  dispose() {\n    return super.dispose();\n  }\n};\nDropout.className = \"Dropout\";\nserialization_exports.registerClass(Dropout);\nvar SpatialDropout1D = class extends Dropout {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [{ ndim: 3 }];\n  }\n  getNoiseShape(input2) {\n    const inputShape = input2.shape;\n    return [inputShape[0], 1, inputShape[2]];\n  }\n};\nSpatialDropout1D.className = \"SpatialDropout1D\";\nserialization_exports.registerClass(SpatialDropout1D);\nvar Dense = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.activation = null;\n    this.useBias = true;\n    this.kernel = null;\n    this.bias = null;\n    this.DEFAULT_KERNEL_INITIALIZER = \"glorotNormal\";\n    this.DEFAULT_BIAS_INITIALIZER = \"zeros\";\n    if (args.batchInputShape == null && args.inputShape == null && args.inputDim != null) {\n      let batchSize = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      this.batchInputShape = [batchSize, args.inputDim];\n    }\n    this.units = args.units;\n    assertPositiveInteger(this.units, \"units\");\n    this.activation = getActivation(args.activation);\n    if (args.useBias != null) {\n      this.useBias = args.useBias;\n    }\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.supportsMasking = true;\n    this.inputSpec = [{ minNDim: 2 }];\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputLastDim = inputShape[inputShape.length - 1];\n    if (this.kernel == null) {\n      this.kernel = this.addWeight(\"kernel\", [inputLastDim, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n      if (this.useBias) {\n        this.bias = this.addWeight(\"bias\", [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n      }\n    }\n    this.inputSpec = [{ minNDim: 2, axes: { [-1]: inputLastDim } }];\n    this.built = true;\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    outputShape[outputShape.length - 1] = this.units;\n    return outputShape;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input2 = getExactlyOneTensor(inputs);\n      const fusedActivationName = mapActivationToFusedKernel(this.activation.getClassName());\n      let output;\n      if (fusedActivationName != null) {\n        output = dot2(input2, this.kernel.read(), fusedActivationName, this.bias ? this.bias.read() : null);\n      } else {\n        output = dot2(input2, this.kernel.read());\n        if (this.bias != null) {\n          output = biasAdd(output, this.bias.read());\n        }\n        if (this.activation != null) {\n          output = this.activation.apply(output);\n        }\n      }\n      return output;\n    });\n  }\n  getConfig() {\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nDense.className = \"Dense\";\nserialization_exports.registerClass(Dense);\nvar Flatten = class extends Layer {\n  constructor(args) {\n    args = args || {};\n    super(args);\n    this.inputSpec = [{ minNDim: 3 }];\n    this.dataFormat = args.dataFormat;\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    for (const dim of inputShape.slice(1)) {\n      if (dim == null) {\n        throw new ValueError(`The shape of the input to \"Flatten\" is not fully defined (got ${inputShape.slice(1)}). Make sure to pass a complete \"input_shape\" or \"batch_input_shape\" argument to the first layer in your model.`);\n      }\n    }\n    return [inputShape[0], arrayProd(inputShape, 1)];\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      let input2 = getExactlyOneTensor(inputs);\n      if (this.dataFormat === \"channelsFirst\" && input2.rank > 1) {\n        const permutation = [0];\n        for (let i = 2; i < input2.rank; ++i) {\n          permutation.push(i);\n        }\n        permutation.push(1);\n        input2 = transpose(input2, permutation);\n      }\n      return batchFlatten(input2);\n    });\n  }\n  getConfig() {\n    const config = {};\n    if (this.dataFormat != null) {\n      config[\"dataFormat\"] = this.dataFormat;\n    }\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nFlatten.className = \"Flatten\";\nserialization_exports.registerClass(Flatten);\nvar Activation2 = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.activation = getActivation(args.activation);\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input2 = getExactlyOneTensor(inputs);\n      return this.activation.apply(input2);\n    });\n  }\n  getConfig() {\n    const config = { activation: serializeActivation(this.activation) };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nActivation2.className = \"Activation\";\nserialization_exports.registerClass(Activation2);\nvar RepeatVector = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.n = args.n;\n    this.inputSpec = [{ ndim: 2 }];\n  }\n  computeOutputShape(inputShape) {\n    return [inputShape[0], this.n, inputShape[1]];\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      return repeat(inputs, this.n);\n    });\n  }\n  getConfig() {\n    const config = {\n      n: this.n\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nRepeatVector.className = \"RepeatVector\";\nserialization_exports.registerClass(RepeatVector);\nvar Reshape2 = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.targetShape = args.targetShape;\n    for (let i = 0; i < this.targetShape.length; ++i) {\n      if (this.isUnknown(this.targetShape[i])) {\n        this.targetShape[i] = null;\n      }\n    }\n  }\n  isUnknown(dim) {\n    return dim < 0 || dim == null;\n  }\n  fixUnknownDimension(inputShape, outputShape) {\n    const errorMsg = \"Total size of new array must be unchanged.\";\n    const finalShape = outputShape.slice();\n    let known = 1;\n    let unknown = null;\n    for (let i = 0; i < finalShape.length; ++i) {\n      const dim = finalShape[i];\n      if (this.isUnknown(dim)) {\n        if (unknown === null) {\n          unknown = i;\n        } else {\n          throw new ValueError(\"Can only specifiy one unknown dimension.\");\n        }\n      } else {\n        known *= dim;\n      }\n    }\n    const originalSize = arrayProd(inputShape);\n    if (unknown !== null) {\n      if (known === 0 || originalSize % known !== 0) {\n        throw new ValueError(errorMsg);\n      }\n      finalShape[unknown] = originalSize / known;\n    } else if (originalSize !== known) {\n      throw new ValueError(errorMsg);\n    }\n    return finalShape;\n  }\n  computeOutputShape(inputShape) {\n    let anyUnknownDims = false;\n    for (let i = 0; i < inputShape.length; ++i) {\n      if (this.isUnknown(inputShape[i])) {\n        anyUnknownDims = true;\n        break;\n      }\n    }\n    if (anyUnknownDims) {\n      return inputShape.slice(0, 1).concat(this.targetShape);\n    } else {\n      return inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n    }\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input2 = getExactlyOneTensor(inputs);\n      const inputShape = input2.shape;\n      const outputShape = inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n      return reshape(input2, outputShape);\n    });\n  }\n  getConfig() {\n    const config = {\n      targetShape: this.targetShape\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nReshape2.className = \"Reshape\";\nserialization_exports.registerClass(Reshape2);\nvar Permute = class extends Layer {\n  constructor(args) {\n    super(args);\n    if (args.dims == null) {\n      throw new Error(\"Required configuration field `dims` is missing during Permute constructor call.\");\n    }\n    if (!Array.isArray(args.dims)) {\n      throw new Error(`Permute constructor requires \\`dims\\` to be an Array, but received ${args.dims} instead.`);\n    }\n    const expectedSortedIndices = range2(1, args.dims.length + 1);\n    if (!util_exports.arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) {\n      throw new Error(\"Invalid permutation `dims`: \" + JSON.stringify(args.dims) + \" `dims` must contain consecutive integers starting from 1.\");\n    }\n    this.dims = args.dims;\n    this.dimsIncludingBatch = [0].concat(this.dims);\n    this.inputSpec = [new InputSpec({ ndim: this.dims.length + 1 })];\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    this.dims.forEach((dim, i) => {\n      outputShape[i + 1] = inputShape[dim];\n    });\n    return outputShape;\n  }\n  call(inputs, kwargs) {\n    return transpose(getExactlyOneTensor(inputs), this.dimsIncludingBatch);\n  }\n  getConfig() {\n    const config = {\n      dims: this.dims\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nPermute.className = \"Permute\";\nserialization_exports.registerClass(Permute);\nvar Masking = class extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.supportsMasking = true;\n    if (args != null) {\n      this.maskValue = args.maskValue == null ? 0 : args.maskValue;\n    } else {\n      this.maskValue = 0;\n    }\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = { maskValue: this.maskValue };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  computeMask(inputs, mask) {\n    const input2 = getExactlyOneTensor(inputs);\n    const axis = -1;\n    return any(notEqual(input2, this.maskValue), axis);\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input2 = getExactlyOneTensor(inputs);\n      const axis = -1;\n      const keepDims = true;\n      const booleanMask = any(notEqual(input2, this.maskValue), axis, keepDims);\n      const output = mul(input2, cast(booleanMask, input2.dtype));\n      return output;\n    });\n  }\n};\nMasking.className = \"Masking\";\nserialization_exports.registerClass(Masking);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js\nvar Embedding = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.embeddings = null;\n    this.DEFAULT_EMBEDDINGS_INITIALIZER = \"randomUniform\";\n    if (args.batchInputShape == null && args.inputShape == null) {\n      let batchSize = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      if (args.inputLength == null) {\n        this.batchInputShape = [batchSize, null];\n      } else {\n        this.batchInputShape = [batchSize].concat(toList(args.inputLength));\n      }\n    }\n    this.inputDim = args.inputDim;\n    assertPositiveInteger(this.inputDim, \"inputDim\");\n    this.outputDim = args.outputDim;\n    assertPositiveInteger(this.outputDim, \"outputDim\");\n    this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    this.maskZero = args.maskZero;\n    this.supportsMasking = args.maskZero;\n    this.inputLength = args.inputLength;\n  }\n  build(inputShape) {\n    this.embeddings = this.addWeight(\"embeddings\", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n    this.built = true;\n  }\n  warnOnIncompatibleInputShape(inputShape) {\n  }\n  computeMask(inputs, mask) {\n    return tidy(() => {\n      if (!this.maskZero) {\n        return null;\n      } else {\n        inputs = getExactlyOneTensor(inputs);\n        return notEqual(inputs, zerosLike(inputs));\n      }\n    });\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (this.inputLength == null) {\n      return [...inputShape, this.outputDim];\n    }\n    const inLens = toList(this.inputLength);\n    if (inLens.length !== inputShape.length - 1) {\n      throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received input shape has shape ${inputShape}`);\n    } else {\n      let i = 0;\n      for (let k = 0; k < inLens.length; ++k) {\n        const s1 = inLens[k];\n        const s2 = inputShape[k + 1];\n        if (s1 != null && s2 != null && s1 !== s2) {\n          throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received input shape has shape ${inputShape}`);\n        } else if (s1 == null) {\n          inLens[i] = s2;\n        }\n        i++;\n      }\n    }\n    return [inputShape[0], ...inLens, this.outputDim];\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      let input2 = getExactlyOneTensor(inputs);\n      if (input2.dtype !== \"int32\") {\n        input2 = cast2(input2, \"int32\");\n      }\n      const output = gather2(this.embeddings.read(), reshape(input2, [input2.size]));\n      return reshape(output, getExactlyOneShape(this.computeOutputShape(input2.shape)));\n    });\n  }\n  getConfig() {\n    const config = {\n      inputDim: this.inputDim,\n      outputDim: this.outputDim,\n      embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n      embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n      maskZero: this.maskZero,\n      inputLength: this.inputLength\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nEmbedding.className = \"Embedding\";\nserialization_exports.registerClass(Embedding);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/merge.js\nvar Merge = class extends Layer {\n  constructor(args) {\n    super(args || {});\n    this.supportsMasking = true;\n  }\n  mergeFunction(inputs) {\n    throw new NotImplementedError();\n  }\n  computeElementwiseOpOutputShape(shape1, shape2) {\n    if (shape1 == null || shape2 == null) {\n      return null;\n    } else if (shape1.length < shape2.length) {\n      return this.computeElementwiseOpOutputShape(shape2, shape1);\n    } else if (shape2.length === 0) {\n      return shape1;\n    }\n    const outputShape = shape1.slice(0, shape1.length - shape2.length);\n    for (let k = 0; k < shape2.length; ++k) {\n      const i = shape1[shape1.length - shape2.length + k];\n      const j = shape2[k];\n      if (i == null || j == null || i < 0 || j < 0) {\n        outputShape.push(null);\n      } else if (i === 1) {\n        outputShape.push(j);\n      } else if (j === 1) {\n        outputShape.push(i);\n      } else {\n        if (i !== j) {\n          throw new ValueError(\"Operands could not be broadcast together with shapes \" + JSON.stringify(shape1) + \" \" + JSON.stringify(shape2));\n        }\n        outputShape.push(i);\n      }\n    }\n    return outputShape;\n  }\n  build(inputShape) {\n    if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n      inputShape = [getExactlyOneShape(inputShape)];\n    }\n    inputShape = inputShape;\n    if (inputShape.length < 2) {\n      throw new ValueError(`A merge layer should be called on an Array of at least 2 inputs. Got ${inputShape.length} input(s).`);\n    }\n    let batchSizes = [];\n    for (const shape of inputShape) {\n      if (shape != null && shape[0] !== null) {\n        batchSizes.push(shape[0]);\n      }\n    }\n    batchSizes = unique2(batchSizes);\n    if (batchSizes.length > 1) {\n      throw new ValueError(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(inputShape)}.`);\n    }\n    let outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);\n    for (let i = 1; i < inputShape.length; ++i) {\n      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n    }\n    const allRanks = inputShape.map((shape) => shape.length);\n    if (inputShape.indexOf(null) === -1 && unique2(allRanks).length === 1) {\n      this.reshapeRequired = false;\n    } else {\n      this.reshapeRequired = true;\n    }\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n      if (this.reshapeRequired) {\n        const reshapedInputs = [];\n        const inputDims = inputs.map((input2) => input2.rank);\n        if (inputDims.indexOf(null) === -1) {\n          const maxNDim = max2(inputDims);\n          for (let x of inputs) {\n            const xNDim = x.rank;\n            for (let k = 0; k < maxNDim - xNDim; ++k) {\n              x = expandDims2(x, 1);\n            }\n            reshapedInputs.push(x);\n          }\n          return this.mergeFunction(reshapedInputs);\n        } else {\n          let transposed = false;\n          for (const x of inputs) {\n            const xNDim = x.rank;\n            if (xNDim == null) {\n              const xShape = x.shape;\n              const batchSize = xShape[0];\n              const newShape = xShape.slice(1).concat([batchSize]);\n              let xTransposed = reshape(x, [batchSize].concat(arrayProd(xShape.slice(1))));\n              xTransposed = transpose(xTransposed, [1, 0]);\n              xTransposed = reshape(xTransposed, newShape);\n              reshapedInputs.push(xTransposed);\n              transposed = true;\n            } else if (xNDim > 1) {\n              const dims = range2(1, xNDim).concat([0]);\n              reshapedInputs.push(transpose(x, dims));\n              transposed = true;\n            } else {\n              reshapedInputs.push(x);\n            }\n          }\n          let y = this.mergeFunction(reshapedInputs);\n          const yNDim = y.rank;\n          if (transposed) {\n            if (yNDim == null) {\n              const yShape = y.shape;\n              const yNDim2 = yShape.length;\n              const batchSize = yShape[yNDim2 - 1];\n              const newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));\n              y = reshape(transpose(reshape(y, [-1, batchSize]), [1, 0]), newShape);\n            } else if (yNDim > 1) {\n              const dims = [yNDim - 1].concat(range2(0, yNDim - 1));\n              y = transpose(y, dims);\n            }\n          }\n          return y;\n        }\n      } else {\n        return this.mergeFunction(inputs);\n      }\n    });\n  }\n  computeOutputShape(inputShape) {\n    inputShape = inputShape;\n    let outputShape;\n    if (inputShape[0] == null) {\n      outputShape = null;\n    } else {\n      outputShape = inputShape[0].slice(1);\n    }\n    for (let i = 1; i < inputShape.length; ++i) {\n      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n    }\n    let batchSizes = [];\n    for (const shape of inputShape) {\n      if (shape != null && shape[0] !== null) {\n        batchSizes.push(shape[0]);\n      }\n    }\n    batchSizes = unique2(batchSizes);\n    if (batchSizes.length === 1) {\n      outputShape = batchSizes.concat(outputShape);\n    } else {\n      outputShape = [null].concat(outputShape);\n    }\n    return outputShape;\n  }\n  computeMask(inputs, mask) {\n    return tidy(() => {\n      if (mask == null) {\n        return null;\n      }\n      if (!Array.isArray(mask)) {\n        throw new ValueError(\"`mask` should be an Array\");\n      }\n      if (!Array.isArray(inputs)) {\n        throw new ValueError(\"`inputs` should be an Array\");\n      }\n      if (mask.length !== inputs.length) {\n        throw new ValueError(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${inputs.length} vs ${mask.length})`);\n      }\n      if (mask.every((m) => m == null)) {\n        return null;\n      }\n      mask = mask.map((m) => m == null ? m : expandDims(m, 0));\n      let output = mask[0];\n      for (let i = 1; i < mask.length - 1; ++i) {\n        output = logicalAnd(output, mask[i]);\n      }\n      return output;\n    });\n  }\n};\nvar Add2 = class extends Merge {\n  constructor(args) {\n    super(args);\n  }\n  mergeFunction(inputs) {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = add2(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n};\nAdd2.className = \"Add\";\nserialization_exports.registerClass(Add2);\nvar Multiply2 = class extends Merge {\n  constructor(args) {\n    super(args);\n  }\n  mergeFunction(inputs) {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = mul(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n};\nMultiply2.className = \"Multiply\";\nserialization_exports.registerClass(Multiply2);\nvar Average = class extends Merge {\n  constructor(args) {\n    super(args);\n  }\n  mergeFunction(inputs) {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = add2(output, inputs[i]);\n      }\n      return mul(1 / inputs.length, output);\n    });\n  }\n};\nAverage.className = \"Average\";\nserialization_exports.registerClass(Average);\nvar Maximum2 = class extends Merge {\n  constructor(args) {\n    super(args);\n  }\n  mergeFunction(inputs) {\n    return tidy(() => {\n      let output = inputs[0];\n      for (let i = 1; i < inputs.length; ++i) {\n        output = maximum(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n};\nMaximum2.className = \"Maximum\";\nserialization_exports.registerClass(Maximum2);\nvar Minimum2 = class extends Merge {\n  constructor(args) {\n    super(args);\n  }\n  mergeFunction(inputs) {\n    return tidy(() => {\n      let output = inputs[0];\n      for (let i = 1; i < inputs.length; ++i) {\n        output = minimum(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n};\nMinimum2.className = \"Minimum\";\nserialization_exports.registerClass(Minimum2);\nvar Concatenate = class extends Merge {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_AXIS = -1;\n    if (args == null) {\n      args = {};\n    }\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n    this.supportsMasking = true;\n    this.reshapeRequired = false;\n  }\n  build(inputShape) {\n    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) || inputShape.length === 1) {\n      throw new ValueError(\"A `Concatenate` layer should be called on a list of at least 2 inputs\");\n    }\n    inputShape = inputShape;\n    let allNoneShape = true;\n    for (const shape of inputShape) {\n      if (shape != null) {\n        allNoneShape = false;\n        break;\n      }\n    }\n    if (allNoneShape) {\n      return;\n    }\n    const shapeSet = [];\n    for (let i = 0; i < inputShape.length; ++i) {\n      const shapeWithoutConcatAxis = inputShape[i].slice();\n      shapeWithoutConcatAxis.splice(this.axis, 1);\n      let exists = false;\n      for (const shape of shapeSet) {\n        if (util_exports.arraysEqual(shape, shapeWithoutConcatAxis)) {\n          exists = true;\n          break;\n        }\n      }\n      if (!exists) {\n        shapeSet.push(shapeWithoutConcatAxis);\n      }\n    }\n    if (shapeSet.length > 1) {\n      throw new ValueError(\"A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: \" + JSON.stringify(inputShape));\n    }\n  }\n  mergeFunction(inputs) {\n    return tidy(() => {\n      return concatenate(inputs, this.axis);\n    });\n  }\n  computeOutputShape(inputShape) {\n    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n      throw new ValueError(\"A `Concatenate` layer should be called on a list of inputs.\");\n    }\n    const inputShapes = inputShape;\n    const outputShape = inputShapes[0].slice();\n    const axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\n    for (const shape of inputShapes.slice(1)) {\n      if (outputShape[axis] == null || shape[axis] == null) {\n        outputShape[axis] = null;\n        break;\n      }\n      outputShape[axis] += shape[axis];\n    }\n    return outputShape;\n  }\n  computeMask(inputs, mask) {\n    if (mask == null) {\n      return null;\n    }\n    if (!Array.isArray(mask)) {\n      throw new ValueError(\"`mask` should be an array for Concatenate\");\n    }\n    if (!Array.isArray(inputs)) {\n      throw new ValueError(\"`inputs` should be an array for Concatenate\");\n    }\n    if (mask.length !== inputs.length) {\n      throw new ValueError(`Mismatch in the length of mask (${mask.length}) and the legnth of inputs (${inputs.length})`);\n    }\n    return tidy(() => {\n      let allNullMasks = true;\n      mask.forEach((m) => {\n        if (m != null) {\n          allNullMasks = false;\n          return;\n        }\n      });\n      if (allNullMasks) {\n        return null;\n      }\n      const outputMasks = [];\n      for (let i = 0; i < inputs.length; ++i) {\n        if (mask[i] == null) {\n          outputMasks.push(cast(onesLike(inputs[i]), \"bool\"));\n        } else if (mask[i].rank < inputs[i].rank) {\n          outputMasks.push(expandDims(mask[i], -1));\n        } else {\n          outputMasks.push(mask[i]);\n        }\n      }\n      const concatenatedMasks = concat(outputMasks, this.axis);\n      return all(concatenatedMasks, -1, false);\n    });\n  }\n  getConfig() {\n    const config = {\n      \"axis\": this.axis\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nConcatenate.className = \"Concatenate\";\nserialization_exports.registerClass(Concatenate);\nfunction interpretAxis(axis, dim) {\n  while (axis < 0) {\n    axis += dim;\n  }\n  return axis;\n}\nfunction batchDot(x, y, axes) {\n  if (x.shape.length > 3 || y.shape.length > 3) {\n    throw new NotImplementedError(\"batchDot is not implemented for tensors of 4D or higher rank yet\");\n  }\n  util_exports.assert(x.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${x.shape.length}`);\n  util_exports.assert(x.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${y.shape.length}`);\n  if (typeof axes === \"number\") {\n    axes = [axes, axes];\n  }\n  if (x.dtype === \"complex64\" || y.dtype === \"complex64\") {\n    throw new NotImplementedError(\"batchDot is not implemented for complex64-type Tensors yet.\");\n  }\n  const xNDim = x.shape.length;\n  const yNDim = y.shape.length;\n  if (axes == null) {\n    axes = [xNDim - 1, yNDim - 2];\n  }\n  const axesArray = axes;\n  return tidy(() => {\n    let diff;\n    if (xNDim > yNDim) {\n      diff = xNDim - yNDim;\n      const diffShape = [];\n      for (let i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n      y = reshape(y, y.shape.concat(diffShape));\n    } else if (yNDim > xNDim) {\n      diff = yNDim - xNDim;\n      const diffShape = [];\n      for (let i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n      x = reshape(x, x.shape.concat(diffShape));\n    } else {\n      diff = 0;\n    }\n    let out;\n    if (x.shape.length === 2 && y.shape.length === 2) {\n      if (axesArray[0] === axesArray[1]) {\n        out = sum2(mul(x, y), axesArray[0]);\n      } else {\n        out = sum2(mul(transpose(x, [1, 0]), y), axesArray[1]);\n      }\n    } else {\n      const adjX = axesArray[0] !== x.shape.length - 1;\n      const adjY = axesArray[1] === y.shape.length - 1;\n      out = matMul(x, y, adjX, adjY);\n    }\n    if (diff > 0) {\n      let idx;\n      if (xNDim > yNDim) {\n        idx = xNDim + yNDim - 3;\n      } else {\n        idx = xNDim - 1;\n      }\n      const squeezeAxes = [];\n      for (let i = idx; i < idx + diff; ++i) {\n        squeezeAxes.push(i);\n      }\n      out = squeeze(out, squeezeAxes);\n    }\n    if (out.shape.length === 1) {\n      out = expandDims(out, 1);\n    }\n    return out;\n  });\n}\nvar Dot = class extends Merge {\n  constructor(args) {\n    super(args);\n    this.axes = args.axes;\n    this.normalize = args.normalize == null ? false : args.normalize;\n    this.supportsMasking = true;\n    this.reshapeRequired = false;\n  }\n  build(inputShape) {\n    util_exports.assert(Array.isArray(inputShape) && inputShape.length === 2 && Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => \"A `Dot` layer should be called on a list of exactly 2 inputs.\");\n    const shape1 = inputShape[0];\n    const shape2 = inputShape[1];\n    if (shape1.length > 3 || shape2.length > 3) {\n      throw new NotImplementedError(\"Dot layer does not support tensors of 4D or higher rank yet.\");\n    }\n    const axes = this.interpretAxes(shape1, shape2);\n    if (shape1[axes[0]] !== shape2[axes[1]]) {\n      throw new ValueError(`Dimension incompatibility: ${shape1[axes[0]]} !== ${shape2[axes[1]]}`);\n    }\n  }\n  mergeFunction(inputs) {\n    if (inputs.length !== 2) {\n      throw new ValueError(`A \\`Dot\\` layer must be called on exactly 2 inputs, but received ${inputs.length} input(s).`);\n    }\n    let x1 = inputs[0];\n    let x2 = inputs[1];\n    let axes;\n    if (!Array.isArray(this.axes)) {\n      axes = [\n        interpretAxis(this.axes, x1.shape.length),\n        interpretAxis(this.axes, x2.shape.length)\n      ];\n    } else {\n      axes = this.axes.map((axis, i) => interpretAxis(axis, inputs[i].shape.length));\n    }\n    if (this.normalize) {\n      x1 = l2Normalize(x1, axes[0]);\n      x2 = l2Normalize(x2, axes[1]);\n    }\n    return batchDot(x1, x2, axes);\n  }\n  interpretAxes(shape1, shape2) {\n    let axes;\n    if (!Array.isArray(this.axes)) {\n      axes = [\n        interpretAxis(this.axes, shape1.length),\n        interpretAxis(this.axes, shape2.length)\n      ];\n    } else {\n      axes = this.axes;\n    }\n    return axes;\n  }\n  computeOutputShape(inputShape) {\n    util_exports.assert(Array.isArray(inputShape) && inputShape.length === 2 && Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => \"A `Dot` layer should be called on a list of exactly 2 inputs.\");\n    const shape1 = inputShape[0].slice();\n    const shape2 = inputShape[1].slice();\n    if (shape1.length > 3 || shape2.length > 3) {\n      throw new NotImplementedError(\"Dot layer does not support tensors of 4D or higher rank yet.\");\n    }\n    const axes = this.interpretAxes(shape1, shape2);\n    shape1.splice(axes[0], 1);\n    shape2.splice(axes[1], 1);\n    shape2.splice(0, 1);\n    const outputShape = shape1.concat(shape2);\n    if (outputShape.length === 1) {\n      outputShape.push(1);\n    }\n    return outputShape;\n  }\n  computeMask(inputs, mask) {\n    return null;\n  }\n  getConfig() {\n    const config = {\n      \"axes\": this.axes,\n      \"normalize\": this.normalize\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nDot.className = \"Dot\";\nserialization_exports.registerClass(Dot);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/noise.js\nvar GaussianNoise = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.stddev = args.stddev;\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = { stddev: this.stddev };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input2 = getExactlyOneTensor(inputs);\n      const noised = () => add2(randomNormal2(input2.shape, 0, this.stddev), input2);\n      const output = inTrainPhase(noised, () => input2, kwargs[\"training\"] || false);\n      return output;\n    });\n  }\n};\nGaussianNoise.className = \"GaussianNoise\";\nserialization_exports.registerClass(GaussianNoise);\nvar GaussianDropout = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.rate = args.rate;\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = { rate: this.rate };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input2 = getExactlyOneTensor(inputs);\n      if (this.rate > 0 && this.rate < 1) {\n        const noised = () => {\n          const stddev = Math.sqrt(this.rate / (1 - this.rate));\n          return mul(input2, randomNormal2(input2.shape, 1, stddev));\n        };\n        return inTrainPhase(noised, () => input2, kwargs[\"training\"] || false);\n      }\n      return input2;\n    });\n  }\n};\nGaussianDropout.className = \"GaussianDropout\";\nserialization_exports.registerClass(GaussianDropout);\nvar AlphaDropout = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.rate = args.rate;\n    this.noiseShape = args.noiseShape;\n  }\n  _getNoiseShape(inputs) {\n    return this.noiseShape || getExactlyOneTensor(inputs).shape;\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = { rate: this.rate };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.rate < 1 && this.rate > 0) {\n        const noiseShape = this._getNoiseShape(inputs);\n        const droppedInputs = () => {\n          const input2 = getExactlyOneTensor(inputs);\n          const alpha = 1.6732632423543772;\n          const scale2 = 1.0507009873554805;\n          const alphaP = -alpha * scale2;\n          let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\n          keptIdx = cast2(keptIdx, \"float32\");\n          const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\n          const b = -a * alphaP * this.rate;\n          const x = add2(mul(input2, keptIdx), mul(add2(keptIdx, -1), alphaP));\n          return add2(mul(x, a), b);\n        };\n        return inTrainPhase(droppedInputs, () => getExactlyOneTensor(inputs), kwargs[\"training\"] || false);\n      }\n      return inputs;\n    });\n  }\n};\nAlphaDropout.className = \"AlphaDropout\";\nserialization_exports.registerClass(AlphaDropout);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js\nfunction batchNormalization(x, mean4, variance, beta, gamma, epsilon3 = 1e-3) {\n  let out;\n  if (x.rank === 2) {\n    out = batchNorm2d(x, mean4, variance, beta, gamma, epsilon3);\n  } else if (x.rank === 3) {\n    out = batchNorm3d(x, mean4, variance, beta, gamma, epsilon3);\n  } else if (x.rank === 4) {\n    out = batchNorm4d(x, mean4, variance, beta, gamma, epsilon3);\n  } else {\n    throw new NotImplementedError(`batchNormalization is not implemented for array of rank ${x.rank} yet`);\n  }\n  return out;\n}\nfunction regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon3 = 1e-3) {\n  return tidy(() => {\n    const meanAndVariance = moments(x, reductionAxes);\n    const mean4 = meanAndVariance.mean;\n    const variance = meanAndVariance.variance;\n    const normed = batchNormalization(x, mean4, variance, beta, gamma, epsilon3);\n    return [normed, mean4, variance];\n  });\n}\nfunction broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon3 = 1e-3) {\n  return tidy(() => {\n    const meanAndVariance = moments(x, reductionAxes);\n    const mean4 = meanAndVariance.mean;\n    const variance = meanAndVariance.variance;\n    const targetShape = [];\n    for (const axis of range2(0, x.rank)) {\n      if (reductionAxes.indexOf(axis) !== -1) {\n        targetShape.push(1);\n      } else {\n        targetShape.push(x.shape[axis]);\n      }\n    }\n    const broadcastMean = reshape(mean4, targetShape);\n    const broadcastVariance = reshape(variance, targetShape);\n    const broadcastGamma = gamma == null ? null : reshape(gamma, targetShape);\n    const broadcastBeta = beta == null ? null : reshape(beta, targetShape);\n    const normed = batchNormalization(x, broadcastMean, broadcastVariance, broadcastBeta, broadcastGamma, epsilon3);\n    return [normed, mean4, variance];\n  });\n}\nfunction normalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon3 = 1e-3) {\n  if (util_exports.arraysEqual(reductionAxes.slice().sort(), range2(0, x.rank - 1))) {\n    return regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon3);\n  } else {\n    return broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon3);\n  }\n}\nvar BatchNormalization = class extends Layer {\n  constructor(args) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n    this.supportsMasking = true;\n    this.axis = args.axis == null ? -1 : args.axis;\n    this.momentum = args.momentum == null ? 0.99 : args.momentum;\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || \"zeros\");\n    this.gammaInitializer = getInitializer(args.gammaInitializer || \"ones\");\n    this.movingMeanInitializer = getInitializer(args.movingMeanInitializer || \"zeros\");\n    this.movingVarianceInitializer = getInitializer(args.movingVarianceInitializer || \"ones\");\n    this.betaConstraint = getConstraint(args.betaConstraint);\n    this.gammaConstraint = getConstraint(args.gammaConstraint);\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const axis = this.axis >= 0 ? this.axis : this.axis + inputShape.length;\n    const dim = inputShape[axis];\n    if (dim == null) {\n      throw new ValueError(`Axis ${axis} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(inputShape)}.`);\n    }\n    this.inputSpec = [new InputSpec({ ndim: inputShape.length, axes: { [axis]: dim } })];\n    const shape = [dim];\n    if (this.scale) {\n      this.gamma = this.addWeight(\"gamma\", shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\"beta\", shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);\n    }\n    this.movingMean = this.addWeight(\"moving_mean\", shape, null, this.movingMeanInitializer, null, false);\n    this.movingVariance = this.addWeight(\"moving_variance\", shape, null, this.movingVarianceInitializer, null, false);\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const training = kwargs[\"training\"] == null ? false : kwargs[\"training\"];\n      const input2 = getExactlyOneTensor(inputs);\n      const inputShape = input2.shape;\n      const ndim = inputShape.length;\n      const reductionAxes = range2(0, ndim);\n      const axis = this.axis >= 0 ? this.axis : this.axis + ndim;\n      reductionAxes.splice(axis, 1);\n      const broadcastShape = pyListRepeat(1, ndim);\n      broadcastShape[axis] = inputShape[axis];\n      const sortedReductionAxes = reductionAxes.slice();\n      sortedReductionAxes.sort();\n      const needsBroadcasting = !util_exports.arraysEqual(sortedReductionAxes, range2(0, ndim).slice(0, ndim - 1));\n      const normalizeInference = () => {\n        if (needsBroadcasting) {\n          const broadcastMovingMean = reshape(this.movingMean.read(), broadcastShape);\n          const broadcastMovingVariance = reshape(this.movingVariance.read(), broadcastShape);\n          const broadcastBeta = this.center ? reshape(this.beta.read(), broadcastShape) : null;\n          const broadcastGamma = this.scale ? reshape(this.gamma.read(), broadcastShape) : null;\n          return batchNormalization(input2, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, this.epsilon);\n        } else {\n          return batchNormalization(input2, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);\n        }\n      };\n      if (!training) {\n        return normalizeInference();\n      }\n      const [normedTraining, mean4, variance] = normalizeBatchInTraining(input2, this.gamma.read(), this.beta.read(), reductionAxes, this.epsilon);\n      const doMovingAverage = (variable2, value, momentum) => {\n        tidy(() => {\n          const decay = 1 - momentum;\n          const origValue = variable2.read();\n          const updateDelta = mul(sub(origValue, value), decay);\n          variable2.write(sub(origValue, updateDelta));\n        });\n      };\n      const updateMovingMeanAndVariance = () => {\n        doMovingAverage(this.movingMean, mean4, this.momentum);\n        doMovingAverage(this.movingVariance, variance, this.momentum);\n      };\n      updateMovingMeanAndVariance();\n      return normedTraining;\n    });\n  }\n  getConfig() {\n    const config = {\n      axis: this.axis,\n      momentum: this.momentum,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\n      movingVarianceInitializer: serializeInitializer(this.movingVarianceInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\n      betaConstraint: serializeConstraint(this.betaConstraint),\n      gammaConstraint: serializeConstraint(this.gammaConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nBatchNormalization.className = \"BatchNormalization\";\nserialization_exports.registerClass(BatchNormalization);\nvar LayerNormalization = class extends Layer {\n  constructor(args) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n    this.axis = args.axis == null ? -1 : args.axis;\n    if (typeof this.axis === \"number\") {\n      if (!Number.isInteger(this.axis)) {\n        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);\n      }\n    } else if (Array.isArray(this.axis)) {\n      for (const axis of this.axis) {\n        if (!Number.isInteger(axis)) {\n          throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);\n        }\n      }\n    } else {\n      throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);\n    }\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || \"zeros\");\n    this.gammaInitializer = getInitializer(args.gammaInitializer || \"ones\");\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n    this.supportsMasking = true;\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const nDims = inputShape.length;\n    if (typeof this.axis === \"number\") {\n      this.axis = [this.axis];\n    }\n    for (let i = 0; i < this.axis.length; ++i) {\n      if (this.axis[i] < 0) {\n        this.axis[i] += nDims;\n      }\n    }\n    for (const axis of this.axis) {\n      if (axis < 0 || axis >= nDims) {\n        throw new Error(`Invalid axis: ${axis}`);\n      }\n    }\n    if (this.axis.length !== unique2(this.axis).length) {\n      throw new Error(`Found duplicate axes in: ${this.axis}`);\n    }\n    const paramShape = this.axis.map((axis) => inputShape[axis]);\n    const trainable = true;\n    if (this.scale) {\n      this.gamma = this.addWeight(\"gamma\", paramShape, \"float32\", this.gammaInitializer, this.gammaRegularizer, trainable);\n    } else {\n      this.gamma = null;\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\"beta\", paramShape, \"float32\", this.betaInitializer, this.betaRegularizer, trainable);\n    } else {\n      this.beta = null;\n    }\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    const input2 = getExactlyOneTensor(inputs);\n    const inputShape = input2.shape;\n    const nDims = inputShape.length;\n    return tidy(() => {\n      const keepDims = true;\n      let { mean: mean4, variance } = moments(input2, this.axis, keepDims);\n      const broadcastShape = pyListRepeat(1, nDims);\n      for (const dim of this.axis) {\n        broadcastShape[dim] = inputShape[dim];\n      }\n      const broadcast = (v) => {\n        if (v != null && v.shape.length !== nDims) {\n          return reshape(v, broadcastShape);\n        } else {\n          return v;\n        }\n      };\n      let scale2 = broadcast(this.gamma.read());\n      let offset = broadcast(this.beta.read());\n      const momentsTiling = [];\n      const scaleOffsetTiling = [];\n      for (let i = 0; i < nDims; ++i) {\n        if (this.axis.indexOf(i) !== -1) {\n          momentsTiling.push(inputShape[i]);\n          scaleOffsetTiling.push(1);\n        } else {\n          momentsTiling.push(1);\n          scaleOffsetTiling.push(inputShape[i]);\n        }\n      }\n      mean4 = tile(mean4, momentsTiling);\n      variance = tile(variance, momentsTiling);\n      scale2 = tile(scale2, scaleOffsetTiling);\n      offset = tile(offset, scaleOffsetTiling);\n      return batchNormalization(input2, mean4, variance, offset, scale2, this.epsilon);\n    });\n  }\n  getConfig() {\n    const config = {\n      axis: this.axis,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nLayerNormalization.className = \"LayerNormalization\";\nserialization_exports.registerClass(LayerNormalization);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/padding.js\nfunction spatial2dPadding(x, padding, dataFormat) {\n  return tidy(() => {\n    if (x.rank !== 4) {\n      throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ${x.rank}-D tensor.`);\n    }\n    if (padding == null) {\n      padding = [[1, 1], [1, 1]];\n    }\n    if (padding.length !== 2 || padding[0].length !== 2 || padding[1].length !== 2) {\n      throw new ValueError(\"spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.\");\n    }\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (dataFormat !== \"channelsLast\" && dataFormat !== \"channelsFirst\") {\n      throw new ValueError(`Unknown data format: ${dataFormat}. Supported data formats are 'channelsLast' and 'channelsFirst.`);\n    }\n    let pattern;\n    if (dataFormat === \"channelsFirst\") {\n      pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n    } else {\n      pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n    }\n    return pad(x, pattern);\n  });\n}\nvar ZeroPadding2D = class extends Layer {\n  constructor(args) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n    this.dataFormat = args.dataFormat == null ? imageDataFormat() : args.dataFormat;\n    if (args.padding == null) {\n      this.padding = [[1, 1], [1, 1]];\n    } else if (typeof args.padding === \"number\") {\n      this.padding = [[args.padding, args.padding], [args.padding, args.padding]];\n    } else {\n      args.padding = args.padding;\n      if (args.padding.length !== 2) {\n        throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${args.padding.length} array.`);\n      }\n      let heightPadding;\n      let widthPadding;\n      if (typeof args.padding[0] === \"number\") {\n        heightPadding = [args.padding[0], args.padding[0]];\n        widthPadding = [args.padding[1], args.padding[1]];\n      } else {\n        args.padding = args.padding;\n        if (args.padding[0].length !== 2) {\n          throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${args.padding[0].length} array.`);\n        }\n        heightPadding = args.padding[0];\n        if (args.padding[1].length !== 2) {\n          throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${args.padding[1].length} array.`);\n        }\n        widthPadding = args.padding[1];\n      }\n      this.padding = [heightPadding, widthPadding];\n    }\n    this.inputSpec = [new InputSpec({ ndim: 4 })];\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    let rows;\n    let cols;\n    if (this.dataFormat === \"channelsFirst\") {\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n      if (inputShape[3] != null && inputShape[3] >= 0) {\n        cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      if (inputShape[1] != null && inputShape[1] >= 0) {\n        rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n  call(inputs, kwargs) {\n    return tidy(() => spatial2dPadding(getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n  }\n  getConfig() {\n    const config = {\n      padding: this.padding,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nZeroPadding2D.className = \"ZeroPadding2D\";\nserialization_exports.registerClass(ZeroPadding2D);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js\nfunction pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n    if (strides == null) {\n      strides = [1, 1];\n    }\n    if (padding == null) {\n      padding = \"valid\";\n    }\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (poolMode == null) {\n      poolMode = \"max\";\n    }\n    x = preprocessConv2DInput(x, dataFormat);\n    let y;\n    const paddingString = padding === \"same\" ? \"same\" : \"valid\";\n    if (poolMode === \"max\") {\n      y = maxPool(x, poolSize, strides, paddingString);\n    } else {\n      y = avgPool(x, poolSize, strides, paddingString);\n    }\n    if (dataFormat === \"channelsFirst\") {\n      y = transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\nfunction pool3d(x, poolSize, strides, padding, dataFormat, poolMode) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n    if (strides == null) {\n      strides = [1, 1, 1];\n    }\n    if (padding == null) {\n      padding = \"valid\";\n    }\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (poolMode == null) {\n      poolMode = \"max\";\n    }\n    x = preprocessConv3DInput(x, dataFormat);\n    let y;\n    const paddingString = padding === \"same\" ? \"same\" : \"valid\";\n    if (poolMode === \"max\") {\n      y = maxPool3d(x, poolSize, strides, paddingString);\n    } else {\n      y = avgPool3d(x, poolSize, strides, paddingString);\n    }\n    if (dataFormat === \"channelsFirst\") {\n      y = transpose(y, [0, 4, 1, 2, 3]);\n    }\n    return y;\n  });\n}\nvar Pooling1D = class extends Layer {\n  constructor(args) {\n    if (args.poolSize == null) {\n      args.poolSize = 2;\n    }\n    super(args);\n    if (typeof args.poolSize === \"number\") {\n      this.poolSize = [args.poolSize];\n    } else if (Array.isArray(args.poolSize) && args.poolSize.length === 1 && typeof args.poolSize[0] === \"number\") {\n      this.poolSize = args.poolSize;\n    } else {\n      throw new ValueError(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(args.poolSize)}`);\n    }\n    assertPositiveInteger(this.poolSize, \"poolSize\");\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else {\n      if (typeof args.strides === \"number\") {\n        this.strides = [args.strides];\n      } else if (Array.isArray(args.strides) && args.strides.length === 1 && typeof args.strides[0] === \"number\") {\n        this.strides = args.strides;\n      } else {\n        throw new ValueError(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(args.strides)}`);\n      }\n    }\n    assertPositiveInteger(this.strides, \"strides\");\n    this.padding = args.padding == null ? \"valid\" : args.padding;\n    checkPaddingMode(this.padding);\n    this.inputSpec = [new InputSpec({ ndim: 3 })];\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const length = convOutputLength(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n    return [inputShape[0], length, inputShape[2]];\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      inputs = expandDims2(getExactlyOneTensor(inputs), 2);\n      const output = this.poolingFunction(getExactlyOneTensor(inputs), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, \"channelsLast\");\n      return squeeze(output, [2]);\n    });\n  }\n  getConfig() {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nvar MaxPooling1D = class extends Pooling1D {\n  constructor(args) {\n    super(args);\n  }\n  poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, \"max\");\n  }\n};\nMaxPooling1D.className = \"MaxPooling1D\";\nserialization_exports.registerClass(MaxPooling1D);\nvar AveragePooling1D = class extends Pooling1D {\n  constructor(args) {\n    super(args);\n  }\n  poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, \"avg\");\n  }\n};\nAveragePooling1D.className = \"AveragePooling1D\";\nserialization_exports.registerClass(AveragePooling1D);\nvar Pooling2D = class extends Layer {\n  constructor(args) {\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2];\n    }\n    super(args);\n    this.poolSize = Array.isArray(args.poolSize) ? args.poolSize : [args.poolSize, args.poolSize];\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 2) {\n        throw new ValueError(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${args.strides.length}.`);\n      }\n      this.strides = args.strides;\n    } else {\n      this.strides = [args.strides, args.strides];\n    }\n    assertPositiveInteger(this.poolSize, \"poolSize\");\n    assertPositiveInteger(this.strides, \"strides\");\n    this.padding = args.padding == null ? \"valid\" : args.padding;\n    this.dataFormat = args.dataFormat == null ? \"channelsLast\" : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    checkPaddingMode(this.padding);\n    this.inputSpec = [new InputSpec({ ndim: 4 })];\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    let rows = this.dataFormat === \"channelsFirst\" ? inputShape[2] : inputShape[1];\n    let cols = this.dataFormat === \"channelsFirst\" ? inputShape[3] : inputShape[2];\n    rows = convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n    cols = convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === \"channelsFirst\") {\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      return this.poolingFunction(getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n    });\n  }\n  getConfig() {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nvar MaxPooling2D = class extends Pooling2D {\n  constructor(args) {\n    super(args);\n  }\n  poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, \"max\");\n  }\n};\nMaxPooling2D.className = \"MaxPooling2D\";\nserialization_exports.registerClass(MaxPooling2D);\nvar AveragePooling2D = class extends Pooling2D {\n  constructor(args) {\n    super(args);\n  }\n  poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, \"avg\");\n  }\n};\nAveragePooling2D.className = \"AveragePooling2D\";\nserialization_exports.registerClass(AveragePooling2D);\nvar Pooling3D = class extends Layer {\n  constructor(args) {\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2, 2];\n    }\n    super(args);\n    this.poolSize = Array.isArray(args.poolSize) ? args.poolSize : [args.poolSize, args.poolSize, args.poolSize];\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 3) {\n        throw new ValueError(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${args.strides.length}.`);\n      }\n      this.strides = args.strides;\n    } else {\n      this.strides = [args.strides, args.strides, args.strides];\n    }\n    assertPositiveInteger(this.poolSize, \"poolSize\");\n    assertPositiveInteger(this.strides, \"strides\");\n    this.padding = args.padding == null ? \"valid\" : args.padding;\n    this.dataFormat = args.dataFormat == null ? \"channelsLast\" : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    checkPaddingMode(this.padding);\n    this.inputSpec = [new InputSpec({ ndim: 5 })];\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    let depths = this.dataFormat === \"channelsFirst\" ? inputShape[2] : inputShape[1];\n    let rows = this.dataFormat === \"channelsFirst\" ? inputShape[3] : inputShape[2];\n    let cols = this.dataFormat === \"channelsFirst\" ? inputShape[4] : inputShape[3];\n    depths = convOutputLength(depths, this.poolSize[0], this.padding, this.strides[0]);\n    rows = convOutputLength(rows, this.poolSize[1], this.padding, this.strides[1]);\n    cols = convOutputLength(cols, this.poolSize[2], this.padding, this.strides[2]);\n    if (this.dataFormat === \"channelsFirst\") {\n      return [inputShape[0], inputShape[1], depths, rows, cols];\n    } else {\n      return [inputShape[0], depths, rows, cols, inputShape[4]];\n    }\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      return this.poolingFunction(getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n    });\n  }\n  getConfig() {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nvar MaxPooling3D = class extends Pooling3D {\n  constructor(args) {\n    super(args);\n  }\n  poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool3d(inputs, poolSize, strides, padding, dataFormat, \"max\");\n  }\n};\nMaxPooling3D.className = \"MaxPooling3D\";\nserialization_exports.registerClass(MaxPooling3D);\nvar AveragePooling3D = class extends Pooling3D {\n  constructor(args) {\n    super(args);\n  }\n  poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool3d(inputs, poolSize, strides, padding, dataFormat, \"avg\");\n  }\n};\nAveragePooling3D.className = \"AveragePooling3D\";\nserialization_exports.registerClass(AveragePooling3D);\nvar GlobalPooling1D = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [new InputSpec({ ndim: 3 })];\n  }\n  computeOutputShape(inputShape) {\n    return [inputShape[0], inputShape[2]];\n  }\n  call(inputs, kwargs) {\n    throw new NotImplementedError();\n  }\n};\nvar GlobalAveragePooling1D = class extends GlobalPooling1D {\n  constructor(args) {\n    super(args || {});\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const input2 = getExactlyOneTensor(inputs);\n      return mean(input2, 1);\n    });\n  }\n};\nGlobalAveragePooling1D.className = \"GlobalAveragePooling1D\";\nserialization_exports.registerClass(GlobalAveragePooling1D);\nvar GlobalMaxPooling1D = class extends GlobalPooling1D {\n  constructor(args) {\n    super(args || {});\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const input2 = getExactlyOneTensor(inputs);\n      return max(input2, 1);\n    });\n  }\n};\nGlobalMaxPooling1D.className = \"GlobalMaxPooling1D\";\nserialization_exports.registerClass(GlobalMaxPooling1D);\nvar GlobalPooling2D = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.dataFormat = args.dataFormat == null ? \"channelsLast\" : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.inputSpec = [new InputSpec({ ndim: 4 })];\n  }\n  computeOutputShape(inputShape) {\n    inputShape = inputShape;\n    if (this.dataFormat === \"channelsLast\") {\n      return [inputShape[0], inputShape[3]];\n    } else {\n      return [inputShape[0], inputShape[1]];\n    }\n  }\n  call(inputs, kwargs) {\n    throw new NotImplementedError();\n  }\n  getConfig() {\n    const config = { dataFormat: this.dataFormat };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n};\nvar GlobalAveragePooling2D = class extends GlobalPooling2D {\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const input2 = getExactlyOneTensor(inputs);\n      if (this.dataFormat === \"channelsLast\") {\n        return mean(input2, [1, 2]);\n      } else {\n        return mean(input2, [2, 3]);\n      }\n    });\n  }\n};\nGlobalAveragePooling2D.className = \"GlobalAveragePooling2D\";\nserialization_exports.registerClass(GlobalAveragePooling2D);\nvar GlobalMaxPooling2D = class extends GlobalPooling2D {\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const input2 = getExactlyOneTensor(inputs);\n      if (this.dataFormat === \"channelsLast\") {\n        return max(input2, [1, 2]);\n      } else {\n        return max(input2, [2, 3]);\n      }\n    });\n  }\n};\nGlobalMaxPooling2D.className = \"GlobalMaxPooling2D\";\nserialization_exports.registerClass(GlobalMaxPooling2D);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/layers/wrappers.js\nvar Wrapper = class extends Layer {\n  constructor(args) {\n    super(args);\n    this.layer = args.layer;\n  }\n  build(inputShape) {\n    this.built = true;\n  }\n  get trainable() {\n    if (this.layer != null) {\n      return this.layer.trainable;\n    } else {\n      return false;\n    }\n  }\n  set trainable(value) {\n    if (this.layer != null) {\n      this.layer.trainable = value;\n    }\n  }\n  get trainableWeights() {\n    return this.layer.trainableWeights;\n  }\n  get nonTrainableWeights() {\n    return this.layer.nonTrainableWeights;\n  }\n  get updates() {\n    return this.layer._updates;\n  }\n  get losses() {\n    return this.layer.losses;\n  }\n  getWeights() {\n    return this.layer.getWeights();\n  }\n  setWeights(weights) {\n    this.layer.setWeights(weights);\n  }\n  getConfig() {\n    const config = {\n      \"layer\": {\n        \"className\": this.layer.getClassName(),\n        \"config\": this.layer.getConfig()\n      }\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  setFastWeightInitDuringBuild(value) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.layer != null) {\n      this.layer.setFastWeightInitDuringBuild(value);\n    }\n  }\n  static fromConfig(cls, config, customObjects = {}) {\n    const layerConfig = config[\"layer\"];\n    const layer = deserialize(layerConfig, customObjects);\n    delete config[\"layer\"];\n    const newConfig = { layer };\n    Object.assign(newConfig, config);\n    return new cls(newConfig);\n  }\n};\nvar TimeDistributed = class extends Wrapper {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 3) {\n      throw new ValueError(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(inputShape)}`);\n    }\n    this.inputSpec = [{ shape: inputShape }];\n    const childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    if (!this.layer.built) {\n      this.layer.build(childInputShape);\n      this.layer.built = true;\n    }\n    super.build(inputShape);\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    const childOutputShape = this.layer.computeOutputShape(childInputShape);\n    const timesteps = inputShape[1];\n    return [childOutputShape[0], timesteps].concat(childOutputShape.slice(1));\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      const step5 = (inputs2, states) => {\n        const output = getExactlyOneTensor(this.layer.call(inputs2, kwargs));\n        return [output, []];\n      };\n      const rnnOutputs = rnn(step5, inputs, [], false, null, null, false, true);\n      const y = rnnOutputs[1];\n      return y;\n    });\n  }\n};\nTimeDistributed.className = \"TimeDistributed\";\nserialization_exports.registerClass(TimeDistributed);\nfunction checkBidirectionalMergeMode(value) {\n  checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES, \"BidirectionalMergeMode\", value);\n}\nvar DEFAULT_BIDIRECTIONAL_MERGE_MODE = \"concat\";\nvar Bidirectional = class extends Wrapper {\n  constructor(args) {\n    super(args);\n    const layerConfig = args.layer.getConfig();\n    const forwDict = {};\n    forwDict[\"className\"] = args.layer.getClassName();\n    forwDict[\"config\"] = layerConfig;\n    this.forwardLayer = deserialize(forwDict);\n    layerConfig[\"goBackwards\"] = layerConfig[\"goBackwards\"] === true ? false : true;\n    const backDict = {};\n    backDict[\"className\"] = args.layer.getClassName();\n    backDict[\"config\"] = layerConfig;\n    this.backwardLayer = deserialize(backDict);\n    this.forwardLayer.name = \"forward_\" + this.forwardLayer.name;\n    this.backwardLayer.name = \"backward_\" + this.backwardLayer.name;\n    this.mergeMode = args.mergeMode === void 0 ? DEFAULT_BIDIRECTIONAL_MERGE_MODE : args.mergeMode;\n    checkBidirectionalMergeMode(this.mergeMode);\n    if (args.weights) {\n      throw new NotImplementedError(\"weights support is not implemented for Bidirectional layer yet.\");\n    }\n    this._stateful = args.layer.stateful;\n    this.returnSequences = args.layer.returnSequences;\n    this.returnState = args.layer.returnState;\n    this.supportsMasking = true;\n    this._trainable = true;\n    this.inputSpec = args.layer.inputSpec;\n    this.numConstants = null;\n  }\n  get trainable() {\n    return this._trainable;\n  }\n  set trainable(value) {\n    this._trainable = value;\n    if (this.forwardLayer != null) {\n      this.forwardLayer.trainable = value;\n    }\n    if (this.backwardLayer != null) {\n      this.backwardLayer.trainable = value;\n    }\n  }\n  getWeights() {\n    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());\n  }\n  setWeights(weights) {\n    const numWeights = weights.length;\n    const numeightsOver2 = Math.floor(numWeights / 2);\n    this.forwardLayer.setWeights(weights.slice(0, numeightsOver2));\n    this.backwardLayer.setWeights(weights.slice(numeightsOver2));\n  }\n  computeOutputShape(inputShape) {\n    let layerShapes = this.forwardLayer.computeOutputShape(inputShape);\n    if (!(Array.isArray(layerShapes) && Array.isArray(layerShapes[0]))) {\n      layerShapes = [layerShapes];\n    }\n    layerShapes = layerShapes;\n    let outputShape;\n    let outputShapes;\n    let stateShape;\n    if (this.returnState) {\n      stateShape = layerShapes.slice(1);\n      outputShape = layerShapes[0];\n    } else {\n      outputShape = layerShapes[0];\n    }\n    outputShape = outputShape;\n    if (this.mergeMode === \"concat\") {\n      outputShape[outputShape.length - 1] *= 2;\n      outputShapes = [outputShape];\n    } else if (this.mergeMode == null) {\n      outputShapes = [outputShape, outputShape.slice()];\n    } else {\n      outputShapes = [outputShape];\n    }\n    if (this.returnState) {\n      if (this.mergeMode == null) {\n        return outputShapes.concat(stateShape).concat(stateShape.slice());\n      }\n      return [outputShape].concat(stateShape).concat(stateShape.slice());\n    }\n    return singletonOrArray(outputShapes);\n  }\n  apply(inputs, kwargs) {\n    let initialState = kwargs == null ? null : kwargs[\"initialState\"];\n    let constants = kwargs == null ? null : kwargs[\"constants\"];\n    if (kwargs == null) {\n      kwargs = {};\n    }\n    const standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants;\n    if (Array.isArray(inputs)) {\n      initialState = inputs.slice(1);\n      inputs = inputs[0];\n    }\n    if ((initialState == null || initialState.length === 0) && constants == null) {\n      return super.apply(inputs, kwargs);\n    }\n    const additionalInputs = [];\n    const additionalSpecs = [];\n    if (initialState != null) {\n      const numStates = initialState.length;\n      if (numStates % 2 > 0) {\n        throw new ValueError(\"When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.\");\n      }\n      kwargs[\"initialState\"] = initialState;\n      additionalInputs.push(...initialState);\n      const stateSpecs = initialState.map((state) => new InputSpec({ shape: state.shape }));\n      this.forwardLayer.stateSpec = stateSpecs.slice(0, numStates / 2);\n      this.backwardLayer.stateSpec = stateSpecs.slice(numStates / 2);\n      additionalSpecs.push(...stateSpecs);\n    }\n    if (constants != null) {\n      throw new NotImplementedError(\"Support for constants in Bidirectional layers is not implemented yet.\");\n    }\n    const isSymbolicTensor = additionalInputs[0] instanceof SymbolicTensor;\n    for (const tensor2 of additionalInputs) {\n      if (tensor2 instanceof SymbolicTensor !== isSymbolicTensor) {\n        throw new ValueError(\"The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors\");\n      }\n    }\n    if (isSymbolicTensor) {\n      const fullInput = [inputs].concat(additionalInputs);\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output = super.apply(fullInput, kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const initialState = kwargs[\"initialState\"];\n      let y;\n      let yRev;\n      if (initialState == null) {\n        y = this.forwardLayer.call(inputs, kwargs);\n        yRev = this.backwardLayer.call(inputs, kwargs);\n      } else {\n        const forwardState = initialState.slice(0, initialState.length / 2);\n        const backwardState = initialState.slice(initialState.length / 2);\n        y = this.forwardLayer.call(inputs, Object.assign(kwargs, { initialState: forwardState }));\n        yRev = this.backwardLayer.call(inputs, Object.assign(kwargs, { initialState: backwardState }));\n      }\n      let states;\n      if (this.returnState) {\n        if (Array.isArray(y)) {\n          states = y.slice(1).concat(yRev.slice(1));\n        } else {\n        }\n        y = y[0];\n        yRev = yRev[0];\n      }\n      if (this.returnSequences) {\n        yRev = reverse(yRev, 1);\n      }\n      let output;\n      if (this.mergeMode === \"concat\") {\n        output = concatenate([y, yRev]);\n      } else if (this.mergeMode === \"sum\") {\n        output = add2(y, yRev);\n      } else if (this.mergeMode === \"ave\") {\n        output = mul(0.5, add2(y, yRev));\n      } else if (this.mergeMode === \"mul\") {\n        output = mul(y, yRev);\n      } else if (this.mergeMode == null) {\n        output = [y, yRev];\n      }\n      if (this.returnState) {\n        if (this.mergeMode == null) {\n          return output.concat(states);\n        }\n        return [output].concat(states);\n      }\n      return output;\n    });\n  }\n  resetStates(states) {\n    this.forwardLayer.resetStates();\n    this.backwardLayer.resetStates();\n  }\n  build(inputShape) {\n    nameScope(this.forwardLayer.name, () => {\n      this.forwardLayer.build(inputShape);\n    });\n    nameScope(this.backwardLayer.name, () => {\n      this.backwardLayer.build(inputShape);\n    });\n    this.built = true;\n  }\n  computeMask(inputs, mask) {\n    if (Array.isArray(mask)) {\n      mask = mask[0];\n    }\n    let outputMask;\n    if (this.returnSequences) {\n      if (this.mergeMode == null) {\n        outputMask = [mask, mask];\n      } else {\n        outputMask = mask;\n      }\n    } else {\n      if (this.mergeMode == null) {\n        outputMask = [null, null];\n      } else {\n        outputMask = null;\n      }\n    }\n    if (this.returnState) {\n      const states = this.forwardLayer.states;\n      const stateMask = states.map((state) => null);\n      if (Array.isArray(outputMask)) {\n        return outputMask.concat(stateMask).concat(stateMask);\n      } else {\n        return [outputMask].concat(stateMask).concat(stateMask);\n      }\n    } else {\n      return outputMask;\n    }\n  }\n  get trainableWeights() {\n    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);\n  }\n  get nonTrainableWeights() {\n    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);\n  }\n  setFastWeightInitDuringBuild(value) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.forwardLayer != null) {\n      this.forwardLayer.setFastWeightInitDuringBuild(value);\n    }\n    if (this.backwardLayer != null) {\n      this.backwardLayer.setFastWeightInitDuringBuild(value);\n    }\n  }\n  getConfig() {\n    const config = {\n      \"mergeMode\": this.mergeMode\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  static fromConfig(cls, config) {\n    const rnnLayer = deserialize(config[\"layer\"]);\n    delete config[\"layer\"];\n    if (config[\"numConstants\"] != null) {\n      throw new NotImplementedError(`Deserialization of a Bidirectional layer with numConstants present is not supported yet.`);\n    }\n    const newConfig = config;\n    newConfig[\"layer\"] = rnnLayer;\n    return new cls(newConfig);\n  }\n};\nBidirectional.className = \"Bidirectional\";\nserialization_exports.registerClass(Bidirectional);\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js\nfunction inputLayer(args) {\n  return new InputLayer(args);\n}\nfunction elu3(args) {\n  return new ELU(args);\n}\nfunction reLU(args) {\n  return new ReLU(args);\n}\nfunction leakyReLU(args) {\n  return new LeakyReLU(args);\n}\nfunction prelu2(args) {\n  return new PReLU(args);\n}\nfunction softmax2(args) {\n  return new Softmax3(args);\n}\nfunction thresholdedReLU(args) {\n  return new ThresholdedReLU(args);\n}\nfunction conv1d2(args) {\n  return new Conv1D(args);\n}\nfunction conv2d3(args) {\n  return new Conv2D2(args);\n}\nfunction conv2dTranspose2(args) {\n  return new Conv2DTranspose(args);\n}\nfunction conv3d2(args) {\n  return new Conv3D2(args);\n}\nfunction conv3dTranspose2(args) {\n  return new Conv3DTranspose(args);\n}\nfunction separableConv2d2(args) {\n  return new SeparableConv2D(args);\n}\nfunction cropping2D(args) {\n  return new Cropping2D(args);\n}\nfunction upSampling2d(args) {\n  return new UpSampling2D(args);\n}\nfunction depthwiseConv2d4(args) {\n  return new DepthwiseConv2D(args);\n}\nfunction activation(args) {\n  return new Activation2(args);\n}\nfunction dense(args) {\n  return new Dense(args);\n}\nfunction dropout3(args) {\n  return new Dropout(args);\n}\nfunction spatialDropout1d(args) {\n  return new SpatialDropout1D(args);\n}\nfunction flatten3(args) {\n  return new Flatten(args);\n}\nfunction repeatVector(args) {\n  return new RepeatVector(args);\n}\nfunction reshape2(args) {\n  return new Reshape2(args);\n}\nfunction permute(args) {\n  return new Permute(args);\n}\nfunction embedding(args) {\n  return new Embedding(args);\n}\nfunction add3(args) {\n  return new Add2(args);\n}\nfunction average(args) {\n  return new Average(args);\n}\nfunction concatenate2(args) {\n  return new Concatenate(args);\n}\nfunction maximum2(args) {\n  return new Maximum2(args);\n}\nfunction minimum2(args) {\n  return new Minimum2(args);\n}\nfunction multiply(args) {\n  return new Multiply2(args);\n}\nfunction dot3(args) {\n  return new Dot(args);\n}\nfunction batchNormalization2(args) {\n  return new BatchNormalization(args);\n}\nfunction layerNormalization(args) {\n  return new LayerNormalization(args);\n}\nfunction zeroPadding2d(args) {\n  return new ZeroPadding2D(args);\n}\nfunction averagePooling1d(args) {\n  return new AveragePooling1D(args);\n}\nfunction avgPool1d(args) {\n  return averagePooling1d(args);\n}\nfunction avgPooling1d(args) {\n  return averagePooling1d(args);\n}\nfunction averagePooling2d(args) {\n  return new AveragePooling2D(args);\n}\nfunction avgPool2d(args) {\n  return averagePooling2d(args);\n}\nfunction avgPooling2d(args) {\n  return averagePooling2d(args);\n}\nfunction averagePooling3d(args) {\n  return new AveragePooling3D(args);\n}\nfunction avgPool3d2(args) {\n  return averagePooling3d(args);\n}\nfunction avgPooling3d(args) {\n  return averagePooling3d(args);\n}\nfunction globalAveragePooling1d(args) {\n  return new GlobalAveragePooling1D(args);\n}\nfunction globalAveragePooling2d(args) {\n  return new GlobalAveragePooling2D(args);\n}\nfunction globalMaxPooling1d(args) {\n  return new GlobalMaxPooling1D(args);\n}\nfunction globalMaxPooling2d(args) {\n  return new GlobalMaxPooling2D(args);\n}\nfunction maxPooling1d(args) {\n  return new MaxPooling1D(args);\n}\nfunction maxPooling2d(args) {\n  return new MaxPooling2D(args);\n}\nfunction maxPooling3d(args) {\n  return new MaxPooling3D(args);\n}\nfunction gru(args) {\n  return new GRU(args);\n}\nfunction gruCell(args) {\n  return new GRUCell(args);\n}\nfunction lstm(args) {\n  return new LSTM(args);\n}\nfunction lstmCell(args) {\n  return new LSTMCell(args);\n}\nfunction simpleRNN(args) {\n  return new SimpleRNN(args);\n}\nfunction simpleRNNCell(args) {\n  return new SimpleRNNCell(args);\n}\nfunction convLstm2d(args) {\n  return new ConvLSTM2D(args);\n}\nfunction convLstm2dCell(args) {\n  return new ConvLSTM2DCell(args);\n}\nfunction rnn2(args) {\n  return new RNN(args);\n}\nfunction stackedRNNCells(args) {\n  return new StackedRNNCells(args);\n}\nfunction bidirectional(args) {\n  return new Bidirectional(args);\n}\nfunction timeDistributed(args) {\n  return new TimeDistributed(args);\n}\nvar globalMaxPool1d = globalMaxPooling1d;\nvar globalMaxPool2d = globalMaxPooling2d;\nvar maxPool1d = maxPooling1d;\nvar maxPool2d = maxPooling2d;\nfunction gaussianNoise(args) {\n  return new GaussianNoise(args);\n}\nfunction gaussianDropout(args) {\n  return new GaussianDropout(args);\n}\nfunction alphaDropout(args) {\n  return new AlphaDropout(args);\n}\nfunction masking(args) {\n  return new Masking(args);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/exports_metrics.js\nvar exports_metrics_exports = {};\n__export(exports_metrics_exports, {\n  MAPE: () => MAPE2,\n  MSE: () => MSE2,\n  binaryAccuracy: () => binaryAccuracy2,\n  binaryCrossentropy: () => binaryCrossentropy3,\n  categoricalAccuracy: () => categoricalAccuracy2,\n  categoricalCrossentropy: () => categoricalCrossentropy3,\n  cosineProximity: () => cosineProximity2,\n  mape: () => mape2,\n  meanAbsoluteError: () => meanAbsoluteError2,\n  meanAbsolutePercentageError: () => meanAbsolutePercentageError2,\n  meanSquaredError: () => meanSquaredError3,\n  mse: () => mse2,\n  precision: () => precision2,\n  recall: () => recall2,\n  sparseCategoricalAccuracy: () => sparseCategoricalAccuracy2\n});\nfunction binaryAccuracy2(yTrue, yPred) {\n  return binaryAccuracy(yTrue, yPred);\n}\nfunction binaryCrossentropy3(yTrue, yPred) {\n  return binaryCrossentropy2(yTrue, yPred);\n}\nfunction sparseCategoricalAccuracy2(yTrue, yPred) {\n  return sparseCategoricalAccuracy(yTrue, yPred);\n}\nfunction categoricalAccuracy2(yTrue, yPred) {\n  return categoricalAccuracy(yTrue, yPred);\n}\nfunction categoricalCrossentropy3(yTrue, yPred) {\n  return categoricalCrossentropy2(yTrue, yPred);\n}\nfunction precision2(yTrue, yPred) {\n  return precision(yTrue, yPred);\n}\nfunction recall2(yTrue, yPred) {\n  return recall(yTrue, yPred);\n}\nfunction cosineProximity2(yTrue, yPred) {\n  return cosineProximity(yTrue, yPred);\n}\nfunction meanAbsoluteError2(yTrue, yPred) {\n  return meanAbsoluteError(yTrue, yPred);\n}\nfunction meanAbsolutePercentageError2(yTrue, yPred) {\n  return meanAbsolutePercentageError(yTrue, yPred);\n}\nfunction MAPE2(yTrue, yPred) {\n  return meanAbsolutePercentageError(yTrue, yPred);\n}\nfunction mape2(yTrue, yPred) {\n  return meanAbsolutePercentageError(yTrue, yPred);\n}\nfunction meanSquaredError3(yTrue, yPred) {\n  return meanSquaredError2(yTrue, yPred);\n}\nfunction MSE2(yTrue, yPred) {\n  return meanSquaredError2(yTrue, yPred);\n}\nfunction mse2(yTrue, yPred) {\n  return meanSquaredError2(yTrue, yPred);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/exports_models.js\nvar exports_models_exports = {};\n__export(exports_models_exports, {\n  modelFromJSON: () => modelFromJSON\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/exports_regularizers.js\nvar exports_regularizers_exports = {};\n__export(exports_regularizers_exports, {\n  l1: () => l12,\n  l1l2: () => l1l2,\n  l2: () => l22\n});\nfunction l1l2(config) {\n  return new L1L2(config);\n}\nfunction l12(config) {\n  return l1(config);\n}\nfunction l22(config) {\n  return l2(config);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-layers@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-layers/dist/callbacks.js\nvar Callback = class extends BaseCallback {\n  constructor() {\n    super(...arguments);\n    this.model = null;\n  }\n  setModel(model2) {\n    if (!(model2 instanceof LayersModel)) {\n      throw new Error(\"model must be a LayersModel, not some other Container\");\n    }\n    this.model = model2;\n  }\n};\nfunction less2(currVal, prevVal) {\n  return currVal < prevVal;\n}\nfunction greater2(currVal, prevVal) {\n  return currVal > prevVal;\n}\nvar EarlyStopping = class extends Callback {\n  constructor(args) {\n    super();\n    if (args == null) {\n      args = {};\n    }\n    if (args.restoreBestWeights) {\n      throw new NotImplementedError(\"restoreBestWeights = True is not implemented in EarlyStopping yet.\");\n    }\n    this.monitor = args.monitor || \"val_loss\";\n    this.minDelta = Math.abs(args.minDelta || 0);\n    this.patience = args.patience || 0;\n    this.verbose = args.verbose || 0;\n    this.mode = args.mode || \"auto\";\n    this.baseline = args.baseline;\n    if ([\"auto\", \"min\", \"max\"].indexOf(this.mode) === -1) {\n      console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`);\n      this.mode = \"auto\";\n    }\n    if (this.mode === \"min\") {\n      this.monitorFunc = less2;\n    } else if (this.mode === \"max\") {\n      this.monitorFunc = greater2;\n    } else {\n      if (this.monitor.indexOf(\"acc\") !== -1) {\n        this.monitorFunc = greater2;\n      } else {\n        this.monitorFunc = less2;\n      }\n    }\n    if (this.monitorFunc === less2) {\n      this.minDelta *= -1;\n    }\n  }\n  async onTrainBegin(logs) {\n    this.wait = 0;\n    this.stoppedEpoch = 0;\n    if (this.baseline != null) {\n      this.best = this.baseline;\n    } else {\n      this.best = this.monitorFunc === less2 ? Infinity : -Infinity;\n    }\n  }\n  async onEpochEnd(epoch, logs) {\n    await resolveScalarsInLogs(logs);\n    const current = this.getMonitorValue(logs);\n    if (current == null) {\n      return;\n    }\n    if (this.monitorFunc(current - this.minDelta, this.best)) {\n      this.best = current;\n      this.wait = 0;\n    } else {\n      this.wait++;\n      if (this.wait >= this.patience) {\n        this.stoppedEpoch = epoch;\n        this.model.stopTraining = true;\n      }\n    }\n  }\n  async onTrainEnd(logs) {\n    if (this.stoppedEpoch > 0 && this.verbose) {\n      console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);\n    }\n  }\n  getMonitorValue(logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    const monitorValue = logs[this.monitor];\n    if (monitorValue == null) {\n      console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(logs)}`);\n    }\n    return monitorValue;\n  }\n};\nfunction earlyStopping(args) {\n  return new EarlyStopping(args);\n}\nvar callbacks = { earlyStopping };\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/flags.js\nvar ENV3 = env();\nENV3.registerFlag(\"KEEP_INTERMEDIATE_TENSORS\", () => false, (debugValue) => {\n  if (debugValue) {\n    console.warn(\"Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.\");\n  }\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js\nvar DataType;\n(function(DataType2) {\n  DataType2[DataType2[\"DT_INVALID\"] = 0] = \"DT_INVALID\";\n  DataType2[DataType2[\"DT_FLOAT\"] = 1] = \"DT_FLOAT\";\n  DataType2[DataType2[\"DT_DOUBLE\"] = 2] = \"DT_DOUBLE\";\n  DataType2[DataType2[\"DT_INT32\"] = 3] = \"DT_INT32\";\n  DataType2[DataType2[\"DT_UINT8\"] = 4] = \"DT_UINT8\";\n  DataType2[DataType2[\"DT_INT16\"] = 5] = \"DT_INT16\";\n  DataType2[DataType2[\"DT_INT8\"] = 6] = \"DT_INT8\";\n  DataType2[DataType2[\"DT_STRING\"] = 7] = \"DT_STRING\";\n  DataType2[DataType2[\"DT_COMPLEX64\"] = 8] = \"DT_COMPLEX64\";\n  DataType2[DataType2[\"DT_INT64\"] = 9] = \"DT_INT64\";\n  DataType2[DataType2[\"DT_BOOL\"] = 10] = \"DT_BOOL\";\n  DataType2[DataType2[\"DT_QINT8\"] = 11] = \"DT_QINT8\";\n  DataType2[DataType2[\"DT_QUINT8\"] = 12] = \"DT_QUINT8\";\n  DataType2[DataType2[\"DT_QINT32\"] = 13] = \"DT_QINT32\";\n  DataType2[DataType2[\"DT_BFLOAT16\"] = 14] = \"DT_BFLOAT16\";\n  DataType2[DataType2[\"DT_QINT16\"] = 15] = \"DT_QINT16\";\n  DataType2[DataType2[\"DT_QUINT16\"] = 16] = \"DT_QUINT16\";\n  DataType2[DataType2[\"DT_UINT16\"] = 17] = \"DT_UINT16\";\n  DataType2[DataType2[\"DT_COMPLEX128\"] = 18] = \"DT_COMPLEX128\";\n  DataType2[DataType2[\"DT_HALF\"] = 19] = \"DT_HALF\";\n  DataType2[DataType2[\"DT_RESOURCE\"] = 20] = \"DT_RESOURCE\";\n  DataType2[DataType2[\"DT_VARIANT\"] = 21] = \"DT_VARIANT\";\n  DataType2[DataType2[\"DT_UINT32\"] = 22] = \"DT_UINT32\";\n  DataType2[DataType2[\"DT_UINT64\"] = 23] = \"DT_UINT64\";\n  DataType2[DataType2[\"DT_FLOAT_REF\"] = 101] = \"DT_FLOAT_REF\";\n  DataType2[DataType2[\"DT_DOUBLE_REF\"] = 102] = \"DT_DOUBLE_REF\";\n  DataType2[DataType2[\"DT_INT32_REF\"] = 103] = \"DT_INT32_REF\";\n  DataType2[DataType2[\"DT_UINT8_REF\"] = 104] = \"DT_UINT8_REF\";\n  DataType2[DataType2[\"DT_INT16_REF\"] = 105] = \"DT_INT16_REF\";\n  DataType2[DataType2[\"DT_INT8_REF\"] = 106] = \"DT_INT8_REF\";\n  DataType2[DataType2[\"DT_STRING_REF\"] = 107] = \"DT_STRING_REF\";\n  DataType2[DataType2[\"DT_COMPLEX64_REF\"] = 108] = \"DT_COMPLEX64_REF\";\n  DataType2[DataType2[\"DT_INT64_REF\"] = 109] = \"DT_INT64_REF\";\n  DataType2[DataType2[\"DT_BOOL_REF\"] = 110] = \"DT_BOOL_REF\";\n  DataType2[DataType2[\"DT_QINT8_REF\"] = 111] = \"DT_QINT8_REF\";\n  DataType2[DataType2[\"DT_QUINT8_REF\"] = 112] = \"DT_QUINT8_REF\";\n  DataType2[DataType2[\"DT_QINT32_REF\"] = 113] = \"DT_QINT32_REF\";\n  DataType2[DataType2[\"DT_BFLOAT16_REF\"] = 114] = \"DT_BFLOAT16_REF\";\n  DataType2[DataType2[\"DT_QINT16_REF\"] = 115] = \"DT_QINT16_REF\";\n  DataType2[DataType2[\"DT_QUINT16_REF\"] = 116] = \"DT_QUINT16_REF\";\n  DataType2[DataType2[\"DT_UINT16_REF\"] = 117] = \"DT_UINT16_REF\";\n  DataType2[DataType2[\"DT_COMPLEX128_REF\"] = 118] = \"DT_COMPLEX128_REF\";\n  DataType2[DataType2[\"DT_HALF_REF\"] = 119] = \"DT_HALF_REF\";\n  DataType2[DataType2[\"DT_RESOURCE_REF\"] = 120] = \"DT_RESOURCE_REF\";\n  DataType2[DataType2[\"DT_VARIANT_REF\"] = 121] = \"DT_VARIANT_REF\";\n  DataType2[DataType2[\"DT_UINT32_REF\"] = 122] = \"DT_UINT32_REF\";\n  DataType2[DataType2[\"DT_UINT64_REF\"] = 123] = \"DT_UINT64_REF\";\n})(DataType || (DataType = {}));\nvar SaverDef;\n(function(SaverDef2) {\n  let CheckpointFormatVersion;\n  (function(CheckpointFormatVersion2) {\n    CheckpointFormatVersion2[CheckpointFormatVersion2[\"LEGACY\"] = 0] = \"LEGACY\";\n    CheckpointFormatVersion2[CheckpointFormatVersion2[\"V1\"] = 1] = \"V1\";\n    CheckpointFormatVersion2[CheckpointFormatVersion2[\"V2\"] = 2] = \"V2\";\n  })(CheckpointFormatVersion = SaverDef2.CheckpointFormatVersion || (SaverDef2.CheckpointFormatVersion = {}));\n})(SaverDef || (SaverDef = {}));\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js\nvar CUSTOM_OPS = {};\nfunction registerOp(name, opFunc) {\n  const opMapper = {\n    tfOpName: name,\n    category: \"custom\",\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n  CUSTOM_OPS[name] = opMapper;\n}\nfunction getRegisteredOp(name) {\n  return CUSTOM_OPS[name];\n}\nfunction deregisterOp(name) {\n  delete CUSTOM_OPS[name];\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\nfunction getParamValue(paramName, node, tensorMap, context, resourceManager) {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== void 0) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ? void 0 : inputParam.inputIndexEnd === void 0 ? start + 1 : inputParam.inputIndexEnd;\n    if (inputParam.type === \"tensor\") {\n      return getTensor(node.inputNames[inputParam.inputIndexStart], tensorMap, context, resourceManager);\n    }\n    if (inputParam.type === \"tensors\") {\n      const inputs = node.inputNames.slice(start, end);\n      return inputs.map((name) => getTensor(name, tensorMap, context, resourceManager));\n    }\n    const tensor2 = getTensor(node.inputNames.slice(start)[0], tensorMap, context, resourceManager);\n    const data = tensor2.dataSync();\n    return inputParam.type === \"number\" ? data[0] : util_exports.toNestedArray(tensor2.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\nfunction getTensor(name, tensorsMap, context, resourceManager) {\n  const [nodeName, index] = parseNodeName(name);\n  if (resourceManager != null) {\n    const tensor2 = resourceManager.getHashTableHandleByName(nodeName);\n    if (tensor2 != null) {\n      return tensor2;\n    }\n  }\n  const contextId = context.currentContextIds.find((contextId2) => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId2)];\n  });\n  return contextId !== void 0 ? tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] : void 0;\n}\nfunction getTensorsForCurrentContenxt(name, tensorsMap, context) {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\nfunction getNodeNameAndIndex(inputName, context) {\n  const [nodeName, index, outputName] = parseNodeName(inputName);\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index,\n    outputName\n  ];\n}\nfunction getNodeNameWithContextId(name, contextId) {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\nfunction parseNodeName(name) {\n  const parts = name.split(\":\");\n  if (parts.length === 1) {\n    return [name, 0, void 0];\n  }\n  const nodeName = parts[0];\n  const outputName = parts.length === 3 ? parts[1] : void 0;\n  const index = Number(parts[parts.length - 1]);\n  return [nodeName, index, outputName];\n}\nfunction getPadding(node, tensorMap, context) {\n  let pad3 = getParamValue(\"pad\", node, tensorMap, context);\n  if (pad3 === \"explicit\") {\n    pad3 = getParamValue(\"explicitPaddings\", node, tensorMap, context);\n    const explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = pad3[i * 2];\n      explicitPadding[i][1] = pad3[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad3;\n}\nfunction cloneTensor(tensor2) {\n  return tensor2.kept ? tensor2 : clone(tensor2);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js\nvar arithmetic_exports = {};\n__export(arithmetic_exports, {\n  json: () => json\n});\nvar json = [\n  {\n    \"tfOpName\": \"Add\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"AddV2\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"AddN\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"end\": 0,\n        \"name\": \"tensors\",\n        \"type\": \"tensors\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"BiasAdd\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Sub\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"RealDiv\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Div\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"DivNoNan\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"FloorDiv\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Mul\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Maximum\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Minimum\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Pow\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"SquaredDifference\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Mod\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"FloorMod\",\n    \"category\": \"arithmetic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js\nvar basic_math_exports = {};\n__export(basic_math_exports, {\n  json: () => json2\n});\nvar json2 = [\n  {\n    \"tfOpName\": \"Abs\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Acos\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Asin\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Atan\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Atan2\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"y\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Ceil\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"ClipByValue\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"clipValueMin\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"clipValueMax\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Complex\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"real\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"imag\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"ComplexAbs\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Cos\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Cosh\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Elu\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Exp\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Floor\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Log\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Imag\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"Tout\",\n        \"name\": \"outputType\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Neg\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Real\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"Tout\",\n        \"name\": \"outputType\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Prelu\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"alpha\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Relu\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Relu6\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Selu\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Sigmoid\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Sin\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Sinh\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Sqrt\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Rsqrt\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Square\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Tan\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Tanh\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Sign\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Round\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Expm1\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Log1p\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Reciprocal\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Softplus\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Asinh\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Acosh\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Atanh\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Erf\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Prod\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axes\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"keep_dims\",\n        \"name\": \"keepDims\",\n        \"type\": \"bool\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LeakyRelu\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"alpha\",\n        \"name\": \"alpha\",\n        \"type\": \"number\",\n        \"defaultValue\": 0.2\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"IsNan\",\n    \"category\": \"basic_math\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js\nvar control_exports = {};\n__export(control_exports, {\n  json: () => json3\n});\nvar json3 = [\n  {\n    \"tfOpName\": \"EmptyTensorList\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"maxNumElements\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LoopCond\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"pred\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Switch\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"data\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"pred\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Merge\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"end\": 0,\n        \"name\": \"tensors\",\n        \"type\": \"tensors\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Enter\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"frame_name\",\n        \"name\": \"frameName\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"is_constant\",\n        \"name\": \"isConstant\",\n        \"type\": \"bool\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Exit\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"NextIteration\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorArrayV3\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"size\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"dtype\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      },\n      {\n        \"tfName\": \"element_shape\",\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      },\n      {\n        \"tfName\": \"dynamic_size\",\n        \"name\": \"dynamicSize\",\n        \"type\": \"bool\"\n      },\n      {\n        \"tfName\": \"clear_after_read\",\n        \"name\": \"clearAfterRead\",\n        \"type\": \"bool\"\n      },\n      {\n        \"tfName\": \"identical_element_shapes\",\n        \"name\": \"identicalElementShapes\",\n        \"type\": \"bool\"\n      },\n      {\n        \"tfName\": \"tensor_array_name\",\n        \"name\": \"name\",\n        \"type\": \"string\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorArrayWriteV3\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorArrayId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"index\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"flowIn\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorArrayReadV3\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorArrayId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"index\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"flowIn\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"dtype\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorArrayGatherV3\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorArrayId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"indices\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"flowIn\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"dtype\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      },\n      {\n        \"tfName\": \"element_shape\",\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorArrayScatterV3\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorArrayId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"indices\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"flowIn\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorArrayConcatV3\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorArrayId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"flowIn\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"dtype\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      },\n      {\n        \"tfName\": \"element_shape_except0\",\n        \"name\": \"elementShapeExcept0\",\n        \"type\": \"shape\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorArraySplitV3\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorArrayId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"lengths\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"flowIn\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorArraySizeV3\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorArrayId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"flowIn\",\n        \"type\": \"number\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorArrayCloseV3\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorArrayId\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"StatelessIf\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"cond\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"end\": 0,\n        \"name\": \"args\",\n        \"type\": \"tensors\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"then_branch\",\n        \"name\": \"thenBranch\",\n        \"type\": \"func\"\n      },\n      {\n        \"tfName\": \"else_branch\",\n        \"name\": \"elseBranch\",\n        \"type\": \"func\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"If\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"cond\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"end\": 0,\n        \"name\": \"args\",\n        \"type\": \"tensors\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"then_branch\",\n        \"name\": \"thenBranch\",\n        \"type\": \"func\"\n      },\n      {\n        \"tfName\": \"else_branch\",\n        \"name\": \"elseBranch\",\n        \"type\": \"func\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"StatelessWhile\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"end\": 0,\n        \"name\": \"args\",\n        \"type\": \"tensors\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"cond\",\n        \"name\": \"cond\",\n        \"type\": \"func\"\n      },\n      {\n        \"tfName\": \"body\",\n        \"name\": \"body\",\n        \"type\": \"func\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"While\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"end\": 0,\n        \"name\": \"args\",\n        \"type\": \"tensors\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"cond\",\n        \"name\": \"cond\",\n        \"type\": \"func\"\n      },\n      {\n        \"tfName\": \"body\",\n        \"name\": \"body\",\n        \"type\": \"func\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorListScatter\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"indices\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorListScatterV2\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"indices\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"numElements\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorListGather\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorListId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"indices\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorListGetItem\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorListId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"index\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorListSetItem\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorListId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"index\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorListReserve\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"numElements\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorListFromTensor\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorListStack\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorListId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      },\n      {\n        \"tfName\": \"num_elements\",\n        \"name\": \"numElements\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorListSplit\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"lengths\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorListConcat\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorListId\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_shape\",\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      },\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorListPopBack\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorListId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"elementShape\",\n        \"type\": \"shape\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TensorListPushBack\",\n    \"category\": \"control\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensorListId\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"element_dtype\",\n        \"name\": \"elementDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js\nvar convolution_exports = {};\n__export(convolution_exports, {\n  json: () => json4\n});\nvar json4 = [\n  {\n    \"tfOpName\": \"AvgPool\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"ksize\",\n        \"name\": \"kernelSize\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"MaxPool\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"ksize\",\n        \"name\": \"kernelSize\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"explicit_paddings\",\n        \"name\": \"explicitPaddings\",\n        \"type\": \"number[]\",\n        \"defaultValue\": [],\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"MaxPoolWithArgmax\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"ksize\",\n        \"name\": \"kernelSize\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"include_batch_in_index\",\n        \"name\": \"includeBatchInIndex\",\n        \"type\": \"bool\"\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"AvgPool3D\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"ksize\",\n        \"name\": \"kernelSize\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"MaxPool3D\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"ksize\",\n        \"name\": \"kernelSize\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Conv1D\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"filter\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"stride\",\n        \"name\": \"stride\",\n        \"type\": \"number\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"defaultValue\": \"NWC\"\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"dilation\",\n        \"name\": \"dilation\",\n        \"type\": \"number\",\n        \"defaultValue\": 1\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Conv2D\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"filter\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"useCudnnOnGpu\",\n        \"name\": \"useCudnnOnGpu\",\n        \"type\": \"bool\"\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"defaultValue\": \"NHWC\"\n      },\n      {\n        \"tfName\": \"explicit_paddings\",\n        \"name\": \"explicitPaddings\",\n        \"type\": \"number[]\",\n        \"defaultValue\": []\n      },\n      {\n        \"tfName\": \"dilations\",\n        \"name\": \"dilations\",\n        \"type\": \"number[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"_FusedConv2D\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"filter\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"end\": 0,\n        \"name\": \"args\",\n        \"type\": \"tensors\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"num_args\",\n        \"name\": \"numArgs\",\n        \"type\": \"number\"\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"explicit_paddings\",\n        \"name\": \"explicitPaddings\",\n        \"type\": \"number[]\",\n        \"defaultValue\": []\n      },\n      {\n        \"tfName\": \"use_cudnn_on_gpu\",\n        \"name\": \"useCudnnOnGpu\",\n        \"type\": \"bool\",\n        \"defaultValue\": true\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"defaultValue\": \"NHWC\"\n      },\n      {\n        \"tfName\": \"dilations\",\n        \"name\": \"dilations\",\n        \"type\": \"number[]\",\n        \"defaultValue\": [\n          1,\n          1,\n          1,\n          1\n        ]\n      },\n      {\n        \"tfName\": \"fused_ops\",\n        \"name\": \"fusedOps\",\n        \"type\": \"string[]\",\n        \"defaultValue\": []\n      },\n      {\n        \"tfName\": \"epsilon\",\n        \"name\": \"epsilon\",\n        \"type\": \"number\",\n        \"defaultValue\": 1e-4\n      },\n      {\n        \"tfName\": \"leakyrelu_alpha\",\n        \"name\": \"leakyreluAlpha\",\n        \"type\": \"number\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Conv2DBackpropInput\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 2,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"filter\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 0,\n        \"name\": \"outputShape\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"explicit_paddings\",\n        \"name\": \"explicitPaddings\",\n        \"type\": \"number[]\",\n        \"defaultValue\": []\n      },\n      {\n        \"tfName\": \"dilations\",\n        \"name\": \"dilations\",\n        \"type\": \"number[]\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"DepthwiseConv2d\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"input\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"filter\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"defaultValue\": \"NHWC\"\n      },\n      {\n        \"tfName\": \"explicit_paddings\",\n        \"name\": \"explicitPaddings\",\n        \"type\": \"number[]\",\n        \"defaultValue\": []\n      },\n      {\n        \"tfName\": \"dilations\",\n        \"name\": \"dilations\",\n        \"type\": \"number[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"DepthwiseConv2dNative\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"input\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"filter\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"defaultValue\": \"NHWC\"\n      },\n      {\n        \"tfName\": \"explicit_paddings\",\n        \"name\": \"explicitPaddings\",\n        \"type\": \"number[]\",\n        \"defaultValue\": []\n      },\n      {\n        \"tfName\": \"dilations\",\n        \"name\": \"dilations\",\n        \"type\": \"number[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"FusedDepthwiseConv2dNative\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"filter\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"end\": 0,\n        \"name\": \"args\",\n        \"type\": \"tensors\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"num_args\",\n        \"name\": \"numArgs\",\n        \"type\": \"number\"\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"defaultValue\": \"NHWC\"\n      },\n      {\n        \"tfName\": \"dilations\",\n        \"name\": \"dilations\",\n        \"type\": \"number[]\",\n        \"defaultValue\": [\n          1,\n          1,\n          1,\n          1\n        ]\n      },\n      {\n        \"tfName\": \"fused_ops\",\n        \"name\": \"fusedOps\",\n        \"type\": \"string[]\",\n        \"defaultValue\": []\n      },\n      {\n        \"tfName\": \"explicit_paddings\",\n        \"name\": \"explicitPaddings\",\n        \"type\": \"number[]\",\n        \"defaultValue\": []\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Conv3D\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"filter\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"defaultValue\": \"NHWC\"\n      },\n      {\n        \"tfName\": \"dilations\",\n        \"name\": \"dilations\",\n        \"type\": \"number[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Dilation2D\",\n    \"category\": \"convolution\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"filter\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"strides\",\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"rates\",\n        \"name\": \"dilations\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"padding\",\n        \"name\": \"pad\",\n        \"type\": \"string\"\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js\nvar creation_exports = {};\n__export(creation_exports, {\n  json: () => json5\n});\nvar json5 = [\n  {\n    \"tfOpName\": \"Fill\",\n    \"category\": \"creation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"shape\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"value\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LinSpace\",\n    \"category\": \"creation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"start\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"stop\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"num\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"OneHot\",\n    \"category\": \"creation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"indices\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"depth\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"onValue\",\n        \"type\": \"number\",\n        \"defaultValue\": 1\n      },\n      {\n        \"start\": 3,\n        \"name\": \"offValue\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"axis\",\n        \"name\": \"axis\",\n        \"type\": \"number\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Ones\",\n    \"category\": \"creation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"shape\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"OnesLike\",\n    \"category\": \"creation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"dtype\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"RandomUniform\",\n    \"category\": \"creation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"shape\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"minval\",\n        \"name\": \"minval\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      },\n      {\n        \"tfName\": \"maxval\",\n        \"name\": \"maxval\",\n        \"type\": \"number\",\n        \"defaultValue\": 1\n      },\n      {\n        \"tfName\": \"dtype\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      },\n      {\n        \"tfName\": \"seed\",\n        \"name\": \"seed\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      },\n      {\n        \"tfName\": \"seed2\",\n        \"name\": \"seed2\",\n        \"type\": \"number\",\n        \"defaultValue\": 0,\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"T\",\n        \"type\": \"number\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Range\",\n    \"category\": \"creation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"start\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"stop\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"step\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"Tidx\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"TruncatedNormal\",\n    \"category\": \"creation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"shape\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"means\",\n        \"name\": \"mean\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      },\n      {\n        \"tfName\": \"stddev\",\n        \"name\": \"stdDev\",\n        \"type\": \"number\",\n        \"defaultValue\": 1\n      },\n      {\n        \"tfName\": \"seed\",\n        \"name\": \"seed\",\n        \"type\": \"number\"\n      },\n      {\n        \"tfName\": \"seed2\",\n        \"name\": \"seed2\",\n        \"type\": \"number\",\n        \"defaultValue\": 0,\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"dtype\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"T\",\n        \"type\": \"number\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Zeros\",\n    \"category\": \"creation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"shape\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"ZerosLike\",\n    \"category\": \"creation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Multinomial\",\n    \"category\": \"creation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"logits\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"numSamples\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"seed\",\n        \"name\": \"seed\",\n        \"type\": \"number\"\n      },\n      {\n        \"tfName\": \"seed2\",\n        \"name\": \"seed2\",\n        \"type\": \"number\"\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      },\n      {\n        \"tfName\": \"output_dtype\",\n        \"name\": \"output_dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js\nvar dynamic_exports = {};\n__export(dynamic_exports, {\n  json: () => json6\n});\nvar json6 = [\n  {\n    \"tfOpName\": \"NonMaxSuppressionV2\",\n    \"category\": \"dynamic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"boxes\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"scores\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"maxOutputSize\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"iouThreshold\",\n        \"type\": \"number\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"NonMaxSuppressionV3\",\n    \"category\": \"dynamic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"boxes\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"scores\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"maxOutputSize\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"iouThreshold\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 4,\n        \"name\": \"scoreThreshold\",\n        \"type\": \"number\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"NonMaxSuppressionV4\",\n    \"category\": \"dynamic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"boxes\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"scores\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"maxOutputSize\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"iouThreshold\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 4,\n        \"name\": \"scoreThreshold\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"T_threshold\",\n        \"name\": \"threshold\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"pad_to_max_output_size\",\n        \"name\": \"padToMaxOutputSize\",\n        \"type\": \"bool\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"NonMaxSuppressionV5\",\n    \"category\": \"dynamic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"boxes\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"scores\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"maxOutputSize\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"iouThreshold\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 4,\n        \"name\": \"scoreThreshold\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 5,\n        \"name\": \"softNmsSigma\",\n        \"type\": \"number\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Where\",\n    \"category\": \"dynamic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"condition\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"ListDiff\",\n    \"category\": \"dynamic\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"y\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js\nvar evaluation_exports = {};\n__export(evaluation_exports, {\n  json: () => json7\n});\nvar json7 = [\n  {\n    \"tfOpName\": \"TopKV2\",\n    \"category\": \"evaluation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"k\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"sorted\",\n        \"name\": \"sorted\",\n        \"type\": \"bool\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Unique\",\n    \"category\": \"evaluation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"UniqueV2\",\n    \"category\": \"evaluation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number\"\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js\nvar graph_exports = {};\n__export(graph_exports, {\n  json: () => json8\n});\nvar json8 = [\n  {\n    \"tfOpName\": \"PlaceholderWithDefault\",\n    \"category\": \"graph\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"default\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"shape\",\n        \"name\": \"shape\",\n        \"type\": \"shape\"\n      },\n      {\n        \"tfName\": \"dtype\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Placeholder\",\n    \"category\": \"graph\",\n    \"attrs\": [\n      {\n        \"tfName\": \"shape\",\n        \"name\": \"shape\",\n        \"type\": \"shape\"\n      },\n      {\n        \"tfName\": \"dtype\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Const\",\n    \"category\": \"graph\"\n  },\n  {\n    \"tfOpName\": \"Identity\",\n    \"category\": \"graph\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"IdentityN\",\n    \"category\": \"graph\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"end\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensors\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Snapshot\",\n    \"category\": \"graph\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Rank\",\n    \"category\": \"graph\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Size\",\n    \"category\": \"graph\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Shape\",\n    \"category\": \"graph\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"ShapeN\",\n    \"category\": \"graph\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"end\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensors\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Print\",\n    \"category\": \"graph\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"data\",\n        \"type\": \"tensors\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"message\",\n        \"name\": \"message\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"first_n\",\n        \"name\": \"firstN\",\n        \"type\": \"number\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"summarize\",\n        \"name\": \"summarize\",\n        \"type\": \"number\",\n        \"defaultValue\": 3\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"NoOp\",\n    \"category\": \"graph\",\n    \"inputs\": []\n  },\n  {\n    \"tfOpName\": \"StopGradient\",\n    \"category\": \"graph\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"FakeQuantWithMinMaxVars\",\n    \"category\": \"graph\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"min\",\n        \"name\": \"min\",\n        \"type\": \"number\"\n      },\n      {\n        \"tfName\": \"max\",\n        \"name\": \"max\",\n        \"type\": \"number\"\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/hash_table.js\nvar hash_table_exports = {};\n__export(hash_table_exports, {\n  json: () => json9\n});\nvar json9 = [\n  {\n    \"tfOpName\": \"HashTable\",\n    \"category\": \"hash_table\",\n    \"inputs\": [],\n    \"attrs\": [\n      {\n        \"tfName\": \"shared_name\",\n        \"name\": \"sharedName\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"use_node_name_sharing\",\n        \"name\": \"useNodeNameSharing\",\n        \"type\": \"bool\"\n      },\n      {\n        \"tfName\": \"key_dtype\",\n        \"name\": \"keyDType\",\n        \"type\": \"dtype\"\n      },\n      {\n        \"tfName\": \"value_dtype\",\n        \"name\": \"valueDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"HashTableV2\",\n    \"category\": \"hash_table\",\n    \"inputs\": [],\n    \"attrs\": [\n      {\n        \"tfName\": \"shared_name\",\n        \"name\": \"sharedName\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"use_node_name_sharing\",\n        \"name\": \"useNodeNameSharing\",\n        \"type\": \"bool\"\n      },\n      {\n        \"tfName\": \"key_dtype\",\n        \"name\": \"keyDType\",\n        \"type\": \"dtype\"\n      },\n      {\n        \"tfName\": \"value_dtype\",\n        \"name\": \"valueDType\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LookupTableImport\",\n    \"category\": \"hash_table\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tableHandle\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"keys\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"values\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"Tin\",\n        \"name\": \"tIn\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"Tout\",\n        \"name\": \"tOut\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LookupTableImportV2\",\n    \"category\": \"hash_table\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tableHandle\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"keys\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"values\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"Tin\",\n        \"name\": \"tIn\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"Tout\",\n        \"name\": \"tOut\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LookupTableFind\",\n    \"category\": \"hash_table\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tableHandle\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"keys\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"defaultValue\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"Tin\",\n        \"name\": \"tIn\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"Tout\",\n        \"name\": \"tOut\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LookupTableFindV2\",\n    \"category\": \"hash_table\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tableHandle\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"keys\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"defaultValue\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"Tin\",\n        \"name\": \"tIn\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"Tout\",\n        \"name\": \"tOut\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LookupTableSize\",\n    \"category\": \"hash_table\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tableHandle\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LookupTableSizeV2\",\n    \"category\": \"hash_table\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tableHandle\",\n        \"type\": \"tensor\"\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js\nvar image_exports = {};\n__export(image_exports, {\n  json: () => json10\n});\nvar json10 = [\n  {\n    \"tfOpName\": \"ResizeBilinear\",\n    \"category\": \"image\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"images\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"size\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"align_corners\",\n        \"name\": \"alignCorners\",\n        \"type\": \"bool\"\n      },\n      {\n        \"tfName\": \"half_pixel_centers\",\n        \"name\": \"halfPixelCenters\",\n        \"type\": \"bool\"\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"ResizeNearestNeighbor\",\n    \"category\": \"image\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"images\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"size\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"align_corners\",\n        \"name\": \"alignCorners\",\n        \"type\": \"bool\"\n      },\n      {\n        \"tfName\": \"half_pixel_centers\",\n        \"name\": \"halfPixelCenters\",\n        \"type\": \"bool\"\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"CropAndResize\",\n    \"category\": \"image\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"image\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"boxes\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"boxInd\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"cropSize\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"method\",\n        \"name\": \"method\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"extrapolation_value\",\n        \"name\": \"extrapolationValue\",\n        \"type\": \"number\"\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js\nvar logical_exports = {};\n__export(logical_exports, {\n  json: () => json11\n});\nvar json11 = [\n  {\n    \"tfOpName\": \"Equal\",\n    \"category\": \"logical\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"NotEqual\",\n    \"category\": \"logical\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Greater\",\n    \"category\": \"logical\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"GreaterEqual\",\n    \"category\": \"logical\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Less\",\n    \"category\": \"logical\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LessEqual\",\n    \"category\": \"logical\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LogicalAnd\",\n    \"category\": \"logical\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LogicalNot\",\n    \"category\": \"logical\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LogicalOr\",\n    \"category\": \"logical\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Select\",\n    \"category\": \"logical\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"condition\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"SelectV2\",\n    \"category\": \"logical\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"condition\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js\nvar matrices_exports = {};\n__export(matrices_exports, {\n  json: () => json12\n});\nvar json12 = [\n  {\n    \"tfOpName\": \"_FusedMatMul\",\n    \"category\": \"matrices\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"end\": 0,\n        \"name\": \"args\",\n        \"type\": \"tensors\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"num_args\",\n        \"name\": \"numArgs\",\n        \"type\": \"number\"\n      },\n      {\n        \"tfName\": \"fused_ops\",\n        \"name\": \"fusedOps\",\n        \"type\": \"string[]\",\n        \"defaultValue\": []\n      },\n      {\n        \"tfName\": \"epsilon\",\n        \"name\": \"epsilon\",\n        \"type\": \"number\",\n        \"defaultValue\": 1e-4\n      },\n      {\n        \"tfName\": \"transpose_a\",\n        \"name\": \"transposeA\",\n        \"type\": \"bool\",\n        \"defaultValue\": false\n      },\n      {\n        \"tfName\": \"transpose_b\",\n        \"name\": \"transposeB\",\n        \"type\": \"bool\",\n        \"defaultValue\": false\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"MatMul\",\n    \"category\": \"matrices\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"transpose_a\",\n        \"name\": \"transposeA\",\n        \"type\": \"bool\",\n        \"defaultValue\": false\n      },\n      {\n        \"tfName\": \"transpose_b\",\n        \"name\": \"transposeB\",\n        \"type\": \"bool\",\n        \"defaultValue\": false\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"BatchMatMul\",\n    \"category\": \"matrices\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"adj_x\",\n        \"name\": \"transposeA\",\n        \"type\": \"bool\",\n        \"defaultValue\": false\n      },\n      {\n        \"tfName\": \"adj_y\",\n        \"name\": \"transposeB\",\n        \"type\": \"bool\",\n        \"defaultValue\": false\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"BatchMatMulV2\",\n    \"category\": \"matrices\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"a\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"b\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"adj_x\",\n        \"name\": \"transposeA\",\n        \"type\": \"bool\",\n        \"defaultValue\": false\n      },\n      {\n        \"tfName\": \"adj_y\",\n        \"name\": \"transposeB\",\n        \"type\": \"bool\",\n        \"defaultValue\": false\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Transpose\",\n    \"category\": \"matrices\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"perm\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Einsum\",\n    \"category\": \"matrices\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"end\": 0,\n        \"name\": \"tensors\",\n        \"type\": \"tensors\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"equation\",\n        \"name\": \"equation\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"N\",\n        \"name\": \"n\",\n        \"type\": \"number\",\n        \"defaultValue\": 2\n      },\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js\nvar normalization_exports = {};\n__export(normalization_exports, {\n  json: () => json13\n});\nvar json13 = [\n  {\n    \"tfOpName\": \"FusedBatchNorm\",\n    \"category\": \"normalization\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"scale\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"offset\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"mean\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 4,\n        \"name\": \"variance\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"epsilon\",\n        \"name\": \"epsilon\",\n        \"type\": \"number\",\n        \"defaultValue\": 1e-3\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"FusedBatchNormV2\",\n    \"category\": \"normalization\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"scale\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"offset\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"mean\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 4,\n        \"name\": \"variance\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"epsilon\",\n        \"name\": \"epsilon\",\n        \"type\": \"number\",\n        \"defaultValue\": 1e-3\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"FusedBatchNormV3\",\n    \"category\": \"normalization\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"scale\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"offset\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"mean\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 4,\n        \"name\": \"variance\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"epsilon\",\n        \"name\": \"epsilon\",\n        \"type\": \"number\",\n        \"defaultValue\": 1e-3\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LRN\",\n    \"category\": \"normalization\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"depth_radius\",\n        \"name\": \"radius\",\n        \"type\": \"number\",\n        \"defaultValue\": 5\n      },\n      {\n        \"tfName\": \"bias\",\n        \"name\": \"bias\",\n        \"type\": \"number\",\n        \"defaultValue\": 1\n      },\n      {\n        \"tfName\": \"alpha\",\n        \"name\": \"alpha\",\n        \"type\": \"number\",\n        \"defaultValue\": 1\n      },\n      {\n        \"tfName\": \"beta\",\n        \"name\": \"beta\",\n        \"type\": \"number\",\n        \"defaultValue\": 0.5\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Softmax\",\n    \"category\": \"normalization\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"LogSoftmax\",\n    \"category\": \"normalization\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"SparseToDense\",\n    \"category\": \"normalization\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"sparseIndices\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"outputShape\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"sparseValues\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"defaultValue\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"validate_indices\",\n        \"name\": \"validateIndices\",\n        \"type\": \"bool\",\n        \"defaultValue\": true,\n        \"notSupported\": true\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js\nvar reduction_exports = {};\n__export(reduction_exports, {\n  json: () => json14\n});\nvar json14 = [\n  {\n    \"tfOpName\": \"Bincount\",\n    \"category\": \"reduction\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"size\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"weights\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"DenseBincount\",\n    \"category\": \"reduction\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"size\",\n        \"type\": \"number\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"weights\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"binary_output\",\n        \"name\": \"binaryOutput\",\n        \"type\": \"bool\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Max\",\n    \"category\": \"reduction\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"keep_dims\",\n        \"name\": \"keepDims\",\n        \"type\": \"bool\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Mean\",\n    \"category\": \"reduction\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"keep_dims\",\n        \"name\": \"keepDims\",\n        \"type\": \"bool\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Min\",\n    \"category\": \"reduction\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"keep_dims\",\n        \"name\": \"keepDims\",\n        \"type\": \"bool\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Sum\",\n    \"category\": \"reduction\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"keep_dims\",\n        \"name\": \"keepDims\",\n        \"type\": \"bool\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"All\",\n    \"category\": \"reduction\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"keep_dims\",\n        \"name\": \"keepDims\",\n        \"type\": \"bool\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Any\",\n    \"category\": \"reduction\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"keep_dims\",\n        \"name\": \"keepDims\",\n        \"type\": \"bool\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"ArgMax\",\n    \"category\": \"reduction\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"ArgMin\",\n    \"category\": \"reduction\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Prod\",\n    \"category\": \"reduction\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"keep_dims\",\n        \"name\": \"keepDims\",\n        \"type\": \"bool\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Cumsum\",\n    \"category\": \"reduction\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"exclusive\",\n        \"name\": \"exclusive\",\n        \"type\": \"bool\"\n      },\n      {\n        \"tfName\": \"reverse\",\n        \"name\": \"reverse\",\n        \"type\": \"bool\"\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js\nvar slice_join_exports = {};\n__export(slice_join_exports, {\n  json: () => json15\n});\nvar json15 = [\n  {\n    \"tfOpName\": \"ConcatV2\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"end\": -1,\n        \"name\": \"tensors\",\n        \"type\": \"tensors\"\n      },\n      {\n        \"start\": -1,\n        \"name\": \"axis\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"N\",\n        \"name\": \"n\",\n        \"type\": \"number\",\n        \"defaultValue\": 2\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Concat\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 1,\n        \"end\": 0,\n        \"name\": \"tensors\",\n        \"type\": \"tensors\"\n      },\n      {\n        \"start\": 0,\n        \"name\": \"axis\",\n        \"type\": \"number\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"N\",\n        \"name\": \"n\",\n        \"type\": \"number\",\n        \"defaultValue\": 2\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"GatherV2\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"indices\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"axis\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"batch_dims\",\n        \"name\": \"batchDims\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Gather\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"indices\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"validate_indices\",\n        \"name\": \"validateIndices\",\n        \"type\": \"bool\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Reverse\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"dims\",\n        \"type\": \"bool[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"ReverseV2\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Slice\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"begin\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"size\",\n        \"type\": \"number[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"StridedSlice\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"begin\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"end\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"strides\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"begin_mask\",\n        \"name\": \"beginMask\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      },\n      {\n        \"tfName\": \"end_mask\",\n        \"name\": \"endMask\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      },\n      {\n        \"tfName\": \"new_axis_mask\",\n        \"name\": \"newAxisMask\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      },\n      {\n        \"tfName\": \"ellipsis_mask\",\n        \"name\": \"ellipsisMask\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      },\n      {\n        \"tfName\": \"shrink_axis_mask\",\n        \"name\": \"shrinkAxisMask\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Pack\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"end\": 0,\n        \"name\": \"tensors\",\n        \"type\": \"tensors\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"axis\",\n        \"name\": \"axis\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Unpack\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"tensor\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"axis\",\n        \"name\": \"axis\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      },\n      {\n        \"tfName\": \"num\",\n        \"name\": \"num\",\n        \"type\": \"number\",\n        \"defaultValue\": 0,\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Tile\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"reps\",\n        \"type\": \"number[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Split\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"axis\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      },\n      {\n        \"start\": 1,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"num_split\",\n        \"name\": \"numOrSizeSplits\",\n        \"type\": \"number\",\n        \"defaultValue\": 1\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"SplitV\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"numOrSizeSplits\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"axis\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"ScatterNd\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"indices\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"values\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"shape\",\n        \"type\": \"number[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"GatherNd\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"indices\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"SparseToDense\",\n    \"category\": \"slice_join\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"sparseIndices\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"outputShape\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"sparseValues\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"defaultValue\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"validate_indices\",\n        \"name\": \"validateIndices\",\n        \"type\": \"bool\",\n        \"defaultValue\": false,\n        \"notSupported\": true\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/sparse.js\nvar sparse_exports = {};\n__export(sparse_exports, {\n  json: () => json16\n});\nvar json16 = [\n  {\n    \"tfOpName\": \"SparseFillEmptyRows\",\n    \"category\": \"sparse\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"indices\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"values\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"denseShape\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 3,\n        \"name\": \"defaultValue\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"SparseReshape\",\n    \"category\": \"sparse\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"inputIndices\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"inputShape\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"newShape\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"T\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"SparseSegmentMean\",\n    \"category\": \"sparse\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"data\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"indices\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"segmentIds\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"SparseSegmentSum\",\n    \"category\": \"sparse\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"data\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"indices\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"segmentIds\",\n        \"type\": \"tensor\"\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js\nvar spectral_exports = {};\n__export(spectral_exports, {\n  json: () => json17\n});\nvar json17 = [\n  {\n    \"tfOpName\": \"FFT\",\n    \"category\": \"spectral\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"IFFT\",\n    \"category\": \"spectral\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"RFFT\",\n    \"category\": \"spectral\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"fft_length\",\n        \"type\": \"number\",\n        \"notSupported\": true\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"IRFFT\",\n    \"category\": \"spectral\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"fft_length\",\n        \"type\": \"number\",\n        \"notSupported\": true\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/string.js\nvar string_exports = {};\n__export(string_exports, {\n  json: () => json18\n});\nvar json18 = [\n  {\n    \"tfOpName\": \"StringNGrams\",\n    \"category\": \"string\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"data\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"dataSplits\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"separator\",\n        \"name\": \"separator\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"ngram_widths\",\n        \"name\": \"nGramWidths\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"tfName\": \"left_pad\",\n        \"name\": \"leftPad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"right_pad\",\n        \"name\": \"rightPad\",\n        \"type\": \"string\"\n      },\n      {\n        \"tfName\": \"pad_width\",\n        \"name\": \"padWidth\",\n        \"type\": \"number\"\n      },\n      {\n        \"tfName\": \"preserve_short_sequences\",\n        \"name\": \"preserveShortSequences\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"outputs\": [\n      \"ngrams\",\n      \"ngrams_splits\"\n    ]\n  },\n  {\n    \"tfOpName\": \"StringSplit\",\n    \"category\": \"string\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"input\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"delimiter\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"skip_empty\",\n        \"name\": \"skipEmpty\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"outputs\": [\n      \"indices\",\n      \"values\",\n      \"shape\"\n    ]\n  },\n  {\n    \"tfOpName\": \"StringToHashBucketFast\",\n    \"category\": \"string\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"input\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"num_buckets\",\n        \"name\": \"numBuckets\",\n        \"type\": \"number\"\n      }\n    ]\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js\nvar transformation_exports = {};\n__export(transformation_exports, {\n  json: () => json19\n});\nvar json19 = [\n  {\n    \"tfOpName\": \"Cast\",\n    \"category\": \"transformation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"SrcT\",\n        \"name\": \"sdtype\",\n        \"type\": \"dtype\",\n        \"notSupported\": true\n      },\n      {\n        \"tfName\": \"DstT\",\n        \"name\": \"dtype\",\n        \"type\": \"dtype\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"ExpandDims\",\n    \"category\": \"transformation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"axis\",\n        \"type\": \"number\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"MirrorPad\",\n    \"category\": \"transformation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"padding\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"mode\",\n        \"name\": \"mode\",\n        \"type\": \"string\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Pad\",\n    \"category\": \"transformation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"padding\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"constant_value\",\n        \"name\": \"constantValue\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"PadV2\",\n    \"category\": \"transformation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"padding\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"constantValue\",\n        \"type\": \"number\",\n        \"defaultValue\": 0\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Reshape\",\n    \"category\": \"transformation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"shape\",\n        \"type\": \"number[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"Squeeze\",\n    \"category\": \"transformation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"axis\",\n        \"tfDeprecatedName\": \"squeeze_dims\",\n        \"name\": \"axis\",\n        \"type\": \"number[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"SpaceToBatchND\",\n    \"category\": \"transformation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"blockShape\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"paddings\",\n        \"type\": \"number[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"BatchToSpaceND\",\n    \"category\": \"transformation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"blockShape\",\n        \"type\": \"number[]\"\n      },\n      {\n        \"start\": 2,\n        \"name\": \"crops\",\n        \"type\": \"number[]\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"DepthToSpace\",\n    \"category\": \"transformation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": [\n      {\n        \"tfName\": \"block_size\",\n        \"name\": \"blockSize\",\n        \"type\": \"number\"\n      },\n      {\n        \"tfName\": \"data_format\",\n        \"name\": \"dataFormat\",\n        \"type\": \"string\"\n      }\n    ]\n  },\n  {\n    \"tfOpName\": \"BroadcastTo\",\n    \"category\": \"transformation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"x\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"shape\",\n        \"type\": \"number[]\"\n      }\n    ],\n    \"attrs\": []\n  },\n  {\n    \"tfOpName\": \"BroadcastArgs\",\n    \"category\": \"transformation\",\n    \"inputs\": [\n      {\n        \"start\": 0,\n        \"name\": \"s0\",\n        \"type\": \"tensor\"\n      },\n      {\n        \"start\": 1,\n        \"name\": \"s1\",\n        \"type\": \"tensor\"\n      }\n    ],\n    \"attrs\": []\n  }\n];\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js\nvar OperationMapper = class {\n  static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n  constructor() {\n    const ops = [\n      arithmetic_exports,\n      basic_math_exports,\n      control_exports,\n      convolution_exports,\n      creation_exports,\n      dynamic_exports,\n      evaluation_exports,\n      graph_exports,\n      hash_table_exports,\n      image_exports,\n      logical_exports,\n      matrices_exports,\n      normalization_exports,\n      reduction_exports,\n      slice_join_exports,\n      sparse_exports,\n      spectral_exports,\n      string_exports,\n      transformation_exports\n    ];\n    const mappersJson = [].concat(...ops.map((op2) => op2.json));\n    this.opMappers = mappersJson.reduce((map, mapper) => {\n      map[mapper.tfOpName] = mapper;\n      return map;\n    }, {});\n  }\n  transformGraph(graph, signature = {}) {\n    const tfNodes = graph.node;\n    const placeholders = [];\n    const weights = [];\n    const initNodes = [];\n    const nodes = tfNodes.reduce((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith(\"Placeholder\")) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === \"Const\") {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n    let inputs = [];\n    const outputs = [];\n    let inputNodeNameToKey = {};\n    let outputNodeNameToKey = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach((key) => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName, , outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach((key) => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach((name) => {\n        const [nodeName] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach((name) => {\n        const [nodeName] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions2, func2) => {\n        functions2[func2.signature.name] = this.mapFunction(func2);\n        return functions2;\n      }, {});\n    }\n    const result = { nodes, inputs, outputs, weights, placeholders, signature, functions };\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n    return result;\n  }\n  mapSignatureEntries(entries) {\n    return Object.keys(entries || {}).reduce((prev, curr) => {\n      prev[entries[curr].name] = curr;\n      return prev;\n    }, {});\n  }\n  mapNode(node) {\n    const mapper = getRegisteredOp(node.op) || this.opMappers[node.op] || {};\n    if (node.attr == null) {\n      node.attr = {};\n    }\n    const newNode = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames: (node.input || []).map((input2) => input2.startsWith(\"^\") ? input2.substr(1) : input2),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr,\n      outputs: mapper.outputs\n    };\n    if (mapper.inputs != null) {\n      newNode.inputParams = mapper.inputs.reduce((map, param) => {\n        map[param.name] = {\n          type: param.type,\n          inputIndexStart: param.start,\n          inputIndexEnd: param.end\n        };\n        return map;\n      }, {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams = mapper.attrs.reduce((map, param) => {\n        const type = param.type;\n        let value = void 0;\n        switch (param.type) {\n          case \"string\":\n            value = getStringParam(node.attr, param.tfName, param.defaultValue);\n            if (value === void 0 && !!param.tfDeprecatedName) {\n              value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case \"string[]\":\n            value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === void 0 && !!param.tfDeprecatedName) {\n              value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case \"number\":\n            value = getNumberParam(node.attr, param.tfName, param.defaultValue || 0);\n            if (value === void 0 && !!param.tfDeprecatedName) {\n              value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case \"number[]\":\n            value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === void 0 && !!param.tfDeprecatedName) {\n              value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case \"bool\":\n            value = getBoolParam(node.attr, param.tfName, param.defaultValue);\n            if (value === void 0 && !!param.tfDeprecatedName) {\n              value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case \"bool[]\":\n            value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === void 0 && !!param.tfDeprecatedName) {\n              value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case \"shape\":\n            value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);\n            if (value === void 0 && !!param.tfDeprecatedName) {\n              value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case \"shape[]\":\n            value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === void 0 && !!param.tfDeprecatedName) {\n              value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case \"dtype\":\n            value = getDtypeParam(node.attr, param.tfName, param.defaultValue);\n            if (value === void 0 && !!param.tfDeprecatedName) {\n              value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case \"dtype[]\":\n            value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === void 0 && !!param.tfDeprecatedName) {\n              value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case \"func\":\n            value = getFuncParam(node.attr, param.tfName, param.defaultValue);\n            if (value === void 0 && !!param.tfDeprecatedName) {\n              value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case \"tensor\":\n          case \"tensors\":\n            break;\n          default:\n            throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);\n        }\n        map[param.name] = { value, type };\n        return map;\n      }, {});\n    }\n    return newNode;\n  }\n  mapFunction(functionDef) {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders = [];\n    const weights = [];\n    let nodes = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === \"Const\") {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs = [];\n    const outputs = [];\n    functionDef.signature.inputArg.forEach((arg) => {\n      const [nodeName] = getNodeNameAndIndex(arg.name);\n      const node = {\n        name: nodeName,\n        op: \"Placeholder\",\n        inputs: [],\n        inputNames: [],\n        category: \"graph\",\n        inputParams: {},\n        attrParams: { dtype: { value: parseDtypeParam(arg.type), type: \"dtype\" } },\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach((key) => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName, , outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n    const returnNodeMap = functionDef.ret;\n    functionDef.signature.outputArg.forEach((output) => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n    const signature = this.mapArgsToSignature(functionDef);\n    return { nodes, inputs, outputs, weights, placeholders, signature };\n  }\n  mapArgsToSignature(functionDef) {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce((map, arg) => {\n        map[arg.name] = this.mapArgToTensorInfo(arg);\n        return map;\n      }, {}),\n      outputs: functionDef.signature.outputArg.reduce((map, arg) => {\n        map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n        return map;\n      }, {})\n    };\n  }\n  mapArgToTensorInfo(arg, nameMap2) {\n    let name = arg.name;\n    if (nameMap2 != null) {\n      name = nameMap2[name];\n    }\n    return { name, dtype: arg.type };\n  }\n};\nfunction decodeBase64(text) {\n  const global2 = env().global;\n  if (typeof global2.atob !== \"undefined\") {\n    return global2.atob(text);\n  } else if (typeof Buffer !== \"undefined\") {\n    return new Buffer(text, \"base64\").toString();\n  } else {\n    throw new Error(\"Unable to decode base64 in this environment. Missing built-in atob() or Buffer()\");\n  }\n}\nfunction parseStringParam(s, keepCase) {\n  const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\nfunction getStringParam(attrs, name, def, keepCase = false) {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\nfunction getBoolParam(attrs, name, def) {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\nfunction getNumberParam(attrs, name, def) {\n  const param = attrs[name] || {};\n  const value = param[\"i\"] != null ? param[\"i\"] : param[\"f\"] != null ? param[\"f\"] : def;\n  return typeof value === \"number\" ? value : parseInt(value, 10);\n}\nfunction parseDtypeParam(value) {\n  if (typeof value === \"string\") {\n    value = DataType[value];\n  }\n  switch (value) {\n    case DataType.DT_FLOAT:\n    case DataType.DT_HALF:\n      return \"float32\";\n    case DataType.DT_INT32:\n    case DataType.DT_INT64:\n    case DataType.DT_INT8:\n    case DataType.DT_UINT8:\n      return \"int32\";\n    case DataType.DT_BOOL:\n      return \"bool\";\n    case DataType.DT_DOUBLE:\n      return \"float32\";\n    case DataType.DT_STRING:\n      return \"string\";\n    default:\n      return null;\n  }\n}\nfunction getFuncParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\nfunction getDtypeParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\nfunction getDtypeArrayParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map((v) => parseDtypeParam(v));\n  }\n  return def;\n}\nfunction parseTensorShapeParam(shape) {\n  if (shape.unknownRank) {\n    return void 0;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map((dim) => typeof dim.size === \"number\" ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\nfunction getTensorShapeParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\nfunction getNumericArrayParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f : param.list.i) || []).map((v) => typeof v === \"number\" ? v : parseInt(v, 10));\n  }\n  return def;\n}\nfunction getStringArrayParam(attrs, name, def, keepCase = false) {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\nfunction getTensorShapeArrayParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\nfunction getBoolArrayParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js\nvar NodeValueImpl = class {\n  constructor(node, tensorMap, context) {\n    this.node = node;\n    this.tensorMap = tensorMap;\n    this.context = context;\n    this.inputs = [];\n    this.attrs = {};\n    this.inputs = node.inputNames.map((name) => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs).reduce((attrs, key) => {\n        attrs[key] = this.getAttr(key);\n        return attrs;\n      }, {});\n    }\n  }\n  getInput(name) {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n  getAttr(name, defaultValue) {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n    }\n    return defaultValue;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js\nvar executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"BiasAdd\":\n    case \"AddV2\":\n    case \"Add\": {\n      return [add2(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"AddN\": {\n      return [addN(getParamValue(\"tensors\", node, tensorMap, context))];\n    }\n    case \"FloorMod\":\n    case \"Mod\":\n      return [mod(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    case \"Mul\":\n      return [mul(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    case \"RealDiv\":\n    case \"Div\": {\n      return [div(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"DivNoNan\": {\n      return [divNoNan(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"FloorDiv\": {\n      return [floorDiv(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"Sub\": {\n      return [sub(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"Minimum\": {\n      return [minimum(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"Maximum\": {\n      return [maximum(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"Pow\": {\n      return [pow(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"SquaredDifference\": {\n      return [squaredDifference(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js\nvar executeOp2 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"Abs\":\n    case \"ComplexAbs\":\n      return [abs(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Acos\":\n      return [acos(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Acosh\":\n      return [acosh(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Asin\":\n      return [asin(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Asinh\":\n      return [asinh(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Atan\":\n      return [atan(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Atan2\":\n      return [atan2(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"y\", node, tensorMap, context))];\n    case \"Atanh\":\n      return [atanh(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Ceil\":\n      return [ceil(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Complex\":\n      return [complex(getParamValue(\"real\", node, tensorMap, context), getParamValue(\"imag\", node, tensorMap, context))];\n    case \"Cos\":\n      return [cos(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Cosh\":\n      return [cosh(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Elu\":\n      return [elu(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Erf\":\n      return [erf(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Exp\":\n      return [exp(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Expm1\": {\n      return [expm1(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"Floor\":\n      return [floor(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Log\":\n      return [log2(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Log1p\": {\n      return [log1p(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"Imag\":\n      return [imag(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Neg\":\n      return [neg(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Reciprocal\": {\n      return [reciprocal(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"Real\":\n      return [real(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Relu\":\n      return [relu(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Round\": {\n      return [round2(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"Selu\":\n      return [selu(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Sigmoid\":\n      return [sigmoid(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Sin\":\n      return [sin(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Sign\": {\n      return [sign(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"Sinh\": {\n      return [sinh(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"Softplus\": {\n      return [softplus(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"Sqrt\": {\n      return [sqrt(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"Square\": {\n      return [square(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"Tanh\": {\n      return [tanh2(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"Tan\":\n      return [tan(getParamValue(\"x\", node, tensorMap, context))];\n    case \"ClipByValue\":\n      return [clipByValue(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"clipValueMin\", node, tensorMap, context), getParamValue(\"clipValueMax\", node, tensorMap, context))];\n    case \"Relu6\":\n      return [relu6(getParamValue(\"x\", node, tensorMap, context))];\n    case \"Rsqrt\":\n      return [rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case \"Prod\":\n      return [prod(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"axes\", node, tensorMap, context))];\n    case \"LeakyRelu\":\n      return [leakyRelu(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"alpha\", node, tensorMap, context))];\n    case \"Prelu\":\n      return [prelu(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"alpha\", node, tensorMap, context))];\n    case \"IsNan\":\n      return [isNaN2(getTensor(node.inputNames[0], tensorMap, context))];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js\nfunction assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = \"\") {\n  if (typeof shapeA === \"number\" || typeof shapeB === \"number\") {\n    return;\n  }\n  util_exports.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util_exports.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\nfunction fullDefinedShape(elementShape) {\n  if (typeof elementShape === \"number\" || elementShape.some((dim) => dim < 0)) {\n    return false;\n  }\n  return true;\n}\nfunction inferElementShape(listElementShape, tensors, elementShape) {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${partialShape}`);\n  }\n  if (notfullDefinedShape) {\n    tensors.forEach((tensor2) => {\n      partialShape = mergeElementShape(tensor2.shape, partialShape);\n    });\n  }\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n  return partialShape;\n}\nfunction mergeElementShape(elementShapeA, elementShapeB) {\n  if (typeof elementShapeA === \"number\") {\n    return elementShapeB;\n  }\n  if (typeof elementShapeB === \"number\") {\n    return elementShapeA;\n  }\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);\n  }\n  const result = [];\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);\n    }\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n  return result;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js\nvar TensorArray = class {\n  constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n    this.name = name;\n    this.dtype = dtype;\n    this.maxSize = maxSize;\n    this.elementShape = elementShape;\n    this.identicalElementShapes = identicalElementShapes;\n    this.dynamicSize = dynamicSize;\n    this.clearAfterRead = clearAfterRead;\n    this.tensors = [];\n    this.closed_ = false;\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n  get id() {\n    return this.idTensor.id;\n  }\n  get closed() {\n    return this.closed_;\n  }\n  clearAndClose(keepIds) {\n    this.tensors.forEach((tensor2) => {\n      if (keepIds == null || !keepIds.has(tensor2.tensor.id)) {\n        tensor2.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n  size() {\n    return this.tensors.length;\n  }\n  read(index) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);\n    }\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);\n    }\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n  readMany(indices) {\n    return indices.map((index) => this.read(index));\n  }\n  write(index, tensor2) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n    const t = this.tensors[index] || {};\n    if (tensor2.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${tensor2.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor2.shape;\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor2.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);\n    if (t.read) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);\n    }\n    if (t.written) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);\n    }\n    t.tensor = tensor2;\n    keep(tensor2);\n    t.written = true;\n    this.tensors[index] = t;\n  }\n  writeMany(indices, tensors) {\n    if (indices.length !== tensors.length) {\n      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);\n    }\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n  gather(indices, dtype) {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);\n    }\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n    const tensors = this.readMany(indices);\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, \"TensorArray shape mismatch: \");\n    return stack(tensors, 0);\n  }\n  concat(dtype) {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);\n    }\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    const tensors = this.readMany(indices);\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n    return concat(tensors, 0);\n  }\n  scatter(indices, tensor2) {\n    if (tensor2.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor2.dtype}`);\n    }\n    if (indices.length !== tensor2.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor2.shape[0]}`);\n    }\n    const maxIndex = Math.max(...indices);\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n    this.writeMany(indices, unstack(tensor2, 0));\n  }\n  split(length, tensor2) {\n    if (tensor2.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor2.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map((len) => {\n      totalLength += len;\n      return totalLength;\n    });\n    if (totalLength !== tensor2.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor2.shape}`);\n    }\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), and the TensorArray is not marked as dynamically resizeable`);\n    }\n    const elementPerRow = totalLength === 0 ? 0 : tensor2.size / totalLength;\n    const tensors = [];\n    tidy(() => {\n      tensor2 = reshape(tensor2, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n        const indices2 = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor2, indices2, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js\nvar TensorList = class {\n  constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {\n    this.tensors = tensors;\n    this.elementShape = elementShape;\n    this.elementDtype = elementDtype;\n    if (tensors != null) {\n      tensors.forEach((tensor2) => {\n        if (elementDtype !== tensor2.dtype) {\n          throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor2.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, tensor2.shape, \"TensorList shape mismatch: \");\n        keep(tensor2);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n  get id() {\n    return this.idTensor.id;\n  }\n  copy() {\n    return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n  }\n  clearAndClose(keepIds) {\n    this.tensors.forEach((tensor2) => {\n      if (keepIds == null || !keepIds.has(tensor2.id)) {\n        tensor2.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  size() {\n    return this.tensors.length;\n  }\n  stack(elementShape, elementDtype, numElements = -1) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, \"TensorList shape mismatch: \");\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors = this.tensors.map((tensor2) => reshape(tensor2, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n  popBack(elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (this.size() === 0) {\n      throw new Error(\"Trying to pop from an empty list.\");\n    }\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor2 = this.tensors.pop();\n    assertShapesMatchAllowUndefinedSize(tensor2.shape, elementShape, \"TensorList shape mismatch: \");\n    return reshape(tensor2, outputElementShape);\n  }\n  pushBack(tensor2) {\n    if (tensor2.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${tensor2.dtype}, but list elements ${this.elementDtype}`);\n    }\n    assertShapesMatchAllowUndefinedSize(tensor2.shape, this.elementShape, \"TensorList shape mismatch: \");\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor2);\n    this.tensors.push(tensor2);\n  }\n  resize(size) {\n    if (size < 0) {\n      throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n    this.tensors.length = size;\n  }\n  getItem(elementIndex, elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n    assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, \"TensorList shape mismatch: \");\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n  setItem(elementIndex, tensor2) {\n    if (tensor2.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${tensor2.dtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor2.shape, \"TensorList shape mismatch: \");\n    keep(tensor2);\n    this.tensors[elementIndex] = tensor2;\n  }\n  gather(indices, elementDtype, elementShape) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, \"TensorList shape mismatch: \");\n    indices = indices.slice(0, this.size());\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = indices.map((i) => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n  concat(elementDtype, elementShape) {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, \"TensorList shape mismatch: \");\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map((t) => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n};\nfunction fromTensor(tensor2, elementShape, elementDtype) {\n  const dtype = tensor2.dtype;\n  if (tensor2.shape.length < 1) {\n    throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor2.shape}`);\n  }\n  if (tensor2.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${tensor2.dtype}, but list elements ${elementDtype}`);\n  }\n  const tensorElementShape = tensor2.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, \"TensorList shape mismatch: \");\n  const tensorList = unstack(tensor2);\n  return new TensorList(tensorList, elementShape, dtype);\n}\nfunction reserve(elementShape, elementDtype, numElements) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\nfunction scatter(tensor2, indices, elementShape, numElements) {\n  if (indices.length !== tensor2.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor2.shape[0]}`);\n  }\n  const maxIndex = Math.max(...indices);\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n  const list = new TensorList([], elementShape, tensor2.dtype, numElements);\n  const tensors = unstack(tensor2, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\nfunction split2(tensor2, length, elementShape) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map((len) => {\n    totalLength += len;\n    return totalLength;\n  });\n  if (totalLength !== tensor2.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor2.shape}`);\n  }\n  const shapeWithoutFirstDim = tensor2.shape.slice(1);\n  const outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor2.size / totalLength;\n  const tensors = tidy(() => {\n    const tensors2 = [];\n    tensor2 = reshape(tensor2, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors2[i] = reshape(slice(tensor2, indices, sizes), outputElementShape);\n    }\n    tensor2.dispose();\n    return tensors2;\n  });\n  const list = new TensorList([], elementShape, tensor2.dtype, length.length);\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js\nvar executeOp3 = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"If\":\n    case \"StatelessIf\": {\n      const thenFunc = getParamValue(\"thenBranch\", node, tensorMap, context);\n      const elseFunc = getParamValue(\"elseBranch\", node, tensorMap, context);\n      const cond = getParamValue(\"cond\", node, tensorMap, context);\n      const args = getParamValue(\"args\", node, tensorMap, context);\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n      }\n    }\n    case \"While\":\n    case \"StatelessWhile\": {\n      const bodyFunc = getParamValue(\"body\", node, tensorMap, context);\n      const condFunc = getParamValue(\"cond\", node, tensorMap, context);\n      const args = getParamValue(\"args\", node, tensorMap, context);\n      const condResult = await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n      const argIds = args.map((tensor2) => tensor2.id);\n      let condValue = await condResult[0].data();\n      condResult.forEach((tensor2) => {\n        if (!tensor2.kept && argIds.indexOf(tensor2.id) === -1) {\n          tensor2.dispose();\n        }\n      });\n      let result = args;\n      while (condValue[0]) {\n        const origResult = result;\n        result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n        const resultIds = result.map((tensor2) => tensor2.id);\n        origResult.forEach((tensor2) => {\n          if (!tensor2.kept && argIds.indexOf(tensor2.id) === -1 && resultIds.indexOf(tensor2.id) === -1) {\n            tensor2.dispose();\n          }\n        });\n        const condResult2 = await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n        condValue = await condResult2[0].data();\n        condResult2.forEach((tensor2) => {\n          if (!tensor2.kept && argIds.indexOf(tensor2.id) === -1 && resultIds.indexOf(tensor2.id) === -1) {\n            tensor2.dispose();\n          }\n        });\n      }\n      return result;\n    }\n    case \"LoopCond\": {\n      const pred = getParamValue(\"pred\", node, tensorMap, context);\n      return [cloneTensor(pred)];\n    }\n    case \"Switch\": {\n      const pred = getParamValue(\"pred\", node, tensorMap, context);\n      let data = getParamValue(\"data\", node, tensorMap, context);\n      if (!data.kept) {\n        data = cloneTensor(data);\n      }\n      return (await pred.data())[0] ? [void 0, data] : [data, void 0];\n    }\n    case \"Merge\": {\n      const inputName = node.inputNames.find((name) => getTensor(name, tensorMap, context) !== void 0);\n      if (inputName) {\n        const data = getTensor(inputName, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n      return void 0;\n    }\n    case \"Enter\": {\n      const frameId = getParamValue(\"frameName\", node, tensorMap, context);\n      const data = getParamValue(\"tensor\", node, tensorMap, context);\n      context.enterFrame(frameId);\n      return [cloneTensor(data)];\n    }\n    case \"Exit\": {\n      const data = getParamValue(\"tensor\", node, tensorMap, context);\n      context.exitFrame();\n      return [cloneTensor(data)];\n    }\n    case \"NextIteration\": {\n      const data = getParamValue(\"tensor\", node, tensorMap, context);\n      context.nextIteration();\n      return [cloneTensor(data)];\n    }\n    case \"TensorArrayV3\": {\n      const size = getParamValue(\"size\", node, tensorMap, context);\n      const dtype = getParamValue(\"dtype\", node, tensorMap, context);\n      const elementShape = getParamValue(\"elementShape\", node, tensorMap, context);\n      const dynamicSize = getParamValue(\"dynamicSize\", node, tensorMap, context);\n      const clearAfterRead = getParamValue(\"clearAfterRead\", node, tensorMap, context);\n      const identicalElementShapes = getParamValue(\"identicalElementShapes\", node, tensorMap, context);\n      const name = getParamValue(\"name\", node, tensorMap, context);\n      const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [tensorArray.idTensor, scalar(1)];\n    }\n    case \"TensorArrayWriteV3\": {\n      const id = getParamValue(\"tensorArrayId\", node, tensorMap, context);\n      const index = getParamValue(\"index\", node, tensorMap, context);\n      const writeTensor = getParamValue(\"tensor\", node, tensorMap, context);\n      const writeTensorArray = context.getTensorArray(id.id);\n      writeTensorArray.write(index, writeTensor);\n      return [writeTensorArray.idTensor];\n    }\n    case \"TensorArrayReadV3\": {\n      const readId = getParamValue(\"tensorArrayId\", node, tensorMap, context);\n      const readIndex = getParamValue(\"index\", node, tensorMap, context);\n      const readTensorArray = context.getTensorArray(readId.id);\n      return [readTensorArray.read(readIndex)];\n    }\n    case \"TensorArrayGatherV3\": {\n      const gatherId = getParamValue(\"tensorArrayId\", node, tensorMap, context);\n      const gatherIndices = getParamValue(\"indices\", node, tensorMap, context);\n      const gatherDtype = getParamValue(\"dtype\", node, tensorMap, context);\n      const gatherTensorArray = context.getTensorArray(gatherId.id);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n    }\n    case \"TensorArrayScatterV3\": {\n      const scatterId = getParamValue(\"tensorArrayId\", node, tensorMap, context);\n      const scatterIndices = getParamValue(\"indices\", node, tensorMap, context);\n      const scatterTensor = getParamValue(\"tensor\", node, tensorMap, context);\n      const scatterTensorArray = context.getTensorArray(scatterId.id);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scatterTensorArray.idTensor];\n    }\n    case \"TensorArrayConcatV3\": {\n      const concatId = getParamValue(\"tensorArrayId\", node, tensorMap, context);\n      const concatTensorArray = context.getTensorArray(concatId.id);\n      const concatDtype = getParamValue(\"dtype\", node, tensorMap, context);\n      return [concatTensorArray.concat(concatDtype)];\n    }\n    case \"TensorArraySplitV3\": {\n      const splitId = getParamValue(\"tensorArrayId\", node, tensorMap, context);\n      const splitTensor = getParamValue(\"tensor\", node, tensorMap, context);\n      const lengths = getParamValue(\"lengths\", node, tensorMap, context);\n      const splitTensorArray = context.getTensorArray(splitId.id);\n      splitTensorArray.split(lengths, splitTensor);\n      return [splitTensorArray.idTensor];\n    }\n    case \"TensorArraySizeV3\": {\n      const sizeId = getParamValue(\"tensorArrayId\", node, tensorMap, context);\n      const sizeTensorArray = context.getTensorArray(sizeId.id);\n      return [scalar(sizeTensorArray.size(), \"int32\")];\n    }\n    case \"TensorArrayCloseV3\": {\n      const closeId = getParamValue(\"tensorArrayId\", node, tensorMap, context);\n      const closeTensorArray = context.getTensorArray(closeId.id);\n      closeTensorArray.clearAndClose();\n      return [closeTensorArray.idTensor];\n    }\n    case \"TensorListSetItem\": {\n      const idTensor = getParamValue(\"tensorListId\", node, tensorMap, context);\n      const index = getParamValue(\"index\", node, tensorMap, context);\n      const writeTensor = getParamValue(\"tensor\", node, tensorMap, context);\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.setItem(index, writeTensor);\n      return [tensorList.idTensor];\n    }\n    case \"TensorListGetItem\": {\n      const idTensor = getParamValue(\"tensorListId\", node, tensorMap, context);\n      const readIndex = getParamValue(\"index\", node, tensorMap, context);\n      const elementShape = getParamValue(\"elementShape\", node, tensorMap, context);\n      const elementDType = getParamValue(\"elementDType\", node, tensorMap, context);\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.getItem(readIndex, elementShape, elementDType)];\n    }\n    case \"TensorListScatterV2\":\n    case \"TensorListScatter\": {\n      const scatterIndices = getParamValue(\"indices\", node, tensorMap, context);\n      const scatterTensor = getParamValue(\"tensor\", node, tensorMap, context);\n      const elementShape = getParamValue(\"elementShape\", node, tensorMap, context);\n      const numElements = getParamValue(\"numElements\", node, tensorMap, context);\n      const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case \"TensorListReserve\":\n    case \"EmptyTensorList\": {\n      const elementShape = getParamValue(\"elementShape\", node, tensorMap, context);\n      const elementDtype = getParamValue(\"elementDType\", node, tensorMap, context);\n      let numElementsParam;\n      if (node.op === \"TensorListReserve\") {\n        numElementsParam = \"numElements\";\n      } else {\n        numElementsParam = \"maxNumElements\";\n      }\n      const numElements = getParamValue(numElementsParam, node, tensorMap, context);\n      const tensorList = reserve(elementShape, elementDtype, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case \"TensorListGather\": {\n      const gatherId = getParamValue(\"tensorListId\", node, tensorMap, context);\n      const gatherIndices = getParamValue(\"indices\", node, tensorMap, context);\n      const elementShape = getParamValue(\"elementShape\", node, tensorMap, context);\n      const elementDtype = getParamValue(\"elementDType\", node, tensorMap, context);\n      const tensorList = context.getTensorList(gatherId.id);\n      return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n    }\n    case \"TensorListStack\": {\n      const idTensor = getParamValue(\"tensorListId\", node, tensorMap, context);\n      const elementShape = getParamValue(\"elementShape\", node, tensorMap, context);\n      const elementDtype = getParamValue(\"elementDType\", node, tensorMap, context);\n      const numElements = getParamValue(\"numElements\", node, tensorMap, context);\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.stack(elementShape, elementDtype, numElements)];\n    }\n    case \"TensorListFromTensor\": {\n      const tensor2 = getParamValue(\"tensor\", node, tensorMap, context);\n      const elementShape = getParamValue(\"elementShape\", node, tensorMap, context);\n      const elementDtype = getParamValue(\"elementDType\", node, tensorMap, context);\n      const tensorList = fromTensor(tensor2, elementShape, elementDtype);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case \"TensorListConcat\": {\n      const concatId = getParamValue(\"tensorListId\", node, tensorMap, context);\n      const tensorList = context.getTensorList(concatId.id);\n      const concatDtype = getParamValue(\"dtype\", node, tensorMap, context);\n      const elementShape = getParamValue(\"elementShape\", node, tensorMap, context);\n      return [tensorList.concat(concatDtype, elementShape)];\n    }\n    case \"TensorListPushBack\": {\n      const idTensor = getParamValue(\"tensorListId\", node, tensorMap, context);\n      const writeTensor = getParamValue(\"tensor\", node, tensorMap, context);\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.pushBack(writeTensor);\n      return [tensorList.idTensor];\n    }\n    case \"TensorListPopBack\": {\n      const idTensor = getParamValue(\"tensorListId\", node, tensorMap, context);\n      const elementShape = getParamValue(\"elementShape\", node, tensorMap, context);\n      const elementDType = getParamValue(\"elementDType\", node, tensorMap, context);\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.popBack(elementShape, elementDType)];\n    }\n    case \"TensorListSplit\": {\n      const splitTensor = getParamValue(\"tensor\", node, tensorMap, context);\n      const elementShape = getParamValue(\"elementShape\", node, tensorMap, context);\n      const lengths = getParamValue(\"lengths\", node, tensorMap, context);\n      const tensorList = split2(splitTensor, lengths, elementShape);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js\nfunction fusedConvAndDepthWiseParams(node, tensorMap, context) {\n  const [extraOp, activationFunc] = getParamValue(\"fusedOps\", node, tensorMap, context);\n  const isBiasAdd = extraOp === \"biasadd\";\n  const noBiasAdd = !isBiasAdd;\n  const isPrelu = activationFunc === \"prelu\";\n  const isBatchNorm = extraOp === \"fusedbatchnorm\";\n  const numArgs = getParamValue(\"numArgs\", node, tensorMap, context);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");\n    }\n    if (!isPrelu && isBiasAdd && numArgs !== 1) {\n      throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.\");\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error(\"FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported\");\n  }\n  const stride = getParamValue(\"strides\", node, tensorMap, context);\n  const pad3 = getPadding(node, tensorMap, context);\n  const dataFormat = getParamValue(\"dataFormat\", node, tensorMap, context).toUpperCase();\n  const dilations = getParamValue(\"dilations\", node, tensorMap, context);\n  let [biasArg, preluArg] = getParamValue(\"args\", node, tensorMap, context);\n  if (noBiasAdd) {\n    preluArg = biasArg;\n    biasArg = void 0;\n  }\n  const leakyreluAlpha = getParamValue(\"leakyreluAlpha\", node, tensorMap, context);\n  return {\n    stride,\n    pad: pad3,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc,\n    leakyreluAlpha\n  };\n}\nvar executeOp4 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"Conv1D\": {\n      const stride = getParamValue(\"stride\", node, tensorMap, context);\n      const pad3 = getParamValue(\"pad\", node, tensorMap, context);\n      const dataFormat = getParamValue(\"dataFormat\", node, tensorMap, context).toUpperCase();\n      const dilation = getParamValue(\"dilation\", node, tensorMap, context);\n      return [conv1d(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"filter\", node, tensorMap, context), stride, pad3, dataFormat, dilation)];\n    }\n    case \"Conv2D\": {\n      const stride = getParamValue(\"strides\", node, tensorMap, context);\n      const pad3 = getPadding(node, tensorMap, context);\n      const dataFormat = getParamValue(\"dataFormat\", node, tensorMap, context).toUpperCase();\n      const dilations = getParamValue(\"dilations\", node, tensorMap, context);\n      return [conv2d(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"filter\", node, tensorMap, context), [stride[1], stride[2]], pad3, dataFormat, [dilations[1], dilations[2]])];\n    }\n    case \"_FusedConv2D\": {\n      const { stride, pad: pad3, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n      return [fused_ops_exports.conv2d({\n        x: getParamValue(\"x\", node, tensorMap, context),\n        filter: getParamValue(\"filter\", node, tensorMap, context),\n        strides: [stride[1], stride[2]],\n        pad: pad3,\n        dataFormat,\n        dilations: [dilations[1], dilations[2]],\n        bias: biasArg,\n        activation: activationFunc,\n        preluActivationWeights: preluArg,\n        leakyreluAlpha\n      })];\n    }\n    case \"FusedDepthwiseConv2dNative\": {\n      const { stride, pad: pad3, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n      return [fused_ops_exports.depthwiseConv2d({\n        x: getParamValue(\"x\", node, tensorMap, context),\n        filter: getParamValue(\"filter\", node, tensorMap, context),\n        strides: [stride[1], stride[2]],\n        pad: pad3,\n        dataFormat,\n        dilations: [dilations[1], dilations[2]],\n        bias: biasArg,\n        activation: activationFunc,\n        preluActivationWeights: preluArg,\n        leakyreluAlpha\n      })];\n    }\n    case \"Conv2DBackpropInput\":\n    case \"Conv2dTranspose\": {\n      const shape = getParamValue(\"outputShape\", node, tensorMap, context);\n      const stride = getParamValue(\"strides\", node, tensorMap, context);\n      const pad3 = getPadding(node, tensorMap, context);\n      return [conv2dTranspose(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"filter\", node, tensorMap, context), shape, [stride[1], stride[2]], pad3)];\n    }\n    case \"DepthwiseConv2dNative\":\n    case \"DepthwiseConv2d\": {\n      const stride = getParamValue(\"strides\", node, tensorMap, context);\n      const pad3 = getPadding(node, tensorMap, context);\n      const dilations = getParamValue(\"dilations\", node, tensorMap, context);\n      const dataFormat = getParamValue(\"dataFormat\", node, tensorMap, context).toUpperCase();\n      return [depthwiseConv2d(getParamValue(\"input\", node, tensorMap, context), getParamValue(\"filter\", node, tensorMap, context), [stride[1], stride[2]], pad3, dataFormat, [dilations[1], dilations[2]])];\n    }\n    case \"Conv3D\": {\n      const stride = getParamValue(\"strides\", node, tensorMap, context);\n      const pad3 = getParamValue(\"pad\", node, tensorMap, context);\n      const dataFormat = getParamValue(\"dataFormat\", node, tensorMap, context).toUpperCase();\n      const dilations = getParamValue(\"dilations\", node, tensorMap, context);\n      return [conv3d(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"filter\", node, tensorMap, context), [stride[1], stride[2], stride[3]], pad3, dataFormat, [dilations[1], dilations[2], dilations[3]])];\n    }\n    case \"AvgPool\": {\n      const stride = getParamValue(\"strides\", node, tensorMap, context);\n      const pad3 = getParamValue(\"pad\", node, tensorMap, context);\n      const kernelSize = getParamValue(\"kernelSize\", node, tensorMap, context);\n      return [avgPool(getParamValue(\"x\", node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad3)];\n    }\n    case \"MaxPool\": {\n      const stride = getParamValue(\"strides\", node, tensorMap, context);\n      const pad3 = getParamValue(\"pad\", node, tensorMap, context);\n      const kernelSize = getParamValue(\"kernelSize\", node, tensorMap, context);\n      return [maxPool(getParamValue(\"x\", node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad3)];\n    }\n    case \"MaxPoolWithArgmax\": {\n      const stride = getParamValue(\"strides\", node, tensorMap, context);\n      const pad3 = getParamValue(\"pad\", node, tensorMap, context);\n      const kernelSize = getParamValue(\"kernelSize\", node, tensorMap, context);\n      const includeBatchInIndex = getParamValue(\"includeBatchInIndex\", node, tensorMap, context);\n      const { result, indexes } = maxPoolWithArgmax(getParamValue(\"x\", node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad3, includeBatchInIndex);\n      return [result, indexes];\n    }\n    case \"AvgPool3D\": {\n      const stride = getParamValue(\"strides\", node, tensorMap, context);\n      const pad3 = getParamValue(\"pad\", node, tensorMap, context);\n      const kernelSize = getParamValue(\"kernelSize\", node, tensorMap, context);\n      return [avgPool3d(getParamValue(\"x\", node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad3)];\n    }\n    case \"MaxPool3D\": {\n      const stride = getParamValue(\"strides\", node, tensorMap, context);\n      const pad3 = getParamValue(\"pad\", node, tensorMap, context);\n      const kernelSize = getParamValue(\"kernelSize\", node, tensorMap, context);\n      return [maxPool3d(getParamValue(\"x\", node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad3)];\n    }\n    case \"Dilation2D\": {\n      const strides = getParamValue(\"strides\", node, tensorMap, context);\n      const pad3 = getParamValue(\"pad\", node, tensorMap, context);\n      const dilations = getParamValue(\"dilations\", node, tensorMap, context);\n      const strideHeight = strides[1];\n      const strideWidth = strides[2];\n      const dilationHeight = dilations[1];\n      const dilationWidth = dilations[2];\n      return [dilation2d(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"filter\", node, tensorMap, context), [strideHeight, strideWidth], pad3, [dilationHeight, dilationWidth], \"NHWC\")];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js\nvar executeOp5 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"Fill\": {\n      const shape = getParamValue(\"shape\", node, tensorMap, context);\n      const dtype = getParamValue(\"dtype\", node, tensorMap, context);\n      const value = getParamValue(\"value\", node, tensorMap, context);\n      return [fill(shape, value, dtype)];\n    }\n    case \"LinSpace\": {\n      const start = getParamValue(\"start\", node, tensorMap, context);\n      const stop = getParamValue(\"stop\", node, tensorMap, context);\n      const num = getParamValue(\"num\", node, tensorMap, context);\n      return [linspace(start, stop, num)];\n    }\n    case \"Multinomial\": {\n      const logits = getParamValue(\"logits\", node, tensorMap, context);\n      const numSamples = getParamValue(\"numSamples\", node, tensorMap, context);\n      const seed = getParamValue(\"seed\", node, tensorMap, context);\n      return [multinomial(logits, numSamples, seed)];\n    }\n    case \"OneHot\": {\n      const indices = getParamValue(\"indices\", node, tensorMap, context);\n      const depth = getParamValue(\"depth\", node, tensorMap, context);\n      const onValue = getParamValue(\"onValue\", node, tensorMap, context);\n      const offValue = getParamValue(\"offValue\", node, tensorMap, context);\n      return [oneHot(indices, depth, onValue, offValue)];\n    }\n    case \"Ones\": {\n      return [ones2(getParamValue(\"shape\", node, tensorMap, context), getParamValue(\"dtype\", node, tensorMap, context))];\n    }\n    case \"OnesLike\": {\n      return [onesLike(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"RandomUniform\": {\n      return [randomUniform(getParamValue(\"shape\", node, tensorMap, context), getParamValue(\"minval\", node, tensorMap, context), getParamValue(\"maxval\", node, tensorMap, context), getParamValue(\"dtype\", node, tensorMap, context))];\n    }\n    case \"Range\": {\n      const start = getParamValue(\"start\", node, tensorMap, context);\n      const stop = getParamValue(\"stop\", node, tensorMap, context);\n      const step5 = getParamValue(\"step\", node, tensorMap, context);\n      return [range(start, stop, step5, getParamValue(\"dtype\", node, tensorMap, context))];\n    }\n    case \"TruncatedNormal\": {\n      const shape = getParamValue(\"shape\", node, tensorMap, context);\n      const mean4 = getParamValue(\"mean\", node, tensorMap, context);\n      const stdDev = getParamValue(\"stdDev\", node, tensorMap, context);\n      const seed = getParamValue(\"seed\", node, tensorMap, context);\n      return [truncatedNormal(shape, mean4, stdDev, getParamValue(\"dtype\", node, tensorMap, context), seed)];\n    }\n    case \"Zeros\": {\n      return [zeros(getParamValue(\"shape\", node, tensorMap, context), getParamValue(\"dtype\", node, tensorMap, context))];\n    }\n    case \"ZerosLike\": {\n      return [zerosLike(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js\nfunction nmsParams(node, tensorMap, context) {\n  const boxes = getParamValue(\"boxes\", node, tensorMap, context);\n  const scores = getParamValue(\"scores\", node, tensorMap, context);\n  const maxOutputSize = getParamValue(\"maxOutputSize\", node, tensorMap, context);\n  const iouThreshold = getParamValue(\"iouThreshold\", node, tensorMap, context);\n  const scoreThreshold = getParamValue(\"scoreThreshold\", node, tensorMap, context);\n  const softNmsSigma = getParamValue(\"softNmsSigma\", node, tensorMap, context);\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\nvar executeOp6 = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"NonMaxSuppressionV5\": {\n      const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = nmsParams(node, tensorMap, context);\n      const result = await image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case \"NonMaxSuppressionV4\": {\n      const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n      const padToMaxOutputSize = getParamValue(\"padToMaxOutputSize\", node, tensorMap, context);\n      const result = await image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case \"NonMaxSuppressionV3\":\n    case \"NonMaxSuppressionV2\": {\n      const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n      return [await image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n    }\n    case \"Where\": {\n      const condition = cast(getParamValue(\"condition\", node, tensorMap, context), \"bool\");\n      const result = [await whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case \"ListDiff\": {\n      return setdiff1dAsync(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"y\", node, tensorMap, context));\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js\nvar executeOp7 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"TopKV2\": {\n      const x = getParamValue(\"x\", node, tensorMap, context);\n      const k = getParamValue(\"k\", node, tensorMap, context);\n      const sorted = getParamValue(\"sorted\", node, tensorMap, context);\n      const result = topk(x, k, sorted);\n      return [result.values, result.indices];\n    }\n    case \"Unique\": {\n      const x = getParamValue(\"x\", node, tensorMap, context);\n      const result = unique(x);\n      return [result.values, result.indices];\n    }\n    case \"UniqueV2\": {\n      const x = getParamValue(\"x\", node, tensorMap, context);\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const result = unique(x, axis);\n      return [result.values, result.indices];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js\nvar executeOp8 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"Const\": {\n      return tensorMap[node.name];\n    }\n    case \"PlaceholderWithDefault\":\n      const def = getParamValue(\"default\", node, tensorMap, context);\n      return [getTensor(node.name, tensorMap, context) || def];\n    case \"Placeholder\":\n      return [getTensor(node.name, tensorMap, context)];\n    case \"Identity\":\n    case \"StopGradient\":\n    case \"FakeQuantWithMinMaxVars\": {\n      const data2 = getParamValue(\"x\", node, tensorMap, context);\n      return [cloneTensor(data2)];\n    }\n    case \"IdentityN\":\n      return getParamValue(\"x\", node, tensorMap, context).map((t) => cloneTensor(t));\n    case \"Snapshot\":\n      const snapshot = getParamValue(\"x\", node, tensorMap, context);\n      return [cloneTensor(snapshot)];\n    case \"Shape\":\n      return [tensor1d(getParamValue(\"x\", node, tensorMap, context).shape, \"int32\")];\n    case \"ShapeN\":\n      return getParamValue(\"x\", node, tensorMap, context).map((t) => tensor1d(t.shape));\n    case \"Size\":\n      return [scalar(getParamValue(\"x\", node, tensorMap, context).size, \"int32\")];\n    case \"Rank\":\n      return [scalar(getParamValue(\"x\", node, tensorMap, context).rank, \"int32\")];\n    case \"NoOp\":\n      return [scalar(1)];\n    case \"Print\":\n      const input2 = getParamValue(\"x\", node, tensorMap, context);\n      const data = getParamValue(\"data\", node, tensorMap, context);\n      const message = getParamValue(\"message\", node, tensorMap, context);\n      const summarize = getParamValue(\"summarize\", node, tensorMap, context);\n      console.warn(\"The graph has a tf.print() operation,usually used for debugging, which slows down performance.\");\n      console.log(message);\n      for (let i = 0; i < data.length; i++) {\n        console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n      return [input2];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js\nvar HashTable = class {\n  constructor(keyDType, valueDType) {\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0);\n    this.tensorMap = /* @__PURE__ */ new Map();\n    keep(this.handle);\n  }\n  get id() {\n    return this.handle.id;\n  }\n  clearAndClose() {\n    this.tensorMap.forEach((value) => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n  size() {\n    return this.tensorMap.size;\n  }\n  tensorSize() {\n    return scalar(this.size(), \"int32\");\n  }\n  async import(keys, values) {\n    this.checkKeyAndValueTensor(keys, values);\n    const $keys = await keys.data();\n    this.tensorMap.forEach((value) => value.dispose());\n    this.tensorMap.clear();\n    return tidy(() => {\n      const $values = unstack(values);\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n      util_exports.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ${keysLength} elements, the values has ${valuesLength} elements.`);\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n      return this.handle;\n    });\n  }\n  async find(keys, defaultValue) {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n    const $keys = await keys.data();\n    return tidy(() => {\n      const result = [];\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n      return stack(result);\n    });\n  }\n  findWithDefault(key, defaultValue) {\n    const result = this.tensorMap.get(key);\n    return result != null ? result : defaultValue;\n  }\n  checkKeyAndValueTensor(key, value) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(`Expect key dtype ${this.keyDType}, but got ${key.dtype}`);\n    }\n    if (value.dtype !== this.valueDType) {\n      throw new Error(`Expect value dtype ${this.valueDType}, but got ${value.dtype}`);\n    }\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js\nvar executeOp9 = async (node, tensorMap, context, resourceManager) => {\n  switch (node.op) {\n    case \"HashTable\":\n    case \"HashTableV2\": {\n      const keyDType = getParamValue(\"keyDType\", node, tensorMap, context);\n      const valueDType = getParamValue(\"valueDType\", node, tensorMap, context);\n      const hashTable = new HashTable(keyDType, valueDType);\n      resourceManager.addHashTable(node.name, hashTable);\n      return [hashTable.handle];\n    }\n    case \"LookupTableImport\":\n    case \"LookupTableImportV2\": {\n      const handle = getParamValue(\"tableHandle\", node, tensorMap, context, resourceManager);\n      const keys = getParamValue(\"keys\", node, tensorMap, context);\n      const values = getParamValue(\"values\", node, tensorMap, context);\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [await hashTable.import(keys, values)];\n    }\n    case \"LookupTableFind\":\n    case \"LookupTableFindV2\": {\n      const handle = getParamValue(\"tableHandle\", node, tensorMap, context, resourceManager);\n      const keys = getParamValue(\"keys\", node, tensorMap, context);\n      const defaultValue = getParamValue(\"defaultValue\", node, tensorMap, context);\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [await hashTable.find(keys, defaultValue)];\n    }\n    case \"LookupTableSize\":\n    case \"LookupTableSizeV2\": {\n      const handle = getParamValue(\"tableHandle\", node, tensorMap, context, resourceManager);\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [hashTable.tensorSize()];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js\nvar executeOp10 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"ResizeBilinear\": {\n      const images = getParamValue(\"images\", node, tensorMap, context);\n      const size = getParamValue(\"size\", node, tensorMap, context);\n      const alignCorners = getParamValue(\"alignCorners\", node, tensorMap, context);\n      const halfPixelCenters = getParamValue(\"halfPixelCenters\", node, tensorMap, context);\n      return [image.resizeBilinear(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n    }\n    case \"ResizeNearestNeighbor\": {\n      const images = getParamValue(\"images\", node, tensorMap, context);\n      const size = getParamValue(\"size\", node, tensorMap, context);\n      const alignCorners = getParamValue(\"alignCorners\", node, tensorMap, context);\n      const halfPixelCenters = getParamValue(\"halfPixelCenters\", node, tensorMap, context);\n      return [image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n    }\n    case \"CropAndResize\": {\n      const image2 = getParamValue(\"image\", node, tensorMap, context);\n      const boxes = getParamValue(\"boxes\", node, tensorMap, context);\n      const boxInd = getParamValue(\"boxInd\", node, tensorMap, context);\n      const cropSize = getParamValue(\"cropSize\", node, tensorMap, context);\n      const method = getParamValue(\"method\", node, tensorMap, context);\n      const extrapolationValue = getParamValue(\"extrapolationValue\", node, tensorMap, context);\n      return [image.cropAndResize(image2, boxes, boxInd, cropSize, method, extrapolationValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js\nvar executeOp11 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"Equal\": {\n      return [equal(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"NotEqual\": {\n      return [notEqual(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"Greater\": {\n      return [greater(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"GreaterEqual\": {\n      return [greaterEqual(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"Less\": {\n      return [less(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"LessEqual\": {\n      return [lessEqual(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"LogicalAnd\": {\n      return [logicalAnd(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"LogicalNot\": {\n      return [logicalNot(getParamValue(\"a\", node, tensorMap, context))];\n    }\n    case \"LogicalOr\": {\n      return [logicalOr(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    case \"Select\":\n    case \"SelectV2\": {\n      return [where(getParamValue(\"condition\", node, tensorMap, context), getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js\nvar executeOp12 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"BatchMatMul\":\n    case \"BatchMatMulV2\":\n    case \"MatMul\":\n      return [matMul(getParamValue(\"a\", node, tensorMap, context), getParamValue(\"b\", node, tensorMap, context), getParamValue(\"transposeA\", node, tensorMap, context), getParamValue(\"transposeB\", node, tensorMap, context))];\n    case \"Einsum\":\n      return [einsum(getParamValue(\"equation\", node, tensorMap, context), ...getParamValue(\"tensors\", node, tensorMap, context))];\n    case \"Transpose\":\n      return [transpose(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"perm\", node, tensorMap, context))];\n    case \"_FusedMatMul\":\n      const [extraOp, activationFunc] = getParamValue(\"fusedOps\", node, tensorMap, context);\n      const isBiasAdd = extraOp === \"biasadd\";\n      const isPrelu = activationFunc === \"prelu\";\n      const numArgs = getParamValue(\"numArgs\", node, tensorMap, context);\n      const leakyreluAlpha = getParamValue(\"leakyreluAlpha\", node, tensorMap, context);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error(\"Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error(\"Fused MatMul with BiasAdd must have one extra argument: bias.\");\n        }\n      }\n      const [biasArg, preluArg] = getParamValue(\"args\", node, tensorMap, context);\n      return [fused_ops_exports.matMul({\n        a: getParamValue(\"a\", node, tensorMap, context),\n        b: getParamValue(\"b\", node, tensorMap, context),\n        transposeA: getParamValue(\"transposeA\", node, tensorMap, context),\n        transposeB: getParamValue(\"transposeB\", node, tensorMap, context),\n        bias: biasArg,\n        activation: activationFunc,\n        preluActivationWeights: preluArg,\n        leakyreluAlpha\n      })];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js\nvar executeOp13 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"FusedBatchNorm\":\n    case \"FusedBatchNormV2\": {\n      return [batchNorm(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"mean\", node, tensorMap, context), getParamValue(\"variance\", node, tensorMap, context), getParamValue(\"offset\", node, tensorMap, context), getParamValue(\"scale\", node, tensorMap, context), getParamValue(\"epsilon\", node, tensorMap, context))];\n    }\n    case \"FusedBatchNormV3\": {\n      return [batchNorm(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"mean\", node, tensorMap, context), getParamValue(\"variance\", node, tensorMap, context), getParamValue(\"offset\", node, tensorMap, context), getParamValue(\"scale\", node, tensorMap, context), getParamValue(\"epsilon\", node, tensorMap, context))];\n    }\n    case \"LRN\": {\n      return [localResponseNormalization(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"radius\", node, tensorMap, context), getParamValue(\"bias\", node, tensorMap, context), getParamValue(\"alpha\", node, tensorMap, context), getParamValue(\"beta\", node, tensorMap, context))];\n    }\n    case \"Softmax\": {\n      return [softmax(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"LogSoftmax\": {\n      return [logSoftmax(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"SparseToDense\": {\n      return [sparseToDense(getParamValue(\"sparseIndices\", node, tensorMap, context), getParamValue(\"outputShape\", node, tensorMap, context), getParamValue(\"sparseValues\", node, tensorMap, context), getParamValue(\"defaultValue\", node, tensorMap, context))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js\nvar executeOp14 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"Max\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const keepDims = getParamValue(\"keepDims\", node, tensorMap, context);\n      return [max(getParamValue(\"x\", node, tensorMap, context), axis, keepDims)];\n    }\n    case \"Mean\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const keepDims = getParamValue(\"keepDims\", node, tensorMap, context);\n      return [mean(getParamValue(\"x\", node, tensorMap, context), axis, keepDims)];\n    }\n    case \"Min\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const keepDims = getParamValue(\"keepDims\", node, tensorMap, context);\n      return [min(getParamValue(\"x\", node, tensorMap, context), axis, keepDims)];\n    }\n    case \"Sum\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const keepDims = getParamValue(\"keepDims\", node, tensorMap, context);\n      return [sum2(getParamValue(\"x\", node, tensorMap, context), axis, keepDims)];\n    }\n    case \"All\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const keepDims = getParamValue(\"keepDims\", node, tensorMap, context);\n      return [all(getParamValue(\"x\", node, tensorMap, context), axis, keepDims)];\n    }\n    case \"Any\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const keepDims = getParamValue(\"keepDims\", node, tensorMap, context);\n      return [any(getParamValue(\"x\", node, tensorMap, context), axis, keepDims)];\n    }\n    case \"ArgMax\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      return [argMax(getParamValue(\"x\", node, tensorMap, context), axis)];\n    }\n    case \"ArgMin\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      return [argMin(getParamValue(\"x\", node, tensorMap, context), axis)];\n    }\n    case \"Prod\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const keepDims = getParamValue(\"keepDims\", node, tensorMap, context);\n      return [prod(getParamValue(\"x\", node, tensorMap, context), axis, keepDims)];\n    }\n    case \"Cumsum\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const exclusive = getParamValue(\"exclusive\", node, tensorMap, context);\n      const reverse5 = getParamValue(\"reverse\", node, tensorMap, context);\n      return [cumsum(getParamValue(\"x\", node, tensorMap, context), axis, exclusive, reverse5)];\n    }\n    case \"Bincount\":\n      const x = getParamValue(\"x\", node, tensorMap, context);\n      const weights = getParamValue(\"weights\", node, tensorMap, context);\n      const size = getParamValue(\"size\", node, tensorMap, context);\n      return [bincount(x, weights, size)];\n    case \"DenseBincount\": {\n      const x2 = getParamValue(\"x\", node, tensorMap, context);\n      const weights2 = getParamValue(\"weights\", node, tensorMap, context);\n      const size2 = getParamValue(\"size\", node, tensorMap, context);\n      const binaryOutput = getParamValue(\"binaryOutput\", node, tensorMap, context);\n      return [denseBincount(x2, weights2, size2, binaryOutput)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js\nvar executeOp15 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"ConcatV2\":\n    case \"Concat\": {\n      const n = getParamValue(\"n\", node, tensorMap, context);\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      let inputs = getParamValue(\"tensors\", node, tensorMap, context);\n      inputs = inputs.slice(0, n);\n      return [concat(inputs, axis)];\n    }\n    case \"Gather\": {\n      const input2 = getParamValue(\"x\", node, tensorMap, context);\n      const indices = getParamValue(\"indices\", node, tensorMap, context);\n      return [gather(input2, cast(indices, \"int32\"), 0)];\n    }\n    case \"GatherV2\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const batchDims = getParamValue(\"batchDims\", node, tensorMap, context);\n      const input2 = getParamValue(\"x\", node, tensorMap, context);\n      const indices = getParamValue(\"indices\", node, tensorMap, context);\n      return [gather(input2, cast(indices, \"int32\"), axis, batchDims)];\n    }\n    case \"Reverse\": {\n      const dims = getParamValue(\"dims\", node, tensorMap, context);\n      const axis = [];\n      for (let i = 0; i < dims.length; i++) {\n        if (dims[i]) {\n          axis.push(i);\n        }\n      }\n      const input2 = getParamValue(\"x\", node, tensorMap, context);\n      return [reverse(input2, axis)];\n    }\n    case \"ReverseV2\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const input2 = getParamValue(\"x\", node, tensorMap, context);\n      return [reverse(input2, axis)];\n    }\n    case \"Slice\": {\n      const begin = getParamValue(\"begin\", node, tensorMap, context);\n      const size = getParamValue(\"size\", node, tensorMap, context);\n      return [slice(getParamValue(\"x\", node, tensorMap, context), begin, size)];\n    }\n    case \"StridedSlice\": {\n      const begin = getParamValue(\"begin\", node, tensorMap, context);\n      const end = getParamValue(\"end\", node, tensorMap, context);\n      const strides = getParamValue(\"strides\", node, tensorMap, context);\n      const beginMask = getParamValue(\"beginMask\", node, tensorMap, context);\n      const endMask = getParamValue(\"endMask\", node, tensorMap, context);\n      const ellipsisMask = getParamValue(\"ellipsisMask\", node, tensorMap, context);\n      const newAxisMask = getParamValue(\"newAxisMask\", node, tensorMap, context);\n      const shrinkAxisMask = getParamValue(\"shrinkAxisMask\", node, tensorMap, context);\n      const tensor2 = getParamValue(\"x\", node, tensorMap, context);\n      return [stridedSlice(tensor2, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\n    }\n    case \"Pack\": {\n      return tidy(() => {\n        const axis = getParamValue(\"axis\", node, tensorMap, context);\n        const tensors = getParamValue(\"tensors\", node, tensorMap, context);\n        const shape = tensors[0].shape;\n        const squeezedShape = squeeze(tensors[0]).shape;\n        const mapped = tensors.map((tensor2) => {\n          const sameShape = util_exports.arraysEqual(tensor2.shape, shape);\n          if (!sameShape && !util_exports.arraysEqual(squeeze(tensor2).shape, squeezedShape)) {\n            throw new Error(\"the input tensors shape does not match\");\n          }\n          return sameShape ? tensor2 : reshape(tensor2, shape);\n        });\n        return [stack(mapped, axis)];\n      });\n    }\n    case \"Unpack\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const tensor2 = getParamValue(\"tensor\", node, tensorMap, context);\n      return unstack(tensor2, axis);\n    }\n    case \"Tile\": {\n      const reps = getParamValue(\"reps\", node, tensorMap, context);\n      return [tile(getParamValue(\"x\", node, tensorMap, context), reps)];\n    }\n    case \"Split\":\n    case \"SplitV\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      const numOrSizeSplits = getParamValue(\"numOrSizeSplits\", node, tensorMap, context);\n      const tensor2 = getParamValue(\"x\", node, tensorMap, context);\n      return split(tensor2, numOrSizeSplits, axis);\n    }\n    case \"ScatterNd\": {\n      const indices = getParamValue(\"indices\", node, tensorMap, context);\n      const values = getParamValue(\"values\", node, tensorMap, context);\n      const shape = getParamValue(\"shape\", node, tensorMap, context);\n      return [scatterND(indices, values, shape)];\n    }\n    case \"GatherNd\": {\n      const x = getParamValue(\"x\", node, tensorMap, context);\n      const indices = getParamValue(\"indices\", node, tensorMap, context);\n      return [gatherND(x, indices)];\n    }\n    case \"SparseToDense\": {\n      const indices = getParamValue(\"sparseIndices\", node, tensorMap, context);\n      const shape = getParamValue(\"outputShape\", node, tensorMap, context);\n      const sparseValues = getParamValue(\"sparseValues\", node, tensorMap, context);\n      const defaultValue = getParamValue(\"defaultValue\", node, tensorMap, context);\n      return [sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ? defaultValue : cast(defaultValue, sparseValues.dtype))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/sparse_executor.js\nvar executeOp16 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"SparseFillEmptyRows\": {\n      const { outputIndices, outputValues, emptyRowIndicator, reverseIndexMap } = sparse.sparseFillEmptyRows(getParamValue(\"indices\", node, tensorMap, context), getParamValue(\"values\", node, tensorMap, context), getParamValue(\"denseShape\", node, tensorMap, context), getParamValue(\"defaultValue\", node, tensorMap, context));\n      return [\n        outputIndices,\n        outputValues,\n        emptyRowIndicator,\n        reverseIndexMap\n      ];\n    }\n    case \"SparseReshape\": {\n      const { outputIndices, outputShape } = sparse.sparseReshape(getParamValue(\"inputIndices\", node, tensorMap, context), getParamValue(\"inputShape\", node, tensorMap, context), getParamValue(\"newShape\", node, tensorMap, context));\n      return [outputIndices, outputShape];\n    }\n    case \"SparseSegmentMean\": {\n      const outputData = sparse.sparseSegmentMean(getParamValue(\"data\", node, tensorMap, context), getParamValue(\"indices\", node, tensorMap, context), getParamValue(\"segmentIds\", node, tensorMap, context));\n      return [outputData];\n    }\n    case \"SparseSegmentSum\": {\n      const outputData = sparse.sparseSegmentSum(getParamValue(\"data\", node, tensorMap, context), getParamValue(\"indices\", node, tensorMap, context), getParamValue(\"segmentIds\", node, tensorMap, context));\n      return [outputData];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js\nvar executeOp17 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"FFT\": {\n      return [fft(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"IFFT\": {\n      return [ifft(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"RFFT\": {\n      return [rfft(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    case \"IRFFT\": {\n      return [irfft(getParamValue(\"x\", node, tensorMap, context))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/string_executor.js\nvar executeOp18 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"StringNGrams\": {\n      const { nGrams, nGramsSplits } = string.stringNGrams(getParamValue(\"data\", node, tensorMap, context), getParamValue(\"dataSplits\", node, tensorMap, context), getParamValue(\"separator\", node, tensorMap, context), getParamValue(\"nGramWidths\", node, tensorMap, context), getParamValue(\"leftPad\", node, tensorMap, context), getParamValue(\"rightPad\", node, tensorMap, context), getParamValue(\"padWidth\", node, tensorMap, context), getParamValue(\"preserveShortSequences\", node, tensorMap, context));\n      return [nGrams, nGramsSplits];\n    }\n    case \"StringSplit\": {\n      const { indices, values, shape } = string.stringSplit(getParamValue(\"input\", node, tensorMap, context), getParamValue(\"delimiter\", node, tensorMap, context), getParamValue(\"skipEmpty\", node, tensorMap, context));\n      return [indices, values, shape];\n    }\n    case \"StringToHashBucketFast\": {\n      const output = string.stringToHashBucketFast(getParamValue(\"input\", node, tensorMap, context), getParamValue(\"numBuckets\", node, tensorMap, context));\n      return [output];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js\nvar executeOp19 = (node, tensorMap, context) => {\n  switch (node.op) {\n    case \"Cast\": {\n      return [cast(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"dtype\", node, tensorMap, context))];\n    }\n    case \"ExpandDims\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      return [expandDims(getParamValue(\"x\", node, tensorMap, context), axis)];\n    }\n    case \"Squeeze\": {\n      const axis = getParamValue(\"axis\", node, tensorMap, context);\n      return [squeeze(getParamValue(\"x\", node, tensorMap, context), axis)];\n    }\n    case \"Reshape\": {\n      return [reshape(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"shape\", node, tensorMap, context))];\n    }\n    case \"MirrorPad\": {\n      return [mirrorPad(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"padding\", node, tensorMap, context), getParamValue(\"mode\", node, tensorMap, context))];\n    }\n    case \"PadV2\":\n    case \"Pad\": {\n      return [pad(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"padding\", node, tensorMap, context), getParamValue(\"constantValue\", node, tensorMap, context))];\n    }\n    case \"SpaceToBatchND\": {\n      const blockShape = getParamValue(\"blockShape\", node, tensorMap, context);\n      const paddings = getParamValue(\"paddings\", node, tensorMap, context);\n      return [spaceToBatchND(getParamValue(\"x\", node, tensorMap, context), blockShape, paddings)];\n    }\n    case \"BatchToSpaceND\": {\n      const blockShape = getParamValue(\"blockShape\", node, tensorMap, context);\n      const crops = getParamValue(\"crops\", node, tensorMap, context);\n      return [batchToSpaceND(getParamValue(\"x\", node, tensorMap, context), blockShape, crops)];\n    }\n    case \"DepthToSpace\": {\n      const blockSize = getParamValue(\"blockSize\", node, tensorMap, context);\n      const dataFormat = getParamValue(\"dataFormat\", node, tensorMap, context).toUpperCase();\n      return [depthToSpace(getParamValue(\"x\", node, tensorMap, context), blockSize, dataFormat)];\n    }\n    case \"BroadcastTo\": {\n      return [broadcastTo(getParamValue(\"x\", node, tensorMap, context), getParamValue(\"shape\", node, tensorMap, context))];\n    }\n    case \"BroadcastArgs\": {\n      return [broadcastArgs(getParamValue(\"s0\", node, tensorMap, context), getParamValue(\"s1\", node, tensorMap, context))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js\nfunction executeOp20(node, tensorMap, context, resourceManager) {\n  const value = ((node2, tensorMap2, context2) => {\n    switch (node2.category) {\n      case \"arithmetic\":\n        return tidy(() => executeOp(node2, tensorMap2, context2));\n      case \"basic_math\":\n        return tidy(() => executeOp2(node2, tensorMap2, context2));\n      case \"control\":\n        return executeOp3(node2, tensorMap2, context2);\n      case \"convolution\":\n        return tidy(() => executeOp4(node2, tensorMap2, context2));\n      case \"creation\":\n        return tidy(() => executeOp5(node2, tensorMap2, context2));\n      case \"dynamic\":\n        return executeOp6(node2, tensorMap2, context2);\n      case \"evaluation\":\n        return tidy(() => executeOp7(node2, tensorMap2, context2));\n      case \"image\":\n        return tidy(() => executeOp10(node2, tensorMap2, context2));\n      case \"graph\":\n        return tidy(() => executeOp8(node2, tensorMap2, context2));\n      case \"logical\":\n        return tidy(() => executeOp11(node2, tensorMap2, context2));\n      case \"matrices\":\n        return tidy(() => executeOp12(node2, tensorMap2, context2));\n      case \"normalization\":\n        return tidy(() => executeOp13(node2, tensorMap2, context2));\n      case \"reduction\":\n        return tidy(() => executeOp14(node2, tensorMap2, context2));\n      case \"slice_join\":\n        return tidy(() => executeOp15(node2, tensorMap2, context2));\n      case \"sparse\":\n        return tidy(() => executeOp16(node2, tensorMap2, context2));\n      case \"spectral\":\n        return tidy(() => executeOp17(node2, tensorMap2, context2));\n      case \"string\":\n        return tidy(() => executeOp18(node2, tensorMap2, context2));\n      case \"transformation\":\n        return tidy(() => executeOp19(node2, tensorMap2, context2));\n      case \"hash_table\":\n        return executeOp9(node2, tensorMap2, context2, resourceManager);\n      case \"custom\":\n        const opMapper = getRegisteredOp(node2.op);\n        if (opMapper && opMapper.customExecutor) {\n          return opMapper.customExecutor(new NodeValueImpl(node2, tensorMap2, context2));\n        } else {\n          throw TypeError(`Custom op ${node2.op} is not registered.`);\n        }\n      default:\n        throw TypeError(`Unknown op '${node2.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`);\n    }\n  })(node, tensorMap, context);\n  if (util_exports.isPromise(value)) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js\nvar ExecutionContext = class {\n  constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}) {\n    this.weightMap = weightMap;\n    this.tensorArrayMap = tensorArrayMap;\n    this.tensorListMap = tensorListMap;\n    this.functionMap = functionMap;\n    this.rootContext = { id: 0, frameName: \"\", iterationId: 0 };\n    this.contexts = [this.rootContext];\n    this.lastId = 0;\n    this.generateCurrentContextIds();\n  }\n  newFrame(id, frameName) {\n    return { id, frameName, iterationId: 0 };\n  }\n  set currentContext(contexts2) {\n    if (this.contexts !== contexts2) {\n      this.contexts = contexts2;\n      this.generateCurrentContextIds();\n    }\n  }\n  get currentContext() {\n    return this.contexts;\n  }\n  get currentContextId() {\n    return this._currentContextIds[0];\n  }\n  get currentContextIds() {\n    return this._currentContextIds;\n  }\n  generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts2 = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts2));\n    }\n    names.push(\"\");\n    this._currentContextIds = names;\n  }\n  contextIdforContexts(contexts2) {\n    return contexts2 ? contexts2.map((context) => context.id === 0 && context.iterationId === 0 ? \"\" : `${context.frameName}-${context.iterationId}`).join(\"/\") : \"\";\n  }\n  enterFrame(frameId) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error(\"Cannot exit frame, the context is empty\");\n    }\n  }\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context = Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error(\"Cannot increase frame iteration, the context is empty\");\n    }\n  }\n  getWeight(name) {\n    return this.weightMap[name];\n  }\n  addTensorArray(tensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n  getTensorArray(id) {\n    return this.tensorArrayMap[id];\n  }\n  addTensorList(tensorList) {\n    this.tensorListMap[tensorList.id] = tensorList;\n  }\n  getTensorList(id) {\n    return this.tensorListMap[id];\n  }\n  dispose(keepIds) {\n    for (const key in this.tensorArrayMap) {\n      this.tensorArrayMap[key].clearAndClose(keepIds);\n    }\n    for (const key in this.tensorListMap) {\n      this.tensorListMap[key].clearAndClose(keepIds);\n    }\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js\nfunction getExecutionSubgraph(inputs, outputs, weightMap, initNodes) {\n  const usedNodes = /* @__PURE__ */ new Set();\n  const missingInputs = [];\n  let dynamicNode = null;\n  let syncInputs = null;\n  const seen = /* @__PURE__ */ new Set();\n  const inputNodeNames = Object.keys(inputs).map((name) => parseNodeName(name)[0]);\n  let initNodeNames = [];\n  if (initNodes != null) {\n    initNodeNames = initNodes.map((node) => parseNodeName(node.name)[0]);\n  }\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map((child) => child.name).filter((name) => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (initNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach((input2) => {\n      if (seen.has(input2.name)) {\n        return;\n      }\n      seen.add(input2.name);\n      frontier.push(input2);\n    });\n  }\n  return { inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs };\n}\nfunction getNodesInTopologicalOrder(graph, weightMap, executionInfo) {\n  const { usedNodes, inputs } = executionInfo;\n  const frontier = [];\n  const inputNodes = Object.keys(inputs).map((name) => parseNodeName(name)[0]).map((name) => graph.nodes[name]);\n  const initNodes = graph.initNodes;\n  inputNodes.forEach((input2) => {\n    if (usedNodes.has(input2.name)) {\n      frontier.push(input2);\n    }\n  });\n  graph.weights.forEach((weight) => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  if (initNodes != null) {\n    initNodes.forEach((node) => {\n      if (usedNodes.has(node.name)) {\n        frontier.push(node);\n      }\n    });\n  }\n  const seen = /* @__PURE__ */ new Set();\n  const orderedNodes = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach((child) => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) && child.inputs.every((input2) => seen.has(input2.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\nvar CONTROL_FLOW_OPS = [\n  \"Switch\",\n  \"Merge\",\n  \"Enter\",\n  \"Exit\",\n  \"NextIteration\",\n  \"StatelessIf\",\n  \"StatelessWhile\",\n  \"if\",\n  \"While\"\n];\nvar DYNAMIC_SHAPE_OPS = [\n  \"NonMaxSuppressionV2\",\n  \"NonMaxSuppressionV3\",\n  \"NonMaxSuppressionV5\",\n  \"Where\"\n];\nvar HASH_TABLE_OPS = [\n  \"HashTable\",\n  \"HashTableV2\",\n  \"LookupTableImport\",\n  \"LookupTableImportV2\",\n  \"LookupTableFind\",\n  \"LookupTableFindV2\",\n  \"LookupTableSize\",\n  \"LookupTableSizeV2\"\n];\nfunction isControlFlow(node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\nfunction isDynamicShape(node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\nfunction isHashTable(node) {\n  return HASH_TABLE_OPS.indexOf(node.op) >= 0;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js\nvar GraphExecutor = class {\n  constructor(graph, parent) {\n    this.graph = graph;\n    this.parent = parent;\n    this.compiledMap = /* @__PURE__ */ new Map();\n    this._weightMap = {};\n    this.SEPERATOR = \",\";\n    this._functions = {};\n    this._functionExecutorMap = {};\n    this.intermediateTensors = {};\n    this.keepTensorForDebug = false;\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach((name) => {\n        this._functionExecutorMap[name] = new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n  get weightIds() {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n  get functionExecutorMap() {\n    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;\n  }\n  get weightMap() {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n  set weightMap(weightMap) {\n    const weightIds = Object.keys(weightMap).map((key) => weightMap[key].map((tensor2) => tensor2.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n  set resourceManager(resourceManager) {\n    this._resourceManager = resourceManager;\n  }\n  get inputs() {\n    return this._inputs.map((node) => {\n      return {\n        name: node.name,\n        shape: node.attrParams[\"shape\"] ? node.attrParams[\"shape\"].value : void 0,\n        dtype: node.attrParams[\"dtype\"] ? node.attrParams[\"dtype\"].value : void 0\n      };\n    });\n  }\n  get outputs() {\n    return this._outputs.map((node) => {\n      return {\n        name: node.name,\n        shape: node.attrParams[\"shape\"] ? node.attrParams[\"shape\"].value : void 0,\n        dtype: node.attrParams[\"dtype\"] ? node.attrParams[\"dtype\"].value : void 0\n      };\n    });\n  }\n  get inputNodes() {\n    return this._inputs.map((node) => node.signatureKey || node.name);\n  }\n  get outputNodes() {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? `${name}:${node.defaultOutput}` : name;\n    });\n  }\n  get functions() {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {});\n  }\n  getCompilationKey(inputs, outputs) {\n    const sortedInputs = inputs.map((node) => node.name).sort();\n    const sortedOutputs = outputs.map((node) => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + \"--\" + sortedOutputs.join(this.SEPERATOR);\n  }\n  compile(inputs, outputs) {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const { missingInputs, dynamicNode, syncInputs } = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(`This execution contains the node '${dynamicNode.name}', which has the dynamic op '${dynamicNode.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map((n) => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs [${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n    return getNodesInTopologicalOrder(this.graph, this.weightMap, executionInfo);\n  }\n  execute(inputs, outputs) {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes = names.map((name) => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map((name) => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map((name) => this.graph.nodes[name]);\n    this.resetIntermediateTensors();\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n    const tensorArrayMap = {};\n    const tensorListMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);\n      const tensorsMap = Object.assign({}, this.weightMap);\n      Object.keys(inputs).forEach((name) => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp20(node, tensorsMap, context, this._resourceManager);\n          if (util_exports.isPromise(tensors)) {\n            throw new Error(`The execution of the op '${node.op}' returned a promise. Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(node.name, node, tensorsMap, context, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount);\n        }\n      }\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n      return outputs.map((name) => getTensor(name, tensorsMap, context));\n    });\n  }\n  getFrozenTensorIds(tensorMap) {\n    const ids = [].concat.apply([], Object.keys(tensorMap).map((key) => tensorMap[key]).map((tensors) => tensors.map((tensor2) => tensor2.id)));\n    return new Set(ids);\n  }\n  checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount) {\n    if (node.category === \"control\" || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n    tensorMap[nodeName].forEach((tensor2) => {\n      if (tensor2 != null) {\n        intermediateTensorConsumerCount[tensor2.id] = (intermediateTensorConsumerCount[tensor2.id] || 0) + node.children.length;\n      }\n    });\n    node.inputs.forEach((input2) => {\n      if (input2.category !== \"control\") {\n        const tensors = getTensorsForCurrentContenxt(input2.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach((tensor2) => {\n            if (tensor2 && !tensor2.kept && !tensorsToKeep.has(tensor2.id)) {\n              const count2 = intermediateTensorConsumerCount[tensor2.id];\n              if (count2 === 1) {\n                if (!this.keepTensorForDebug) {\n                  tensor2.dispose();\n                } else {\n                  const [nodeName2, index] = getNodeNameAndIndex(node.name, context);\n                  if (this.intermediateTensors[nodeName2]) {\n                    this.intermediateTensors[nodeName2][index] = tensor2;\n                  } else {\n                    this.intermediateTensors[nodeName2] = [];\n                    this.intermediateTensors[nodeName2][index] = tensor2;\n                  }\n                }\n                delete intermediateTensorConsumerCount[tensor2.id];\n              } else if (count2 != null) {\n                intermediateTensorConsumerCount[tensor2.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  async executeAsync(inputs, outputs) {\n    return this._executeAsync(inputs, outputs);\n  }\n  disposeIntermediateTensors() {\n    if (!this.intermediateTensors) {\n      return;\n    }\n    Object.keys(this.intermediateTensors).forEach((key) => this.intermediateTensors[key].forEach((tensor2) => tensor2.dispose()));\n    this.disposeTensorsMap();\n  }\n  disposeTensorsMap() {\n    if (!this.tensorsMap) {\n      return;\n    }\n    Object.keys(this.tensorsMap).forEach((key) => {\n      const tensorArray = this.tensorsMap[key];\n      tensorArray.forEach((tensor2) => {\n        if (tensor2 && !tensor2.kept && !tensor2.isDisposed && !this.keepIds.has(tensor2.id)) {\n          tensor2.dispose();\n        }\n      });\n    });\n  }\n  getIntermediateTensors() {\n    return this.tensorsMap;\n  }\n  resetIntermediateTensors() {\n    for (const key in this.intermediateTensors) {\n      this.intermediateTensors[key].forEach((tensor2) => tensor2.dispose());\n      delete this.intermediateTensors[key];\n    }\n  }\n  async _executeAsync(inputs, outputs, isFunctionExecution = false, tensorArrayMap = {}, tensorListMap = {}) {\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n    try {\n      this.keepTensorForDebug = env().getBool(\"KEEP_INTERMEDIATE_TENSORS\");\n    } catch (e) {\n      console.warn(e.message);\n    }\n    this.resetIntermediateTensors();\n    const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);\n    this.tensorsMap = await this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map((name) => getTensor(name, this.tensorsMap, context));\n    const outputIds = results.map((t) => t.id);\n    const inputIds = Object.keys(inputs).map((name) => inputs[name].id);\n    this.keepIds = /* @__PURE__ */ new Set([...outputIds, ...inputIds, ...this.weightIds]);\n    if (!this.keepTensorForDebug) {\n      this.disposeTensorsMap();\n    }\n    if (this.parent == null) {\n      context.dispose(this.keepIds);\n    }\n    return results;\n  }\n  async executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {\n    const mappedInputs = inputs.reduce((map, tensor2, index) => {\n      map[this.inputs[index].name] = tensor2;\n      return map;\n    }, {});\n    return this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n  async executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {\n    const names = Object.keys(inputs);\n    const inputNodes = names.map((name) => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map((name) => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map((name) => this.graph.nodes[name]);\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n    const { usedNodes, missingInputs, dynamicNode, syncInputs } = getExecutionSubgraph(inputs, outputNodes, this.weightMap, this._initNodes);\n    const stack2 = [\n      ...inputNodes,\n      ...this.graph.weights,\n      ...this._initNodes || []\n    ].map((node) => {\n      return { node, contexts: context.currentContext };\n    });\n    const tensorsMap = Object.assign({}, this.weightMap);\n    Object.keys(inputs).forEach((name) => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added = {};\n    while (stack2.length > 0) {\n      const promises = this.processStack(inputNodes, stack2, context, tensorsMap, added, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(`This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs = outputNodes.filter((node) => !isControlFlow(node) && !getTensor(node.name, tensorsMap, context)).map((node) => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = \"\";\n      if (dynamicNode != null) {\n        alternativeMsg = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided inputs [${names}]. Consider providing the following inputs: [${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n  processStack(inputNodes, stack2, context, tensorMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes) {\n    const promises = [];\n    while (stack2.length > 0) {\n      const item = stack2.pop();\n      context.currentContext = item.contexts;\n      let nodeName = \"\";\n      if (item.node.op === \"Enter\" && getParamValue(\"isConstant\", item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n      if (tensorMap[item.node.name] == null) {\n        const tensors = executeOp20(item.node, tensorMap, context, this._resourceManager);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (util_exports.isPromise(tensors)) {\n          promises.push(tensors.then((t) => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(item.node, stack2, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(item.node, stack2, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(item.node, stack2, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n  processChildNodes(node, stack2, context, tensorMap, added, usedNodes) {\n    node.children.forEach((childNode) => {\n      const [nodeName] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      if (childNode.op === \"Merge\") {\n        if (childNode.inputNames.some((name) => {\n          return !!getTensor(name, tensorMap, context);\n        })) {\n          added[nodeName] = true;\n          stack2.push({ contexts: context.currentContext, node: childNode });\n        }\n      } else if (childNode.inputNames.every((name) => {\n        return !!getTensor(name, tensorMap, context);\n      })) {\n        added[nodeName] = true;\n        stack2.push({ contexts: context.currentContext, node: childNode });\n      }\n    });\n  }\n  dispose() {\n    Object.keys(this.weightMap).forEach((key) => this.weightMap[key].forEach((tensor2) => tensor2.dispose()));\n  }\n  checkInputShapeAndType(inputs) {\n    Object.keys(inputs).forEach((name) => {\n      const input2 = inputs[name];\n      const [nodeName] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams[\"shape\"] && node.attrParams[\"shape\"].value) {\n        const shape = node.attrParams[\"shape\"].value;\n        const match = shape.length === input2.shape.length && input2.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);\n        util_exports.assert(match, () => `The shape of dict['${node.name}'] provided in model.execute(dict) must be [${shape}], but was [${input2.shape}]`);\n      }\n      if (node.attrParams[\"dtype\"] && node.attrParams[\"dtype\"].value) {\n        util_exports.assert(input2.dtype === node.attrParams[\"dtype\"].value, () => `The dtype of dict['${node.name}'] provided in model.execute(dict) must be ${node.attrParams[\"dtype\"].value}, but was ${input2.dtype}`);\n      }\n    });\n  }\n  mapInputs(inputs) {\n    const result = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null && this._signature.inputs[inputName] != null) {\n        const tensor2 = this._signature.inputs[inputName];\n        result[tensor2.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n  checkInputs(inputs) {\n    const notInGraph = Object.keys(inputs).filter((name) => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(`The dict provided in model.execute(dict) has keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n  mapOutputs(outputs) {\n    return outputs.map((name) => {\n      if (this._signature != null && this._signature.outputs != null && this._signature.outputs[name] != null) {\n        const tensor2 = this._signature.outputs[name];\n        return tensor2.name;\n      }\n      return name;\n    }, {});\n  }\n  checkOutputs(outputs) {\n    outputs.forEach((name) => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js\nvar ResourceManager = class {\n  constructor(hashTableNameToHandle = {}, hashTableMap = {}) {\n    this.hashTableNameToHandle = hashTableNameToHandle;\n    this.hashTableMap = hashTableMap;\n  }\n  addHashTable(name, hashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n  getHashTableHandleByName(name) {\n    return this.hashTableNameToHandle[name];\n  }\n  getHashTableById(id) {\n    return this.hashTableMap[id];\n  }\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js\nvar TFHUB_SEARCH_PARAM = \"?tfjs-format=file\";\nvar DEFAULT_MODEL_NAME = \"model.json\";\nvar GraphModel = class {\n  constructor(modelUrl, loadOptions = {}) {\n    this.modelUrl = modelUrl;\n    this.loadOptions = loadOptions;\n    this.version = \"n/a\";\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n    this.resourceManager = new ResourceManager();\n  }\n  get modelVersion() {\n    return this.version;\n  }\n  get inputNodes() {\n    return this.executor.inputNodes;\n  }\n  get outputNodes() {\n    return this.executor.outputNodes;\n  }\n  get inputs() {\n    return this.executor.inputs;\n  }\n  get outputs() {\n    return this.executor.outputs;\n  }\n  get weights() {\n    return this.executor.weightMap;\n  }\n  get metadata() {\n    return this.artifacts.userDefinedMetadata;\n  }\n  get modelSignature() {\n    return this.signature;\n  }\n  findIOHandler() {\n    const path = this.modelUrl;\n    if (path.load != null) {\n      this.handler = path;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io_exports.browserHTTPRequest(path, this.loadOptions);\n    } else {\n      const handlers = io_exports.getLoadHandlers(path, this.loadOptions);\n      if (handlers.length === 0) {\n        handlers.push(io_exports.browserHTTPRequest(path, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(`Found more than one (${handlers.length}) load handlers for URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n  async load() {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\"Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.\");\n    }\n    const artifacts = await this.handler.load();\n    return this.loadSync(artifacts);\n  }\n  loadSync(artifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology;\n    let signature;\n    if (this.artifacts.userDefinedMetadata != null && this.artifacts.userDefinedMetadata.signature != null) {\n      signature = this.artifacts.userDefinedMetadata.signature;\n    } else {\n      signature = this.artifacts.signature;\n    }\n    this.signature = signature;\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap = io_exports.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    this.executor.resourceManager = this.resourceManager;\n    if (artifacts.modelInitializer != null && artifacts.modelInitializer.node != null) {\n      const initializer = OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializer.executeAsync({}, []);\n    }\n    return true;\n  }\n  async save(handlerOrURL, config) {\n    if (typeof handlerOrURL === \"string\") {\n      const handlers = io_exports.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(`Found more than one (${handlers.length}) save handlers for URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\"GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.\");\n    }\n    return handlerOrURL.save(this.artifacts);\n  }\n  predict(inputs, config) {\n    return this.execute(inputs, this.outputNodes);\n  }\n  normalizeInputs(inputs) {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = inputs[i];\n      return map;\n    }, {});\n  }\n  normalizeOutputs(outputs) {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n  execute(inputs, outputs) {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  async executeAsync(inputs, outputs) {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  getIntermediateTensors() {\n    return this.executor.getIntermediateTensors();\n  }\n  disposeIntermediateTensors() {\n    this.executor.disposeIntermediateTensors();\n  }\n  convertTensorMapToTensorsMap(map) {\n    return Object.keys(map).reduce((newMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n  dispose() {\n    this.executor.dispose();\n    if (this.initializer) {\n      this.initializer.dispose();\n    }\n    this.resourceManager.dispose();\n  }\n};\nasync function loadGraphModel(modelUrl, options = {}) {\n  if (modelUrl == null) {\n    throw new Error(\"modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model\");\n  }\n  if (options == null) {\n    options = {};\n  }\n  if (options.fromTFHub) {\n    if (modelUrl.load == null) {\n      if (!modelUrl.endsWith(\"/\")) {\n        modelUrl = modelUrl + \"/\";\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model2 = new GraphModel(modelUrl, options);\n  await model2.load();\n  return model2;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-converter@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-converter/dist/version.js\nvar version3 = \"3.13.0\";\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/index.js\nvar dist_exports2 = {};\n__export(dist_exports2, {\n  CSVDataset: () => CSVDataset,\n  Dataset: () => Dataset,\n  FileDataSource: () => FileDataSource,\n  TextLineDataset: () => TextLineDataset,\n  URLDataSource: () => URLDataSource,\n  array: () => array,\n  csv: () => csv,\n  func: () => func,\n  generator: () => generator,\n  microphone: () => microphone,\n  version_data: () => version4,\n  webcam: () => webcam,\n  zip: () => zip\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/dataset.js\nvar seedrandom3 = __toESM(require_seedrandom4());\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/iterators/lazy_iterator.js\nvar seedrandom2 = __toESM(require_seedrandom4());\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/util/deep_map.js\nfunction deepMap(input2, mapFn) {\n  return deepMapInternal(input2, mapFn);\n}\nfunction deepMapInternal(input2, mapFn, seen = /* @__PURE__ */ new Map(), containedIn = /* @__PURE__ */ new Set()) {\n  if (input2 == null) {\n    return null;\n  }\n  if (typeof Blob === \"function\" && input2 instanceof Blob) {\n    return input2.slice();\n  }\n  if (containedIn.has(input2)) {\n    throw new Error(\"Circular references are not supported.\");\n  }\n  if (seen.has(input2)) {\n    return seen.get(input2);\n  }\n  const result = mapFn(input2);\n  if (result.recurse && result.value !== null) {\n    throw new Error(\"A deep map function may not return both a value and recurse=true.\");\n  }\n  if (!result.recurse) {\n    seen.set(input2, result.value);\n    return result.value;\n  } else if (isIterable2(input2)) {\n    const mappedIterable = Array.isArray(input2) ? [] : {};\n    containedIn.add(input2);\n    for (const k in input2) {\n      const child = input2[k];\n      const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input2);\n    if (input2.__proto__) {\n      mappedIterable.__proto__ = input2.__proto__;\n    }\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input2}`);\n  }\n}\nfunction deepZip(inputs, zipFn = zipToList) {\n  return deepZipInternal(inputs, zipFn);\n}\nfunction deepZipInternal(inputs, zipFn, containedIn = /* @__PURE__ */ new Set()) {\n  const input2 = inputs[0];\n  if (containedIn.has(input2)) {\n    throw new Error(\"Circular references are not supported.\");\n  }\n  const result = zipFn(inputs);\n  if (result.recurse && result.value !== null) {\n    throw new Error(\"A deep zip function may not return both a value and recurse=true.\");\n  }\n  if (!result.recurse) {\n    return result.value;\n  } else if (isIterable2(input2)) {\n    const mappedIterable = Array.isArray(input2) ? [] : {};\n    containedIn.add(input2);\n    for (const k in input2) {\n      const children = inputs.map((x) => x[k]);\n      const childResult = deepZipInternal(children, zipFn, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input2);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input2}`);\n  }\n}\nfunction zipToList(x) {\n  if (x === null) {\n    return null;\n  }\n  if (isIterable2(x[0])) {\n    return { value: null, recurse: true };\n  } else {\n    return { value: x, recurse: false };\n  }\n}\nasync function deepMapAndAwaitAll(input2, mapFn) {\n  const seen = /* @__PURE__ */ new Map();\n  deepMapInternal(input2, mapFn, seen);\n  for (const key of Array.from(seen.keys())) {\n    const value = seen.get(key);\n    if (util_exports.isPromise(value)) {\n      const mappedValue = await value;\n      seen.set(key, mappedValue);\n    }\n  }\n  const result = deepMapInternal(input2, mapFn, seen);\n  return result;\n}\nfunction isIterable2(obj) {\n  let isTextDecoder = false;\n  if (env().get(\"IS_BROWSER\")) {\n    isTextDecoder = obj instanceof TextDecoder;\n  } else {\n    const { StringDecoder } = require_string_decoder();\n    isTextDecoder = obj instanceof StringDecoder;\n  }\n  return obj != null && !ArrayBuffer.isView(obj) && (Array.isArray(obj) || typeof obj === \"object\" && !(obj instanceof Tensor) && !(obj instanceof Promise) && !isTextDecoder);\n}\nfunction canTensorify(obj) {\n  return obj == null || isPrimitive(obj) || Array.isArray(obj) || typeof obj === \"object\" && obj instanceof Tensor || util_exports.isTypedArray(obj);\n}\nfunction isPrimitive(value) {\n  return value === null || typeof value !== \"object\" && typeof value !== \"function\";\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/util/deep_clone.js\nfunction deepClone(container) {\n  return deepMap(container, cloneIfTensor);\n}\nfunction cloneIfTensor(item) {\n  if (item instanceof Tensor) {\n    return { value: item.clone(), recurse: false };\n  } else if (isIterable2(item)) {\n    return { value: null, recurse: true };\n  } else {\n    return { value: item, recurse: false };\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/util/ring_buffer.js\nvar RingBuffer = class {\n  constructor(capacity) {\n    this.capacity = capacity;\n    this.begin = 0;\n    this.end = 0;\n    if (capacity == null) {\n      throw new RangeError(\"Can't create a ring buffer of unknown capacity.\");\n    }\n    if (capacity < 1) {\n      throw new RangeError(\"Can't create ring buffer of capacity < 1.\");\n    }\n    this.data = new Array(capacity);\n    this.doubledCapacity = 2 * capacity;\n  }\n  wrap(index) {\n    while (index < 0) {\n      index += this.doubledCapacity;\n    }\n    return index % this.doubledCapacity;\n  }\n  get(index) {\n    if (index < 0) {\n      throw new RangeError(\"Can't get item at a negative index.\");\n    }\n    return this.data[index % this.capacity];\n  }\n  set(index, value) {\n    if (index < 0) {\n      throw new RangeError(\"Can't set item at a negative index.\");\n    }\n    this.data[index % this.capacity] = value;\n  }\n  length() {\n    let length = this.end - this.begin;\n    if (length < 0) {\n      length = this.doubledCapacity + length;\n    }\n    return length;\n  }\n  isFull() {\n    return this.length() === this.capacity;\n  }\n  isEmpty() {\n    return this.length() === 0;\n  }\n  push(value) {\n    if (this.isFull()) {\n      throw new RangeError(\"Ring buffer is full.\");\n    }\n    this.set(this.end, value);\n    this.end = this.wrap(this.end + 1);\n  }\n  pushAll(values) {\n    for (const value of values) {\n      this.push(value);\n    }\n  }\n  pop() {\n    if (this.isEmpty()) {\n      throw new RangeError(\"Ring buffer is empty.\");\n    }\n    this.end = this.wrap(this.end - 1);\n    const result = this.get(this.end);\n    this.set(this.end, void 0);\n    return result;\n  }\n  unshift(value) {\n    if (this.isFull()) {\n      throw new RangeError(\"Ring buffer is full.\");\n    }\n    this.begin = this.wrap(this.begin - 1);\n    this.set(this.begin, value);\n  }\n  shift() {\n    if (this.isEmpty()) {\n      throw new RangeError(\"Ring buffer is empty.\");\n    }\n    const result = this.get(this.begin);\n    this.set(this.begin, void 0);\n    this.begin = this.wrap(this.begin + 1);\n    return result;\n  }\n  shuffleExcise(relativeIndex) {\n    if (this.isEmpty()) {\n      throw new RangeError(\"Ring buffer is empty.\");\n    }\n    const index = this.wrap(this.begin + relativeIndex);\n    const result = this.get(index);\n    this.set(index, this.pop());\n    return result;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/util/growing_ring_buffer.js\nvar GrowingRingBuffer = class extends RingBuffer {\n  constructor() {\n    super(GrowingRingBuffer.INITIAL_CAPACITY);\n  }\n  isFull() {\n    return false;\n  }\n  push(value) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.push(value);\n  }\n  unshift(value) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.unshift(value);\n  }\n  expand() {\n    const newCapacity = this.capacity * 2;\n    const newData = new Array(newCapacity);\n    const len = this.length();\n    for (let i = 0; i < len; i++) {\n      newData[i] = this.get(this.wrap(this.begin + i));\n    }\n    this.data = newData;\n    this.capacity = newCapacity;\n    this.doubledCapacity = 2 * this.capacity;\n    this.begin = 0;\n    this.end = len;\n  }\n};\nGrowingRingBuffer.INITIAL_CAPACITY = 32;\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/iterators/lazy_iterator.js\nfunction iteratorFromItems(items) {\n  return new ArrayIterator(items);\n}\nfunction iteratorFromFunction(func2) {\n  return new FunctionCallIterator(func2);\n}\nfunction iteratorFromConcatenated(baseIterators, baseErrorHandler) {\n  return new ChainedIterator(baseIterators, baseErrorHandler);\n}\nfunction iteratorFromZipped(iterators, mismatchMode = ZipMismatchMode.FAIL) {\n  return new ZipIterator(iterators, mismatchMode);\n}\nvar LazyIterator = class {\n  async toArray() {\n    const result = [];\n    let x = await this.next();\n    while (!x.done) {\n      result.push(x.value);\n      x = await this.next();\n    }\n    return result;\n  }\n  async toArrayForTest() {\n    const stream = this.prefetch(100);\n    const result = [];\n    let x = await stream.next();\n    while (!x.done) {\n      result.push(x.value);\n      x = await stream.next();\n    }\n    return result;\n  }\n  async resolveFully() {\n    let x = await this.next();\n    while (!x.done) {\n      x = await this.next();\n    }\n  }\n  async resolveWhile(predicate) {\n    let x = await this.next();\n    let shouldContinue = predicate(x.value);\n    while (!x.done && shouldContinue) {\n      x = await this.next();\n      shouldContinue = predicate(x.value);\n    }\n  }\n  handleErrors(handler) {\n    return new ErrorHandlingLazyIterator(this, handler);\n  }\n  filter(predicate) {\n    return new FilterIterator(this, predicate);\n  }\n  map(transform5) {\n    return new MapIterator(this, transform5);\n  }\n  mapAsync(transform5) {\n    return new AsyncMapIterator(this, transform5);\n  }\n  serialMapAsync(transform5) {\n    return new AsyncMapIterator(this, transform5).serial();\n  }\n  flatmap(transform5) {\n    return new FlatmapIterator(this, transform5);\n  }\n  async forEachAsync(f) {\n    return this.map(f).resolveFully();\n  }\n  async serialForEach(f) {\n    return this.serialMapAsync(f).resolveWhile((x) => x === true);\n  }\n  rowMajorBatch(batchSize, smallLastBatch = true) {\n    return new RowMajorBatchIterator(this, batchSize, smallLastBatch);\n  }\n  columnMajorBatch(batchSize, smallLastBatch = true, zipFn = zipToList) {\n    const rowBatches = this.rowMajorBatch(batchSize, smallLastBatch);\n    return rowBatches.map((x) => deepZip(x, zipFn));\n  }\n  concatenate(iterator, baseErrorHandler) {\n    return new ChainedIterator(iteratorFromItems([this, iterator]), baseErrorHandler);\n  }\n  take(count2) {\n    if (count2 < 0 || count2 == null) {\n      return this;\n    }\n    return new TakeIterator(this, count2);\n  }\n  skip(count2) {\n    if (count2 < 0 || count2 == null) {\n      return this;\n    }\n    return new SkipIterator(this, count2);\n  }\n  prefetch(bufferSize) {\n    return new PrefetchIterator(this, bufferSize);\n  }\n  shuffle(windowSize, seed) {\n    return new ShuffleIterator(this, windowSize, seed);\n  }\n  serial() {\n    return new SerialIterator(this);\n  }\n};\nvar ArrayIterator = class extends LazyIterator {\n  constructor(items) {\n    super();\n    this.items = items;\n    this.trav = 0;\n  }\n  summary() {\n    return `Array of ${this.items.length} items`;\n  }\n  async next() {\n    if (this.trav >= this.items.length) {\n      return { value: null, done: true };\n    }\n    const item = this.items[this.trav];\n    this.trav++;\n    return { value: deepClone(item), done: false };\n  }\n};\nvar FunctionCallIterator = class extends LazyIterator {\n  constructor(nextFn) {\n    super();\n    this.nextFn = nextFn;\n  }\n  summary() {\n    return `Function call`;\n  }\n  async next() {\n    try {\n      return this.nextFn();\n    } catch (e) {\n      e.message = `Error thrown while iterating through a dataset: ${e.message}`;\n      throw e;\n    }\n  }\n};\nvar SerialIterator = class extends LazyIterator {\n  constructor(upstream) {\n    super();\n    this.upstream = upstream;\n    this.lastRead = Promise.resolve({ value: null, done: false });\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Serial`;\n  }\n  async next() {\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  async serialNext() {\n    return this.upstream.next();\n  }\n};\nvar SkipIterator = class extends LazyIterator {\n  constructor(upstream, maxCount) {\n    super();\n    this.upstream = upstream;\n    this.maxCount = maxCount;\n    this.count = 0;\n    this.lastRead = Promise.resolve({ value: null, done: false });\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Skip`;\n  }\n  async next() {\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  async serialNext() {\n    while (this.count++ < this.maxCount) {\n      const skipped = await this.upstream.next();\n      if (skipped.done) {\n        return skipped;\n      }\n      dispose(skipped.value);\n    }\n    return this.upstream.next();\n  }\n};\nvar TakeIterator = class extends LazyIterator {\n  constructor(upstream, maxCount) {\n    super();\n    this.upstream = upstream;\n    this.maxCount = maxCount;\n    this.count = 0;\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Take`;\n  }\n  async next() {\n    if (this.count++ >= this.maxCount) {\n      return { value: null, done: true };\n    }\n    return this.upstream.next();\n  }\n};\nvar RowMajorBatchIterator = class extends LazyIterator {\n  constructor(upstream, batchSize, enableSmallLastBatch = true) {\n    super();\n    this.upstream = upstream;\n    this.batchSize = batchSize;\n    this.enableSmallLastBatch = enableSmallLastBatch;\n    this.lastRead = Promise.resolve({ value: null, done: false });\n  }\n  summary() {\n    return `${this.upstream.summary()} -> RowMajorBatch`;\n  }\n  async next() {\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  async serialNext() {\n    const batch = [];\n    while (batch.length < this.batchSize) {\n      const item = await this.upstream.next();\n      if (item.done) {\n        if (this.enableSmallLastBatch && batch.length > 0) {\n          return { value: batch, done: false };\n        }\n        return { value: null, done: true };\n      }\n      batch.push(item.value);\n    }\n    return { value: batch, done: false };\n  }\n};\nvar FilterIterator = class extends LazyIterator {\n  constructor(upstream, predicate) {\n    super();\n    this.upstream = upstream;\n    this.predicate = predicate;\n    this.lastRead = Promise.resolve({ value: null, done: false });\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Filter`;\n  }\n  async next() {\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  async serialNext() {\n    while (true) {\n      const item = await this.upstream.next();\n      if (item.done || this.predicate(item.value)) {\n        return item;\n      }\n      dispose(item.value);\n    }\n  }\n};\nvar MapIterator = class extends LazyIterator {\n  constructor(upstream, transform5) {\n    super();\n    this.upstream = upstream;\n    this.transform = transform5;\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Map`;\n  }\n  async next() {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return { value: null, done: true };\n    }\n    const inputTensors = tensor_util_exports.getTensorsInContainer(item.value);\n    const mapped = this.transform(item.value);\n    const outputTensors = tensor_util_exports.getTensorsInContainer(mapped);\n    for (const t of inputTensors) {\n      if (!tensor_util_exports.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n    return { value: mapped, done: false };\n  }\n};\nvar ErrorHandlingLazyIterator = class extends LazyIterator {\n  constructor(upstream, handler) {\n    super();\n    this.upstream = upstream;\n    this.handler = handler;\n    this.count = 0;\n    this.lastRead = Promise.resolve({ value: null, done: false });\n  }\n  summary() {\n    return `${this.upstream.summary()} -> handleErrors`;\n  }\n  async next() {\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  async serialNext() {\n    while (true) {\n      try {\n        return await this.upstream.next();\n      } catch (e) {\n        if (!this.handler(e)) {\n          return { value: null, done: true };\n        }\n      }\n    }\n  }\n};\nvar AsyncMapIterator = class extends LazyIterator {\n  constructor(upstream, transform5) {\n    super();\n    this.upstream = upstream;\n    this.transform = transform5;\n  }\n  summary() {\n    return `${this.upstream.summary()} -> AsyncMap`;\n  }\n  async next() {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return { value: null, done: true };\n    }\n    const inputTensors = tensor_util_exports.getTensorsInContainer(item.value);\n    const mapped = await this.transform(item.value);\n    const outputTensors = tensor_util_exports.getTensorsInContainer(mapped);\n    for (const t of inputTensors) {\n      if (!tensor_util_exports.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n    return { value: mapped, done: false };\n  }\n};\nvar OneToManyIterator = class extends LazyIterator {\n  constructor() {\n    super();\n    this.outputQueue = new GrowingRingBuffer();\n    this.lastRead = Promise.resolve({ value: null, done: false });\n  }\n  async next() {\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  async serialNext() {\n    while (this.outputQueue.length() === 0) {\n      if (!await this.pump()) {\n        return { value: null, done: true };\n      }\n    }\n    return { value: this.outputQueue.shift(), done: false };\n  }\n};\nvar FlatmapIterator = class extends OneToManyIterator {\n  constructor(upstream, transform5) {\n    super();\n    this.upstream = upstream;\n    this.transform = transform5;\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Flatmap`;\n  }\n  async pump() {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return false;\n    }\n    const inputTensors = tensor_util_exports.getTensorsInContainer(item.value);\n    const mappedArray = this.transform(item.value);\n    const outputTensors = tensor_util_exports.getTensorsInContainer(mappedArray);\n    this.outputQueue.pushAll(mappedArray);\n    for (const t of inputTensors) {\n      if (!tensor_util_exports.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n    return true;\n  }\n};\nvar ChainedIterator = class extends LazyIterator {\n  constructor(iterators, baseErrorHandler) {\n    super();\n    this.baseErrorHandler = baseErrorHandler;\n    this.lastRead = null;\n    this.iterator = null;\n    this.moreIterators = iterators;\n  }\n  summary() {\n    const upstreamSummaries = \"TODO: fill in upstream of chained summaries\";\n    return `${upstreamSummaries} -> Chained`;\n  }\n  async next() {\n    this.lastRead = this.readFromChain(this.lastRead);\n    return this.lastRead;\n  }\n  async readFromChain(lastRead) {\n    await lastRead;\n    if (this.iterator == null) {\n      const iteratorResult = await this.moreIterators.next();\n      if (iteratorResult.done) {\n        return { value: null, done: true };\n      }\n      this.iterator = iteratorResult.value;\n      if (this.baseErrorHandler != null) {\n        this.iterator = this.iterator.handleErrors(this.baseErrorHandler);\n      }\n    }\n    const itemResult = await this.iterator.next();\n    if (itemResult.done) {\n      this.iterator = null;\n      return this.readFromChain(lastRead);\n    }\n    return itemResult;\n  }\n};\nvar ZipMismatchMode;\n(function(ZipMismatchMode2) {\n  ZipMismatchMode2[ZipMismatchMode2[\"FAIL\"] = 0] = \"FAIL\";\n  ZipMismatchMode2[ZipMismatchMode2[\"SHORTEST\"] = 1] = \"SHORTEST\";\n  ZipMismatchMode2[ZipMismatchMode2[\"LONGEST\"] = 2] = \"LONGEST\";\n})(ZipMismatchMode || (ZipMismatchMode = {}));\nvar ZipIterator = class extends LazyIterator {\n  constructor(iterators, mismatchMode = ZipMismatchMode.FAIL) {\n    super();\n    this.iterators = iterators;\n    this.mismatchMode = mismatchMode;\n    this.count = 0;\n    this.currentPromise = null;\n  }\n  summary() {\n    const upstreamSummaries = \"TODO: fill in upstream of zip summaries\";\n    return `{${upstreamSummaries}} -> Zip`;\n  }\n  async nextState(afterState) {\n    await afterState;\n    let numIterators = 0;\n    let iteratorsDone = 0;\n    function getNext(container) {\n      if (container instanceof LazyIterator) {\n        const result = container.next();\n        return {\n          value: result.then((x) => {\n            numIterators++;\n            if (x.done) {\n              iteratorsDone++;\n            }\n            return x.value;\n          }),\n          recurse: false\n        };\n      } else {\n        return { value: null, recurse: true };\n      }\n    }\n    const mapped = await deepMapAndAwaitAll(this.iterators, getNext);\n    if (numIterators === iteratorsDone) {\n      return { value: null, done: true };\n    }\n    if (iteratorsDone > 0) {\n      switch (this.mismatchMode) {\n        case ZipMismatchMode.FAIL:\n          throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);\n        case ZipMismatchMode.SHORTEST:\n          return { value: null, done: true };\n        case ZipMismatchMode.LONGEST:\n        default:\n      }\n    }\n    this.count++;\n    return { value: mapped, done: false };\n  }\n  async next() {\n    this.currentPromise = this.nextState(this.currentPromise);\n    return this.currentPromise;\n  }\n};\nvar PrefetchIterator = class extends LazyIterator {\n  constructor(upstream, bufferSize) {\n    super();\n    this.upstream = upstream;\n    this.bufferSize = bufferSize;\n    this.buffer = new RingBuffer(bufferSize);\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Prefetch`;\n  }\n  refill() {\n    while (!this.buffer.isFull()) {\n      const v = this.upstream.next();\n      this.buffer.push(v);\n    }\n  }\n  next() {\n    this.refill();\n    return this.buffer.shift();\n  }\n};\nvar ShuffleIterator = class extends PrefetchIterator {\n  constructor(upstream, windowSize, seed) {\n    super(upstream, windowSize);\n    this.upstream = upstream;\n    this.windowSize = windowSize;\n    this.upstreamExhausted = false;\n    this.random = seedrandom2.alea(seed || util_exports.now().toString());\n    this.lastRead = Promise.resolve({ value: null, done: false });\n  }\n  async next() {\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  randomInt(max6) {\n    return Math.floor(this.random() * max6);\n  }\n  chooseIndex() {\n    return this.randomInt(this.buffer.length());\n  }\n  async serialNext() {\n    if (!this.upstreamExhausted) {\n      this.refill();\n    }\n    while (!this.buffer.isEmpty()) {\n      const chosenIndex = this.chooseIndex();\n      const result = await this.buffer.shuffleExcise(chosenIndex);\n      if (result.done) {\n        this.upstreamExhausted = true;\n      } else {\n        this.refill();\n        return result;\n      }\n    }\n    return { value: null, done: true };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/dataset.js\nvar Dataset = class {\n  constructor() {\n    this.size = null;\n  }\n  batch(batchSize, smallLastBatch = true) {\n    const base = this;\n    util_exports.assert(batchSize > 0, () => `batchSize needs to be positive, but it is\n      ${batchSize}`);\n    let size;\n    if (this.size === Infinity || this.size == null) {\n      size = this.size;\n    } else if (smallLastBatch) {\n      size = Math.ceil(this.size / batchSize);\n    } else {\n      size = Math.floor(this.size / batchSize);\n    }\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat);\n    }, size);\n  }\n  concatenate(dataset) {\n    const base = this;\n    let size;\n    if (this.size === Infinity || dataset.size === Infinity) {\n      size = Infinity;\n    } else if (this.size != null && dataset.size != null) {\n      size = this.size + dataset.size;\n    } else {\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => (await base.iterator()).concatenate(await dataset.iterator()), size);\n  }\n  filter(predicate) {\n    const base = this;\n    let size;\n    if (this.size === Infinity) {\n      size = Infinity;\n    } else {\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).filter((x) => tidy(() => predicate(x)));\n    }, size);\n  }\n  async forEachAsync(f) {\n    return (await this.iterator()).forEachAsync(f);\n  }\n  map(transform5) {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).map((x) => tidy(() => transform5(x)));\n    }, this.size);\n  }\n  mapAsync(transform5) {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).mapAsync(transform5);\n    }, this.size);\n  }\n  prefetch(bufferSize) {\n    if (bufferSize == null) {\n      throw new RangeError(\"`Dataset.prefetch()` requires bufferSize to be specified.\");\n    }\n    const base = this;\n    return datasetFromIteratorFn(async () => (await base.iterator()).prefetch(bufferSize), this.size);\n  }\n  repeat(count2) {\n    const base = this;\n    let size;\n    if (this.size != null && count2 > 0) {\n      size = this.size * count2;\n    } else if (count2 === 0) {\n      size = 0;\n    } else if (this.size != null && (count2 === void 0 || count2 < 0)) {\n      size = Infinity;\n    } else {\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => {\n      const iteratorIterator = iteratorFromFunction(async () => ({ value: await base.iterator(), done: false }));\n      return iteratorFromConcatenated(iteratorIterator.take(count2));\n    }, size);\n  }\n  skip(count2) {\n    const base = this;\n    let size;\n    if (this.size != null && count2 >= 0 && this.size >= count2) {\n      size = this.size - count2;\n    } else if (this.size != null && (this.size < count2 || count2 === void 0 || count2 < 0)) {\n      size = 0;\n    } else {\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => (await base.iterator()).skip(count2), size);\n  }\n  shuffle(bufferSize, seed, reshuffleEachIteration = true) {\n    if (bufferSize == null || bufferSize < 0) {\n      if (this.size == null) {\n        throw new RangeError(\"`Dataset.shuffle()` requires bufferSize to be specified.\");\n      } else {\n        throw new RangeError(`\\`Dataset.shuffle()\\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \\`tf.Tensor\\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);\n      }\n    }\n    const base = this;\n    const random = seedrandom3.alea(seed || util_exports.now().toString());\n    return datasetFromIteratorFn(async () => {\n      let seed2 = random.int32();\n      if (reshuffleEachIteration) {\n        seed2 += random.int32();\n      }\n      return (await base.iterator()).shuffle(bufferSize, seed2.toString());\n    }, this.size);\n  }\n  take(count2) {\n    const base = this;\n    let size;\n    if (this.size != null && this.size > count2) {\n      size = count2;\n    } else if (this.size != null && this.size <= count2) {\n      size = this.size;\n    } else {\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => (await base.iterator()).take(count2), size);\n  }\n  async toArray() {\n    if (this.size === Infinity) {\n      throw new Error(\"Can not convert infinite data stream to array.\");\n    }\n    return (await this.iterator()).toArray();\n  }\n  async toArrayForTest() {\n    if (this.size === Infinity) {\n      throw new Error(\"Can not convert infinite data stream to array.\");\n    }\n    return (await this.iterator()).toArrayForTest();\n  }\n};\nDataset.MAX_BUFFER_SIZE = 1e4;\nfunction datasetFromIteratorFn(iteratorFn, size = null) {\n  return new class extends Dataset {\n    constructor() {\n      super(...arguments);\n      this.size = size;\n    }\n    async iterator() {\n      return iteratorFn();\n    }\n  }();\n}\nfunction array(items) {\n  return datasetFromIteratorFn(async () => iteratorFromItems(items), items.length);\n}\nfunction zip(datasets) {\n  if (!isIterable2(datasets)) {\n    throw new Error(\"The argument to zip() must be an object or array.\");\n  }\n  let size;\n  if (Array.isArray(datasets)) {\n    for (let i = 0; i < datasets.length; i++) {\n      size = size == null ? datasets[i].size : Math.min(size, datasets[i].size);\n    }\n  } else if (datasets instanceof Object) {\n    for (const ds in datasets) {\n      size = size == null ? datasets[ds].size : Math.min(size, datasets[ds].size);\n    }\n  }\n  return datasetFromIteratorFn(async () => {\n    const streams = await deepMapAndAwaitAll(datasets, (d) => {\n      if (d instanceof Dataset) {\n        return { value: d.iterator(), recurse: false };\n      } else if (isIterable2(d)) {\n        return { value: null, recurse: true };\n      } else {\n        throw new Error(\"Leaves of the structure passed to zip() must be Datasets, not primitives.\");\n      }\n    });\n    return iteratorFromZipped(streams, ZipMismatchMode.SHORTEST);\n  }, size);\n}\nfunction deepBatchConcat(rows) {\n  if (rows === null) {\n    return null;\n  }\n  const exampleRow = rows[0];\n  if (canTensorify(exampleRow)) {\n    const value = batchConcat(rows);\n    return { value, recurse: false };\n  }\n  return { value: null, recurse: true };\n}\nfunction batchConcat(arrays) {\n  if (arrays.length === 0) {\n    throw new Error(\"Can't make a batch of zero elements.\");\n  }\n  if (arrays[0] instanceof Tensor) {\n    return stack(arrays);\n  } else {\n    return tensor(arrays);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/datasets/text_line_dataset.js\nvar TextLineDataset = class extends Dataset {\n  constructor(input2) {\n    super();\n    this.input = input2;\n  }\n  async iterator() {\n    const inputIterator = await this.input.iterator();\n    const utf8Iterator = inputIterator.decodeUTF8();\n    const lineIterator = utf8Iterator.split(\"\\n\").map((line) => {\n      if (line.endsWith(\"\\r\")) {\n        line = line.slice(0, -1);\n      }\n      return line;\n    });\n    return lineIterator;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/datasets/csv_dataset.js\nvar CODE_QUOTE = '\"';\nvar STATE_OUT = Symbol(\"out\");\nvar STATE_FIELD = Symbol(\"field\");\nvar STATE_QUOTE = Symbol(\"quote\");\nvar STATE_QUOTE_AFTER_QUOTE = Symbol(\"quoteafterquote\");\nvar STATE_WITHIN_QUOTE_IN_QUOTE = Symbol(\"quoteinquote\");\nvar CSVDataset = class extends Dataset {\n  constructor(input2, csvConfig) {\n    super();\n    this.input = input2;\n    this.hasHeader = true;\n    this.fullColumnNames = null;\n    this.columnNamesValidated = false;\n    this.columnConfigs = null;\n    this.configuredColumnsOnly = false;\n    this.delimiter = \",\";\n    this.delimWhitespace = false;\n    this.base = new TextLineDataset(input2);\n    if (!csvConfig) {\n      csvConfig = {};\n    }\n    this.hasHeader = csvConfig.hasHeader === false ? false : true;\n    this.fullColumnNames = csvConfig.columnNames;\n    this.columnConfigs = csvConfig.columnConfigs;\n    this.configuredColumnsOnly = csvConfig.configuredColumnsOnly;\n    if (csvConfig.delimWhitespace) {\n      util_exports.assert(csvConfig.delimiter == null, () => \"Delimiter should not be provided when delimWhitespace is true.\");\n      this.delimWhitespace = true;\n      this.delimiter = \" \";\n    } else {\n      this.delimiter = csvConfig.delimiter ? csvConfig.delimiter : \",\";\n    }\n  }\n  async columnNames() {\n    if (!this.columnNamesValidated) {\n      await this.setColumnNames();\n    }\n    return this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames;\n  }\n  async setColumnNames() {\n    const columnNamesFromFile = await this.maybeReadHeaderLine();\n    if (!this.fullColumnNames && !columnNamesFromFile) {\n      throw new Error(\"Column names must be provided if there is no header line.\");\n    } else if (this.fullColumnNames && columnNamesFromFile) {\n      util_exports.assert(columnNamesFromFile.length === this.fullColumnNames.length, () => \"The length of provided columnNames (\" + this.fullColumnNames.length.toString() + \") does not match the length of the header line read from file (\" + columnNamesFromFile.length.toString() + \").\");\n    }\n    if (!this.fullColumnNames) {\n      this.fullColumnNames = columnNamesFromFile;\n    }\n    const counts = this.fullColumnNames.reduce((countAcc, name) => {\n      countAcc[name] = countAcc[name] + 1 || 1;\n      return countAcc;\n    }, {});\n    const duplicateNames = Object.keys(counts).filter((name) => counts[name] > 1);\n    util_exports.assert(duplicateNames.length === 0, () => \"Duplicate column names found: \" + duplicateNames.toString());\n    if (this.columnConfigs) {\n      for (const key of Object.keys(this.columnConfigs)) {\n        const index = this.fullColumnNames.indexOf(key);\n        if (index === -1) {\n          throw new Error('The key \"' + key + '\" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + \").\");\n        }\n      }\n    }\n    this.columnNamesValidated = true;\n  }\n  async maybeReadHeaderLine() {\n    if (this.hasHeader) {\n      const iter = await this.base.iterator();\n      const firstElement = await iter.next();\n      if (firstElement.done) {\n        throw new Error(\"No data was found for CSV parsing.\");\n      }\n      const firstLine = firstElement.value;\n      const headers = this.parseRow(firstLine, false);\n      return headers;\n    } else {\n      return null;\n    }\n  }\n  async iterator() {\n    if (!this.columnNamesValidated) {\n      await this.setColumnNames();\n    }\n    let lines = await this.base.iterator();\n    if (this.hasHeader) {\n      lines = lines.skip(1);\n    }\n    return lines.map((x) => this.makeDataElement(x));\n  }\n  makeDataElement(line) {\n    const values = this.parseRow(line);\n    const features = {};\n    const labels = {};\n    for (let i = 0; i < this.fullColumnNames.length; i++) {\n      const key = this.fullColumnNames[i];\n      const config = this.columnConfigs ? this.columnConfigs[key] : null;\n      if (this.configuredColumnsOnly && !config) {\n        continue;\n      } else {\n        const value = values[i];\n        let parsedValue = null;\n        if (value === \"\") {\n          if (config && config.default !== void 0) {\n            parsedValue = config.default;\n          } else if (config && (config.required || config.isLabel)) {\n            throw new Error(`Required column ${key} is empty in this line: ${line}`);\n          } else {\n            parsedValue = void 0;\n          }\n        } else {\n          const valueAsNum = Number(value);\n          if (isNaN(valueAsNum)) {\n            if (config && config.dtype === \"bool\") {\n              parsedValue = this.getBoolean(value);\n            } else {\n              parsedValue = value;\n            }\n          } else if (!config || !config.dtype) {\n            parsedValue = valueAsNum;\n          } else {\n            switch (config.dtype) {\n              case \"float32\":\n                parsedValue = valueAsNum;\n                break;\n              case \"int32\":\n                parsedValue = Math.floor(valueAsNum);\n                break;\n              case \"bool\":\n                parsedValue = this.getBoolean(value);\n                break;\n              default:\n                parsedValue = valueAsNum;\n            }\n          }\n        }\n        config && config.isLabel ? labels[key] = parsedValue : features[key] = parsedValue;\n      }\n    }\n    if (Object.keys(labels).length === 0) {\n      return features;\n    } else {\n      return { xs: features, ys: labels };\n    }\n  }\n  getBoolean(value) {\n    if (value === \"1\" || value.toLowerCase() === \"true\") {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n  parseRow(line, validateElementCount = true) {\n    const result = [];\n    let readOffset = 0;\n    const readLength = line.length;\n    let currentState = STATE_OUT;\n    for (let i = 0; i < readLength; i++) {\n      switch (currentState) {\n        case STATE_OUT:\n          switch (line.charAt(i)) {\n            case CODE_QUOTE:\n              readOffset = i + 1;\n              currentState = STATE_QUOTE;\n              break;\n            case this.delimiter:\n              readOffset = i + 1;\n              if (this.delimiter === \" \" && this.delimWhitespace) {\n                break;\n              }\n              result.push(\"\");\n              currentState = STATE_OUT;\n              break;\n            default:\n              currentState = STATE_FIELD;\n              readOffset = i;\n              break;\n          }\n          break;\n        case STATE_FIELD:\n          switch (line.charAt(i)) {\n            case this.delimiter:\n              result.push(line.substring(readOffset, i));\n              currentState = STATE_OUT;\n              readOffset = i + 1;\n              break;\n            default:\n          }\n          break;\n        case STATE_QUOTE:\n          switch (line.charAt(i)) {\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE_AFTER_QUOTE;\n              break;\n            default:\n          }\n          break;\n        case STATE_QUOTE_AFTER_QUOTE:\n          switch (line.charAt(i)) {\n            case this.delimiter:\n              result.push(line.substring(readOffset, i - 1));\n              currentState = STATE_OUT;\n              readOffset = i + 1;\n              break;\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE;\n              break;\n            default:\n              currentState = STATE_WITHIN_QUOTE_IN_QUOTE;\n              break;\n          }\n          break;\n        case STATE_WITHIN_QUOTE_IN_QUOTE:\n          switch (line.charAt(i)) {\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE;\n              break;\n            default:\n          }\n          break;\n        default:\n      }\n    }\n    if (currentState === STATE_QUOTE_AFTER_QUOTE) {\n      result.push(line.substring(readOffset, readLength - 1));\n    } else {\n      result.push(line.substring(readOffset));\n    }\n    if (validateElementCount && result.length !== this.fullColumnNames.length) {\n      throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${result}`);\n    }\n    return result;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/iterators/microphone_iterator.js\nvar MicrophoneIterator = class extends LazyIterator {\n  constructor(microphoneConfig) {\n    super();\n    this.microphoneConfig = microphoneConfig;\n    this.isClosed = false;\n    this.fftSize = microphoneConfig.fftSize || 1024;\n    const fftSizeLog2 = Math.log2(this.fftSize);\n    if (this.fftSize < 0 || fftSizeLog2 < 4 || fftSizeLog2 > 14 || !Number.isInteger(fftSizeLog2)) {\n      throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);\n    }\n    this.numFrames = microphoneConfig.numFramesPerSpectrogram || 43;\n    this.sampleRateHz = microphoneConfig.sampleRateHz;\n    this.columnTruncateLength = microphoneConfig.columnTruncateLength || this.fftSize;\n    this.audioTrackConstraints = microphoneConfig.audioTrackConstraints;\n    this.smoothingTimeConstant = microphoneConfig.smoothingTimeConstant || 0;\n    this.includeSpectrogram = microphoneConfig.includeSpectrogram === false ? false : true;\n    this.includeWaveform = microphoneConfig.includeWaveform === true ? true : false;\n    if (!this.includeSpectrogram && !this.includeWaveform) {\n      throw new Error(\"Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.\");\n    }\n  }\n  summary() {\n    return `microphone`;\n  }\n  static async create(microphoneConfig = {}) {\n    if (env().get(\"IS_NODE\")) {\n      throw new Error(\"microphone API is only supported in browser environment.\");\n    }\n    const microphoneIterator = new MicrophoneIterator(microphoneConfig);\n    await microphoneIterator.start();\n    return microphoneIterator;\n  }\n  async start() {\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia({\n        audio: this.audioTrackConstraints == null ? true : this.audioTrackConstraints,\n        video: false\n      });\n    } catch (e) {\n      throw new Error(`Error thrown while initializing video stream: ${e.message}`);\n    }\n    if (!this.stream) {\n      throw new Error(\"Could not obtain audio from microphone.\");\n    }\n    const ctxConstructor = window.AudioContext || window.webkitAudioContext;\n    this.audioContext = new ctxConstructor();\n    if (!this.sampleRateHz) {\n      this.sampleRateHz = this.audioContext.sampleRate;\n    } else if (this.audioContext.sampleRate !== this.sampleRateHz) {\n      throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`);\n    }\n    const streamSource = this.audioContext.createMediaStreamSource(this.stream);\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = this.fftSize * 2;\n    this.analyser.smoothingTimeConstant = this.smoothingTimeConstant;\n    streamSource.connect(this.analyser);\n    this.freqData = new Float32Array(this.fftSize);\n    this.timeData = new Float32Array(this.fftSize);\n    return;\n  }\n  async next() {\n    if (this.isClosed) {\n      return { value: null, done: true };\n    }\n    let spectrogramTensor;\n    let waveformTensor;\n    const audioDataQueue = await this.getAudioData();\n    if (this.includeSpectrogram) {\n      const freqData = this.flattenQueue(audioDataQueue.freqDataQueue);\n      spectrogramTensor = this.getTensorFromAudioDataArray(freqData, [this.numFrames, this.columnTruncateLength, 1]);\n    }\n    if (this.includeWaveform) {\n      const timeData = this.flattenQueue(audioDataQueue.timeDataQueue);\n      waveformTensor = this.getTensorFromAudioDataArray(timeData, [this.numFrames * this.fftSize, 1]);\n    }\n    return {\n      value: { \"spectrogram\": spectrogramTensor, \"waveform\": waveformTensor },\n      done: false\n    };\n  }\n  async capture() {\n    return (await this.next()).value;\n  }\n  async getAudioData() {\n    const freqDataQueue = [];\n    const timeDataQueue = [];\n    let currentFrames = 0;\n    return new Promise((resolve) => {\n      const intervalID = setInterval(() => {\n        if (this.includeSpectrogram) {\n          this.analyser.getFloatFrequencyData(this.freqData);\n          if (this.freqData[0] === -Infinity) {\n            resolve({ freqDataQueue, timeDataQueue });\n          }\n          freqDataQueue.push(this.freqData.slice(0, this.columnTruncateLength));\n        }\n        if (this.includeWaveform) {\n          this.analyser.getFloatTimeDomainData(this.timeData);\n          timeDataQueue.push(this.timeData.slice());\n        }\n        if (++currentFrames === this.numFrames) {\n          clearInterval(intervalID);\n          resolve({ freqDataQueue, timeDataQueue });\n        }\n      }, this.fftSize / this.sampleRateHz * 1e3);\n    });\n  }\n  stop() {\n    if (!this.isClosed) {\n      this.isClosed = true;\n      this.analyser.disconnect();\n      this.audioContext.close();\n      if (this.stream != null && this.stream.getTracks().length > 0) {\n        this.stream.getTracks()[0].stop();\n      }\n    }\n  }\n  toArray() {\n    throw new Error(\"Can not convert infinite audio stream to array.\");\n  }\n  getSampleRate() {\n    return this.sampleRateHz;\n  }\n  flattenQueue(queue) {\n    const frameSize = queue[0].length;\n    const freqData = new Float32Array(queue.length * frameSize);\n    queue.forEach((data, i) => freqData.set(data, i * frameSize));\n    return freqData;\n  }\n  getTensorFromAudioDataArray(freqData, shape) {\n    const vals = new Float32Array(util_exports.sizeFromShape(shape));\n    vals.set(freqData, vals.length - freqData.length);\n    return tensor(vals, shape);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/iterators/webcam_iterator.js\nvar WebcamIterator = class extends LazyIterator {\n  constructor(webcamVideoElement, webcamConfig) {\n    super();\n    this.webcamVideoElement = webcamVideoElement;\n    this.webcamConfig = webcamConfig;\n    this.isClosed = true;\n    this.resize = false;\n    if (this.needToResize()) {\n      this.resize = true;\n      this.cropSize = [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth];\n      this.cropBoxInd = tensor1d([0], \"int32\");\n      if (this.webcamConfig.centerCrop) {\n        const widthCroppingRatio = this.webcamConfig.resizeWidth * 1 / this.webcamVideoElement.width;\n        const heightCroppingRatio = this.webcamConfig.resizeHeight * 1 / this.webcamVideoElement.height;\n        const widthCropStart = (1 - widthCroppingRatio) / 2;\n        const heightCropStart = (1 - heightCroppingRatio) / 2;\n        const widthCropEnd = widthCropStart + widthCroppingRatio;\n        const heightCropEnd = heightCroppingRatio + heightCropStart;\n        this.cropBox = tensor2d([heightCropStart, widthCropStart, heightCropEnd, widthCropEnd], [1, 4]);\n      } else {\n        this.cropBox = tensor2d([0, 0, 1, 1], [1, 4]);\n      }\n    }\n  }\n  summary() {\n    return `webcam`;\n  }\n  static async create(webcamVideoElement, webcamConfig = {}) {\n    if (env().get(\"IS_NODE\")) {\n      throw new Error(\"tf.data.webcam is only supported in browser environment.\");\n    }\n    if (!webcamVideoElement) {\n      webcamVideoElement = document.createElement(\"video\");\n      if (!webcamConfig.resizeWidth || !webcamConfig.resizeHeight) {\n        throw new Error(\"Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.\");\n      }\n      webcamVideoElement.width = webcamConfig.resizeWidth;\n      webcamVideoElement.height = webcamConfig.resizeHeight;\n    }\n    const webcamIterator = new WebcamIterator(webcamVideoElement, webcamConfig);\n    await webcamIterator.start();\n    return webcamIterator;\n  }\n  async start() {\n    if (this.webcamConfig.facingMode) {\n      util_exports.assert(this.webcamConfig.facingMode === \"user\" || this.webcamConfig.facingMode === \"environment\", () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);\n    }\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          deviceId: this.webcamConfig.deviceId,\n          facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : \"user\",\n          width: this.webcamVideoElement.width,\n          height: this.webcamVideoElement.height\n        }\n      });\n    } catch (e) {\n      e.message = `Error thrown while initializing video stream: ${e.message}`;\n      throw e;\n    }\n    if (!this.stream) {\n      throw new Error(\"Could not obtain video from webcam.\");\n    }\n    try {\n      this.webcamVideoElement.srcObject = this.stream;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);\n    }\n    this.webcamVideoElement.play();\n    this.isClosed = false;\n    return new Promise((resolve) => {\n      this.webcamVideoElement.onloadedmetadata = () => {\n        resolve();\n      };\n    });\n  }\n  async next() {\n    if (this.isClosed) {\n      return { value: null, done: true };\n    }\n    let img;\n    try {\n      img = browser_exports.fromPixels(this.webcamVideoElement);\n    } catch (e) {\n      throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`);\n    }\n    if (this.resize) {\n      try {\n        return { value: this.cropAndResizeFrame(img), done: false };\n      } catch (e) {\n        throw new Error(`Error thrown cropping the video: ${e.message}`);\n      } finally {\n        img.dispose();\n      }\n    } else {\n      return { value: img, done: false };\n    }\n  }\n  needToResize() {\n    if (this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) {\n      return true;\n    }\n    return false;\n  }\n  cropAndResizeFrame(img) {\n    return tidy(() => {\n      const expandedImage = expandDims(cast(img, \"float32\"), 0);\n      let resizedImage;\n      resizedImage = image.cropAndResize(expandedImage, this.cropBox, this.cropBoxInd, this.cropSize, \"bilinear\");\n      const shape = resizedImage.shape;\n      return reshape(resizedImage, shape.slice(1));\n    });\n  }\n  async capture() {\n    return (await this.next()).value;\n  }\n  stop() {\n    const tracks = this.stream.getTracks();\n    tracks.forEach((track) => track.stop());\n    try {\n      this.webcamVideoElement.srcObject = null;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = null;\n    }\n    this.isClosed = true;\n  }\n  toArray() {\n    throw new Error(\"Can not convert infinite video stream to array.\");\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/datasource.js\nvar DataSource = class {\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/iterators/string_iterator.js\nvar StringIterator = class extends LazyIterator {\n  split(separator) {\n    return new SplitIterator(this, separator);\n  }\n};\nvar SplitIterator = class extends StringIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.impl = new SplitIteratorImpl(upstream, separator);\n  }\n  summary() {\n    return this.impl.summary();\n  }\n  async next() {\n    return this.impl.next();\n  }\n};\nvar SplitIteratorImpl = class extends OneToManyIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.separator = separator;\n    this.carryover = \"\";\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Split('${this.separator}')`;\n  }\n  async pump() {\n    const chunkResult = await this.upstream.next();\n    if (chunkResult.done) {\n      if (this.carryover === \"\") {\n        return false;\n      }\n      this.outputQueue.push(this.carryover);\n      this.carryover = \"\";\n      return true;\n    }\n    const lines = chunkResult.value.split(this.separator);\n    lines[0] = this.carryover + lines[0];\n    for (const line of lines.slice(0, -1)) {\n      this.outputQueue.push(line);\n    }\n    this.carryover = lines[lines.length - 1];\n    return true;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/iterators/byte_chunk_iterator.js\nvar ByteChunkIterator = class extends LazyIterator {\n  decodeUTF8() {\n    return new Utf8Iterator(this);\n  }\n};\nvar Utf8Iterator = class extends StringIterator {\n  constructor(upstream) {\n    super();\n    this.upstream = upstream;\n    this.impl = new Utf8IteratorImpl(upstream);\n  }\n  summary() {\n    return this.impl.summary();\n  }\n  async next() {\n    return this.impl.next();\n  }\n};\nvar Utf8IteratorImpl = class extends OneToManyIterator {\n  constructor(upstream) {\n    super();\n    this.upstream = upstream;\n    if (env().get(\"IS_BROWSER\")) {\n      this.decoder = new TextDecoder(\"utf-8\");\n    } else {\n      const { StringDecoder } = require_string_decoder();\n      this.decoder = new StringDecoder(\"utf8\");\n    }\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Utf8`;\n  }\n  async pump() {\n    const chunkResult = await this.upstream.next();\n    let chunk;\n    if (chunkResult.done) {\n      return false;\n    } else {\n      chunk = chunkResult.value;\n    }\n    let text;\n    if (env().get(\"IS_BROWSER\")) {\n      text = this.decoder.decode(chunk, { stream: true });\n    } else {\n      text = this.decoder.write(Buffer.from(chunk.buffer));\n    }\n    this.outputQueue.push(text);\n    return true;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/iterators/file_chunk_iterator.js\nvar FileChunkIterator = class extends ByteChunkIterator {\n  constructor(file, options = {}) {\n    super();\n    this.file = file;\n    this.options = options;\n    util_exports.assert(file instanceof Uint8Array || (env().get(\"IS_BROWSER\") ? file instanceof File || file instanceof Blob : false), () => \"FileChunkIterator only supports File, Blob and Uint8Array right now.\");\n    this.offset = options.offset || 0;\n    this.chunkSize = options.chunkSize || 1024 * 1024;\n  }\n  summary() {\n    return `FileChunks ${this.file}`;\n  }\n  async next() {\n    if (this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size)) {\n      return { value: null, done: true };\n    }\n    const chunk = new Promise((resolve, reject) => {\n      const end = this.offset + this.chunkSize;\n      if (this.file instanceof Uint8Array) {\n        resolve(new Uint8Array(this.file.slice(this.offset, end)));\n      } else {\n        const fileReader = new FileReader();\n        fileReader.onload = (event) => {\n          let data = fileReader.result;\n          if (data instanceof ArrayBuffer) {\n            data = new Uint8Array(data);\n          }\n          if (!(data instanceof Uint8Array)) {\n            return reject(new TypeError(\"FileReader returned unknown type.\"));\n          }\n          resolve(data);\n        };\n        fileReader.onabort = (event) => {\n          return reject(new Error(\"Aborted\"));\n        };\n        fileReader.onerror = (event) => {\n          return reject(new Error(event.type));\n        };\n        const slice5 = this.file.slice(this.offset, end);\n        fileReader.readAsArrayBuffer(slice5);\n      }\n      this.offset = end;\n    });\n    return { value: await chunk, done: false };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/iterators/url_chunk_iterator.js\nasync function urlChunkIterator(url, options = {}, fetchFunc) {\n  let urlString;\n  let requestInit;\n  if (typeof url === \"string\") {\n    urlString = url;\n  } else {\n    urlString = url.url;\n    requestInit = getRequestInitFromRequest(url);\n  }\n  const response = await (fetchFunc || util_exports.fetch)(urlString, requestInit);\n  if (response.ok) {\n    const uint8Array = new Uint8Array(await response.arrayBuffer());\n    return new FileChunkIterator(uint8Array, options);\n  } else {\n    throw new Error(response.statusText);\n  }\n}\nvar getRequestInitFromRequest = (request) => {\n  const init2 = {\n    method: request.method,\n    headers: request.headers,\n    body: request.body,\n    mode: request.mode,\n    credentials: request.credentials,\n    cache: request.cache,\n    redirect: request.redirect,\n    referrer: request.referrer,\n    integrity: request.integrity\n  };\n  return init2;\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/util/source_util.js\nfunction isLocalPath(source) {\n  return typeof source === \"string\" && source.substr(0, 7) === \"file://\";\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/sources/file_data_source.js\nvar FileDataSource = class extends DataSource {\n  constructor(input2, options = {}) {\n    super();\n    this.input = input2;\n    this.options = options;\n  }\n  async iterator() {\n    if (isLocalPath(this.input) && env().get(\"IS_NODE\")) {\n      const fs = require_fs();\n      this.input = fs.readFileSync(this.input.substr(7));\n    }\n    return new FileChunkIterator(this.input, this.options);\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/sources/url_data_source.js\nvar URLDataSource = class extends DataSource {\n  constructor(url, fileOptions = {}) {\n    super();\n    this.url = url;\n    this.fileOptions = fileOptions;\n  }\n  async iterator() {\n    if (isLocalPath(this.url)) {\n      return new FileDataSource(this.url, this.fileOptions).iterator();\n    } else {\n      return urlChunkIterator(this.url, this.fileOptions);\n    }\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/readers.js\nfunction csv(source, csvConfig = {}) {\n  return new CSVDataset(new URLDataSource(source), csvConfig);\n}\nfunction func(f) {\n  const iter = iteratorFromFunction(f);\n  return datasetFromIteratorFn(async () => iter);\n}\nfunction generator(generator2) {\n  return datasetFromIteratorFn(async () => {\n    const gen = await generator2();\n    return iteratorFromFunction(() => gen.next());\n  });\n}\nasync function webcam(webcamVideoElement, webcamConfig) {\n  return WebcamIterator.create(webcamVideoElement, webcamConfig);\n}\nasync function microphone(microphoneConfig) {\n  return MicrophoneIterator.create(microphoneConfig);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-data@3.13.0_dadde02861a8b00ace7633d17571891e/node_modules/@tensorflow/tfjs-data/dist/version.js\nvar version4 = \"3.13.0\";\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js\nfunction assertNotComplex(tensor2, opName) {\n  if (!Array.isArray(tensor2)) {\n    tensor2 = [tensor2];\n  }\n  tensor2.forEach((t) => {\n    if (t != null) {\n      util_exports.assert(t.dtype !== \"complex64\", () => `${opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/backend_cpu.js\nvar whereImpl2 = kernel_impls_exports.whereImpl;\nvar MathBackendCPU = class extends KernelBackend {\n  constructor() {\n    super();\n    this.blockSize = 48;\n    this.firstUse = true;\n    this.data = new DataStorage(this, engine());\n  }\n  nextDataId() {\n    return MathBackendCPU.nextDataId++;\n  }\n  write(values, shape, dtype) {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get(\"IS_NODE\")) {\n        backend_util_exports.warn(\"\\n============================\\nHi there \\u{1F44B}. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\\n============================\");\n      }\n    }\n    const dataId = { id: this.nextDataId() };\n    this.data.set(dataId, { values, dtype, refCount: 1 });\n    return dataId;\n  }\n  makeTensorInfo(shape, dtype, values) {\n    let outId;\n    if (dtype === \"string\" && values != null && values.length > 0 && util_exports.isString(values[0])) {\n      const encodedValues = values.map((d) => util_exports.encodeString(d));\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values, shape, dtype);\n    }\n    return { dataId: outId, shape, dtype };\n  }\n  refCount(dataId) {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n  incRef(dataId) {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n  decRef(dataId) {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n  move(dataId, values, shape, dtype, refCount) {\n    this.data.set(dataId, { values, dtype, refCount });\n  }\n  numDataIds() {\n    return this.data.numDataIds();\n  }\n  async read(dataId) {\n    return this.readSync(dataId);\n  }\n  readSync(dataId) {\n    const { dtype, complexTensorInfos } = this.data.get(dataId);\n    if (dtype === \"complex64\") {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      return backend_util_exports.mergeRealAndImagArrays(realValues, imagValues);\n    }\n    return this.data.get(dataId).values;\n  }\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n    let decodedData = data;\n    if (t.dtype === \"string\") {\n      try {\n        decodedData = data.map((d) => util_exports.decodeString(d));\n      } catch (_a) {\n        throw new Error(\"Failed to decode encoded string bytes into utf-8\");\n      }\n    }\n    return buffer(t.shape, t.dtype, decodedData);\n  }\n  makeOutput(values, shape, dtype) {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n  }\n  disposeData(dataId, force = false) {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n      const { complexTensorInfos } = this.data.get(dataId);\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n  disposeIntermediateTensorInfo(tensorInfo) {\n    this.disposeData(tensorInfo.dataId);\n  }\n  async time(f) {\n    const start = util_exports.now();\n    f();\n    const kernelMs = util_exports.now() - start;\n    return { kernelMs };\n  }\n  memory() {\n    return {\n      unreliable: true,\n      reasons: [\"The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less.\"]\n    };\n  }\n  where(condition) {\n    assertNotComplex([condition], \"where\");\n    const condVals = this.readSync(condition.dataId);\n    return whereImpl2(condition.shape, condVals);\n  }\n  dispose() {\n  }\n  floatPrecision() {\n    return 32;\n  }\n  epsilon() {\n    return super.epsilon();\n  }\n};\nMathBackendCPU.nextDataId = 0;\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js\nvar shared_exports = {};\n__export(shared_exports, {\n  addImpl: () => addImpl,\n  bincountImpl: () => bincountImpl,\n  bincountReduceImpl: () => bincountReduceImpl,\n  ceilImpl: () => ceilImpl,\n  concatImpl: () => concatImpl,\n  equalImpl: () => equalImpl,\n  expImpl: () => expImpl,\n  expm1Impl: () => expm1Impl,\n  floorImpl: () => floorImpl,\n  gatherNdImpl: () => gatherNdImpl,\n  gatherV2Impl: () => gatherV2Impl,\n  greaterEqualImpl: () => greaterEqualImpl,\n  greaterImpl: () => greaterImpl,\n  lessEqualImpl: () => lessEqualImpl,\n  lessImpl: () => lessImpl,\n  linSpaceImpl: () => linSpaceImpl,\n  logImpl: () => logImpl,\n  maxImpl: () => maxImpl,\n  maximumImpl: () => maximumImpl,\n  minimumImpl: () => minimumImpl,\n  multiplyImpl: () => multiplyImpl,\n  negImpl: () => negImpl,\n  notEqualImpl: () => notEqualImpl,\n  prodImpl: () => prodImpl,\n  rangeImpl: () => rangeImpl,\n  rsqrtImpl: () => rsqrtImpl,\n  sigmoidImpl: () => sigmoidImpl,\n  simpleAbsImpl: () => simpleAbsImpl,\n  sliceImpl: () => sliceImpl,\n  sparseFillEmptyRowsImpl: () => sparseFillEmptyRowsImpl,\n  sparseReshapeImpl: () => sparseReshapeImpl,\n  sparseSegmentReductionImpl: () => sparseSegmentReductionImpl,\n  sqrtImpl: () => sqrtImpl,\n  squaredDifferenceImpl: () => squaredDifferenceImpl,\n  stridedSliceImpl: () => stridedSliceImpl,\n  stringNGramsImpl: () => stringNGramsImpl,\n  stringSplitImpl: () => stringSplitImpl,\n  stringToHashBucketFastImpl: () => stringToHashBucketFastImpl,\n  subImpl: () => subImpl,\n  tileImpl: () => tileImpl,\n  topKImpl: () => topKImpl,\n  transposeImpl: () => transposeImpl,\n  uniqueImpl: () => uniqueImpl\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js\nfunction simpleAbsImpl(vals) {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\nvar abs2 = (args) => {\n  const { x } = args.inputs;\n  const cpuBackend = args.backend;\n  assertNotComplex(x, \"abs\");\n  let resultValues = new Float32Array(util_exports.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values;\n  resultValues = simpleAbsImpl(values);\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\nvar absConfig = {\n  kernelName: Abs,\n  backendName: \"cpu\",\n  kernelFunc: abs2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js\nfunction createSimpleBinaryKernelImpl(op2) {\n  return (aShape, bShape, aVals, bVals, dtype) => {\n    const newShape = backend_util_exports.assertAndGetBroadcastShape(aShape, bShape);\n    const resultRank = newShape.length;\n    const resultStrides = util_exports.computeStrides(newShape);\n    const resultSize = util_exports.sizeFromShape(newShape);\n    const result = util_exports.getTypedArrayFromDType(dtype, resultSize);\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n    const aStrides = util_exports.computeStrides(aShape);\n    const bStrides = util_exports.computeStrides(bShape);\n    const aBroadcastDims = backend_util_exports.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util_exports.getBroadcastDims(bShape, newShape);\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op2(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util_exports.indexToLoc(i, resultRank, resultStrides);\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach((d) => aLoc[d] = 0);\n        const aIndex = util_exports.locToIndex(aLoc, aRank, aStrides);\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach((d) => bLoc[d] = 0);\n        const bIndex = util_exports.locToIndex(bLoc, bRank, bStrides);\n        result[i] = op2(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n    return [result, newShape];\n  };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Complex.js\nfunction complex2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { real: real4, imag: imag4 } = inputs;\n  const realVals = backend2.data.get(real4.dataId).values;\n  const imagVals = backend2.data.get(imag4.dataId).values;\n  const complexInfo = backend2.makeTensorInfo(real4.shape, \"complex64\");\n  const complex4 = backend2.data.get(complexInfo.dataId);\n  complex4.complexTensorInfos = {\n    real: backend2.makeTensorInfo(real4.shape, \"float32\", realVals),\n    imag: backend2.makeTensorInfo(imag4.shape, \"float32\", imagVals)\n  };\n  return complexInfo;\n}\nvar complexConfig = {\n  kernelName: Complex,\n  backendName: \"cpu\",\n  kernelFunc: complex2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/zeros_impl.js\nfunction zeros3(backend2, shape, dtype = \"float32\") {\n  if (dtype === \"complex64\") {\n    const real4 = zeros3(backend2, shape, \"float32\");\n    const imag4 = zeros3(backend2, shape, \"float32\");\n    return complex2({ inputs: { real: real4, imag: imag4 }, backend: backend2 });\n  }\n  const values = util_exports.makeZerosTypedArray(util_exports.sizeFromShape(shape), dtype);\n  return backend2.makeTensorInfo(shape, dtype, values);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Identity.js\nfunction identity2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x } = inputs;\n  backend2.incRef(x.dataId);\n  return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };\n}\nvar identityConfig = {\n  kernelName: Identity,\n  backendName: \"cpu\",\n  kernelFunc: identity2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Real.js\nfunction real2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { input: input2 } = inputs;\n  const real4 = backend2.data.get(input2.dataId).complexTensorInfos.real;\n  const realVal = backend2.data.get(real4.dataId).values;\n  return backend2.makeTensorInfo(real4.shape, real4.dtype, realVal);\n}\nvar realConfig = {\n  kernelName: Real,\n  backendName: \"cpu\",\n  kernelFunc: real2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cast.js\nfunction cast3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { dtype } = attrs;\n  if (dtype === \"complex64\") {\n    if (x.dtype === \"complex64\") {\n      return identity2({ inputs: { x }, backend: backend2 });\n    }\n    const zerosTensorInfo = zeros3(backend2, x.shape, x.dtype);\n    const floatX = cast3({ inputs: { x }, backend: backend2, attrs: { dtype: \"float32\" } });\n    const result = complex2({ inputs: { real: floatX, imag: zerosTensorInfo }, backend: backend2 });\n    backend2.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend2.disposeIntermediateTensorInfo(floatX);\n    return result;\n  }\n  if (x.dtype === \"complex64\") {\n    const realPart = real2({ inputs: { input: x }, backend: backend2 });\n    const result = cast3({ inputs: { x: realPart }, backend: backend2, attrs: { dtype } });\n    backend2.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n  if (!util_exports.hasEncodingLoss(x.dtype, dtype)) {\n    const result = identity2({ inputs: { x }, backend: backend2 });\n    return { dataId: result.dataId, shape: result.shape, dtype };\n  }\n  if (dtype === \"int32\") {\n    const values = backend2.data.get(x.dataId).values;\n    const resultValues = Int32Array.from(values);\n    return backend2.makeTensorInfo(x.shape, \"int32\", resultValues);\n  }\n  if (dtype === \"bool\") {\n    const xVals = backend2.data.get(x.dataId).values;\n    const zero = util_exports.toTypedArray([0], x.dtype);\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl((a, b) => a !== b ? 1 : 0)(x.shape, [], xVals, zero, \"bool\");\n    return backend2.makeTensorInfo(resultShape, \"bool\", resultData);\n  }\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nvar castConfig = {\n  kernelName: Cast,\n  backendName: \"cpu\",\n  kernelFunc: cast3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js\nfunction binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n  if (complexImpl == null) {\n    return ({ inputs, backend: backend2 }) => {\n      const { a, b } = inputs;\n      const cpuBackend = backend2;\n      assertNotComplex([a, b], name);\n      const aVals = cpuBackend.data.get(a.dataId).values;\n      const bVals = cpuBackend.data.get(b.dataId).values;\n      const decodedAVals = a.dtype === \"string\" ? backend_util_exports.fromUint8ToStringArray(aVals) : aVals;\n      const decodedBVals = a.dtype === \"string\" ? backend_util_exports.fromUint8ToStringArray(bVals) : bVals;\n      const $dtype = dtype || a.dtype;\n      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n  return ({ inputs, backend: backend2 }) => {\n    const { a, b } = inputs;\n    const cpuBackend = backend2;\n    if (a.dtype === \"complex64\" || b.dtype === \"complex64\") {\n      const $aComplex = cast3({ inputs: { x: a }, backend: cpuBackend, attrs: { dtype: \"complex64\" } });\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n      const aRealVals = cpuBackend.data.get(aReal.dataId).values;\n      const aImagVals = cpuBackend.data.get(aImag.dataId).values;\n      const $bComplex = cast3({ inputs: { x: b }, backend: cpuBackend, attrs: { dtype: \"complex64\" } });\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n      const bRealVals = cpuBackend.data.get(bReal.dataId).values;\n      const bImagVals = cpuBackend.data.get(bImag.dataId).values;\n      const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n      const resultReal = cpuBackend.makeTensorInfo(resultShape, \"float32\", resultRealData);\n      const resultImag = cpuBackend.makeTensorInfo(resultShape, \"float32\", resultImagData);\n      const result = complex2({ inputs: { real: resultReal, imag: resultImag }, backend: cpuBackend });\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values;\n      const bVals = cpuBackend.data.get(b.dataId).values;\n      const $dtype = dtype || a.dtype;\n      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\nfunction createComplexBinaryKernelImpl(op2) {\n  return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\n    const resultShape = backend_util_exports.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util_exports.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util_exports.computeStrides(resultShape);\n    const resultRealVals = util_exports.getTypedArrayFromDType(\"float32\", resultSize);\n    const resultImagVals = util_exports.getTypedArrayFromDType(\"float32\", resultSize);\n    const aBroadcastDims = backend_util_exports.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util_exports.getBroadcastDims(bShape, resultShape);\n    const aVals = backend_util_exports.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util_exports.mergeRealAndImagArrays(bRealVals, bImagVals);\n    const aRank = aShape.length;\n    const aStrides = util_exports.computeStrides(aShape);\n    const bRank = bShape.length;\n    const bStrides = util_exports.computeStrides(bShape);\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n        const result = op2(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util_exports.indexToLoc(i, resultRank, resultStrides);\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach((d) => aLoc[d] = 0);\n        const aIndex = util_exports.locToIndex(aLoc, aRank, aStrides);\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach((d) => bLoc[d] = 0);\n        const bIndex = util_exports.locToIndex(bLoc, bRank, bStrides);\n        const opResult = op2(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js\nvar addImpl = createSimpleBinaryKernelImpl((a, b) => a + b);\nvar addComplexImpl = createComplexBinaryKernelImpl((aReal, aImag, bReal, bImag) => {\n  return { real: aReal + bReal, imag: aImag + bImag };\n});\nvar add4 = binaryKernelFunc(Add, addImpl, addComplexImpl);\nvar addConfig = {\n  kernelName: Add,\n  backendName: \"cpu\",\n  kernelFunc: add4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js\nfunction bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n  const weightsSize = util_exports.sizeFromShape(weightsShape);\n  const outVals = util_exports.makeZerosTypedArray(size, weightsDtype);\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error(\"Input x must be non-negative!\");\n    }\n    if (value >= size) {\n      continue;\n    }\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n  return outVals;\n}\nfunction bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error(\"Input x must be non-negative!\");\n      }\n      if (value >= size) {\n        continue;\n      }\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n  return outBuf;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js\nfunction createSimpleUnaryImpl(op2) {\n  return (values, dtype, attrs) => {\n    const newValues = util_exports.getTypedArrayFromDType(dtype, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op2(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js\nfunction unaryKernelFunc(name, op2, dtype) {\n  return ({ inputs, attrs, backend: backend2 }) => {\n    const { x } = inputs;\n    assertNotComplex(x, name);\n    if (x.dtype === \"string\" || dtype === \"string\") {\n      throw new Error(\"unaryKernelFunc does not support string input/output\");\n    }\n    const cpuBackend = backend2;\n    const values = cpuBackend.data.get(x.dataId).values;\n    const xSize = util_exports.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util_exports.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op2(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\nfunction unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n  return ({ inputs, attrs, backend: backend2 }) => {\n    const { x } = inputs;\n    assertNotComplex(x, name);\n    if (x.dtype === \"string\" || dtype === \"string\") {\n      throw new Error(\"unaryKernelFunc does not support string input/output\");\n    }\n    const cpuBackend = backend2;\n    const values = cpuBackend.data.get(x.dataId).values;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js\nvar ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nvar ceil2 = unaryKernelFuncFromImpl(Ceil, ceilImpl);\nvar ceilConfig = {\n  kernelName: Ceil,\n  backendName: \"cpu\",\n  kernelFunc: ceil2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js\nfunction concatImpl(inputs, outShape, dtype, simplyConcat) {\n  const outVals = util_exports.getArrayFromDType(dtype, util_exports.sizeFromShape(outShape));\n  if (simplyConcat && dtype !== \"string\") {\n    let offset = 0;\n    inputs.forEach((input2) => {\n      const size = util_exports.sizeFromShape(input2.shape);\n      outVals.set(input2.vals, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n    inputs.forEach((input2) => {\n      const decodedData = dtype === \"string\" ? backend_util_exports.fromUint8ToStringArray(input2.vals) : input2.vals;\n      let tIdx = 0;\n      for (let row = 0; row < input2.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input2.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n      colOffset += input2.shape[1];\n    });\n  }\n  return outVals;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Equal.js\nvar equalImpl = createSimpleBinaryKernelImpl((a, b) => a === b ? 1 : 0);\nvar equal2 = binaryKernelFunc(Equal, equalImpl, null, \"bool\");\nvar equalConfig = {\n  kernelName: Equal,\n  backendName: \"cpu\",\n  kernelFunc: equal2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js\nvar expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nvar exp2 = unaryKernelFuncFromImpl(Exp, expImpl, \"float32\");\nvar expConfig = {\n  kernelName: Exp,\n  backendName: \"cpu\",\n  kernelFunc: exp2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js\nvar expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nvar expm12 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\nvar expm1Config = {\n  kernelName: Expm1,\n  backendName: \"cpu\",\n  kernelFunc: expm12\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js\nvar floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nvar floor2 = unaryKernelFuncFromImpl(Floor, floorImpl);\nvar floorConfig = {\n  kernelName: Floor,\n  backendName: \"cpu\",\n  kernelFunc: floor2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherNd_Impl.js\nfunction gatherNdImpl(indicesData, paramsBuf, dtype, numSlices, sliceRank, sliceSize, strides, paramsShape, paramsSize) {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] = paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n  return outBuf;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js\nfunction gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n    const originalLoc = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex];\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    }\n  }\n  return outBuf;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js\nvar greaterImpl = createSimpleBinaryKernelImpl((a, b) => a > b ? 1 : 0);\nvar greater3 = binaryKernelFunc(Greater, greaterImpl, null, \"bool\");\nvar greaterConfig = {\n  kernelName: Greater,\n  backendName: \"cpu\",\n  kernelFunc: greater3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GreaterEqual.js\nvar greaterEqualImpl = createSimpleBinaryKernelImpl((a, b) => a >= b ? 1 : 0);\nvar greaterEqual2 = binaryKernelFunc(GreaterEqual, greaterEqualImpl, null, \"bool\");\nvar greaterEqualConfig = {\n  kernelName: GreaterEqual,\n  backendName: \"cpu\",\n  kernelFunc: greaterEqual2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js\nvar lessImpl = createSimpleBinaryKernelImpl((a, b) => a < b ? 1 : 0);\nvar less3 = binaryKernelFunc(Less, lessImpl, null, \"bool\");\nvar lessConfig = {\n  kernelName: Less,\n  backendName: \"cpu\",\n  kernelFunc: less3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LessEqual.js\nvar lessEqualImpl = createSimpleBinaryKernelImpl((a, b) => a <= b ? 1 : 0);\nvar lessEqual2 = binaryKernelFunc(LessEqual, lessEqualImpl, null, \"bool\");\nvar lessEqualConfig = {\n  kernelName: LessEqual,\n  backendName: \"cpu\",\n  kernelFunc: lessEqual2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js\nfunction linSpaceImpl(start, stop, num) {\n  const step5 = (stop - start) / (num - 1);\n  const values = util_exports.makeZerosTypedArray(num, \"float32\");\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step5;\n  }\n  return values;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js\nvar logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nvar log3 = unaryKernelFuncFromImpl(Log, logImpl);\nvar logConfig = {\n  kernelName: Log,\n  backendName: \"cpu\",\n  kernelFunc: log3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js\nfunction maxImpl(aVals, reduceSize, outShape, dtype) {\n  const vals = util_exports.getTypedArrayFromDType(dtype, util_exports.sizeFromShape(outShape));\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max6 = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) || value > max6) {\n        max6 = value;\n      }\n    }\n    vals[i] = max6;\n  }\n  return vals;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js\nvar maximumImpl = createSimpleBinaryKernelImpl((aValue, bValue) => Math.max(aValue, bValue));\nvar maximum3 = binaryKernelFunc(Maximum, maximumImpl);\nvar maximumConfig = {\n  kernelName: Maximum,\n  backendName: \"cpu\",\n  kernelFunc: maximum3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js\nvar minimumImpl = createSimpleBinaryKernelImpl((aValue, bValue) => Math.min(aValue, bValue));\nvar minimum3 = binaryKernelFunc(Minimum, minimumImpl);\nvar minimumConfig = {\n  kernelName: Minimum,\n  backendName: \"cpu\",\n  kernelFunc: minimum3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js\nvar multiplyImpl = createSimpleBinaryKernelImpl((aValue, bValue) => aValue * bValue);\nvar multiplyComplexImpl = createComplexBinaryKernelImpl((aReal, aImag, bReal, bImag) => {\n  return {\n    real: aReal * bReal - aImag * bImag,\n    imag: aReal * bImag + aImag * bReal\n  };\n});\nvar multiply2 = binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\nvar multiplyConfig = {\n  kernelName: Multiply,\n  backendName: \"cpu\",\n  kernelFunc: multiply2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js\nfunction negImpl(xVals, xShape, xDtype) {\n  const minusOne = util_exports.createScalarValue(-1, xDtype);\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nfunction neg2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x } = inputs;\n  assertNotComplex(x, \"neg\");\n  const xVals = backend2.data.get(x.dataId).values;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n  return backend2.makeTensorInfo(newShape, x.dtype, res);\n}\nvar negConfig = {\n  kernelName: Neg,\n  backendName: \"cpu\",\n  kernelFunc: neg2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js\nvar notEqualImpl = createSimpleBinaryKernelImpl((a, b) => a !== b ? 1 : 0);\nvar notEqual2 = binaryKernelFunc(NotEqual, notEqualImpl, null, \"bool\");\nvar notEqualConfig = {\n  kernelName: NotEqual,\n  backendName: \"cpu\",\n  kernelFunc: notEqual2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js\nfunction transposeImpl(xVals, xShape, dtype, perm, newShape) {\n  const xRank = xShape.length;\n  const xSize = util_exports.sizeFromShape(xShape);\n  const xStrides = util_exports.computeStrides(xShape);\n  const newStrides = util_exports.computeStrides(newShape);\n  const result = util_exports.getTypedArrayFromDType(dtype, util_exports.sizeFromShape(newShape));\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util_exports.indexToLoc(i, xRank, xStrides);\n    const newLoc = new Array(loc.length);\n    for (let i2 = 0; i2 < newLoc.length; i2++) {\n      newLoc[i2] = loc[perm[i2]];\n    }\n    const newIndex = util_exports.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose.js\nfunction transpose2(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const { x } = inputs;\n  const { perm } = attrs;\n  assertNotComplex(x, \"transpose\");\n  const xRank = x.shape.length;\n  const newShape = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n  const values = backend2.data.get(x.dataId).values;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n  const dataId = backend2.write(result, newShape, x.dtype);\n  return { dataId, shape: newShape, dtype: x.dtype };\n}\nvar transposeConfig = {\n  kernelName: Transpose,\n  backendName: \"cpu\",\n  kernelFunc: transpose2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js\nfunction prodImpl(xShape, xDtype, xVals, reductionAxes) {\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, \"int32\");\n  const outVals = util_exports.makeZerosTypedArray(util_exports.sizeFromShape(outShape), outDtype);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod5 = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod5 *= xVals[offset + j];\n    }\n    outVals[i] = prod5;\n  }\n  return { outVals, outShape, outDtype };\n}\nfunction prod2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, keepDims } = attrs;\n  assertNotComplex(x, \"prod\");\n  const xRank = x.shape.length;\n  const axes = util_exports.parseAxisParam(axis, x.shape);\n  const permutation = backend_util_exports.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose2({ inputs: { x }, backend: backend2, attrs: { perm: permutation } });\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util_exports.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n  const xVals = backend2.data.get(permutedX.dataId).values;\n  const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util_exports.expandShapeToKeepDim(outShape, axes);\n  }\n  intermediateTensorInfos.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return backend2.makeTensorInfo(resultShape, outDtype, outVals);\n}\nvar prodConfig = {\n  kernelName: Prod,\n  backendName: \"cpu\",\n  kernelFunc: prod2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js\nfunction rangeImpl(start, stop, step5, dtype) {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step5 < 0;\n  const decreasingRangePositiveStep = stop < start && step5 > 1;\n  if (sameStartStop || increasingRangeNegativeStep || decreasingRangePositiveStep) {\n    return util_exports.makeZerosTypedArray(0, dtype);\n  }\n  const numElements = Math.abs(Math.ceil((stop - start) / step5));\n  const values = util_exports.makeZerosTypedArray(numElements, dtype);\n  if (stop < start && step5 === 1) {\n    step5 = -1;\n  }\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step5;\n  }\n  return values;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js\nvar rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nvar rsqrt2 = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\nvar rsqrtConfig = {\n  kernelName: Rsqrt,\n  backendName: \"cpu\",\n  kernelFunc: rsqrt2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sigmoid.js\nvar sigmoidImpl = createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nvar sigmoid2 = unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\nvar sigmoidConfig = {\n  kernelName: Sigmoid,\n  backendName: \"cpu\",\n  kernelFunc: sigmoid2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js\nfunction sliceImpl(vals, begin, size, shape, dtype) {\n  const isContinous = slice_util_exports.isSliceContinous(shape, begin, size);\n  const length = util_exports.sizeFromShape(size);\n  const xStrides = util_exports.computeStrides(shape);\n  if (isContinous) {\n    const flatOffset = slice_util_exports.computeFlatOffset(begin, xStrides);\n    if (dtype === \"string\") {\n      return vals.slice(flatOffset, flatOffset + length);\n    }\n    return vals.subarray(flatOffset, flatOffset + length);\n  }\n  const decodedData = dtype === \"string\" ? backend_util_exports.fromUint8ToStringArray(vals) : vals;\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n  if (dtype === \"string\") {\n    return backend_util_exports.fromStringArrayToUint8(outBuf.values);\n  }\n  return outBuf.values;\n}\nfunction slice2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { begin, size } = attrs;\n  assertNotComplex(x, \"slice\");\n  const [$begin, $size] = slice_util_exports.parseSliceParams(x, begin, size);\n  slice_util_exports.assertParamsValid(x, $begin, $size);\n  const vals = backend2.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend2.makeTensorInfo($size, x.dtype, outVals);\n}\nvar sliceConfig = {\n  kernelName: Slice,\n  backendName: \"cpu\",\n  kernelFunc: slice2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows_impl.js\nfunction sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n  const emptyRowIndicator = new Array(denseRows);\n  const reverseIndexMap = new Array(indicesCount);\n  const rank = indicesShape[1];\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(backend_util_exports.getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesCount));\n    }\n    const outputIndices = util_exports.getArrayFromDType(indicesDType, 0);\n    const outputValues = util_exports.getArrayFromDType(valuesDType, 0);\n    return [\n      outputIndices,\n      [0, rank],\n      outputValues,\n      emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset = new Array(denseRows).fill(0);\n  for (let i = 0; i < indicesCount; ++i) {\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(backend_util_exports.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(backend_util_exports.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && row >= lastIndicesRow;\n    lastIndicesRow = row;\n  }\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    const rowEmpty = csrOffset[row] === 0;\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices = indices;\n    const outputValues = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices,\n      [indicesCount, rank],\n      outputValues,\n      emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices = util_exports.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n    const outputValues = util_exports.getArrayFromDType(valuesDType, fullIndicesCount);\n    const filledCount = new Array(denseRows).fill(0);\n    for (let i = 0; i < indicesCount; ++i) {\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = (row === 0 ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;\n      for (let j = 0; j < rank; ++j) {\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      reverseIndexMap[i] = outputI;\n    }\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {\n        const startingIndex = row === 0 ? 0 : csrOffset[row - 1];\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices,\n      [fullIndicesCount, rank],\n      outputValues,\n      emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape_impl.js\nfunction sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n  const denseSize = util_exports.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n  const outputShape = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(backend_util_exports.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(backend_util_exports.getSparseReshapeNegativeOutputDimErrorMessage(d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(backend_util_exports.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(backend_util_exports.getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape));\n    }\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util_exports.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(backend_util_exports.getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape));\n  }\n  const inputRank = inputShape.length;\n  const inputStrides = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n  const outputStrides = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n  const newIndices = util_exports.getArrayFromDType(inputDType, nnz * outputRank);\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseSegmentReduction_impl.js\nfunction sparseSegmentReductionImpl(input2, inputShape, inputDType, indices, segmentIds, isMean = false, defaultValue = 0) {\n  const numIndices = indices.length;\n  const inputFlat = [inputShape[0], input2.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  const lastSegmentIdPlusOne = numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n  if (outputRows < 0) {\n    throw new Error(backend_util_exports.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n  const outputLength = outputShape.reduce((product, value) => product * value, 1);\n  const output = util_exports.getArrayFromDType(inputDType, outputLength);\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n  if (outputRows <= 0) {\n    throw new Error(backend_util_exports.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n  let start = 0, end = 1;\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n  while (true) {\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util_exports.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(backend_util_exports.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(outIndex, outputRows));\n    }\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(backend_util_exports.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input2[index * numCol + j];\n      }\n    }\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n  return [output, outputShape];\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sqrt.js\nvar sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nvar sqrt2 = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\nvar sqrtConfig = {\n  kernelName: Sqrt,\n  backendName: \"cpu\",\n  kernelFunc: sqrt2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js\nvar squaredDifferenceImpl = createSimpleBinaryKernelImpl((a, b) => {\n  const diff = a - b;\n  return diff * diff;\n});\nvar squaredDifference2 = binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\nvar squaredDifferenceConfig = {\n  kernelName: SquaredDifference,\n  backendName: \"cpu\",\n  kernelFunc: squaredDifference2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js\nfunction stridedSliceImpl(outShape, xBuf, strides, begin) {\n  const outBuf = buffer(outShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n    const newLoc = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n  return outBuf;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringNGrams_impl.js\nvar StringNGramsOp = class {\n  constructor(separator, nGramWidths, leftPad, rightPad2, padWidth, preserveShortSequences) {\n    this.separator = util_exports.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util_exports.encodeString(leftPad);\n    this.rightPad = util_exports.encodeString(rightPad2);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n  getPadWidth(nGramWidth) {\n    return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n  getNumNGrams(length, nGramWidth) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, length + 2 * padWidth - nGramWidth + 1);\n  }\n  createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n      let nGramSize = 0;\n      nGramSize += leftPadding * this.leftPad.length;\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      nGramSize += rightPadding * this.rightPad.length;\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n      let nextNGramIndex = 0;\n      const appendToNGram = (str) => str.forEach((value) => nGram[nextNGramIndex++] = value);\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      if (numTokens > 0) {\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n  compute(data, splits) {\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && splits[i] <= inputDataSize;\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);\n      }\n    }\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util_exports.getArrayFromDType(\"int32\", splitsSize);\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n    const nGrams = new Array(nGramsSplits[numBatchItems]);\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        if (dataLength === 0) {\n          continue;\n        }\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n};\nfunction stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad2, padWidth, preserveShortSequences) {\n  return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad2, padWidth, preserveShortSequences).compute(data, dataSplits);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringSplit_impl.js\nfunction split3(str, delimiters, skipEmpty, result) {\n  if (!str.length) {\n    return;\n  }\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if (i === str.length || delimiters.indexOf(str[i]) !== -1) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\nfunction stringSplitImpl(input2, delimiter, skipEmpty) {\n  const batchSize = input2.length;\n  const tokens = [];\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split3(input2[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n  const indices = util_exports.getArrayFromDType(\"int32\", outputSize * 2);\n  const values = new Array(outputSize);\n  const shape = [batchSize, maxNumEntries];\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n  return [indices, values, shape];\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringToHashBucketFast_impl.js\nfunction stringToHashBucketFastImpl(input2, numBuckets) {\n  const output = util_exports.getArrayFromDType(\"int32\", input2.length);\n  for (let i = 0; i < input2.length; ++i) {\n    output[i] = util_exports.fingerPrint64(input2[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n  return output;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js\nvar subImpl = createSimpleBinaryKernelImpl((aValue, bValue) => aValue - bValue);\nvar subComplexImpl = createComplexBinaryKernelImpl((aReal, aImag, bReal, bImag) => {\n  return { real: aReal - bReal, imag: aImag - bImag };\n});\nvar sub2 = binaryKernelFunc(Sub, subImpl, subComplexImpl);\nvar subConfig = {\n  kernelName: Sub,\n  backendName: \"cpu\",\n  kernelFunc: sub2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js\nfunction tileImpl(xBuf, reps) {\n  const newShape = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n    const originalLoc = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js\nvar comparePair = (a, b) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\nfunction select(array2, k, left = 0, right = array2.length - 1) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i2 = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i2 - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i2 * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i2) * s / n + sd));\n      select(array2, k, newLeft, newRight);\n    }\n    const t = array2[k];\n    let i = left;\n    let j = right;\n    util_exports.swap(array2, left, k);\n    if (comparePair(array2[right], t) > 0) {\n      util_exports.swap(array2, left, right);\n    }\n    while (i < j) {\n      util_exports.swap(array2, i, j);\n      i++;\n      j--;\n      while (comparePair(array2[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array2[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array2[left], t) === 0) {\n      util_exports.swap(array2, left, j);\n    } else {\n      j = j + 1;\n      util_exports.swap(array2, j, right);\n    }\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\nfunction topKImpl(x, xShape, xDtype, k, sorted) {\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util_exports.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util_exports.getTypedArrayFromDType(\"int32\", batch * k);\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    let valAndInd = new Array(vals.length);\n    vals.forEach((value, index) => valAndInd[index] = { value, index });\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n  return [\n    buffer(outputShape, xDtype, allTopKVals),\n    buffer(outputShape, \"int32\", allTopKIndices)\n  ];\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js\nfunction uniqueImpl(values, axis, shape, dtype) {\n  const $axis = util_exports.parseAxisParam(axis, shape)[0];\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n  const uniqueElements = {};\n  const indices = new Int32Array(shape[$axis]);\n  const inputBuffer = new TensorBuffer(newShape, dtype, values);\n  const uniqueIndices = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    let element;\n    if (is1DTensor) {\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(\",\");\n    }\n    if (uniqueElements[element] !== void 0) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n  return {\n    outputValues: outputBuffer.values,\n    outputShape,\n    indices\n  };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/base.js\nregisterBackend(\"cpu\", () => new MathBackendCPU(), 1);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Elu.js\nvar elu4 = unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : Math.exp(xi) - 1);\nvar eluConfig = {\n  kernelName: Elu,\n  backendName: \"cpu\",\n  kernelFunc: elu4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LeakyRelu.js\nfunction leakyRelu2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { alpha } = attrs;\n  assertNotComplex([x], \"leakyRelu\");\n  const xSize = util_exports.sizeFromShape(x.shape);\n  const xVals = backend2.data.get(x.dataId).values;\n  const outVals = util_exports.getTypedArrayFromDType(\"float32\", xSize);\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n  return backend2.makeTensorInfo(x.shape, \"float32\", outVals);\n}\nvar leakyReluConfig = {\n  kernelName: LeakyRelu,\n  backendName: \"cpu\",\n  kernelFunc: leakyRelu2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prelu.js\nvar preluImpl = createSimpleBinaryKernelImpl((xValue, aValue) => xValue < 0 ? aValue * xValue : xValue);\nfunction prelu3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x, alpha } = inputs;\n  assertNotComplex([x, alpha], \"prelu\");\n  const aVals = backend2.data.get(x.dataId).values;\n  const bVals = backend2.data.get(alpha.dataId).values;\n  const [resultData, resultShape] = preluImpl(x.shape, alpha.shape, aVals, bVals, \"float32\");\n  return backend2.makeTensorInfo(resultShape, \"float32\", resultData);\n}\nvar preluConfig = {\n  kernelName: Prelu,\n  backendName: \"cpu\",\n  kernelFunc: prelu3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Relu.js\nvar relu2 = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\nvar reluConfig = {\n  kernelName: Relu,\n  backendName: \"cpu\",\n  kernelFunc: relu2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Relu6.js\nvar relu62 = unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\nvar relu6Config = {\n  kernelName: Relu6,\n  backendName: \"cpu\",\n  kernelFunc: relu62\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/fused_utils.js\nfunction applyActivation2(backend2, x, activation2, preluActivationWeights, leakyreluAlpha) {\n  if (activation2 === \"linear\") {\n    return identity2({ inputs: { x }, backend: backend2 });\n  } else if (activation2 === \"relu\") {\n    return relu2({ inputs: { x }, backend: backend2 });\n  } else if (activation2 === \"elu\") {\n    return elu4({ inputs: { x }, backend: backend2 });\n  } else if (activation2 === \"relu6\") {\n    return relu62({ inputs: { x }, backend: backend2 });\n  } else if (activation2 === \"prelu\") {\n    return prelu3({ inputs: { x, alpha: preluActivationWeights }, backend: backend2 });\n  } else if (activation2 === \"leakyrelu\") {\n    return leakyRelu2({ inputs: { x }, backend: backend2, attrs: { alpha: leakyreluAlpha } });\n  } else if (activation2 === \"sigmoid\") {\n    return sigmoid2({ inputs: { x }, backend: backend2 });\n  }\n  throw new Error(`Activation ${activation2} has not been implemented for the CPU backend.`);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reshape.js\nfunction reshape3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { shape } = attrs;\n  const xSize = util_exports.sizeFromShape(x.shape);\n  const $shape = util_exports.inferFromImplicitShape(shape, xSize);\n  const $xSize = util_exports.sizeFromShape($shape);\n  util_exports.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old shape (${x.shape}) has ${xSize} elements. The new shape and old shape must have the same number of elements.`);\n  backend2.incRef(x.dataId);\n  const xData = backend2.data.get(x.dataId);\n  if (xData.complexTensorInfos != null) {\n    const real4 = xData.complexTensorInfos.real;\n    const imag4 = xData.complexTensorInfos.imag;\n    real4.shape = $shape;\n    imag4.shape = $shape;\n  }\n  return { dataId: x.dataId, shape: $shape, dtype: x.dtype };\n}\nvar reshapeConfig = {\n  kernelName: Reshape,\n  backendName: \"cpu\",\n  kernelFunc: reshape3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchMatMul.js\nfunction batchMatMul(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { a, b } = inputs;\n  const { transposeA, transposeB } = attrs;\n  assertNotComplex([a, b], \"matMul\");\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n  const batchDimA = util_exports.sizeFromShape(outerDimsA);\n  const batchDimB = util_exports.sizeFromShape(outerDimsB);\n  const outShapeOuterDims = broadcast_util_exports.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n  util_exports.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (${innerShapeB}) of Tensors with shapes ${a.shape} and ${b.shape} and transposeA=${transposeA} and transposeB=${transposeB} must match.`);\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] : [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] : [batchDimB, innerShapeB, outerShapeB];\n  const a3d = reshape3({ inputs: { x: a }, backend: backend2, attrs: { shape: a3dShape } });\n  const b3d = reshape3({ inputs: { x: b }, backend: backend2, attrs: { shape: b3dShape } });\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const a3dValues = backend2.data.get(a3d.dataId).values;\n  const b3dValues = backend2.data.get(b3d.dataId).values;\n  const a3dStrides = util_exports.computeStrides(a3d.shape);\n  const b3dStrides = util_exports.computeStrides(b3d.shape);\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ? [a3dStrides[0], 1, a3dStrides[1]] : [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ? [1, b3dStrides[1], b3dStrides[0]] : [b3dStrides[1], 1, b3dStrides[0]];\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n  const resVals = result.values;\n  const blockSize = backend2.blockSize;\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k02 = 0; k02 < sharedDim; k02 += blockSize) {\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k02 + blockSize, sharedDim);\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum6 = 0;\n              for (let k = k02; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal = a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal = b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum6 += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum6;\n            }\n          }\n        }\n      }\n    }\n  }\n  backend2.disposeIntermediateTensorInfo(a3d);\n  backend2.disposeIntermediateTensorInfo(b3d);\n  return backend2.makeTensorInfo(outShape, result.dtype, result.values);\n}\nvar batchMatMulConfig = {\n  kernelName: BatchMatMul,\n  backendName: \"cpu\",\n  kernelFunc: batchMatMul\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/_FusedMatMul.js\nfunction _fusedMatMul(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { a, b, bias, preluActivationWeights } = inputs;\n  const { transposeA, transposeB, activation: activation2, leakyreluAlpha } = attrs;\n  let current;\n  let addRes;\n  let activationRes;\n  const intermediates = [];\n  const matMulRes = batchMatMul({ inputs: { a, b }, attrs: { transposeA, transposeB }, backend: backend2 });\n  current = matMulRes;\n  if (bias) {\n    addRes = add4({ inputs: { a: current, b: bias }, backend: backend2 });\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation2) {\n    activationRes = applyActivation2(backend2, current, activation2, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n  for (const i of intermediates) {\n    backend2.disposeIntermediateTensorInfo(i);\n  }\n  return current;\n}\nvar _fusedMatMulConfig = {\n  kernelName: _FusedMatMul,\n  backendName: \"cpu\",\n  kernelFunc: _fusedMatMul\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Acos.js\nvar acos2 = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\nvar acosConfig = {\n  kernelName: Acos,\n  backendName: \"cpu\",\n  kernelFunc: acos2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Acosh.js\nvar acosh2 = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\nvar acoshConfig = {\n  kernelName: Acosh,\n  backendName: \"cpu\",\n  kernelFunc: acosh2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AddN.js\nfunction addN2(args) {\n  const { inputs, backend: backend2 } = args;\n  const tensors = inputs;\n  assertNotComplex(inputs, \"addN\");\n  const vals = tensors.map((t) => backend2.data.get(t.dataId).values);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype);\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n  return backend2.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nvar addNConfig = {\n  kernelName: AddN,\n  backendName: \"cpu\",\n  kernelFunc: addN2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/All.js\nfunction all2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, keepDims } = attrs;\n  assertNotComplex(x, \"all\");\n  const origAxes = util_exports.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose2({ inputs: { x }, backend: backend2, attrs: { perm: permutedAxes } });\n    axes = backend_util_exports.getInnerMostAxes(axes.length, x.shape.length);\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"all\", axes, $x.shape.length);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const vals = util_exports.makeZerosTypedArray(util_exports.sizeFromShape(outShape), $x.dtype);\n  const aVals = backend2.data.get($x.dataId).values;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all5 = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all5 = all5 && value;\n    }\n    vals[i] = all5;\n  }\n  if (permutedAxes != null) {\n    backend2.disposeIntermediateTensorInfo($x);\n  }\n  const result = backend2.makeTensorInfo(outShape, $x.dtype, vals);\n  if (keepDims) {\n    const expandedShape = backend_util_exports.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult = reshape3({ inputs: { x: result }, backend: backend2, attrs: { shape: expandedShape } });\n    backend2.disposeIntermediateTensorInfo(result);\n    return reshapedResult;\n  }\n  return result;\n}\nvar allConfig = {\n  kernelName: All,\n  backendName: \"cpu\",\n  kernelFunc: all2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Any.js\nfunction any2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, keepDims } = attrs;\n  assertNotComplex(x, \"any\");\n  const origAxes = util_exports.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose2({ inputs: { x }, backend: backend2, attrs: { perm: permutedAxes } });\n    axes = backend_util_exports.getInnerMostAxes(axes.length, x.shape.length);\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"any\", axes, $x.shape.length);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const vals = util_exports.makeZerosTypedArray(util_exports.sizeFromShape(outShape), $x.dtype);\n  const aVals = backend2.data.get($x.dataId).values;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n  if (permutedAxes != null) {\n    backend2.disposeIntermediateTensorInfo($x);\n  }\n  const result = backend2.makeTensorInfo(outShape, $x.dtype, vals);\n  if (keepDims) {\n    const expandedShape = backend_util_exports.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult = reshape3({ inputs: { x: result }, backend: backend2, attrs: { shape: expandedShape } });\n    backend2.disposeIntermediateTensorInfo(result);\n    return reshapedResult;\n  }\n  return result;\n}\nvar anyConfig = {\n  kernelName: Any,\n  backendName: \"cpu\",\n  kernelFunc: any2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ArgMax.js\nfunction argMax2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis } = attrs;\n  assertNotComplex(x, \"argMax\");\n  let axes = util_exports.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose2({ inputs: { x }, backend: backend2, attrs: { perm: permutedAxes } });\n    intermediateTensorInfos.push($x);\n    axes = backend_util_exports.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n  axes = [axes[0]];\n  backend_util_exports.assertAxesAreInnerMostDims(\"argMax\", axes, $x.shape.length);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes($x.shape, axes);\n  const outSize = util_exports.sizeFromShape(outShape);\n  const vals = util_exports.makeZerosTypedArray(outSize, \"int32\");\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const aVals = backend2.data.get($x.dataId).values;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max6 = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max6) {\n        max6 = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n  intermediateTensorInfos.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return backend2.makeTensorInfo(outShape, \"int32\", vals);\n}\nvar argMaxConfig = {\n  kernelName: ArgMax,\n  backendName: \"cpu\",\n  kernelFunc: argMax2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ArgMin.js\nfunction argMin2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis } = attrs;\n  assertNotComplex(x, \"argMin\");\n  let axes = util_exports.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose2({ inputs: { x }, backend: backend2, attrs: { perm: permutedAxes } });\n    intermediateTensorInfos.push($x);\n    axes = backend_util_exports.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n  axes = [axes[0]];\n  backend_util_exports.assertAxesAreInnerMostDims(\"argMin\", axes, $x.shape.length);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes($x.shape, axes);\n  const outSize = util_exports.sizeFromShape(outShape);\n  const vals = util_exports.makeZerosTypedArray(outSize, \"int32\");\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const aVals = backend2.data.get($x.dataId).values;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min6 = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min6) {\n        min6 = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n  intermediateTensorInfos.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return backend2.makeTensorInfo(outShape, \"int32\", vals);\n}\nvar argMinConfig = {\n  kernelName: ArgMin,\n  backendName: \"cpu\",\n  kernelFunc: argMin2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Asin.js\nvar asin2 = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\nvar asinConfig = {\n  kernelName: Asin,\n  backendName: \"cpu\",\n  kernelFunc: asin2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Asinh.js\nvar asinh2 = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\nvar asinhConfig = {\n  kernelName: Asinh,\n  backendName: \"cpu\",\n  kernelFunc: asinh2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Atan.js\nvar atan3 = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\nvar atanConfig = {\n  kernelName: Atan,\n  backendName: \"cpu\",\n  kernelFunc: atan3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Atan2.js\nvar atan2Impl = createSimpleBinaryKernelImpl((aValue, bValue) => Math.atan2(aValue, bValue));\nvar atan22 = binaryKernelFunc(Atan2, atan2Impl);\nvar atan2Config = {\n  kernelName: Atan2,\n  backendName: \"cpu\",\n  kernelFunc: atan22\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Atanh.js\nvar atanh2 = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\nvar atanhConfig = {\n  kernelName: Atanh,\n  backendName: \"cpu\",\n  kernelFunc: atanh2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/pool_utils.js\nfunction pool2(xValues, xShape, dtype, strides, convInfo, poolType) {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n  const initialValue = poolType === \"max\" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count2 = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if (poolType === \"max\" && pixel > minMaxValue) {\n                minMaxValue = pixel;\n              } else if (poolType === \"avg\") {\n                avgValue += pixel;\n                count2++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] = poolType === \"avg\" ? avgValue / count2 : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\nfunction maxPoolPositions(xValues, xShape, dtype, convInfo, flattenPositions = false, includeBatchInIndex = false) {\n  const maxPositions = buffer(convInfo.outShape, \"int32\");\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ? ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) * convInfo.inChannels + d : (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\nfunction pool3d2(xValues, xShape, dtype, strides, convInfo, poolType) {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n  const initialValue = poolType === \"max\" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count2 = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if (poolType === \"max\" && pixel > minMaxValue) {\n                    minMaxValue = pixel;\n                  } else if (poolType === \"avg\") {\n                    avgValue += pixel;\n                    count2++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] = poolType === \"avg\" ? avgValue / count2 : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n  return output;\n}\nfunction maxPool3dPositions(xBuf, convInfo) {\n  const maxPositions = buffer(convInfo.outShape, \"int32\");\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel;\n                    maxPosition = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AvgPool.js\nfunction avgPool2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  assertNotComplex(x, \"avgPool\");\n  const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n  const dilations = 1;\n  util_exports.assert(backend_util_exports.eitherStridesOrDilationsAreOne(strides, dilations), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util_exports.computePool2DInfo(x.shape, filterSize, strides, dilations, pad3, dimRoundingMode);\n  let res;\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util_exports.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity2({ inputs: { x }, backend: backend2 });\n  } else {\n    const xValues = backend2.data.get(x.dataId).values;\n    const strides2 = util_exports.computeStrides(x.shape);\n    const buffer2 = pool2(xValues, x.shape, x.dtype, strides2, convInfo, \"avg\");\n    res = backend2.makeTensorInfo(convInfo.outShape, x.dtype, buffer2.values);\n  }\n  return res;\n}\nvar avgPoolConfig = {\n  kernelName: AvgPool,\n  backendName: \"cpu\",\n  kernelFunc: avgPool2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AvgPool3D.js\nfunction avgPool3D(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { filterSize, strides, pad: pad3, dimRoundingMode, dataFormat } = attrs;\n  assertNotComplex(x, \"avgPool3d\");\n  const convInfo = backend_util_exports.computePool3DInfo(x.shape, filterSize, strides, 1, pad3, dimRoundingMode, dataFormat);\n  const xValues = backend2.data.get(x.dataId).values;\n  const outBuf = pool3d2(xValues, x.shape, x.dtype, util_exports.computeStrides(x.shape), convInfo, \"avg\");\n  return backend2.makeTensorInfo(outBuf.shape, \"float32\", outBuf.values);\n}\nvar avgPool3DConfig = {\n  kernelName: AvgPool3D,\n  backendName: \"cpu\",\n  kernelFunc: avgPool3D\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AvgPool3DGrad.js\nfunction avgPool3DGrad(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, input: input2 } = inputs;\n  const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n  assertNotComplex([dy, input2], \"avgPool3DGrad\");\n  const convInfo = backend_util_exports.computePool3DInfo(input2.shape, filterSize, strides, 1, pad3, dimRoundingMode);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input2.shape, \"float32\");\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n  const dyBuf = backend2.bufferSync(dy);\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n                  const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nvar avgPool3DGradConfig2 = {\n  kernelName: AvgPool3DGrad,\n  backendName: \"cpu\",\n  kernelFunc: avgPool3DGrad\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AvgPoolGrad.js\nfunction avgPoolGrad2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, input: input2 } = inputs;\n  const x = input2;\n  assertNotComplex([dy, input2], \"avgPoolGrad\");\n  const { filterSize, strides, pad: pad3 } = attrs;\n  const convInfo = backend_util_exports.computePool2DInfo(x.shape, filterSize, strides, 1, pad3);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(x.shape, \"float32\");\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n  const dyData = backend2.data.get(dy.dataId).values;\n  const dyBuf = buffer(dy.shape, \"float32\", dyData);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nvar avgPoolGradConfig2 = {\n  kernelName: AvgPoolGrad,\n  backendName: \"cpu\",\n  kernelFunc: avgPoolGrad2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchNorm.js\nfunction batchNorm2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, scale: scale2, offset, mean: mean4, variance } = inputs;\n  util_exports.assert(mean4.shape.length === variance.shape.length, () => \"Batch normalization gradient requires mean and variance to have equal ranks.\");\n  util_exports.assert(offset == null || mean4.shape.length === offset.shape.length, () => \"Batch normalization gradient requires mean and offset to have equal ranks.\");\n  util_exports.assert(scale2 == null || mean4.shape.length === scale2.shape.length, () => \"Batch normalization gradient requires mean and scale to have equal ranks.\");\n  assertNotComplex([x, mean4, variance, scale2, offset], \"batchNorm\");\n  let { varianceEpsilon } = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 1e-3;\n  }\n  const xVals = backend2.data.get(x.dataId).values;\n  const mVals = backend2.data.get(mean4.dataId).values;\n  const varVals = backend2.data.get(variance.dataId).values;\n  const sVals = scale2 ? backend2.data.get(scale2.dataId).values : new Float32Array([1]);\n  const offVals = offset ? backend2.data.get(offset.dataId).values : new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] + (xVals[i] - mVals[mi++]) * sVals[si++] / Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend2.makeTensorInfo(x.shape, x.dtype, outVals);\n}\nvar batchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: \"cpu\",\n  kernelFunc: batchNorm2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchToSpaceND.js\nfunction batchToSpaceND2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { blockShape, crops } = attrs;\n  assertNotComplex([x], \"batchToSpaceND\");\n  const prod5 = blockShape.reduce((a, b) => a * b);\n  const reshaped = backend_util_exports.getReshaped(x.shape, blockShape, prod5);\n  const permuted = backend_util_exports.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted = backend_util_exports.getReshapedPermuted(x.shape, blockShape, prod5);\n  const sliceBeginCoords = backend_util_exports.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize = backend_util_exports.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  const xReshaped = reshape3({ inputs: { x }, backend: backend2, attrs: { shape: reshaped } });\n  const xTransposed = transpose2({ inputs: { x: xReshaped }, backend: backend2, attrs: { perm: permuted } });\n  const xTransposedReshaped = reshape3({ inputs: { x: xTransposed }, backend: backend2, attrs: { shape: reshapedPermuted } });\n  const result = slice2({\n    inputs: { x: xTransposedReshaped },\n    backend: backend2,\n    attrs: { begin: sliceBeginCoords, size: sliceSize }\n  });\n  backend2.disposeIntermediateTensorInfo(xReshaped);\n  backend2.disposeIntermediateTensorInfo(xTransposed);\n  backend2.disposeIntermediateTensorInfo(xTransposedReshaped);\n  return result;\n}\nvar batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: \"cpu\",\n  kernelFunc: batchToSpaceND2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount.js\nfunction bincount2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, weights } = inputs;\n  const { size } = attrs;\n  const xVals = backend2.data.get(x.dataId).values;\n  const weightsVals = backend2.data.get(weights.dataId).values;\n  const outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n  return backend2.makeTensorInfo([size], weights.dtype, outVals);\n}\nvar bincountConfig = {\n  kernelName: Bincount,\n  backendName: \"cpu\",\n  kernelFunc: bincount2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BroadcastArgs.js\nfunction broadcastArgs2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { s0, s1 } = inputs;\n  const s0Vals = backend2.data.get(s0.dataId).values;\n  const s1Vals = backend2.data.get(s1.dataId).values;\n  const broadcastShape = backend_util_exports.assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));\n  return backend2.makeTensorInfo([broadcastShape.length], \"int32\", Int32Array.from(broadcastShape));\n}\nvar broadcastArgsConfig = {\n  kernelName: BroadcastArgs,\n  backendName: \"cpu\",\n  kernelFunc: broadcastArgs2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ClipByValue.js\nvar clipByValue2 = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\nvar clipByValueConfig = {\n  kernelName: ClipByValue,\n  backendName: \"cpu\",\n  kernelFunc: clipByValue2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ComplexAbs.js\nvar complexAbs = (args) => {\n  const { x } = args.inputs;\n  const cpuBackend = args.backend;\n  const resultValues = new Float32Array(util_exports.sizeFromShape(x.shape));\n  const complexVals = cpuBackend.data.get(x.dataId);\n  const real4 = complexVals.complexTensorInfos.real;\n  const imag4 = complexVals.complexTensorInfos.imag;\n  const realVals = cpuBackend.data.get(real4.dataId).values;\n  const imagVals = cpuBackend.data.get(imag4.dataId).values;\n  for (let i = 0; i < realVals.length; i++) {\n    const real5 = realVals[i];\n    const imag5 = imagVals[i];\n    resultValues[i] = Math.hypot(real5, imag5);\n  }\n  return cpuBackend.makeOutput(resultValues, x.shape, \"float32\");\n};\nvar complexAbsConfig = {\n  kernelName: ComplexAbs,\n  backendName: \"cpu\",\n  kernelFunc: complexAbs\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Imag.js\nfunction imag2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { input: input2 } = inputs;\n  const imag4 = backend2.data.get(input2.dataId).complexTensorInfos.imag;\n  const imagVal = backend2.data.get(imag4.dataId).values;\n  return backend2.makeTensorInfo(imag4.shape, imag4.dtype, imagVal);\n}\nvar imagConfig = {\n  kernelName: Imag,\n  backendName: \"cpu\",\n  kernelFunc: imag2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat.js\nfunction concat2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { axis } = attrs;\n  const $axis = util_exports.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util_exports.computeOutShape(inputs.map((t) => t.shape), $axis);\n  if (util_exports.sizeFromShape(outShape) === 0) {\n    return backend2.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n  const $inputs = inputs.filter((t) => util_exports.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity2({ inputs: { x: $inputs[0] }, backend: backend2 });\n  }\n  const shapes = $inputs.map((t) => t.shape);\n  backend_util_exports.assertParamsConsistent(shapes, $axis);\n  if ($inputs[0].dtype === \"complex64\") {\n    const reals = $inputs.map((t) => real2({ inputs: { input: t }, backend: backend2 }));\n    const imags = $inputs.map((t) => imag2({ inputs: { input: t }, backend: backend2 }));\n    const realConcated = concat2({ inputs: reals, backend: backend2, attrs: { axis: $axis } });\n    const imagConcated = concat2({ inputs: imags, backend: backend2, attrs: { axis: $axis } });\n    const result = complex2({ inputs: { real: realConcated, imag: imagConcated }, backend: backend2 });\n    reals.forEach((r) => backend2.disposeIntermediateTensorInfo(r));\n    imags.forEach((i) => backend2.disposeIntermediateTensorInfo(i));\n    backend2.disposeIntermediateTensorInfo(realConcated);\n    backend2.disposeIntermediateTensorInfo(imagConcated);\n    return result;\n  }\n  const inputs2D = $inputs.map((t) => {\n    const innerSize = util_exports.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape3({ inputs: { x: t }, backend: backend2, attrs: { shape } });\n  });\n  const inputsValShapes = inputs2D.map((t) => {\n    return { vals: backend2.data.get(t.dataId).values, shape: t.shape };\n  });\n  outShape = backend_util_exports.computeOutShape(inputs2D.map((t) => t.shape), 1);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals = concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n  const finalOutShape = backend_util_exports.computeOutShape($inputs.map((t) => t.shape), $axis);\n  const outInfo = backend2.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n  inputs2D.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return outInfo;\n}\nvar concatConfig = {\n  kernelName: Concat,\n  backendName: \"cpu\",\n  kernelFunc: concat2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv2D.js\nfunction conv2D(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, filter } = inputs;\n  const { strides, pad: pad3, dataFormat, dilations, dimRoundingMode } = attrs;\n  assertNotComplex([x, filter], \"conv2d\");\n  const $dataFormat = backend_util_exports.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad3, dimRoundingMode, false, $dataFormat);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === \"channelsLast\";\n  const y = new TensorBuffer(convInfo.outShape, x.dtype);\n  const xStrides = util_exports.computeStrides(x.shape);\n  const filterStrides = util_exports.computeStrides(filter.shape);\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n  const xVals = backend2.data.get(x.dataId).values;\n  const wVals = backend2.data.get(filter.dataId).values;\n  const yVals = y.values;\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] += xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(y.shape, y.dtype, yVals);\n}\nvar conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: \"cpu\",\n  kernelFunc: conv2D\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv2DBackpropFilter.js\nfunction conv2DBackpropFilter2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, dy } = inputs;\n  const { strides, pad: pad3, dataFormat, dimRoundingMode, filterShape } = attrs;\n  assertNotComplex([x, dy], \"conv2dBackpropFilter\");\n  const $dataFormat = backend_util_exports.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filterShape, strides, 1, pad3, dimRoundingMode, false, $dataFormat);\n  const { strideHeight, strideWidth, filterHeight, filterWidth } = convInfo;\n  const isChannelsLast = convInfo.dataFormat === \"channelsLast\";\n  const dW = new TensorBuffer(convInfo.filterShape, \"float32\");\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend2.data.get(x.dataId).values;\n  const dyVals = backend2.data.get(dy.dataId).values;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                } else {\n                  dotProd += xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nvar conv2DBackpropFilterConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: \"cpu\",\n  kernelFunc: conv2DBackpropFilter2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv2DBackpropInput.js\nfunction conv2DBackpropInput2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, filter } = inputs;\n  const { inputShape, strides, pad: pad3, dataFormat, dimRoundingMode } = attrs;\n  assertNotComplex([dy, filter], \"conv2dBackpropInput\");\n  const filterStrides = util_exports.computeStrides(filter.shape);\n  const dyStrides = util_exports.computeStrides(dy.shape);\n  let $dataFormat = backend_util_exports.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util_exports.computeConv2DInfo(inputShape, filter.shape, strides, 1, pad3, dimRoundingMode, false, $dataFormat);\n  const dx = new TensorBuffer(convInfo.inShape, \"float32\");\n  const dxValues = dx.values;\n  const dyValues = backend2.data.get(dy.dataId).values;\n  const fltValues = backend2.data.get(filter.dataId).values;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const isChannelsLast = $dataFormat === \"channelsLast\";\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR + xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nvar conv2DBackpropInputConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: \"cpu\",\n  kernelFunc: conv2DBackpropInput2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv3D.js\nfunction conv3D(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, filter } = inputs;\n  const { strides, pad: pad3, dilations } = attrs;\n  assertNotComplex([x, filter], \"conv3d\");\n  const convInfo = backend_util_exports.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad3);\n  const { filterDepth, filterHeight, filterWidth, dilationDepth, dilationHeight, dilationWidth, padInfo } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype);\n  const xVals = backend2.data.get(x.dataId).values;\n  const wVals = backend2.data.get(filter.dataId).values;\n  const yVals = y.values;\n  const xStrides = util_exports.computeStrides(x.shape);\n  const filterStrides = util_exports.computeStrides(filter.shape);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nvar conv3DConfig = {\n  kernelName: Conv3D,\n  backendName: \"cpu\",\n  kernelFunc: conv3D\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv3DBackpropFilterV2.js\nfunction conv3DBackpropFilterV2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, dy } = inputs;\n  const { strides, pad: pad3, filterShape } = attrs;\n  assertNotComplex([x, dy], \"conv3dBackpropFilterV2\");\n  const xStrides = util_exports.computeStrides(x.shape);\n  const dyStrides = util_exports.computeStrides(dy.shape);\n  const convInfo = backend_util_exports.computeConv3DInfo(x.shape, filterShape, strides, 1, pad3);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dw = new TensorBuffer(convInfo.filterShape, \"float32\");\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend2.data.get(dy.dataId).values;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend2.data.get(x.dataId).values;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\nvar conv3DBackpropFilterV2Config = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: \"cpu\",\n  kernelFunc: conv3DBackpropFilterV2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv3DBackpropInputV2.js\nfunction conv3DBackpropInputV2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, filter } = inputs;\n  const { pad: pad3, strides, inputShape } = attrs;\n  assertNotComplex([dy], \"conv3dBackpropInputV2\");\n  const dyStrides = util_exports.computeStrides(dy.shape);\n  const filterStrides = util_exports.computeStrides(filter.shape);\n  const convInfo = backend_util_exports.computeConv3DInfo(inputShape, filter.shape, strides, 1, pad3);\n  const dx = new TensorBuffer(convInfo.inShape, \"float32\");\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend2.data.get(dy.dataId).values;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend2.data.get(filter.dataId).values;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const { batchSize, filterDepth, filterHeight, filterWidth, inChannels, inDepth, inHeight, inWidth, outChannels, outDepth, outHeight, outWidth, strideDepth, strideHeight, strideWidth } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) + fltS1 * (filterHeight - 1 - wR) + fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] = dotProd;\n          }\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nvar conv3DBackpropInputV2Config = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: \"cpu\",\n  kernelFunc: conv3DBackpropInputV2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cos.js\nvar cos2 = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\nvar cosConfig = {\n  kernelName: Cos,\n  backendName: \"cpu\",\n  kernelFunc: cos2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cosh.js\nvar cosh2 = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\nvar coshConfig = {\n  kernelName: Cosh,\n  backendName: \"cpu\",\n  kernelFunc: cosh2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/CropAndResize.js\nfunction cropAndResize2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { image: image2, boxes, boxInd } = inputs;\n  const { cropSize, method, extrapolationValue } = attrs;\n  const [batch, imageHeight, imageWidth, numChannels] = image2.shape;\n  const numBoxes = boxes.shape[0];\n  const [cropHeight, cropWidth] = cropSize;\n  const output = buffer([numBoxes, cropHeight, cropWidth, numChannels], \"float32\");\n  const boxVals = backend2.data.get(boxes.dataId).values;\n  const boxIndVals = backend2.data.get(boxInd.dataId).values;\n  const imageVals = backend2.data.get(image2.dataId).values;\n  const inStride = util_exports.computeStrides(image2.shape);\n  const outStride = util_exports.computeStrides(output.shape);\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n    const bInd = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n    const heightScale = cropHeight > 1 ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale = cropWidth > 1 ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd = cropHeight > 1 ? y1 * (imageHeight - 1) + y * heightScale : 0.5 * (y1 + y2) * (imageHeight - 1);\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n      if (method === \"bilinear\") {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + x * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];\n            const topLeft = imageVals[ind];\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];\n            const topRight = imageVals[ind];\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + (bottom - top) * yLerp;\n          }\n        }\n      } else {\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + x * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] + bInd * inStride[0];\n            const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(output.shape, output.dtype, output.values);\n}\nvar cropAndResizeConfig = {\n  kernelName: CropAndResize,\n  backendName: \"cpu\",\n  kernelFunc: cropAndResize2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cumsum.js\nfunction cumsum2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, exclusive, reverse: reverse5 } = attrs;\n  assertNotComplex(x, \"cumsum\");\n  const permutation = backend_util_exports.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose2({ inputs: { x }, backend: backend2, attrs: { perm: permutation } });\n  }\n  const permutedAxis = backend_util_exports.getInnerMostAxes(1, x.shape.length)[0];\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(`backend.cumsum in CPU expects an inner-most axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n  const resultDtype = upcastType($x.dtype, \"int32\");\n  const vals = util_exports.makeZerosTypedArray(util_exports.sizeFromShape($x.shape), resultDtype);\n  const aVals = backend2.data.get($x.dataId).values;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse5 ? (i, j) => i + finalDim - j - 1 : (i, j) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] : aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n  const result = backend2.makeTensorInfo($x.shape, resultDtype, vals);\n  if (permutation != null) {\n    const reversePermutation = backend_util_exports.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose2({ inputs: { x: result }, backend: backend2, attrs: { perm: reversePermutation } });\n    backend2.disposeIntermediateTensorInfo(result);\n    backend2.disposeIntermediateTensorInfo($x);\n    return reverseTransposedResult;\n  }\n  return result;\n}\nvar cumsumConfig = {\n  kernelName: Cumsum,\n  backendName: \"cpu\",\n  kernelFunc: cumsum2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DenseBincount.js\nfunction denseBincount2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, weights } = inputs;\n  const { size, binaryOutput } = attrs;\n  if (x.shape.length === 1) {\n    const xVals = backend2.data.get(x.dataId).values;\n    const weightsVals = backend2.data.get(weights.dataId).values;\n    const outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend2.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend2.bufferSync(x);\n    const weightsBuf = backend2.bufferSync(weights);\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n    return backend2.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${x.shape.length}.`);\n}\nvar denseBincountConfig = {\n  kernelName: DenseBincount,\n  backendName: \"cpu\",\n  kernelFunc: denseBincount2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthToSpace.js\nfunction depthToSpace2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { blockSize, dataFormat } = attrs;\n  util_exports.assert(dataFormat === \"NHWC\", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const xValues = backend2.data.get(x.dataId).values;\n  const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = h % blockSize;\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = w % blockSize;\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\nvar depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: \"cpu\",\n  kernelFunc: depthToSpace2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthwiseConv2dNative.js\nfunction depthwiseConv2dNative(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, filter } = inputs;\n  const { strides, pad: pad3, dilations, dimRoundingMode } = attrs;\n  assertNotComplex([x, filter], \"depthwiseConv2DNative\");\n  const xStrides = util_exports.computeStrides(x.shape);\n  const filterStrides = util_exports.computeStrides(filter.shape);\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  util_exports.assert(backend_util_exports.eitherStridesOrDilationsAreOne(strides, $dilations), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${strides} and dilations '${$dilations}'`);\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad3, dimRoundingMode, true);\n  const { filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo } = convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype);\n  const xVals = backend2.data.get(x.dataId).values;\n  const wVals = backend2.data.get(filter.dataId).values;\n  const yVals = y.values;\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nvar depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: \"cpu\",\n  kernelFunc: depthwiseConv2dNative\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js\nfunction depthwiseConv2dNativeBackpropFilter2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, dy } = inputs;\n  const { strides, dilations, pad: pad3, dimRoundingMode, filterShape } = attrs;\n  assertNotComplex([x, dy], \"depthwiseConv2dNativeBackpropFilter\");\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad3, dimRoundingMode, true);\n  const { strideHeight, strideWidth, filterHeight, filterWidth } = convInfo;\n  const dW = new TensorBuffer(convInfo.filterShape, \"float32\");\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const xVals = backend2.data.get(x.dataId).values;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend2.data.get(dy.dataId).values;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n  return backend2.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nvar depthwiseConv2dNativeBackpropFilterConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: \"cpu\",\n  kernelFunc: depthwiseConv2dNativeBackpropFilter2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthwiseConv2dNativeBackpropInput.js\nfunction depthwiseConv2dNativeBackpropInput2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, filter } = inputs;\n  const { strides, dilations, pad: pad3, dimRoundingMode, inputShape } = attrs;\n  assertNotComplex([dy, filter], \"depthwiseConv2DNativeBackpropInput\");\n  const dyStrides = util_exports.computeStrides(dy.shape);\n  const filterStrides = util_exports.computeStrides(filter.shape);\n  const convInfo = backend_util_exports.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad3, dimRoundingMode, true);\n  const dx = new TensorBuffer(convInfo.inShape, \"float32\");\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend2.data.get(dy.dataId).values;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend2.data.get(filter.dataId).values;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nvar depthwiseConv2dNativeBackpropInputConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: \"cpu\",\n  kernelFunc: depthwiseConv2dNativeBackpropInput2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Diag.js\nfunction diag2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x } = inputs;\n  const xSize = util_exports.sizeFromShape(x.shape);\n  const xVals = backend2.data.get(x.dataId).values;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n  const outShape = [...x.shape, ...x.shape];\n  return backend2.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\nvar diagConfig = {\n  kernelName: Diag,\n  backendName: \"cpu\",\n  kernelFunc: diag2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2D.js\nvar dilation2DConfig = {\n  kernelName: Dilation2D,\n  backendName: \"cpu\",\n  kernelFunc: ({ inputs, backend: backend2, attrs }) => {\n    const { x, filter } = inputs;\n    const { strides, pad: pad3, dilations } = attrs;\n    const cpuBackend = backend2;\n    const xVals = cpuBackend.data.get(x.dataId).values;\n    const xRank = x.shape.length;\n    const filterVals = cpuBackend.data.get(filter.dataId).values;\n    const filterRank = filter.shape.length;\n    const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util_exports.computeDilation2DInfo(x.shape, filter.shape, strides, pad3, \"NHWC\", dilations);\n    const outSize = util_exports.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util_exports.getArrayFromDType(x.dtype, outSize);\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util_exports.locToIndex([b, hIn, wIn, d], xRank, util_exports.computeStrides(x.shape));\n                    const filterIndex = util_exports.locToIndex([h, w, d], filterRank, util_exports.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util_exports.locToIndex([b, hOut, wOut, d], outRank, util_exports.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n    const dataId = cpuBackend.write(util_exports.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n    return { dataId, shape: outShape, dtype: x.dtype };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2DBackpropFilter.js\nvar dilation2DBackpropFilterConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: \"cpu\",\n  kernelFunc: ({ inputs, backend: backend2, attrs }) => {\n    const { x, filter, dy } = inputs;\n    const { strides, pad: pad3, dilations } = attrs;\n    const cpuBackend = backend2;\n    const $x = util_exports.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);\n    const $filter = util_exports.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);\n    const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util_exports.computeDilation2DInfo(x.shape, filter.shape, strides, pad3, \"NHWC\", dilations);\n    util_exports.assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropFilter}, dy must have the same rank as output ${outShape.length}, but got ${dy.rank}`);\n    const $dy = util_exports.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);\n    const gradients = util_exports.makeZerosNestedTypedArray(filter.shape, filter.dtype);\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n    const dataId = cpuBackend.write(util_exports.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n    return { dataId, shape: filter.shape, dtype: filter.dtype };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2DBackpropInput.js\nvar dilation2DBackpropInputConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: \"cpu\",\n  kernelFunc: ({ inputs, backend: backend2, attrs }) => {\n    const { x, filter, dy } = inputs;\n    const { strides, pad: pad3, dilations } = attrs;\n    const cpuBackend = backend2;\n    const $x = util_exports.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);\n    const $filter = util_exports.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);\n    const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util_exports.computeDilation2DInfo(x.shape, filter.shape, strides, pad3, \"NHWC\", dilations);\n    util_exports.assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropInput}, dy must have the same rank as output ${outShape.length}, but got ${dy.rank}`);\n    const $dy = util_exports.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);\n    const gradients = util_exports.makeZerosNestedTypedArray(x.shape, x.dtype);\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = hBeg < 0 ? 0 : hBeg;\n            let wInMax = wBeg < 0 ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n    const dataId = cpuBackend.write(util_exports.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n    return { dataId, shape: x.shape, dtype: x.dtype };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sum.js\nfunction sum3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, keepDims } = attrs;\n  assertNotComplex(x, \"sum\");\n  let $x;\n  if (x.dtype === \"bool\") {\n    $x = cast3({ inputs: { x }, backend: backend2, attrs: { dtype: \"int32\" } });\n  } else {\n    $x = identity2({ inputs: { x }, backend: backend2 });\n  }\n  const xRank = $x.shape.length;\n  const axes = util_exports.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util_exports.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX = transpose2({ inputs: { x: $x }, backend: backend2, attrs: { perm: permutation } });\n    reductionAxes = backend_util_exports.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"sum\", reductionAxes, permutedX.shape.length);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util_exports.upcastType(permutedX.dtype, \"int32\");\n  let result = zeros3(backend2, outShape, resultDtype);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const vals = backend2.data.get(result.dataId).values;\n  const aVals = backend2.data.get(permutedX.dataId).values;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum6 = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum6 += aVals[offset + j];\n    }\n    vals[i] = sum6;\n  }\n  if (keepDims) {\n    const newShape = backend_util_exports.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape3({ inputs: { x: result }, backend: backend2, attrs: { shape: newShape } });\n    backend2.disposeIntermediateTensorInfo(oldResult);\n  }\n  backend2.disposeIntermediateTensorInfo($x);\n  if (permutation != null) {\n    backend2.disposeIntermediateTensorInfo(permutedX);\n  }\n  return result;\n}\nvar sumConfig = {\n  kernelName: Sum,\n  backendName: \"cpu\",\n  kernelFunc: sum3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Einsum.js\nfunction einsum2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { equation } = attrs;\n  const tensors = inputs;\n  const { allDims, summedDims, idDims } = backend_util_exports.decodeEinsumEquation(equation, tensors.length);\n  backend_util_exports.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const { path, steps } = backend_util_exports.getEinsumComputePath(summedDims, idDims);\n  const nSteps = steps.length;\n  let out = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const { permutationIndices: perm, expandDims: dimsToExpand } = backend_util_exports.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x;\n      if (backend_util_exports.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose2({ inputs: { x: tensors[idTerm] }, backend: backend2, attrs: { perm } });\n        tensorsToDispose.push(x);\n      }\n      const targetShape = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n      if (!util_exports.arraysEqual(x.shape, targetShape)) {\n        x = reshape3({ inputs: { x }, backend: backend2, attrs: { shape: targetShape } });\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        out = multiply2({ inputs: { a: x, b: out }, backend: backend2 });\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum3({\n          inputs: { x: out },\n          backend: backend2,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend2.disposeIntermediateTensorInfo(tensorInfo);\n  }\n  return out;\n}\nvar einsumConfig = {\n  kernelName: Einsum,\n  backendName: \"cpu\",\n  kernelFunc: einsum2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/EluGrad.js\nfunction eluGrad(args) {\n  const { inputs, backend: backend2 } = args;\n  const { dy, y } = inputs;\n  assertNotComplex([dy, y], \"eluGrad\");\n  const resultValues = new Float32Array(util_exports.sizeFromShape(y.shape));\n  const values = backend2.data.get(y.dataId).values;\n  const dyValues = backend2.data.get(dy.dataId).values;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n  return backend2.makeTensorInfo(y.shape, \"float32\", resultValues);\n}\nvar eluGradConfig2 = {\n  kernelName: EluGrad,\n  backendName: \"cpu\",\n  kernelFunc: eluGrad\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Erf.js\nvar p = backend_util_exports.ERF_P;\nvar a1 = backend_util_exports.ERF_A1;\nvar a2 = backend_util_exports.ERF_A2;\nvar a3 = backend_util_exports.ERF_A3;\nvar a4 = backend_util_exports.ERF_A4;\nvar a5 = backend_util_exports.ERF_A5;\nvar erf2 = unaryKernelFunc(Erf, (xi) => {\n  const sign4 = Math.sign(xi);\n  const v = Math.abs(xi);\n  const t = 1 / (1 + p * v);\n  return sign4 * (1 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-v * v));\n});\nvar erfConfig = {\n  kernelName: Erf,\n  backendName: \"cpu\",\n  kernelFunc: erf2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ExpandDims.js\nfunction expandDims3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { input: input2 } = inputs;\n  const { dim } = attrs;\n  const inputRank = input2.shape.length;\n  const newShape = input2.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    util_exports.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n  return reshape3({ inputs: { x: input2 }, backend: backend2, attrs: { shape: newShape } });\n}\nvar expandDimsConfig = {\n  kernelName: ExpandDims,\n  backendName: \"cpu\",\n  kernelFunc: expandDims3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RealDiv.js\nvar realDivImpl = createSimpleBinaryKernelImpl((a, b) => a / b);\nvar div2 = binaryKernelFunc(RealDiv, realDivImpl);\nvar realDivConfig = {\n  kernelName: RealDiv,\n  backendName: \"cpu\",\n  kernelFunc: div2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/fft_utils.js\nfunction fftBatch(input2, inverse, cpuBackend) {\n  const inputShape = input2.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n  const inputVals = cpuBackend.data.get(input2.dataId);\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n  const resultShape = [batch, innerDim];\n  const resultSize = util_exports.sizeFromShape(resultShape);\n  const resultReal = util_exports.getTypedArrayFromDType(\"float32\", resultSize);\n  const resultImag = util_exports.getTypedArrayFromDType(\"float32\", resultSize);\n  for (let b = 0; b < batch; b++) {\n    const r = slice2({\n      inputs: { x: real2D },\n      backend: cpuBackend,\n      attrs: { begin: [b, 0], size: [1, innerDim] }\n    });\n    const i = slice2({\n      inputs: { x: imag2D },\n      backend: cpuBackend,\n      attrs: { begin: [b, 0], size: [1, innerDim] }\n    });\n    const input3 = complex2({ inputs: { real: r, imag: i }, backend: cpuBackend });\n    const { real: real4, imag: imag4 } = fftImpl(input3, inverse, cpuBackend);\n    const res = backend_util_exports.mergeRealAndImagArrays(real4, imag4);\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util_exports.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input3);\n  }\n  const $realInfo = cpuBackend.makeTensorInfo(resultShape, \"float32\", resultReal);\n  const $imagInfo = cpuBackend.makeTensorInfo(resultShape, \"float32\", resultImag);\n  const result = complex2({ inputs: { real: $realInfo, imag: $imagInfo }, backend: cpuBackend });\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n  return result;\n}\nfunction fftImpl(input2, inverse, cpuBackend) {\n  const inputSize = util_exports.sizeFromShape(input2.shape);\n  const inputVals = cpuBackend.data.get(input2.dataId);\n  const realVals = cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values;\n  const imagVals = cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values;\n  if (isExponentOf2(inputSize)) {\n    const result = fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n    const resultShape = [input2.shape[0], input2.shape[1]];\n    if (inverse) {\n      const realInfo = cpuBackend.makeTensorInfo(resultShape, \"float32\", result.real);\n      const imagInfo = cpuBackend.makeTensorInfo(resultShape, \"float32\", result.imag);\n      const sizeInfo = cpuBackend.makeTensorInfo([], \"float32\", util_exports.createScalarValue(inputSize, \"float32\"));\n      const sizeInfoCopy = identity2({ inputs: { x: sizeInfo }, backend: cpuBackend });\n      const divRealInfo = realDivConfig.kernelFunc({ inputs: { a: realInfo, b: sizeInfo }, backend: cpuBackend });\n      const divImagInfo = realDivConfig.kernelFunc({ inputs: { a: imagInfo, b: sizeInfoCopy }, backend: cpuBackend });\n      const divRealVals = cpuBackend.data.get(divRealInfo.dataId).values;\n      const divImagVals = cpuBackend.data.get(divImagInfo.dataId).values;\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n      return { real: divRealVals, imag: divImagVals };\n    }\n    return result;\n  } else {\n    const data = backend_util_exports.mergeRealAndImagArrays(realVals, imagVals);\n    const rawOutput = fourierTransformByMatmul(data, inputSize, inverse);\n    return backend_util_exports.splitRealAndImagArrays(rawOutput);\n  }\n}\nfunction isExponentOf2(size) {\n  return (size & size - 1) === 0;\n}\nfunction fftRadix2(realVals, imagVals, size, inverse, cpuBackend) {\n  if (size === 1) {\n    return { real: realVals, imag: imagVals };\n  }\n  const data = backend_util_exports.mergeRealAndImagArrays(realVals, imagVals);\n  const half = size / 2;\n  const evenComplex = backend_util_exports.complexWithEvenIndex(data);\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n  const evenShape = [evenRealVals.length];\n  const evenRealInfo = cpuBackend.makeTensorInfo(evenShape, \"float32\", evenRealVals);\n  const evenImagInfo = cpuBackend.makeTensorInfo(evenShape, \"float32\", evenImagVals);\n  const evenTensorInfo = complex2({ inputs: { real: evenRealInfo, imag: evenImagInfo }, backend: cpuBackend });\n  const oddComplex = backend_util_exports.complexWithOddIndex(data);\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n  const oddShape = [oddRealVals.length];\n  const oddRealInfo = cpuBackend.makeTensorInfo(oddShape, \"float32\", oddRealVals);\n  const oddImagInfo = cpuBackend.makeTensorInfo(oddShape, \"float32\", oddImagVals);\n  const oddTensorInfo = complex2({ inputs: { real: oddRealInfo, imag: oddImagInfo }, backend: cpuBackend });\n  const $evenComplex = fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n  const $evenShape = [$evenRealVals.length];\n  const $evenRealInfo = cpuBackend.makeTensorInfo($evenShape, \"float32\", $evenRealVals);\n  const $evenImagInfo = cpuBackend.makeTensorInfo($evenShape, \"float32\", $evenImagVals);\n  const $evenTensorInfo = complex2({\n    inputs: { real: $evenRealInfo, imag: $evenImagInfo },\n    backend: cpuBackend\n  });\n  const $oddComplex = fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n  const $oddShape = [$oddRealVals.length];\n  const $oddRealInfo = cpuBackend.makeTensorInfo($oddShape, \"float32\", $oddRealVals);\n  const $oddImagInfo = cpuBackend.makeTensorInfo($oddShape, \"float32\", $oddImagVals);\n  const $oddTensorInfo = complex2({ inputs: { real: $oddRealInfo, imag: $oddImagInfo }, backend: cpuBackend });\n  const e = backend_util_exports.exponents(size, inverse);\n  const eShape = [e.real.length];\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, \"float32\", e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, \"float32\", e.imag);\n  const complexInfo = complex2({ inputs: { real: eRealInfo, imag: eImagInfo }, backend: cpuBackend });\n  const exponentInfo = multiply2({ inputs: { a: complexInfo, b: $oddTensorInfo }, backend: cpuBackend });\n  const addPart = add4({\n    inputs: { a: $evenTensorInfo, b: exponentInfo },\n    backend: cpuBackend\n  });\n  const subPart = sub2({\n    inputs: { a: $evenTensorInfo, b: exponentInfo },\n    backend: cpuBackend\n  });\n  const addPartReal = real2({ inputs: { input: addPart }, backend: cpuBackend });\n  const subPartReal = real2({ inputs: { input: subPart }, backend: cpuBackend });\n  const addPartImag = imag2({ inputs: { input: addPart }, backend: cpuBackend });\n  const subPartImag = imag2({ inputs: { input: subPart }, backend: cpuBackend });\n  const $real = concat2({\n    inputs: [addPartReal, subPartReal],\n    backend: cpuBackend,\n    attrs: { axis: 0 }\n  });\n  const $imag = concat2({\n    inputs: [addPartImag, subPartImag],\n    backend: cpuBackend,\n    attrs: { axis: 0 }\n  });\n  const $realVals = cpuBackend.data.get($real.dataId).values;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values;\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n  return { real: $realVals, imag: $imagVals };\n}\nfunction fourierTransformByMatmul(data, size, inverse) {\n  const ret = new Float32Array(size * 2);\n  for (let r = 0; r < size; r++) {\n    let real4 = 0;\n    let imag4 = 0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util_exports.exponent(r * c, size, inverse);\n      const term = backend_util_exports.getComplexWithIndex(data, c);\n      real4 += term.real * e.real - term.imag * e.imag;\n      imag4 += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real4 /= size;\n      imag4 /= size;\n    }\n    backend_util_exports.assignToTypedArray(ret, real4, imag4, r);\n  }\n  return ret;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FFT.js\nfunction fft2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { input: input2 } = inputs;\n  const inputSize = util_exports.sizeFromShape(input2.shape);\n  const innerDimensionSize = input2.shape[input2.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n  const input2D = reshape3({\n    inputs: { x: input2 },\n    backend: backend2,\n    attrs: { shape: [batch, innerDimensionSize] }\n  });\n  const result = fftBatch(input2D, false, backend2);\n  const resultReshaped = reshape3({ inputs: { x: result }, backend: backend2, attrs: { shape: input2.shape } });\n  backend2.disposeIntermediateTensorInfo(input2D);\n  backend2.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nvar fftConfig = {\n  kernelName: FFT,\n  backendName: \"cpu\",\n  kernelFunc: fft2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Fill.js\nfunction fill2(args) {\n  const { backend: backend2, attrs } = args;\n  const { shape, value, dtype } = attrs;\n  const $dtype = dtype || util_exports.inferDtype(value);\n  const values = util_exports.getArrayFromDType($dtype, util_exports.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n  return backend2.makeTensorInfo(shape, $dtype, values);\n}\nvar fillConfig = {\n  kernelName: Fill,\n  backendName: \"cpu\",\n  kernelFunc: fill2\n};\nfunction fillValues(values, value, dtype) {\n  if (dtype === \"string\") {\n    values.fill(value);\n  } else {\n    values.fill(value);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FlipLeftRight.js\nvar flipLeftRightConfig = {\n  kernelName: FlipLeftRight,\n  backendName: \"cpu\",\n  kernelFunc: ({ inputs, attrs, backend: backend2 }) => {\n    const { image: image2 } = inputs;\n    const cpuBackend = backend2;\n    const output = util_exports.getTypedArrayFromDType(image2.dtype, util_exports.sizeFromShape(image2.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image2.shape;\n    const imageVals = cpuBackend.data.get(image2.dataId).values;\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coordX = Math.round(imageWidth - col - 1);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            let outputValue = imageVals[outIdx];\n            if (coordX >= 0 && coordX < imageWidth) {\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx = batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n    const dataId = cpuBackend.write(output, image2.shape, image2.dtype);\n    return { dataId, shape: image2.shape, dtype: image2.dtype };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FloorDiv.js\nvar floorDivImpl = createSimpleBinaryKernelImpl((a, b) => Math.floor(a / b));\nvar floorDiv2 = binaryKernelFunc(FloorDiv, floorDivImpl, null, \"int32\");\nvar floorDivConfig = {\n  kernelName: FloorDiv,\n  backendName: \"cpu\",\n  kernelFunc: floorDiv2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FusedConv2D.js\nfunction fusedConv2D(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, filter, bias, preluActivationWeights } = inputs;\n  const { strides, pad: pad3, dataFormat, dilations, dimRoundingMode, activation: activation2, leakyreluAlpha } = attrs;\n  let result = conv2D({\n    inputs: { x, filter },\n    backend: backend2,\n    attrs: { strides, pad: pad3, dataFormat, dilations, dimRoundingMode }\n  });\n  if (bias) {\n    const resultOld = result;\n    result = add4({ inputs: { a: result, b: bias }, backend: backend2 });\n    backend2.disposeIntermediateTensorInfo(resultOld);\n  }\n  if (activation2) {\n    const resultOld = result;\n    result = applyActivation2(backend2, result, activation2, preluActivationWeights, leakyreluAlpha);\n    backend2.disposeIntermediateTensorInfo(resultOld);\n  }\n  return result;\n}\nvar fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: \"cpu\",\n  kernelFunc: fusedConv2D\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FusedDepthwiseConv2D.js\nfunction fusedDepthwiseConv2D(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, filter, bias, preluActivationWeights } = inputs;\n  const { strides, pad: pad3, dataFormat, dilations, dimRoundingMode, activation: activation2, leakyreluAlpha } = attrs;\n  let result = depthwiseConv2dNative({\n    inputs: { x, filter },\n    backend: backend2,\n    attrs: { strides, pad: pad3, dataFormat, dilations, dimRoundingMode }\n  });\n  if (bias) {\n    const oldResult = result;\n    result = add4({ inputs: { a: result, b: bias }, backend: backend2 });\n    backend2.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation2) {\n    const oldResult = result;\n    result = applyActivation2(backend2, result, activation2, preluActivationWeights, leakyreluAlpha);\n    backend2.disposeIntermediateTensorInfo(oldResult);\n  }\n  return result;\n}\nvar fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: \"cpu\",\n  kernelFunc: fusedDepthwiseConv2D\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherNd.js\nfunction gatherNd(args) {\n  const { inputs, backend: backend2 } = args;\n  const { params, indices } = inputs;\n  const paramsSize = util_exports.sizeFromShape(params.shape);\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const [resultShape, numSlices, sliceSize, strides] = backend_util_exports.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend2.makeTensorInfo(resultShape, params.dtype, []);\n  }\n  const indicesData = backend2.data.get(indices.dataId).values;\n  const paramsBuf = backend2.bufferSync(params);\n  const outBuf = gatherNdImpl(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n  return backend2.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\nvar gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: \"cpu\",\n  kernelFunc: gatherNd\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2.js\nfunction gatherV2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, indices } = inputs;\n  const { axis, batchDims } = attrs;\n  assertNotComplex([x, indices], \"gatherV2\");\n  const parsedAxis = util_exports.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend2.data.get(indices.dataId).values;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util_exports.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n  let $batchDims = batchDims;\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n  const indicesSize = util_exports.sizeFromShape(indices.shape);\n  const shapeInfo = backend_util_exports.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, $batchDims);\n  const flattenX = reshape3({\n    inputs: { x },\n    backend: backend2,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize,\n        shapeInfo.outerSize,\n        shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n  const flattenIndex = reshape3({\n    inputs: { x: indices },\n    backend: backend2,\n    attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] }\n  });\n  const flattenOutputShape = [\n    shapeInfo.batchSize,\n    shapeInfo.outerSize,\n    indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n  const indicesBuf = backend2.bufferSync(flattenIndex);\n  const xBuf = backend2.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n  backend2.disposeIntermediateTensorInfo(flattenX);\n  backend2.disposeIntermediateTensorInfo(flattenIndex);\n  return backend2.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\nvar gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: \"cpu\",\n  kernelFunc: gatherV2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/IFFT.js\nfunction ifft2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { input: input2 } = inputs;\n  const inputSize = util_exports.sizeFromShape(input2.shape);\n  const innerDimensionSize = input2.shape[input2.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n  const input2D = reshape3({\n    inputs: { x: input2 },\n    backend: backend2,\n    attrs: { shape: [batch, innerDimensionSize] }\n  });\n  const result = fftBatch(input2D, true, backend2);\n  const resultReshaped = reshape3({ inputs: { x: result }, backend: backend2, attrs: { shape: input2.shape } });\n  backend2.disposeIntermediateTensorInfo(input2D);\n  backend2.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nvar ifftConfig = {\n  kernelName: IFFT,\n  backendName: \"cpu\",\n  kernelFunc: ifft2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/IsFinite.js\nvar isFinite3 = unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, \"bool\");\nvar isFiniteConfig = {\n  kernelName: IsFinite,\n  backendName: \"cpu\",\n  kernelFunc: isFinite3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/IsInf.js\nvar isInf2 = unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, \"bool\");\nvar isInfConfig = {\n  kernelName: IsInf,\n  backendName: \"cpu\",\n  kernelFunc: isInf2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/IsNaN.js\nvar isNaN3 = unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, \"bool\");\nvar isNaNConfig = {\n  kernelName: IsNan,\n  backendName: \"cpu\",\n  kernelFunc: isNaN3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace.js\nfunction linSpace(args) {\n  const { backend: backend2, attrs } = args;\n  const { start, stop, num } = attrs;\n  const outVals = linSpaceImpl(start, stop, num);\n  return backend2.makeTensorInfo([outVals.length], \"float32\", outVals);\n}\nvar linSpaceConfig = {\n  kernelName: LinSpace,\n  backendName: \"cpu\",\n  kernelFunc: linSpace\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log1p.js\nvar log1p2 = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\nvar log1pConfig = {\n  kernelName: Log1p,\n  backendName: \"cpu\",\n  kernelFunc: log1p2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LogicalAnd.js\nvar logicalAndImpl = createSimpleBinaryKernelImpl((a, b) => a && b);\nvar logicalAnd2 = binaryKernelFunc(LogicalAnd, logicalAndImpl, null, \"bool\");\nvar logicalAndConfig = {\n  kernelName: LogicalAnd,\n  backendName: \"cpu\",\n  kernelFunc: logicalAnd2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LogicalNot.js\nvar logicalNot2 = unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, \"bool\");\nvar logicalNotConfig = {\n  kernelName: LogicalNot,\n  backendName: \"cpu\",\n  kernelFunc: logicalNot2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LogicalOr.js\nvar logicalOrImpl = createSimpleBinaryKernelImpl((a, b) => a || b);\nvar logicalOr2 = binaryKernelFunc(LogicalOr, logicalOrImpl, null, \"bool\");\nvar logicalOrConfig = {\n  kernelName: LogicalOr,\n  backendName: \"cpu\",\n  kernelFunc: logicalOr2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LRN.js\nfunction lRN(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { depthRadius, bias, alpha, beta } = attrs;\n  assertNotComplex(x, \"LRN\");\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend2.data.get(x.dataId).values;\n  const size = util_exports.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n  function sumAcrossChannels(offset) {\n    const currentChannel = offset % channels;\n    let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n    let sum6 = 0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum6 += z * z;\n    }\n    return sum6;\n  }\n  for (let offset = 0; offset < size; offset++) {\n    const sum6 = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum6, -beta);\n    result[offset] = val;\n  }\n  return backend2.makeTensorInfo(x.shape, x.dtype, result);\n}\nvar LRNConfig = {\n  kernelName: LRN,\n  backendName: \"cpu\",\n  kernelFunc: lRN\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LRNGrad.js\nfunction lRNGrad(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, y, dy } = inputs;\n  const { depthRadius, bias, alpha, beta } = attrs;\n  assertNotComplex(dy, \"LRNGrad\");\n  const dySize = util_exports.sizeFromShape(dy.shape);\n  const channels = dy.shape[3];\n  const dyValues = backend2.data.get(dy.dataId).values;\n  const xValues = backend2.data.get(x.dataId).values;\n  const yValues = backend2.data.get(y.dataId).values;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = offset - currentChannel + Math.min(channels, currentChannel + depthRadius + 1);\n    let norm2 = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm2 += Math.pow(xValues[k], 2);\n    }\n    norm2 = alpha * norm2 + bias;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm2;\n      if (offset === k) {\n        dyi += Math.pow(norm2, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n  return backend2.makeTensorInfo(dy.shape, x.dtype, result);\n}\nvar LRNGradConfig = {\n  kernelName: LRNGrad,\n  backendName: \"cpu\",\n  kernelFunc: lRNGrad\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max.js\nfunction max3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { reductionIndices, keepDims } = attrs;\n  const cpuBackend = backend2;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n  const origAxes = util_exports.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values;\n  if (permutedAxes != null) {\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util_exports.getInnerMostAxes(axes.length, xRank);\n    xShape = newShape;\n  }\n  assertNotComplex(x, \"max\");\n  backend_util_exports.assertAxesAreInnerMostDims(\"max\", axes, xRank);\n  const [maxOutShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(xShape, axes);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n  let outShape = maxOutShape;\n  if (keepDims) {\n    const newShape = backend_util_exports.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n  return { dataId, shape: outShape, dtype: x.dtype };\n}\nvar maxConfig = {\n  kernelName: Max,\n  backendName: \"cpu\",\n  kernelFunc: max3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool.js\nfunction maxPool2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  assertNotComplex(x, \"maxPool\");\n  const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n  const dilations = 1;\n  util_exports.assert(backend_util_exports.eitherStridesOrDilationsAreOne(strides, dilations), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util_exports.computePool2DInfo(x.shape, filterSize, strides, dilations, pad3, dimRoundingMode);\n  let res;\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util_exports.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity2({ inputs: { x }, backend: backend2 });\n  } else {\n    const xValues = backend2.data.get(x.dataId).values;\n    const strides2 = util_exports.computeStrides(x.shape);\n    const buffer2 = pool2(xValues, x.shape, x.dtype, strides2, convInfo, \"max\");\n    res = backend2.makeTensorInfo(convInfo.outShape, x.dtype, buffer2.values);\n  }\n  return res;\n}\nvar maxPoolConfig = {\n  kernelName: MaxPool,\n  backendName: \"cpu\",\n  kernelFunc: maxPool2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool3D.js\nfunction maxPool3D(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { filterSize, strides, pad: pad3, dimRoundingMode, dataFormat } = attrs;\n  assertNotComplex(x, \"maxPool3d\");\n  const convInfo = backend_util_exports.computePool3DInfo(x.shape, filterSize, strides, 1, pad3, dimRoundingMode, dataFormat);\n  const xValues = backend2.data.get(x.dataId).values;\n  const outBuf = pool3d2(xValues, x.shape, x.dtype, util_exports.computeStrides(x.shape), convInfo, \"max\");\n  return backend2.makeTensorInfo(outBuf.shape, \"float32\", outBuf.values);\n}\nvar maxPool3DConfig = {\n  kernelName: MaxPool3D,\n  backendName: \"cpu\",\n  kernelFunc: maxPool3D\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool3DGrad.js\nfunction maxPool3DGrad(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, input: input2 } = inputs;\n  const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n  assertNotComplex([dy, input2], \"maxPool3DGrad\");\n  const convInfo = backend_util_exports.computePool3DInfo(input2.shape, filterSize, strides, 1, pad3, dimRoundingMode);\n  const inputBuf = backend2.bufferSync(input2);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input2.shape, \"float32\");\n  const dyBuf = backend2.bufferSync(dy);\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterWidth + wCol;\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n                  const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nvar maxPool3DGradConfig2 = {\n  kernelName: MaxPool3DGrad,\n  backendName: \"cpu\",\n  kernelFunc: maxPool3DGrad\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolGrad.js\nfunction maxPoolGrad2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, input: input2, output } = inputs;\n  const x = input2;\n  assertNotComplex([input2, output], \"maxPoolGrad\");\n  const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n  const convInfo = backend_util_exports.computePool2DInfo(x.shape, filterSize, strides, 1, pad3, dimRoundingMode);\n  const xValues = backend2.data.get(x.dataId).values;\n  const maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(x.shape, \"float32\");\n  const dyData = backend2.data.get(dy.dataId).values;\n  const dyBuf = buffer(dy.shape, \"float32\", dyData);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(b, dyR, dyC, d);\n              const curPos = wR * effectiveFilterWidth + wC;\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nvar maxPoolGradConfig2 = {\n  kernelName: MaxPoolGrad,\n  backendName: \"cpu\",\n  kernelFunc: maxPoolGrad2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolWithArgmax_impl.js\nfunction maxPoolWithArgmaxImpl(xValues, xShape, dtype, includeBatchInIndex, convInfo) {\n  const strides = util_exports.computeStrides(xShape);\n  const maxPools = pool2(xValues, xShape, dtype, strides, convInfo, \"max\");\n  const maxPositions = maxPoolPositions(xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n  return [maxPools.values, maxPositions.values];\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolWithArgmax.js\nvar maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: \"cpu\",\n  kernelFunc: ({ inputs, attrs, backend: backend2 }) => {\n    const { x } = inputs;\n    const { filterSize, strides, pad: pad3, includeBatchInIndex } = attrs;\n    const cpuBackend = backend2;\n    assertNotComplex(x, \"MaxPoolWithArgmax\");\n    const values = cpuBackend.data.get(x.dataId).values;\n    const convInfo = backend_util_exports.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad3);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n    const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n    const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n    return [\n      { dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype },\n      { dataId: indexesDataId, shape: convInfo.outShape, dtype: \"int32\" }\n    ];\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Mean.js\nfunction mean2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, keepDims } = attrs;\n  const axes = util_exports.parseAxisParam(axis, x.shape);\n  const shapes = backend_util_exports.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar = backend2.makeTensorInfo([], \"float32\", new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n  const $x = cast3({ inputs: { x }, backend: backend2, attrs: { dtype: \"float32\" } });\n  toDispose.push($x);\n  const res = div2({ inputs: { a: $x, b: reduceSizeScalar }, backend: backend2 });\n  toDispose.push(res);\n  const result = sum3({ inputs: { x: res }, backend: backend2, attrs: { axis, keepDims } });\n  toDispose.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return result;\n}\nvar meanConfig = {\n  kernelName: Mean,\n  backendName: \"cpu\",\n  kernelFunc: mean2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Min.js\nfunction min3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, keepDims } = attrs;\n  assertNotComplex(x, \"min\");\n  const origAxes = util_exports.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose2({ inputs: { x }, backend: backend2, attrs: { perm: permutedAxes } });\n    axes = backend_util_exports.getInnerMostAxes(axes.length, x.shape.length);\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"min\", axes, $x.shape.length);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const vals = util_exports.makeZerosTypedArray(util_exports.sizeFromShape(outShape), $x.dtype);\n  const aVals = backend2.data.get($x.dataId).values;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min6 = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) || value < min6) {\n        min6 = value;\n      }\n    }\n    vals[i] = min6;\n  }\n  if (permutedAxes != null) {\n    backend2.disposeIntermediateTensorInfo($x);\n  }\n  const result = backend2.makeTensorInfo(outShape, $x.dtype, vals);\n  if (keepDims) {\n    const expandedShape = backend_util_exports.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult = reshape3({ inputs: { x: result }, backend: backend2, attrs: { shape: expandedShape } });\n    backend2.disposeIntermediateTensorInfo(result);\n    return reshapedResult;\n  }\n  return result;\n}\nvar minConfig = {\n  kernelName: Min,\n  backendName: \"cpu\",\n  kernelFunc: min3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MirrorPad.js\nfunction mirrorPad2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { paddings, mode } = attrs;\n  assertNotComplex(x, \"mirrorPad\");\n  const outShape = paddings.map((p2, i) => p2[0] + x.shape[i] + p2[1]);\n  const start = paddings.map((p2) => p2[0]);\n  const end = paddings.map((p2, i) => p2[0] + x.shape[i]);\n  const offset = mode === \"reflect\" ? 0 : 1;\n  const xVals = backend2.data.get(x.dataId).values;\n  const xRank = x.shape.length;\n  const xStrides = util_exports.computeStrides(x.shape);\n  const resultSize = util_exports.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util_exports.computeStrides(outShape);\n  const resVals = util_exports.getTypedArrayFromDType(x.dtype, resultSize);\n  for (let i = 0; i < resultSize; i++) {\n    let coords2 = util_exports.indexToLoc(i, resultRank, resultStrides);\n    for (let i2 = 0; i2 < resultRank; i2++) {\n      if (coords2[i2] < start[i2]) {\n        coords2[i2] = start[i2] * 2 - coords2[i2] - offset;\n      } else if (coords2[i2] >= end[i2]) {\n        coords2[i2] = (end[i2] - 1) * 2 - coords2[i2] + offset;\n      }\n    }\n    coords2 = coords2.map((c, i2) => c - start[i2]);\n    const inIndex = util_exports.locToIndex(coords2, xRank, xStrides);\n    resVals[i] = xVals[inIndex];\n  }\n  const outId = backend2.write(resVals, outShape, x.dtype);\n  return { dataId: outId, shape: outShape, dtype: x.dtype };\n}\nvar mirrorPadConfig = {\n  kernelName: MirrorPad,\n  backendName: \"cpu\",\n  kernelFunc: mirrorPad2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Mod.js\nvar modImpl = createSimpleBinaryKernelImpl((aValue, bValue) => {\n  const rem = aValue % bValue;\n  if (aValue < 0 && bValue < 0 || aValue >= 0 && bValue >= 0) {\n    return rem;\n  } else {\n    return (rem + bValue) % bValue;\n  }\n});\nvar mod2 = binaryKernelFunc(Mod, modImpl);\nvar modConfig = {\n  kernelName: Mod,\n  backendName: \"cpu\",\n  kernelFunc: mod2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multinomial.js\nvar seedrandom4 = __toESM(require_seedrandom2());\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Softmax.js\nfunction softmax3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { logits } = inputs;\n  const { dim } = attrs;\n  const logitsRank = logits.shape.length;\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n  const axes = util_exports.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max3({\n    inputs: { x: logits },\n    backend: backend2,\n    attrs: { reductionIndices: axes, keepDims: false }\n  });\n  const expandedShape = backend_util_exports.expandShapeToKeepDim(maxLogit.shape, axes);\n  const maxLogitReshaped = reshape3({ inputs: { x: maxLogit }, backend: backend2, attrs: { shape: expandedShape } });\n  const a = sub2({ inputs: { a: logits, b: maxLogitReshaped }, backend: backend2 });\n  const b = exp2({ inputs: { x: a }, backend: backend2 });\n  const sumExp = sum3({ inputs: { x: b }, backend: backend2, attrs: { axis: axes, keepDims: false } });\n  const sumReshaped = reshape3({ inputs: { x: sumExp }, backend: backend2, attrs: { shape: expandedShape } });\n  const result = div2({ inputs: { a: b, b: sumReshaped }, backend: backend2 });\n  backend2.disposeIntermediateTensorInfo(maxLogit);\n  backend2.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend2.disposeIntermediateTensorInfo(a);\n  backend2.disposeIntermediateTensorInfo(b);\n  backend2.disposeIntermediateTensorInfo(sumExp);\n  backend2.disposeIntermediateTensorInfo(sumReshaped);\n  return result;\n}\nvar softmaxConfig = {\n  kernelName: Softmax,\n  backendName: \"cpu\",\n  kernelFunc: softmax3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multinomial.js\nfunction multinomial2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { logits } = inputs;\n  const { numSamples, seed, normalized } = attrs;\n  assertNotComplex(logits, \"multinomial\");\n  const probabilities = normalized ? logits : softmax3({ inputs: { logits }, backend: backend2, attrs: { dim: -1 } });\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend2.data.get(probabilities.dataId).values;\n  const resShape = [batchSize, numSamples];\n  const resVals = util_exports.makeZerosTypedArray(util_exports.sizeFromShape(resShape), \"int32\");\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n    const random = seedrandom4.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n      resVals[outOffset + sampleId] = cdf.length;\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n  if (!normalized) {\n    backend2.disposeIntermediateTensorInfo(probabilities);\n  }\n  return backend2.makeTensorInfo(resShape, \"int32\", resVals);\n}\nvar multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: \"cpu\",\n  kernelFunc: multinomial2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV3.js\nvar nonMaxSuppressionV3Impl2 = kernel_impls_exports.nonMaxSuppressionV3Impl;\nfunction nonMaxSuppressionV3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { boxes, scores } = inputs;\n  const { maxOutputSize, iouThreshold, scoreThreshold } = attrs;\n  assertNotComplex(boxes, \"NonMaxSuppression\");\n  const boxesVals = backend2.data.get(boxes.dataId).values;\n  const scoresVals = backend2.data.get(scores.dataId).values;\n  const { selectedIndices } = nonMaxSuppressionV3Impl2(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  return backend2.makeTensorInfo([selectedIndices.length], \"int32\", new Int32Array(selectedIndices));\n}\nvar nonMaxSuppressionV3Config = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: \"cpu\",\n  kernelFunc: nonMaxSuppressionV3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV4.js\nvar nonMaxSuppressionV4Impl2 = kernel_impls_exports.nonMaxSuppressionV4Impl;\nfunction nonMaxSuppressionV4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { boxes, scores } = inputs;\n  const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;\n  assertNotComplex(boxes, \"NonMaxSuppressionPadded\");\n  const boxesVals = backend2.data.get(boxes.dataId).values;\n  const scoresVals = backend2.data.get(scores.dataId).values;\n  const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl2(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n  return [\n    backend2.makeTensorInfo([selectedIndices.length], \"int32\", new Int32Array(selectedIndices)),\n    backend2.makeTensorInfo([], \"int32\", new Int32Array([validOutputs]))\n  ];\n}\nvar nonMaxSuppressionV4Config = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: \"cpu\",\n  kernelFunc: nonMaxSuppressionV4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV5.js\nvar nonMaxSuppressionV5Impl2 = kernel_impls_exports.nonMaxSuppressionV5Impl;\nfunction nonMaxSuppressionV5(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { boxes, scores } = inputs;\n  const { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = attrs;\n  assertNotComplex(boxes, \"NonMaxSuppressionWithScore\");\n  const boxesVals = backend2.data.get(boxes.dataId).values;\n  const scoresVals = backend2.data.get(scores.dataId).values;\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n  const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl2(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n  return [\n    backend2.makeTensorInfo([selectedIndices.length], \"int32\", new Int32Array(selectedIndices)),\n    backend2.makeTensorInfo([selectedScores.length], \"float32\", new Float32Array(selectedScores))\n  ];\n}\nvar nonMaxSuppressionV5Config = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: \"cpu\",\n  kernelFunc: nonMaxSuppressionV5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/OneHot.js\nfunction oneHot2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { indices } = inputs;\n  const { depth, onValue, offValue } = attrs;\n  assertNotComplex(indices, \"oneHot\");\n  const indicesSize = util_exports.sizeFromShape(indices.shape);\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend2.data.get(indices.dataId).values;\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n  return backend2.makeTensorInfo([...indices.shape, depth], \"int32\", res);\n}\nvar oneHotConfig = {\n  kernelName: OneHot,\n  backendName: \"cpu\",\n  kernelFunc: oneHot2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ZerosLike.js\nfunction zerosLike2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x } = inputs;\n  if (x.dtype === \"string\") {\n    throw new Error(\"zerosLike is not supported for string tensors\");\n  } else if (x.dtype === \"complex64\") {\n    const realPart = real2({ inputs: { input: x }, backend: backend2 });\n    const r = zerosLike2({ inputs: { x: realPart }, backend: backend2 });\n    const imagPart = imag2({ inputs: { input: x }, backend: backend2 });\n    const i = zerosLike2({ inputs: { x: imagPart }, backend: backend2 });\n    const result = complex2({ inputs: { real: r, imag: i }, backend: backend2 });\n    backend2.disposeIntermediateTensorInfo(realPart);\n    backend2.disposeIntermediateTensorInfo(r);\n    backend2.disposeIntermediateTensorInfo(imagPart);\n    backend2.disposeIntermediateTensorInfo(i);\n    return result;\n  } else {\n    return fill2({ backend: backend2, attrs: { shape: x.shape, value: 0, dtype: x.dtype } });\n  }\n}\nvar zerosLikeConfig = {\n  kernelName: ZerosLike,\n  backendName: \"cpu\",\n  kernelFunc: zerosLike2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/OnesLike.js\nfunction onesLike2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x } = inputs;\n  if (x.dtype === \"string\") {\n    throw new Error(\"onesLike is not supported for string tensors\");\n  } else if (x.dtype === \"complex64\") {\n    const realPart = real2({ inputs: { input: x }, backend: backend2 });\n    const r = onesLike2({ inputs: { x: realPart }, backend: backend2 });\n    const imagPart = imag2({ inputs: { input: x }, backend: backend2 });\n    const i = zerosLike2({ inputs: { x: imagPart }, backend: backend2 });\n    const result = complex2({ inputs: { real: r, imag: i }, backend: backend2 });\n    backend2.disposeIntermediateTensorInfo(realPart);\n    backend2.disposeIntermediateTensorInfo(r);\n    backend2.disposeIntermediateTensorInfo(imagPart);\n    backend2.disposeIntermediateTensorInfo(i);\n    return result;\n  } else {\n    return fill2({ backend: backend2, attrs: { shape: x.shape, value: 1, dtype: x.dtype } });\n  }\n}\nvar onesLikeConfig = {\n  kernelName: OnesLike,\n  backendName: \"cpu\",\n  kernelFunc: onesLike2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Pack.js\nfunction pack(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { axis } = attrs;\n  if (inputs.length === 1) {\n    return expandDims3({ inputs: { input: inputs[0] }, backend: backend2, attrs: { dim: axis } });\n  }\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n  inputs.forEach((t) => {\n    util_exports.assertShapesMatch(shape, t.shape, \"All tensors passed to stack must have matching shapes\");\n    util_exports.assert(dtype === t.dtype, () => \"All tensors passed to stack must have matching dtypes\");\n  });\n  const intermediateTensorInfos = [];\n  const expandedTensors = inputs.map((t) => {\n    const expandedT = expandDims3({ inputs: { input: t }, backend: backend2, attrs: { dim: axis } });\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n  const result = concat2({ inputs: expandedTensors, backend: backend2, attrs: { axis } });\n  intermediateTensorInfos.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return result;\n}\nvar packConfig = {\n  kernelName: Pack,\n  backendName: \"cpu\",\n  kernelFunc: pack\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/PadV2.js\nfunction padV2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { paddings, constantValue } = attrs;\n  assertNotComplex(x, \"pad\");\n  const outShape = paddings.map((p2, i) => p2[0] + x.shape[i] + p2[1]);\n  const start = paddings.map((p2) => p2[0]);\n  const xVals = backend2.data.get(x.dataId).values;\n  const xSize = util_exports.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util_exports.computeStrides(x.shape);\n  const resultSize = util_exports.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util_exports.computeStrides(outShape);\n  const resVals = util_exports.getTypedArrayFromDType(x.dtype, resultSize);\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n  for (let i = 0; i < xSize; i++) {\n    const coords2 = util_exports.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords2.map((c, i2) => c + start[i2]);\n    const outIndex = util_exports.locToIndex(outCoords, resultRank, resultStrides);\n    resVals[outIndex] = xVals[i];\n  }\n  const outId = backend2.write(resVals, outShape, x.dtype);\n  return { dataId: outId, shape: outShape, dtype: x.dtype };\n}\nvar padV2Config = {\n  kernelName: PadV2,\n  backendName: \"cpu\",\n  kernelFunc: padV2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Pow.js\nvar powImpl = createSimpleBinaryKernelImpl((a, b) => Math.pow(a, b));\nvar pow2 = binaryKernelFunc(Pow, powImpl);\nvar powConfig = {\n  kernelName: Pow,\n  backendName: \"cpu\",\n  kernelFunc: pow2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range.js\nfunction range3(args) {\n  const { backend: backend2, attrs } = args;\n  const { start, stop, dtype, step: step5 } = attrs;\n  const values = rangeImpl(start, stop, step5, dtype);\n  return backend2.makeTensorInfo([values.length], dtype, values);\n}\nvar rangeConfig = {\n  kernelName: Range,\n  backendName: \"cpu\",\n  kernelFunc: range3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reciprocal.js\nvar reciprocal2 = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\nvar reciprocalConfig = {\n  kernelName: Reciprocal,\n  backendName: \"cpu\",\n  kernelFunc: reciprocal2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ResizeBilinear.js\nfunction resizeBilinear2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { images } = inputs;\n  const { alignCorners, halfPixelCenters, size } = attrs;\n  assertNotComplex(images, \"resizeBilinear\");\n  const imagesStrides = util_exports.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend2.data.get(images.dataId).values;\n  const result = new Float32Array(util_exports.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n  const effectiveInputSize = [\n    alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,\n    alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth\n  ];\n  const effectiveOutputSize = [\n    alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,\n    alignCorners && newWidth > 1 ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset = b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset = b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo([batch, newHeight, newWidth, numChannels], \"float32\", result);\n}\nvar resizeBilinearConfig = {\n  kernelName: ResizeBilinear,\n  backendName: \"cpu\",\n  kernelFunc: resizeBilinear2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ResizeBilinearGrad.js\nfunction resizeBilinearGrad(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { images, dy } = inputs;\n  const { alignCorners } = attrs;\n  assertNotComplex([dy, images], \"resizeBilinearGrad\");\n  const imagesStrides = util_exports.computeStrides(images.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const effectiveXSize = [\n    alignCorners && yHeight > 1 ? xHeight - 1 : xHeight,\n    alignCorners && yWidth > 1 ? xWidth - 1 : xWidth\n  ];\n  const effectiveYSize = [\n    alignCorners && yHeight > 1 ? yHeight - 1 : yHeight,\n    alignCorners && yWidth > 1 ? yWidth - 1 : yWidth\n  ];\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n  const dyValues = backend2.data.get(dy.dataId).values;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1 - dxCLerp;\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset = topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset = bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset = bottomDxROffset + rightDxCIndex * imagesStrides[2];\n        const inverseDxRLerpTimesInverseDxCLerp = inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] += dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo([batch, xWidth, xHeight, depth], \"float32\", output);\n}\nvar resizeBilinearGradConfig2 = {\n  kernelName: ResizeBilinearGrad,\n  backendName: \"cpu\",\n  kernelFunc: resizeBilinearGrad\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ResizeNearestNeighbor.js\nfunction resizeNearestNeighbor2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { images } = inputs;\n  const { alignCorners, halfPixelCenters, size } = attrs;\n  assertNotComplex(images, \"resizeNearestNeighbor\");\n  const imagesStrides = util_exports.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend2.data.get(images.dataId).values;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n  const effectiveInputSize = [\n    alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,\n    alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth\n  ];\n  const effectiveOutputSize = [\n    alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,\n    alignCorners && newWidth > 1 ? newWidth - 1 : newWidth\n  ];\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ? effectiveRowSizeRatio * (r + 0.5) : effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ? effectiveColSizeRatio * (c + 0.5) : effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo([batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\nvar resizeNearestNeighborConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: \"cpu\",\n  kernelFunc: resizeNearestNeighbor2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ResizeNearestNeighborGrad.js\nfunction resizeNearestNeighborGrad(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { images, dy } = inputs;\n  const { alignCorners } = attrs;\n  assertNotComplex([dy, images], \"resizeNearestNeighborGrad\");\n  const imagesStrides = util_exports.computeStrides(images.shape);\n  const dyStrides = util_exports.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend2.data.get(dy.dataId).values;\n  const effectiveXSize = [\n    alignCorners && yHeight > 1 ? xHeight - 1 : xHeight,\n    alignCorners && yWidth > 1 ? xWidth - 1 : xWidth\n  ];\n  const effectiveYSize = [\n    alignCorners && yHeight > 1 ? yHeight - 1 : yHeight,\n    alignCorners && yWidth > 1 ? yWidth - 1 : yWidth\n  ];\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n  const winHeight = Math.ceil(invHeightScale) * 2 + 2;\n  const winWidth = Math.ceil(invWidthScale) * 2 + 2;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - winHeight / 2);\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - winWidth / 2);\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n  return backend2.makeTensorInfo(images.shape, images.dtype, output);\n}\nvar resizeNearestNeighborGradConfig2 = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: \"cpu\",\n  kernelFunc: resizeNearestNeighborGrad\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reverse.js\nfunction reverse2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { dims } = attrs;\n  assertNotComplex(x, \"reverse\");\n  const xRank = x.shape.length;\n  const $dims = util_exports.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity2({ inputs: { x }, backend: backend2 });\n  }\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend2.bufferSync(x);\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach((d) => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n  return backend2.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nvar reverseConfig = {\n  kernelName: Reverse,\n  backendName: \"cpu\",\n  kernelFunc: reverse2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RotateWithOffset.js\nvar rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: \"cpu\",\n  kernelFunc: ({ inputs, attrs, backend: backend2 }) => {\n    const { image: image2 } = inputs;\n    const { radians, fillValue, center } = attrs;\n    const cpuBackend = backend2;\n    const output = util_exports.getTypedArrayFromDType(image2.dtype, util_exports.sizeFromShape(image2.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image2.shape;\n    const [centerX, centerY] = backend_util_exports.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image2.dataId).values;\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords2 = [batch, row, col, channel];\n            const x = coords2[2];\n            const y = coords2[1];\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n            let outputValue = fillValue;\n            if (typeof fillValue !== \"number\") {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 && coordY < imageHeight) {\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n    const dataId = cpuBackend.write(output, image2.shape, image2.dtype);\n    return { dataId, shape: image2.shape, dtype: image2.dtype };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Round.js\nvar round3 = unaryKernelFunc(Round, (xi) => {\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2 === 0) {\n      return base;\n    } else {\n      return base + 1;\n    }\n  }\n});\nvar roundConfig = {\n  kernelName: Round,\n  backendName: \"cpu\",\n  kernelFunc: round3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Scatter_impl.js\nfunction scatterImpl(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  const indicesData = indices.values;\n  const updatesData = updates.values;\n  if (outputSize === 0) {\n    return buffer(shape, updates.dtype);\n  }\n  const outBuf = buffer(flattenShape, updates.dtype);\n  outBuf.values.fill(defaultValue);\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] += updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ? updatesData[0] : updatesData[i * sliceSize + k];\n      }\n    }\n  }\n  return outBuf;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ScatterNd.js\nfunction scatterNd(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { indices, updates } = inputs;\n  const { shape } = attrs;\n  const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util_exports.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n  const indicesBuf = backend2.bufferSync(indices);\n  const updatesBuf = backend2.bufferSync(updates);\n  const outBuf = scatterImpl(indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, 0, sumDupeIndices);\n  return backend2.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\nvar scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: \"cpu\",\n  kernelFunc: scatterNd\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Select.js\nfunction select2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { condition, t, e } = inputs;\n  assertNotComplex([condition, t, e], \"select\");\n  const conditionRank = condition.shape.length;\n  const values = backend2.data.get(condition.dataId).values;\n  const tValues = backend2.data.get(t.dataId).values;\n  const eValues = backend2.data.get(e.dataId).values;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues = util_exports.makeZerosTypedArray(util_exports.sizeFromShape(t.shape), resultDtype);\n  let index = 0;\n  const offset = conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ? 1 : util_exports.sizeFromShape(t.shape.slice(1));\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n  return backend2.makeTensorInfo(t.shape, resultDtype, newValues);\n}\nvar selectConfig = {\n  kernelName: Select,\n  backendName: \"cpu\",\n  kernelFunc: select2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Selu.js\nvar scaleAlpha = backend_util_exports.SELU_SCALEALPHA;\nvar scale = backend_util_exports.SELU_SCALE;\nvar selu2 = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\nvar seluConfig = {\n  kernelName: Selu,\n  backendName: \"cpu\",\n  kernelFunc: selu2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sign.js\nvar sign2 = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\nvar signConfig = {\n  kernelName: Sign,\n  backendName: \"cpu\",\n  kernelFunc: sign2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sin.js\nvar sin2 = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\nvar sinConfig = {\n  kernelName: Sin,\n  backendName: \"cpu\",\n  kernelFunc: sin2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sinh.js\nvar sinh2 = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\nvar sinhConfig = {\n  kernelName: Sinh,\n  backendName: \"cpu\",\n  kernelFunc: sinh2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Softplus.js\nvar epsilon2 = 11920928955078125e-23;\nvar threshold2 = Math.log(epsilon2) + 2;\nvar softplus2 = unaryKernelFunc(Softplus, (xi) => {\n  const tooLarge = xi > -threshold2;\n  const tooSmall = xi < threshold2;\n  const expX = Math.exp(xi);\n  let result;\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1 + expX);\n  }\n  return result;\n});\nvar softplusConfig = {\n  kernelName: Softplus,\n  backendName: \"cpu\",\n  kernelFunc: softplus2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SpaceToBatchND.js\nfunction spaceToBatchND2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { blockShape, paddings } = attrs;\n  assertNotComplex([x], \"spaceToBatchND\");\n  const prod5 = util_exports.sizeFromShape(blockShape);\n  const completePaddings = [[0, 0]];\n  completePaddings.push(...paddings);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n  const paddedX = padV2Config.kernelFunc({\n    inputs: { x },\n    backend: backend2,\n    attrs: { paddings: completePaddings, constantValue: 0 }\n  });\n  const reshapedPaddedShape = backend_util_exports.getReshaped(paddedX.shape, blockShape, prod5, false);\n  const permutedReshapedPaddedPermutation = backend_util_exports.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  const flattenShape = backend_util_exports.getReshapedPermuted(paddedX.shape, blockShape, prod5, false);\n  const reshapeInputs = { x: paddedX };\n  const reshapeAttrs = { shape: reshapedPaddedShape };\n  const paddedXReshaped = reshape3({ inputs: reshapeInputs, backend: backend2, attrs: reshapeAttrs });\n  const transposeInputs = { x: paddedXReshaped };\n  const transposeAttrs = { perm: permutedReshapedPaddedPermutation };\n  const paddedXT = transpose2({ inputs: transposeInputs, backend: backend2, attrs: transposeAttrs });\n  const resultReshapeInputs = { x: paddedXT };\n  const resultReshapeAttrs = { shape: flattenShape };\n  const result = reshape3({ inputs: resultReshapeInputs, backend: backend2, attrs: resultReshapeAttrs });\n  backend2.disposeIntermediateTensorInfo(paddedX);\n  backend2.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend2.disposeIntermediateTensorInfo(paddedXT);\n  return result;\n}\nvar spaceToBatchNDConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: \"cpu\",\n  kernelFunc: spaceToBatchND2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows.js\nfunction sparseFillEmptyRows2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { indices, values, denseShape, defaultValue } = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n  const $indices = backend2.data.get(indices.dataId).values;\n  const $values = backend2.data.get(values.dataId).values;\n  const $denseShape = backend2.data.get(denseShape.dataId).values;\n  const $defaultValue = backend2.data.get(defaultValue.dataId).values[0];\n  const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = sparseFillEmptyRowsImpl($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);\n  return [\n    backend2.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend2.makeTensorInfo([outputIndicesShape[0]], values.dtype, outputValues),\n    backend2.makeTensorInfo([emptyRowIndicator.length], \"bool\", new Uint8Array(emptyRowIndicator.map((value) => Number(value)))),\n    backend2.makeTensorInfo([reverseIndexMap.length], indices.dtype, new Int32Array(reverseIndexMap))\n  ];\n}\nvar sparseFillEmptyRowsConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: \"cpu\",\n  kernelFunc: sparseFillEmptyRows2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape.js\nfunction sparseReshape2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { inputIndices, inputShape, newShape } = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n  if (newShape.shape.length !== 1) {\n    throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n  const $inputShape = Array.from(backend2.data.get(inputShape.dataId).values);\n  const $inputIndices = backend2.data.get(inputIndices.dataId).values;\n  const targetShape = Array.from(backend2.data.get(newShape.dataId).values);\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);\n  return [\n    backend2.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend2.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))\n  ];\n}\nvar sparseReshapeConfig = {\n  kernelName: SparseReshape,\n  backendName: \"cpu\",\n  kernelFunc: sparseReshape2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseSegmentMean.js\nfunction sparseSegmentMean2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { data, indices, segmentIds } = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n  const $data = backend2.data.get(data.dataId).values;\n  const $indices = backend2.data.get(indices.dataId).values;\n  const $segmentIds = backend2.data.get(segmentIds.dataId).values;\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl($data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend2.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nvar sparseSegmentMeanConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: \"cpu\",\n  kernelFunc: sparseSegmentMean2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseSegmentSum.js\nfunction sparseSegmentSum2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { data, indices, segmentIds } = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n  const $data = backend2.data.get(data.dataId).values;\n  const $indices = backend2.data.get(indices.dataId).values;\n  const $segmentIds = backend2.data.get(segmentIds.dataId).values;\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl($data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend2.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nvar sparseSegmentSumConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: \"cpu\",\n  kernelFunc: sparseSegmentSum2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseToDense.js\nfunction sparseToDense2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { sparseIndices, sparseValues, defaultValue } = inputs;\n  const { outputShape } = attrs;\n  const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util_exports.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n  const indicesBuf = backend2.bufferSync(sparseIndices);\n  const updatesBuf = backend2.bufferSync(sparseValues);\n  const $defaultValue = backend2.data.get(defaultValue.dataId).values[0];\n  const outBuf = scatterImpl(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n  return backend2.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\nvar sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: \"cpu\",\n  kernelFunc: sparseToDense2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SplitV.js\nfunction splitV(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { numOrSizeSplits, axis } = attrs;\n  const $axis = util_exports.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util_exports.prepareSplitSize(x, numOrSizeSplits, $axis);\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map((s) => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT = slice2({ inputs: { x }, backend: backend2, attrs: { begin, size: sliceSize } });\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\nvar splitVConfig = {\n  kernelName: SplitV,\n  backendName: \"cpu\",\n  kernelFunc: splitV\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Square.js\nvar squareConfig = {\n  kernelName: Square,\n  backendName: \"cpu\",\n  kernelFunc: ({ inputs, backend: backend2 }) => {\n    const { x } = inputs;\n    const cpuBackend = backend2;\n    assertNotComplex(x, \"square\");\n    const values = cpuBackend.data.get(x.dataId).values;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return { dataId, shape: x.shape, dtype: x.dtype };\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Step.js\nvar step2 = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\nvar stepConfig = {\n  kernelName: Step,\n  backendName: \"cpu\",\n  kernelFunc: step2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice.js\nfunction stridedSlice2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n  assertNotComplex(x, \"stridedSlice\");\n  const { finalShapeSparse, finalShape, isIdentity, sliceDim0, isSimpleSlice, begin: $begin, end: $end, strides: $strides } = slice_util_exports.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n  let result;\n  if (isIdentity) {\n    result = reshape3({ inputs: { x }, backend: backend2, attrs: { shape: finalShape } });\n  } else if (sliceDim0 || isSimpleSlice) {\n    util_exports.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n    const size = slice_util_exports.computeOutShape($begin, $end, $strides);\n    const sliced = slice2({ inputs: { x }, backend: backend2, attrs: { begin: $begin, size } });\n    result = reshape3({ inputs: { x: sliced }, backend: backend2, attrs: { shape: finalShape } });\n    backend2.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend2.bufferSync(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n    result = backend2.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n  return result;\n}\nvar stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: \"cpu\",\n  kernelFunc: stridedSlice2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringNGrams.js\nfunction stringNGrams2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { separator, nGramWidths, leftPad, rightPad: rightPad2, padWidth, preserveShortSequences } = attrs;\n  const { data, dataSplits } = inputs;\n  const $data = backend2.data.get(data.dataId).values;\n  const $dataSplits = backend2.data.get(dataSplits.dataId).values;\n  const [nGrams, nGramsSplits] = stringNGramsImpl($data, $dataSplits, separator, nGramWidths, leftPad, rightPad2, padWidth, preserveShortSequences);\n  return [\n    backend2.makeTensorInfo([nGrams.length], \"string\", nGrams),\n    backend2.makeTensorInfo(dataSplits.shape, \"int32\", nGramsSplits)\n  ];\n}\nvar stringNGramsConfig = {\n  kernelName: StringNGrams,\n  backendName: \"cpu\",\n  kernelFunc: stringNGrams2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringSplit.js\nfunction stringSplit2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { skipEmpty } = attrs;\n  const { input: input2, delimiter } = inputs;\n  if (input2.dtype !== \"string\") {\n    throw new Error(\"Input must be of datatype string\");\n  }\n  if (input2.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input2.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n  const $input = backend2.data.get(input2.dataId).values;\n  const $delimiter = backend2.data.get(delimiter.dataId).values[0];\n  const [indices, values, shape] = stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend2.makeTensorInfo([outputSize, 2], \"int32\", indices),\n    backend2.makeTensorInfo([outputSize], \"string\", values),\n    backend2.makeTensorInfo([2], \"int32\", new Int32Array(shape))\n  ];\n}\nvar stringSplitConfig = {\n  kernelName: StringSplit,\n  backendName: \"cpu\",\n  kernelFunc: stringSplit2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringToHashBucketFast.js\nfunction stringToHashBucketFast2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { numBuckets } = attrs;\n  const { input: input2 } = inputs;\n  if (input2.dtype !== \"string\") {\n    throw new Error(\"Input must be of datatype string\");\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n  const $input = backend2.data.get(input2.dataId).values;\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend2.makeTensorInfo(input2.shape, \"int32\", output);\n}\nvar stringToHashBucketFastConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: \"cpu\",\n  kernelFunc: stringToHashBucketFast2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tan.js\nvar tan2 = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\nvar tanConfig = {\n  kernelName: Tan,\n  backendName: \"cpu\",\n  kernelFunc: tan2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tanh.js\nvar tanh3 = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\nvar tanhConfig = {\n  kernelName: Tanh,\n  backendName: \"cpu\",\n  kernelFunc: tanh3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile.js\nfunction tile3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { reps } = attrs;\n  assertNotComplex(x, \"tile\");\n  const outBuf = tileImpl(backend2.bufferSync(x), reps);\n  return backend2.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nvar tileConfig = {\n  kernelName: Tile,\n  backendName: \"cpu\",\n  kernelFunc: tile3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK.js\nfunction topK(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { k, sorted } = attrs;\n  assertNotComplex(x, \"topk\");\n  const xVals = backend2.data.get(x.dataId).values;\n  const [allTopKVals, allTopKIndices] = topKImpl(xVals, x.shape, x.dtype, k, sorted);\n  return [\n    backend2.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend2.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\nvar topKConfig = {\n  kernelName: TopK,\n  backendName: \"cpu\",\n  kernelFunc: topK\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transform.js\nfunction transform2(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const { image: image2, transforms } = inputs;\n  const { interpolation, fillMode, fillValue, outputShape } = attrs;\n  const [batch, imageHeight, imageWidth, numChannels] = image2.shape;\n  const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n  const strides = util_exports.computeStrides(image2.shape);\n  const batchStride = strides[0];\n  const rowStride = strides[1];\n  const colStride = strides[2];\n  const outVals = util_exports.getTypedArrayFromDType(image2.dtype, util_exports.sizeFromShape(outShape));\n  outVals.fill(fillValue);\n  const imageVals = backend2.data.get(image2.dataId).values;\n  const transformVals = backend2.data.get(transforms.dataId).values;\n  for (let b = 0; b < batch; ++b) {\n    const transform5 = transforms.shape[0] === 1 ? transformVals : transformVals.subarray(b * 8, b * 8 + 8);\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n          const projection = transform5[6] * outX + transform5[7] * outY + 1;\n          if (projection === 0) {\n            continue;\n          }\n          const inX = (transform5[0] * outX + transform5[1] * outY + transform5[2]) / projection;\n          const inY = (transform5[3] * outX + transform5[4] * outY + transform5[5]) / projection;\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n          switch (interpolation) {\n            case \"nearest\":\n              val = nearestInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, b, y, x, channel, fillValue);\n              break;\n            case \"bilinear\":\n              val = bilinearInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${interpolation}`);\n          }\n          const ind = b * batchStride + outY * rowStride + outX * colStride + channel;\n          outVals[ind] = val;\n        }\n      }\n    }\n    return backend2.makeTensorInfo(outShape, image2.dtype, outVals);\n  }\n  const dataId = backend2.write(outVals, outShape, image2.dtype);\n  return { dataId, shape: image2.shape, dtype: image2.dtype };\n}\nvar transformConfig = {\n  kernelName: Transform,\n  backendName: \"cpu\",\n  kernelFunc: transform2\n};\nfunction mapCoord(outCoord, len, mode) {\n  switch (mode) {\n    case \"reflect\":\n      return mapCoordReflect(outCoord, len);\n    case \"wrap\":\n      return mapCoordWrap(outCoord, len);\n    case \"nearest\":\n      return mapCoordNearest(outCoord, len);\n    case \"constant\":\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\nfunction mapCoordReflect(outCoord, len) {\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  return util_exports.clamp(0, inCoord, len - 1);\n}\nfunction mapCoordWrap(outCoord, len) {\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  return util_exports.clamp(0, inCoord, len - 1);\n}\nfunction mapCoordConstant(outCoord, len) {\n  return outCoord;\n}\nfunction mapCoordNearest(outCoord, len) {\n  return util_exports.clamp(0, outCoord, len - 1);\n}\nfunction readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\nfunction nearestInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n  return readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, $y, $x, channel, fillValue);\n}\nfunction bilinearInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  const valueYFloor = (xCeil - x) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yFloor, xFloor, channel, fillValue) + (x - xFloor) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yFloor, xCeil, channel, fillValue);\n  const valueYCeil = (xCeil - x) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yCeil, xFloor, channel, fillValue) + (x - xFloor) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yCeil, xCeil, channel, fillValue);\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique.js\nfunction unique3(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const { axis } = attrs;\n  const { x } = inputs;\n  assertNotComplex(x, \"unique\");\n  const values = backend2.data.get(x.dataId).values;\n  const { outputValues, outputShape, indices } = uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend2.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend2.makeTensorInfo([indices.length], \"int32\", indices)\n  ];\n}\nvar uniqueConfig = {\n  kernelName: Unique,\n  backendName: \"cpu\",\n  kernelFunc: unique3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unpack.js\nfunction unpack(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { value } = inputs;\n  let { axis } = attrs;\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n  const valueRank = value.shape.length;\n  const num = value.shape[axis];\n  const outShape = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice2({ inputs: { x: value }, backend: backend2, attrs: { begin, size } });\n    res[i] = reshape3({ inputs: { x: tempRes }, backend: backend2, attrs: { shape: outShape } });\n    backend2.disposeIntermediateTensorInfo(tempRes);\n  }\n  return res;\n}\nvar unpackConfig = {\n  kernelName: Unpack,\n  backendName: \"cpu\",\n  kernelFunc: unpack\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/UnsortedSegmentSum.js\nfunction unsortedSegmentSum2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, segmentIds } = inputs;\n  const { numSegments } = attrs;\n  assertNotComplex(x, \"unsortedSegmentSum\");\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates = [];\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims3({ inputs: { input: $segmentIds }, backend: backend2, attrs: { dim: i + 1 } });\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util_exports.createScalarValue(i, \"int32\");\n    const segmentId = backend2.makeTensorInfo([], \"int32\", scalarValue);\n    const mask = equal2({ inputs: { a: segmentId, b: $segmentIds }, backend: backend2 });\n    const maskCasted = cast3({ inputs: { x: mask }, backend: backend2, attrs: { dtype: \"float32\" } });\n    const mul2 = multiply2({ inputs: { a: maskCasted, b: x }, backend: backend2 });\n    const sumTensorInfo = sum3({ inputs: { x: mul2 }, backend: backend2, attrs: { axis: 0, keepDims: false } });\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul2);\n    intermediates.push(sumTensorInfo);\n  }\n  const result = pack({ inputs: res, backend: backend2, attrs: { axis: 0 } });\n  intermediates.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return result;\n}\nvar unsortedSegmentSumConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: \"cpu\",\n  kernelFunc: unsortedSegmentSum2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-cpu@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-cpu/dist/register_all_kernels.js\nvar kernelConfigs = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig2,\n  avgPoolGradConfig2,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  dilation2DBackpropFilterConfig,\n  dilation2DBackpropInputConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig2,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig2,\n  maxPoolGradConfig2,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig2,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig2,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\nvar webgl_util_exports = {};\n__export(webgl_util_exports, {\n  assertNotComplex: () => assertNotComplex2,\n  bindCanvasToFramebuffer: () => bindCanvasToFramebuffer,\n  bindColorTextureToFramebuffer: () => bindColorTextureToFramebuffer,\n  bindTextureToProgramUniformSampler: () => bindTextureToProgramUniformSampler,\n  bindTextureUnit: () => bindTextureUnit,\n  bindVertexBufferToProgramAttribute: () => bindVertexBufferToProgramAttribute,\n  callAndCheck: () => callAndCheck,\n  canBeRepresented: () => canBeRepresented,\n  createFragmentShader: () => createFragmentShader,\n  createFramebuffer: () => createFramebuffer,\n  createProgram: () => createProgram,\n  createStaticIndexBuffer: () => createStaticIndexBuffer,\n  createStaticVertexBuffer: () => createStaticVertexBuffer,\n  createTexture: () => createTexture,\n  createVertexShader: () => createVertexShader,\n  getBatchDim: () => getBatchDim,\n  getExtensionOrThrow: () => getExtensionOrThrow,\n  getFramebufferErrorMessage: () => getFramebufferErrorMessage,\n  getMaxTexturesInShader: () => getMaxTexturesInShader,\n  getNumChannels: () => getNumChannels,\n  getProgramUniformLocation: () => getProgramUniformLocation,\n  getProgramUniformLocationOrThrow: () => getProgramUniformLocationOrThrow,\n  getRowsCols: () => getRowsCols,\n  getShapeAs3D: () => getShapeAs3D,\n  getTextureShapeFromLogicalShape: () => getTextureShapeFromLogicalShape,\n  getWebGLDisjointQueryTimerVersion: () => getWebGLDisjointQueryTimerVersion,\n  getWebGLErrorMessage: () => getWebGLErrorMessage,\n  getWebGLMaxTextureSize: () => getWebGLMaxTextureSize,\n  hasExtension: () => hasExtension,\n  isCapableOfRenderingToFloatTexture: () => isCapableOfRenderingToFloatTexture,\n  isDownloadFloatTextureEnabled: () => isDownloadFloatTextureEnabled,\n  isReshapeFree: () => isReshapeFree,\n  isWebGLFenceEnabled: () => isWebGLFenceEnabled,\n  isWebGLVersionEnabled: () => isWebGLVersionEnabled,\n  linkProgram: () => linkProgram,\n  resetMaxTextureSize: () => resetMaxTextureSize,\n  resetMaxTexturesInShader: () => resetMaxTexturesInShader,\n  unbindColorTextureFromFramebuffer: () => unbindColorTextureFromFramebuffer,\n  unbindTextureUnit: () => unbindTextureUnit,\n  validateFramebuffer: () => validateFramebuffer,\n  validateProgram: () => validateProgram,\n  validateTextureSize: () => validateTextureSize\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js\nvar contexts = {};\nvar WEBGL_ATTRIBUTES = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\nfunction setWebGLContext(webGLVersion, gl) {\n  contexts[webGLVersion] = gl;\n}\nfunction getWebGLContext(webGLVersion, customCanvas) {\n  if (!(webGLVersion in contexts)) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log(\"Could not get context for WebGL version\", webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n  return contexts[webGLVersion];\n}\nfunction createCanvas(webGLVersion) {\n  if (typeof OffscreenCanvas !== \"undefined\" && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== \"undefined\") {\n    return document.createElement(\"canvas\");\n  } else {\n    throw new Error(\"Cannot create a canvas in this context\");\n  }\n}\nfunction getWebGLRenderingContext(webGLVersion, customCanvas) {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error(\"Cannot get WebGL rendering context, WebGL is disabled.\");\n  }\n  const canvas = customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n  canvas.addEventListener(\"webglcontextlost\", (ev) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return canvas.getContext(\"webgl\", WEBGL_ATTRIBUTES) || canvas.getContext(\"experimental-webgl\", WEBGL_ATTRIBUTES);\n  }\n  return canvas.getContext(\"webgl2\", WEBGL_ATTRIBUTES);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js\nvar PackingScheme;\n(function(PackingScheme2) {\n  PackingScheme2[PackingScheme2[\"DENSE\"] = 0] = \"DENSE\";\n  PackingScheme2[PackingScheme2[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\nvar TextureUsage;\n(function(TextureUsage2) {\n  TextureUsage2[TextureUsage2[\"RENDER\"] = 0] = \"RENDER\";\n  TextureUsage2[TextureUsage2[\"UPLOAD\"] = 1] = \"UPLOAD\";\n  TextureUsage2[TextureUsage2[\"PIXELS\"] = 2] = \"PIXELS\";\n  TextureUsage2[TextureUsage2[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\nvar PhysicalTextureType;\n(function(PhysicalTextureType2) {\n  PhysicalTextureType2[PhysicalTextureType2[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n  PhysicalTextureType2[PhysicalTextureType2[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n  PhysicalTextureType2[PhysicalTextureType2[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n  PhysicalTextureType2[PhysicalTextureType2[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n  PhysicalTextureType2[PhysicalTextureType2[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\nfunction getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n  return [columns, rows];\n}\nfunction getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n  return matrixSize * channelsPerTexture;\n}\nfunction getDenseTexShape(shape) {\n  const size = util_exports.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util_exports.sizeToSquarishShape(texelsNeeded);\n}\nfunction getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n  return [\n    Math.max(1, Math.ceil(columns / 2)),\n    Math.max(1, Math.ceil(rows / 2))\n  ];\n}\nfunction getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\nfunction getTextureConfig(gl, textureHalfFloatExtension) {\n  const glany = gl;\n  let internalFormatFloat;\n  let internalFormatHalfFloat;\n  let internalFormatPackedHalfFloat;\n  let internalFormatPackedFloat;\n  let textureFormatFloat;\n  let downloadTextureFormat;\n  let downloadUnpackNumChannels;\n  let defaultNumChannels;\n  let textureTypeHalfFloat;\n  let textureTypeFloat;\n  if (env().getNumber(\"WEBGL_VERSION\") === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n    downloadTextureFormat = glany.RGBA8;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ? textureHalfFloatExtension.HALF_FLOAT_OES : null;\n    textureTypeFloat = gl.FLOAT;\n    downloadTextureFormat = gl.RGBA;\n  }\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js\nfunction callAndCheck(gl, func2) {\n  const returnValue = func2();\n  if (env().getBool(\"DEBUG\")) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\nfunction checkWebGLError(gl) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error(\"WebGL Error: \" + getWebGLErrorMessage(gl, error));\n  }\n}\nvar MIN_FLOAT16 = 596e-10;\nvar MAX_FLOAT16 = 65504;\nfunction canBeRepresented(num) {\n  if (env().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\") || num === 0 || MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16) {\n    return true;\n  }\n  return false;\n}\nfunction getWebGLErrorMessage(gl, status) {\n  switch (status) {\n    case gl.NO_ERROR:\n      return \"NO_ERROR\";\n    case gl.INVALID_ENUM:\n      return \"INVALID_ENUM\";\n    case gl.INVALID_VALUE:\n      return \"INVALID_VALUE\";\n    case gl.INVALID_OPERATION:\n      return \"INVALID_OPERATION\";\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return \"INVALID_FRAMEBUFFER_OPERATION\";\n    case gl.OUT_OF_MEMORY:\n      return \"OUT_OF_MEMORY\";\n    case gl.CONTEXT_LOST_WEBGL:\n      return \"CONTEXT_LOST_WEBGL\";\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\nfunction getExtensionOrThrow(gl, extensionName) {\n  return throwIfNull(gl, () => gl.getExtension(extensionName), 'Extension \"' + extensionName + '\" not supported on this browser.');\n}\nfunction createVertexShader(gl, vertexShaderSource) {\n  const vertexShader = throwIfNull(gl, () => gl.createShader(gl.VERTEX_SHADER), \"Unable to create vertex WebGLShader.\");\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error(\"Failed to compile vertex shader.\");\n  }\n  return vertexShader;\n}\nfunction createFragmentShader(gl, fragmentShaderSource) {\n  const fragmentShader = throwIfNull(gl, () => gl.createShader(gl.FRAGMENT_SHADER), \"Unable to create fragment WebGLShader.\");\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error(\"Failed to compile fragment shader.\");\n  }\n  return fragmentShader;\n}\nvar lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n  const lineNumber = +lineNumberRegexResult[1];\n  const shaderLines = shaderSource.split(\"\\n\");\n  const pad3 = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map((line, lineNumber2) => util_exports.rightPad((lineNumber2 + 1).toString(), pad3) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n  console.log(beforeErrorLines.join(\"\\n\"));\n  console.log(shaderInfoLog.split(\"\\n\")[0]);\n  console.log(`%c ${util_exports.rightPad(errorLine[0], maxLineLength)}`, \"border:1px solid red; background-color:#e3d2d2; color:#a61717\");\n  console.log(afterErrorLines.join(\"\\n\"));\n}\nfunction createProgram(gl) {\n  return throwIfNull(gl, () => gl.createProgram(), \"Unable to create WebGLProgram.\");\n}\nfunction linkProgram(gl, program) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error(\"Failed to link vertex and fragment shaders.\");\n  }\n}\nfunction validateProgram(gl, program) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error(\"Shader program validation failed.\");\n  }\n}\nfunction createStaticVertexBuffer(gl, data) {\n  const buffer2 = throwIfNull(gl, () => gl.createBuffer(), \"Unable to create WebGLBuffer\");\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer2));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer2;\n}\nfunction createStaticIndexBuffer(gl, data) {\n  const buffer2 = throwIfNull(gl, () => gl.createBuffer(), \"Unable to create WebGLBuffer\");\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer2));\n  callAndCheck(gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer2;\n}\nfunction getNumChannels() {\n  if (env().getNumber(\"WEBGL_VERSION\") === 2) {\n    return 1;\n  }\n  return 4;\n}\nfunction createTexture(gl) {\n  return throwIfNull(gl, () => gl.createTexture(), \"Unable to create WebGLTexture.\");\n}\nfunction validateTextureSize(width, height) {\n  const maxTextureSize = env().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");\n  if (width <= 0 || height <= 0) {\n    const requested = `[${width}x${height}]`;\n    throw new Error(\"Requested texture size \" + requested + \" is invalid.\");\n  }\n  if (width > maxTextureSize || height > maxTextureSize) {\n    const requested = `[${width}x${height}]`;\n    const max6 = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\"Requested texture size \" + requested + \" greater than WebGL maximum on this browser / GPU \" + max6 + \".\");\n  }\n}\nfunction createFramebuffer(gl) {\n  return throwIfNull(gl, () => gl.createFramebuffer(), \"Unable to create WebGLFramebuffer.\");\n}\nfunction bindVertexBufferToProgramAttribute(gl, program, attribute, buffer2, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer2));\n  callAndCheck(gl, () => gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\nfunction bindTextureUnit(gl, texture, textureUnit) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\nfunction unbindTextureUnit(gl, textureUnit) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nfunction getProgramUniformLocationOrThrow(gl, program, uniformName) {\n  return throwIfNull(gl, () => gl.getUniformLocation(program, uniformName), 'uniform \"' + uniformName + '\" not present in program.');\n}\nfunction getProgramUniformLocation(gl, program, uniformName) {\n  return gl.getUniformLocation(program, uniformName);\n}\nfunction bindTextureToProgramUniformSampler(gl, texture, uniformSamplerLocation, textureUnit) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\nfunction bindCanvasToFramebuffer(gl) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\nfunction bindColorTextureToFramebuffer(gl, texture, framebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\nfunction unbindColorTextureFromFramebuffer(gl, framebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\nfunction validateFramebuffer(gl) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\"Error binding framebuffer: \" + getFramebufferErrorMessage(gl, status));\n  }\n}\nfunction getFramebufferErrorMessage(gl, status) {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return \"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return \"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return \"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return \"FRAMEBUFFER_UNSUPPORTED\";\n    default:\n      return `unknown error ${status}`;\n  }\n}\nfunction throwIfNull(gl, returnTOrNull, failureMessage) {\n  const tOrNull = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\nfunction validateTextureUnit(gl, textureUnit) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\nfunction getBatchDim(shape, dimsToSkip = 2) {\n  return util_exports.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\nfunction getRowsCols(shape) {\n  if (shape.length === 0) {\n    throw Error(\"Cannot get rows and columns of an empty shape array.\");\n  }\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1,\n    shape[shape.length - 1]\n  ];\n}\nfunction getShapeAs3D(shape) {\n  let shapeAs3D = [1, 1, 1];\n  const isScalar = shape.length === 0 || shape.length === 1 && shape[0] === 1;\n  if (!isScalar) {\n    shapeAs3D = [getBatchDim(shape), ...getRowsCols(shape)];\n  }\n  return shapeAs3D;\n}\nfunction getTextureShapeFromLogicalShape(logShape, isPacked = false) {\n  let maxTexSize = env().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n    logShape = logShape.map((d, i) => i >= logShape.length - 2 ? util_exports.nearestLargerEven(logShape[i]) : logShape[i]);\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n  if (logShape.length !== 2) {\n    const squeezeResult = util_exports.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n  let size = util_exports.sizeFromShape(logShape);\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    return [1, size];\n  } else if (logShape.length === 2 && logShape[0] <= maxTexSize && logShape[1] <= maxTexSize) {\n    return logShape;\n  } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize && logShape[2] <= maxTexSize) {\n    return [logShape[0] * logShape[1], logShape[2]];\n  } else if (logShape.length === 3 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2]];\n  } else if (logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTexSize && logShape[3] <= maxTexSize) {\n    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (logShape.length === 4 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  } else {\n    if (isPacked) {\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      return util_exports.sizeToSquarishShape(size).map((d) => d * 2);\n    }\n    return util_exports.sizeToSquarishShape(size);\n  }\n}\nfunction isEven(n) {\n  return n % 2 === 0;\n}\nfunction isReshapeFree(shape1, shape2) {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n  if (util_exports.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n  if (!shape1.length || !shape2.length) {\n    return true;\n  }\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 || shape2[1] === 0) {\n    return true;\n  }\n  if (shape1.length !== shape2.length) {\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n    if (isEven(shape1Cols) && isEven(shape2Cols) && (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\nvar MAX_TEXTURE_SIZE;\nvar MAX_TEXTURES_IN_SHADER;\nfunction getWebGLMaxTextureSize(webGLVersion) {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\nfunction resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nfunction resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\nfunction getMaxTexturesInShader(webGLVersion) {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\nfunction getWebGLDisjointQueryTimerVersion(webGLVersion) {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  let queryTimerVersion;\n  const gl = getWebGLContext(webGLVersion);\n  if (hasExtension(gl, \"EXT_disjoint_timer_query_webgl2\") && webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, \"EXT_disjoint_timer_query\")) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\nfunction hasExtension(gl, extensionName) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\nfunction isWebGLVersionEnabled(webGLVersion) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log(\"Error when getting WebGL context: \", e);\n    return false;\n  }\n  return false;\n}\nfunction isCapableOfRenderingToFloatTexture(webGLVersion) {\n  if (webGLVersion === 0) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, \"OES_texture_float\")) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, \"EXT_color_buffer_float\")) {\n      return false;\n    }\n  }\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\nfunction isDownloadFloatTextureEnabled(webGLVersion) {\n  if (webGLVersion === 0) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, \"OES_texture_float\")) {\n      return false;\n    }\n    if (!hasExtension(gl, \"WEBGL_color_buffer_float\")) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, \"EXT_color_buffer_float\")) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n    const COLOR_BUFFER_HALF_FLOAT = \"EXT_color_buffer_half_float\";\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);\n    }\n    return false;\n  }\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\nfunction createFloatTextureAndBindToFramebuffer(gl) {\n  const texConfig = getTextureConfig(gl);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n  return isFrameBufferComplete;\n}\nfunction createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension) {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n  return isFrameBufferComplete;\n}\nfunction isWebGLFenceEnabled(webGLVersion) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n  const isEnabled = gl.fenceSync != null;\n  return isEnabled;\n}\nfunction assertNotComplex2(tensor2, opName) {\n  if (!Array.isArray(tensor2)) {\n    tensor2 = [tensor2];\n  }\n  tensor2.forEach((t) => {\n    if (t != null) {\n      util_exports.assert(t.dtype !== \"complex64\", () => `${opName} does not support complex64 tensors in the WebGL backend.`);\n    }\n  });\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js\nvar ENV4 = env();\nENV4.registerFlag(\"HAS_WEBGL\", () => ENV4.getNumber(\"WEBGL_VERSION\") > 0);\nENV4.registerFlag(\"WEBGL_VERSION\", () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\nENV4.registerFlag(\"WEBGL_CHECK_NUMERICAL_PROBLEMS\", () => false);\nENV4.registerFlag(\"WEBGL_BUFFER_SUPPORTED\", () => ENV4.get(\"WEBGL_VERSION\") === 2);\nENV4.registerFlag(\"WEBGL_CPU_FORWARD\", () => true);\nENV4.registerFlag(\"WEBGL_FORCE_F16_TEXTURES\", () => false);\nENV4.registerFlag(\"WEBGL_PACK\", () => ENV4.getBool(\"HAS_WEBGL\"));\nENV4.registerFlag(\"WEBGL_PACK_NORMALIZATION\", () => ENV4.getBool(\"WEBGL_PACK\"));\nENV4.registerFlag(\"WEBGL_PACK_CLIP\", () => ENV4.getBool(\"WEBGL_PACK\"));\nENV4.registerFlag(\"WEBGL_PACK_DEPTHWISECONV\", () => ENV4.getBool(\"WEBGL_PACK\"));\nENV4.registerFlag(\"WEBGL_PACK_BINARY_OPERATIONS\", () => ENV4.getBool(\"WEBGL_PACK\"));\nENV4.registerFlag(\"WEBGL_PACK_UNARY_OPERATIONS\", () => ENV4.getBool(\"WEBGL_PACK\"));\nENV4.registerFlag(\"WEBGL_PACK_ARRAY_OPERATIONS\", () => ENV4.getBool(\"WEBGL_PACK\"));\nENV4.registerFlag(\"WEBGL_PACK_IMAGE_OPERATIONS\", () => ENV4.getBool(\"WEBGL_PACK\"));\nENV4.registerFlag(\"WEBGL_PACK_REDUCE\", () => ENV4.getBool(\"WEBGL_PACK\"));\nENV4.registerFlag(\"WEBGL_LAZILY_UNPACK\", () => ENV4.getBool(\"WEBGL_PACK\"));\nENV4.registerFlag(\"WEBGL_CONV_IM2COL\", () => ENV4.getBool(\"WEBGL_PACK\"));\nENV4.registerFlag(\"WEBGL_MAX_TEXTURE_SIZE\", () => getWebGLMaxTextureSize(ENV4.getNumber(\"WEBGL_VERSION\")));\nENV4.registerFlag(\"WEBGL_MAX_TEXTURES_IN_SHADER\", () => getMaxTexturesInShader(ENV4.getNumber(\"WEBGL_VERSION\")));\nENV4.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\", () => {\n  const webGLVersion = ENV4.getNumber(\"WEBGL_VERSION\");\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\nENV4.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\", () => ENV4.getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\") > 0 && !device_util_exports.isMobile());\nENV4.registerFlag(\"WEBGL_RENDER_FLOAT32_CAPABLE\", () => isCapableOfRenderingToFloatTexture(ENV4.getNumber(\"WEBGL_VERSION\")));\nENV4.registerFlag(\"WEBGL_RENDER_FLOAT32_ENABLED\", () => {\n  return ENV4.getBool(\"WEBGL_FORCE_F16_TEXTURES\") ? false : ENV4.getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\");\n});\nENV4.registerFlag(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\", () => isDownloadFloatTextureEnabled(ENV4.getNumber(\"WEBGL_VERSION\")));\nENV4.registerFlag(\"WEBGL_FENCE_API_ENABLED\", () => isWebGLFenceEnabled(ENV4.getNumber(\"WEBGL_VERSION\")));\nENV4.registerFlag(\"WEBGL_SIZE_UPLOAD_UNIFORM\", () => {\n  const useUniforms = ENV4.getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\");\n  return useUniforms ? 4 : 0;\n});\nENV4.registerFlag(\"WEBGL_DELETE_TEXTURE_THRESHOLD\", () => {\n  return -1;\n}, (threshold3) => {\n  if (threshold3 < 0 && threshold3 !== -1) {\n    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${threshold3}.`);\n  }\n});\nENV4.registerFlag(\"WEBGL_FLUSH_THRESHOLD\", () => {\n  return device_util_exports.isMobile() ? 1 : -1;\n}, (threshold3) => {\n  if (threshold3 < 0 && threshold3 !== -1) {\n    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${threshold3}.`);\n  }\n});\nENV4.registerFlag(\"CPU_HANDOFF_SIZE_THRESHOLD\", () => 128);\nENV4.registerFlag(\"WEBGL_USE_SHAPES_UNIFORMS\", () => false);\nENV4.registerFlag(\"TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD\", () => 1e5);\nENV4.registerFlag(\"TOPK_K_CPU_HANDOFF_THRESHOLD\", () => 128);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js\nfunction getGlslDifferences() {\n  let version10;\n  let attribute;\n  let varyingVs;\n  let varyingFs;\n  let texture2D;\n  let output;\n  let defineOutput;\n  let defineSpecialNaN;\n  let defineSpecialInf;\n  let defineRound;\n  if (env().getNumber(\"WEBGL_VERSION\") === 2) {\n    version10 = \"#version 300 es\";\n    attribute = \"in\";\n    varyingVs = \"out\";\n    varyingFs = \"in\";\n    texture2D = \"texture\";\n    output = \"outputColor\";\n    defineOutput = \"out vec4 outputColor;\";\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version10 = \"\";\n    attribute = \"attribute\";\n    varyingVs = \"varying\";\n    varyingFs = \"varying\";\n    texture2D = \"texture2D\";\n    output = \"gl_FragColor\";\n    defineOutput = \"\";\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n  return {\n    version: version10,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js\nfunction getLogicalCoordinatesFromFlatIndex(coords2, shape, index = \"index\") {\n  const strides = util_exports.computeStrides(shape);\n  return strides.map((stride, i) => {\n    const line1 = `int ${coords2[i]} = ${index} / ${stride}`;\n    const line2 = i === strides.length - 1 ? `int ${coords2[i + 1]} = ${index} - ${coords2[i]} * ${stride}` : `index -= ${coords2[i]} * ${stride}`;\n    return `${line1}; ${line2};`;\n  }).join(\"\");\n}\nfunction getOutputLogicalCoordinatesFromFlatIndexByUniform(coords2, shape, index = \"index\") {\n  const strides = util_exports.computeStrides(shape);\n  return strides.map((_, i) => {\n    const line1 = `int ${coords2[i]} = ${index} / outShapeStrides[${i}]`;\n    const line2 = i === strides.length - 1 ? `int ${coords2[i + 1]} = ${index} - ${coords2[i]} * outShapeStrides[${i}]` : `index -= ${coords2[i]} * outShapeStrides[${i}]`;\n    return `${line1}; ${line2};`;\n  }).join(\"\");\n}\nfunction symbolicallyComputeStrides(indicesArr, variableName) {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map((d) => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n  return strides;\n}\nfunction getLogicalCoordinatesFromFlatIndexByUniform(coords2, variableName, index = \"index\") {\n  const indicesArray = coords2.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides.map((_, i) => {\n    const line1 = `int ${coords2[i]} = ${index} / ${strides[i]}`;\n    const line2 = i === strides.length - 1 ? `int ${coords2[i + 1]} = ${index} - ${coords2[i]} * ${strides[i]}` : `index -= ${coords2[i]} * ${strides[i]}`;\n    return `${line1}; ${line2};`;\n  }).join(\"\");\n}\nfunction getFlatIndexFrom3D(shape) {\n  const strides = util_exports.computeStrides(shape).map((d) => d.toString());\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\nfunction getFlatIndexFrom3DOutput() {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\nvar ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js\nvar { getBroadcastDims: getBroadcastDims2 } = backend_util_exports;\nfunction makeShader(inputsInfo, outputShape, program) {\n  const prefixSnippets = [];\n  inputsInfo.forEach((x) => {\n    const size = util_exports.sizeFromShape(x.shapeInfo.logicalShape);\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : \"\"};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n    if (program.enableShapeUniforms) {\n      const { uniformShape } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : \"\"};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join(\"\\n\");\n  const inputSamplingSnippet = inputsInfo.map((x) => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms)).join(\"\\n\");\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet;\n  let floatTextureSetOutputSnippet;\n  let shaderPrefix = getShaderPrefix(glsl);\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n  const source = [\n    shaderPrefix,\n    floatTextureSampleSnippet,\n    floatTextureSetOutputSnippet,\n    inputPrefixSnippet,\n    outputSamplingSnippet,\n    inputSamplingSnippet,\n    program.userCode\n  ].join(\"\\n\");\n  return source;\n}\nfunction getSamplerFromInInfo(inInfo, enableShapeUniforms = false) {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(`${shape.length}-D input sampling is not yet supported`);\n  }\n}\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false, enableShapeUniforms) {\n  let res = \"\";\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n  }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n    default:\n      throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n  }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\nfunction getShaderPrefix(glsl) {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n  return SHADER_PREFIX;\n}\nvar SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nvar SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nvar SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nvar SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet2 = getOutputLogicalCoordinatesFromFlatIndexByUniform([\"r\", \"c\", \"d\"], shape);\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet2}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex([\"r\", \"c\", \"d\"], shape);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords2 = \"b, r, c\";\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords2 = `b${b}, ` + coords2;\n  }\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords2});\n    }\n  `;\n}\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet2 = getOutputLogicalCoordinatesFromFlatIndexByUniform([\"r\", \"c\", \"d\", \"d2\"], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet2}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex([\"r\", \"c\", \"d\", \"d2\"], shape);\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\nfunction getOutput5DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex([\"r\", \"c\", \"d\", \"d2\", \"d3\"], shape);\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\nfunction getOutput6DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex([\"r\", \"c\", \"d\", \"d2\", \"d3\", \"d4\"], shape);\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util_exports.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n  }\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n  if (util_exports.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getFlatOffsetUniformName(texName) {\n  return `offset${texName}`;\n}\nfunction getPackedSamplerScalar(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = \"get\" + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = \"get\" + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = \"get\" + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = \"get\" + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = \"get\" + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util_exports.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = \"get\" + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  if (texShape != null && util_exports.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const texNumR2 = texShape[0];\n    const texNumC2 = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC2}.0, ${texNumR2}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  const { newShape, keptDims } = util_exports.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = [\"row\", \"col\"];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = \"get\" + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = [\"b\", \"row\", \"col\"];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = \"get\" + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n  const { newShape, keptDims } = util_exports.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = [\"row\", \"col\", \"depth\"];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n  if (texNumC === stride1 && flatOffset == null) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = \"get\" + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = \"get\" + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const { newShape, keptDims } = util_exports.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = [\"row\", \"col\", \"depth\", \"depth2\"];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler5D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = \"get\" + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const { newShape, keptDims } = util_exports.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = [\"row\", \"col\", \"depth\", \"depth2\", \"depth3\"];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride3 && flatOffset == null) {\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler6D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = \"get\" + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const { newShape, keptDims } = util_exports.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = [\"row\", \"col\", \"depth\", \"depth2\", \"depth3\", \"depth4\"];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  if (inputInfo.shapeInfo.isUniform) {\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getUniformSampler(inputInfo) {\n  const texName = inputInfo.name;\n  const inSize = util_exports.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = \"get\" + texFuncSnippet + \"AtOutCoords\";\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  const broadcastDims = getBroadcastDims2(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = [\"x\", \"y\", \"z\", \"w\", \"u\", \"v\"];\n  if (inRank === 0) {\n    coordsSnippet = \"\";\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = \"coords = 0;\";\n  } else {\n    coordsSnippet = broadcastDims.map((d) => `coords.${fields[d + rankDiff]} = 0;`).join(\"\\n\");\n  }\n  let unpackedCoordsSnippet = \"\";\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = \"coords\";\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(\", \");\n  }\n  let output = `return outputValue;`;\n  const inSize = util_exports.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util_exports.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = \"get\" + texFuncSnippet + \"AtOutCoords\";\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util_exports.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims2(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = [\"x\", \"y\", \"z\", \"w\", \"u\", \"v\"];\n  if (inRank === 0) {\n    coordsSnippet = \"\";\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = \"coords = 0;\";\n  } else {\n    coordsSnippet = broadcastDims.map((d) => `coords.${fields[d + rankDiff]} = 0;`).join(\"\\n\");\n  }\n  let unpackedCoordsSnippet = \"\";\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = \"coords\";\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(\", \");\n  }\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\nfunction getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return \"int\";\n  } else if (rank === 2) {\n    return \"ivec2\";\n  } else if (rank === 3) {\n    return \"ivec3\";\n  } else if (rank === 4) {\n    return \"ivec4\";\n  } else if (rank === 5) {\n    return \"ivec5\";\n  } else if (rank === 6) {\n    return \"ivec6\";\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\nfunction getUniformInfoFromShape(isPacked, shape, texShape) {\n  const { newShape, keptDims } = util_exports.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape2 = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape = !isPacked && rank > 1 && !util_exports.arraysEqual(shape, texShape) && newShape.length < rank || useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape2 : shape;\n  return { useSqueezeShape, uniformShape, keptDims };\n}\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n  const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map((d) => params[d]).join(\", \");\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js\nfunction compileProgram(gpgpu, program, inputs, output) {\n  const inputInfos = inputs.map((input2, i) => {\n    const shapeInfo = {\n      logicalShape: input2.shape,\n      texShape: input2.isUniform ? null : input2.texData.texShape,\n      isUniform: input2.isUniform,\n      isPacked: input2.isUniform ? false : input2.texData.isPacked,\n      flatOffset: null\n    };\n    if (input2.texData != null && input2.texData.slice != null && input2.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input2.texData.slice.flatOffset;\n    }\n    return { name: program.variableNames[i], shapeInfo };\n  });\n  const inShapeInfos = inputInfos.map((x) => x.shapeInfo);\n  const outShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader);\n  let infLoc = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, \"NAN\", false);\n  if (env().getNumber(\"WEBGL_VERSION\") === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, \"INFINITY\", false);\n  }\n  const shouldThrow = false;\n  const uniformLocations = {};\n  const inShapesLocations = {};\n  const inTexShapesLocations = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] = gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] = gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n  let outShapeLocation;\n  let outTexShapeLocation;\n  let outShapeStridesLocation;\n  if (program.enableShapeUniforms) {\n    outShapeLocation = gpgpu.getUniformLocation(webGLProgram, \"outShape\", shouldThrow);\n    outShapeStridesLocation = gpgpu.getUniformLocation(webGLProgram, \"outShapeStrides\", shouldThrow);\n    outTexShapeLocation = gpgpu.getUniformLocation(webGLProgram, \"outTexShape\", shouldThrow);\n  }\n  const customUniformLocations = [];\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] = gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n  return {\n    program,\n    fragmentShader,\n    source,\n    webGLProgram,\n    uniformLocations,\n    customUniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but was executed with ${inputs.length} inputs`);\n  }\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input2 = inputs[i];\n    const shapeB = input2.shape;\n    if (!util_exports.arraysEqual(shapeA, shapeB)) {\n      throw Error(`Binary was compiled with different shapes than the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    if (s.isUniform && input2.isUniform) {\n      return;\n    }\n    const texShapeA = s.texShape;\n    const texShapeB = input2.isUniform ? null : input2.texData.texShape;\n    if (!util_exports.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\nfunction runProgram(gpgpu, binary, inputs, output, customUniformValues) {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n  if (env().getNumber(\"WEBGL_VERSION\") === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n  inputs.forEach((input2, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n    if (varShapeLoc) {\n      const { uniformShape } = getUniformInfoFromShape(binary.program.packedInputs, input2.shape, input2.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(varTexShapeLoc, input2.texData.texShape[0], input2.texData.texShape[1]);\n    }\n    if (varLoc == null) {\n      return;\n    }\n    if (input2.isUniform) {\n      if (util_exports.sizeFromShape(input2.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input2.uniformValues[0]);\n      } else {\n        let vals = input2.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n    if (input2.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input2.texData.slice.flatOffset);\n    }\n    gpgpu.setInputMatrixTexture(input2.texData.texture.texture, varLoc, i);\n  });\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util_exports.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(binary.outTexShapeLocation, output.texData.texShape[0], output.texData.texShape[1]);\n  }\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === \"float\") {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === \"vec2\") {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === \"vec3\") {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === \"vec4\") {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === \"int\") {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === \"ivec2\") {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === \"ivec3\") {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === \"ivec4\") {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n  gpgpu.executeProgram();\n}\nfunction makeShaderKey(program, inputs, output) {\n  let keyInputs = \"\";\n  inputs.concat(output).forEach((x) => {\n    const hasOffset = x.texData != null && x.texData.slice != null && x.texData.slice.flatOffset > 0;\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const { useSqueezeShape, uniformShape, keptDims } = getUniformInfoFromShape(program.packedInputs, x.shape, xTexShape);\n      let rank1 = \"\", rank2 = \"\", rank34 = \"\";\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape = [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util_exports.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual = uniformShape.length === 2 && util_exports.arraysEqual(x.shape, xTexShape);\n      const isScalar = util_exports.sizeFromShape(x.shape) === 1;\n      const broadcastDims = backend_util_exports.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs && xRank === output.shape.length && util_exports.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne = program.packedInputs || uniformShape.length > 2 ? \"\" : `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape ? keptDims : \"\"}_${uniformShape.length}_${isScalar}_${broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? \"uniform\" : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  key += \"_\" + keyInputs + \"_\" + keyUserCode + `${env().getNumber(\"WEBGL_VERSION\")}`;\n  return key;\n}\nfunction useShapeUniforms(rank) {\n  return env().getBool(\"WEBGL_USE_SHAPES_UNIFORMS\") && rank <= 4;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js\nvar DecodeMatrixProgram = class {\n  constructor(outputShape) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    this.outPackingScheme = PackingScheme.DENSE;\n    this.customUniforms = [{ name: \"texShape\", type: \"ivec2\" }];\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms ? getOutputLogicalCoordinatesFromFlatIndexByUniform([\"r\", \"c\", \"d\"], outputShape) : getLogicalCoordinatesFromFlatIndex([\"r\", \"c\", \"d\"], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js\nvar DecodeMatrixPackedProgram = class {\n  constructor(outputShape) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outPackingScheme = PackingScheme.DENSE;\n    this.customUniforms = [{ name: \"texShape\", type: \"ivec2\" }];\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms ? getOutputLogicalCoordinatesFromFlatIndexByUniform([\"r\", \"c\", \"d\"], outputShape) : getLogicalCoordinatesFromFlatIndex([\"r\", \"c\", \"d\"], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js\nvar EncodeFloatProgram = class {\n  constructor(outputShape) {\n    this.variableNames = [\"A\"];\n    this.outTexUsage = TextureUsage.DOWNLOAD;\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js\nvar EncodeFloatPackedProgram = class {\n  constructor(outputShape) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = true;\n    this.packedOutput = false;\n    this.outTexUsage = TextureUsage.DOWNLOAD;\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js\nvar EncodeMatrixProgram = class {\n  constructor(outputShape, inputIsUnsignedByte = false) {\n    this.variableNames = [\"A\"];\n    this.customUniforms = [{ name: \"texShape\", type: \"ivec2\" }];\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n    this.userCode = `\n      ${this.enableShapeUniforms ? getFlatIndexFrom3DOutput() : getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js\nvar EncodeMatrixPackedProgram = class {\n  constructor(outputShape, inputIsUnsignedByte = false) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    this.customUniforms = [{ name: \"texShape\", type: \"ivec2\" }];\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    let mainLoop = \"\";\n    let output = \"result\";\n    if (inputIsUnsignedByte) {\n      output = \"floor(result * 255. + 0.5)\";\n    }\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${this.enableShapeUniforms ? \"outShape[2]\" : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${this.enableShapeUniforms ? \"outShape[1]\" : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n    this.userCode = `\n        ${this.enableShapeUniforms ? getFlatIndexFrom3DOutput() : getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js\nvar gpgpu_util_exports = {};\n__export(gpgpu_util_exports, {\n  bindVertexProgramAttributeStreams: () => bindVertexProgramAttributeStreams,\n  createBufferFromOutputTexture: () => createBufferFromOutputTexture,\n  createFloat16MatrixTexture: () => createFloat16MatrixTexture,\n  createFloat16PackedMatrixTexture: () => createFloat16PackedMatrixTexture,\n  createFloat32MatrixTexture: () => createFloat32MatrixTexture,\n  createIndexBuffer: () => createIndexBuffer,\n  createPackedMatrixTexture: () => createPackedMatrixTexture,\n  createUnsignedBytesMatrixTexture: () => createUnsignedBytesMatrixTexture,\n  createVertexBuffer: () => createVertexBuffer,\n  createVertexShader: () => createVertexShader2,\n  downloadByteEncodedFloatMatrixFromOutputTexture: () => downloadByteEncodedFloatMatrixFromOutputTexture,\n  downloadFloat32MatrixFromBuffer: () => downloadFloat32MatrixFromBuffer,\n  downloadMatrixFromPackedOutputTexture: () => downloadMatrixFromPackedOutputTexture,\n  downloadPackedMatrixFromBuffer: () => downloadPackedMatrixFromBuffer,\n  getInternalFormatForFloat16MatrixTexture: () => getInternalFormatForFloat16MatrixTexture,\n  getInternalFormatForFloat16PackedMatrixTexture: () => getInternalFormatForFloat16PackedMatrixTexture,\n  getInternalFormatForFloat32MatrixTexture: () => getInternalFormatForFloat32MatrixTexture,\n  getInternalFormatForPackedMatrixTexture: () => getInternalFormatForPackedMatrixTexture,\n  getInternalFormatForUnsignedBytesMatrixTexture: () => getInternalFormatForUnsignedBytesMatrixTexture,\n  uploadDenseMatrixToTexture: () => uploadDenseMatrixToTexture,\n  uploadPixelDataToTexture: () => uploadPixelDataToTexture\n});\nfunction createVertexShader2(gl) {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return createVertexShader(gl, vertexShaderSource);\n}\nfunction createVertexBuffer(gl) {\n  const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return createStaticVertexBuffer(gl, vertexArray);\n}\nfunction createIndexBuffer(gl) {\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n  validateTextureSize(width, height);\n  const texture = createTexture(gl);\n  const tex2d = gl.TEXTURE_2D;\n  callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber(\"WEBGL_VERSION\") === 1) {\n    callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n  } else {\n    callAndCheck(gl, () => gl.texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return { texture, texShape: [height, width] };\n}\nfunction getInternalFormatForFloat32MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatFloat;\n}\nfunction createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nfunction getInternalFormatForFloat16MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\nfunction createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nfunction getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\nfunction createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nfunction getInternalFormatForPackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\nfunction createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nfunction getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\nfunction createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nfunction bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n  const posOffset = 0;\n  const uvOffset = 3 * 4;\n  const stride = 3 * 4 + 2 * 4;\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = bindVertexBufferToProgramAttribute(gl, program, \"clipSpacePos\", vertexBuffer, 3, stride, posOffset);\n  return success && bindVertexBufferToProgramAttribute(gl, program, \"uv\", vertexBuffer, 2, stride, uvOffset);\n}\nfunction uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  let dataForUpload, texelDataType, internalFormat;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n  dataForUpload.set(data);\n  if (env().getNumber(\"WEBGL_VERSION\") === 2) {\n    callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType, dataForUpload));\n  } else {\n    callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n  }\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nfunction uploadPixelDataToTexture(gl, texture, pixels) {\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if (pixels.data instanceof Uint8Array) {\n    if (env().getNumber(\"WEBGL_VERSION\") === 2) {\n      callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    } else {\n      callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    }\n  } else {\n    if (env().getNumber(\"WEBGL_VERSION\") === 2) {\n      callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    } else {\n      callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    }\n  }\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nfunction createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n  const buffer2 = gl2.createBuffer();\n  callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer2));\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n  callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n  callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n  callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n  return buffer2;\n}\nfunction downloadFloat32MatrixFromBuffer(gl, buffer2, size) {\n  const gl2 = gl;\n  const downloadTarget = new Float32Array(size);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer2);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nfunction downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n  const [w, h] = getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n  callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));\n  return new Float32Array(downloadTarget.buffer);\n}\nfunction downloadPackedMatrixFromBuffer(gl, buffer2, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n  const gl2 = gl;\n  const downloadTarget = new Float32Array(getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer2);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nfunction downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n  return packedRGBA;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js\nvar GPGPUContext = class {\n  constructor(gl) {\n    this.outputTexture = null;\n    this.program = null;\n    this.disposed = false;\n    this.vertexAttrsAreBound = false;\n    this.itemsToPoll = [];\n    const glVersion = env().getNumber(\"WEBGL_VERSION\");\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    let COLOR_BUFFER_FLOAT = \"WEBGL_color_buffer_float\";\n    const COLOR_BUFFER_HALF_FLOAT = \"EXT_color_buffer_half_float\";\n    if (env().getNumber(\"WEBGL_VERSION\") === 1) {\n      const TEXTURE_FLOAT = \"OES_texture_float\";\n      const TEXTURE_HALF_FLOAT = \"OES_texture_half_float\";\n      this.textureFloatExtension = getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension = getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get(\"WEBGL_FORCE_F16_TEXTURES\")) {\n        throw new Error(\"GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\");\n      }\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get(\"WEBGL_FORCE_F16_TEXTURES\")) {\n        throw new Error(\"GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\");\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = \"EXT_color_buffer_float\";\n      if (hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error(\"GL context does not support color renderable floats\");\n      }\n    }\n    this.vertexBuffer = createVertexBuffer(this.gl);\n    this.indexBuffer = createIndexBuffer(this.gl);\n    this.framebuffer = createFramebuffer(this.gl);\n    this.textureConfig = getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n  get debug() {\n    return env().getBool(\"DEBUG\");\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\"Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing.\");\n    }\n    if (this.outputTexture != null) {\n      console.warn(\"Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.\");\n    }\n    const gl = this.gl;\n    callAndCheck(gl, () => gl.finish());\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n  createFloat32MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createFloat16MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createUnsignedBytesMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  uploadPixelDataToTexture(texture, pixels) {\n    this.throwIfDisposed();\n    uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n  uploadDenseMatrixToTexture(texture, width, height, data) {\n    this.throwIfDisposed();\n    uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n  }\n  createFloat16PackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createPackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  deleteMatrixTexture(texture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n  downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n    return this.downloadMatrixDriver(texture, () => downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n  }\n  downloadPackedMatrixFromBuffer(buffer2, batch, rows, columns, physicalRows, physicalCols) {\n    return downloadPackedMatrixFromBuffer(this.gl, buffer2, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n  }\n  downloadFloat32MatrixFromBuffer(buffer2, size) {\n    return downloadFloat32MatrixFromBuffer(this.gl, buffer2, size);\n  }\n  createBufferFromTexture(texture, rows, columns) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n  createAndWaitForFence() {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n  createFence(gl) {\n    let query;\n    let isFencePassed;\n    if (env().getBool(\"WEBGL_FENCE_API_ENABLED\")) {\n      const gl2 = gl;\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n      query = sync;\n    } else if (env().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\") > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(query, env().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"));\n    } else {\n      isFencePassed = () => true;\n    }\n    return { query, isFencePassed };\n  }\n  downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n    return this.downloadMatrixDriver(texture, () => downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n  }\n  createProgram(fragmentShader) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = createVertexShader2(gl);\n    }\n    const program = createProgram(gl);\n    callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));\n    callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    linkProgram(gl, program);\n    if (this.debug) {\n      validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n  deleteProgram(program) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n  setProgram(program) {\n    this.throwIfDisposed();\n    this.program = program;\n    if (this.program != null && this.debug) {\n      validateProgram(this.gl, this.program);\n    }\n    callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n  getUniformLocation(program, uniformName, shouldThrow = true) {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n    } else {\n      return getProgramUniformLocation(this.gl, program, uniformName);\n    }\n  }\n  getAttributeLocation(program, attribute) {\n    this.throwIfDisposed();\n    return callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n  getUniformLocationNoThrow(program, uniformName) {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n  setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n  setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n  setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n    this.throwIfDisposed();\n    const [width, height] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n  setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n  }\n  setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    throw new Error(\"setOutputPackedMatrixWriteRegion not implemented.\");\n  }\n  debugValidate() {\n    if (this.program != null) {\n      validateProgram(this.gl, this.program);\n    }\n    validateFramebuffer(this.gl);\n  }\n  executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n  blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    callAndCheck(this.gl, () => this.gl.finish());\n  }\n  getQueryTimerExtension() {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension = getExtensionOrThrow(this.gl, env().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\") === 2 ? \"EXT_disjoint_timer_query_webgl2\" : \"EXT_disjoint_timer_query\");\n    }\n    return this.disjointQueryTimerExtension;\n  }\n  getQueryTimerExtensionWebGL2() {\n    return this.getQueryTimerExtension();\n  }\n  getQueryTimerExtensionWebGL1() {\n    return this.getQueryTimerExtension();\n  }\n  beginQuery() {\n    if (env().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\") === 2) {\n      const gl2 = this.gl;\n      const ext2 = this.getQueryTimerExtensionWebGL2();\n      const query2 = gl2.createQuery();\n      gl2.beginQuery(ext2.TIME_ELAPSED_EXT, query2);\n      return query2;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT();\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n  endQuery() {\n    if (env().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\") === 2) {\n      const gl2 = this.gl;\n      const ext2 = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext2.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n  async waitForQueryAndGetTime(query) {\n    await util_exports.repeatedTry(() => this.disposed || this.isQueryAvailable(query, env().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")));\n    return this.getQueryTime(query, env().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"));\n  }\n  getQueryTime(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      return timeElapsedNanos / 1e6;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      return timeElapsedNanos / 1e6;\n    }\n  }\n  isQueryAvailable(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n      return available && !this.disjoint;\n    }\n  }\n  pollFence(fenceContext) {\n    return new Promise((resolve) => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n  pollItems() {\n    const index = linearSearchLastTrue(this.itemsToPoll.map((x) => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const { resolveFn } = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n  addItemToPoll(isDoneFn, resolveFn) {\n    this.itemsToPoll.push({ isDoneFn, resolveFn });\n    if (this.itemsToPoll.length > 1) {\n      return;\n    }\n    util_exports.repeatedTry(() => {\n      this.pollItems();\n      return this.itemsToPoll.length === 0;\n    });\n  }\n  bindTextureToFrameBuffer(texture) {\n    this.throwIfDisposed();\n    bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      validateFramebuffer(this.gl);\n    }\n  }\n  unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        validateFramebuffer(this.gl);\n      }\n    } else {\n      unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n  downloadMatrixDriver(texture, downloadAndDecode) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n  setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n  setOutputMatrixWriteRegionDriver(x, y, width, height) {\n    this.throwIfDisposed();\n    callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n  throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error(\"Attempted to use disposed GPGPUContext.\");\n    }\n  }\n  throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error(\"No GPU program is currently set.\");\n    }\n  }\n};\nfunction linearSearchLastTrue(arr) {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js\nvar { addImpl: addImplCPU, bincountImpl: bincountImplCPU, bincountReduceImpl: bincountReduceImplCPU, ceilImpl: ceilImplCPU, concatImpl: concatImplCPU, equalImpl: equalImplCPU, expImpl: expImplCPU, expm1Impl: expm1ImplCPU, floorImpl: floorImplCPU, gatherNdImpl: gatherNdImplCPU, gatherV2Impl: gatherV2ImplCPU, greaterImpl: greaterImplCPU, greaterEqualImpl: greaterEqualImplCPU, lessImpl: lessImplCPU, lessEqualImpl: lessEqualImplCPU, linSpaceImpl: linSpaceImplCPU, logImpl: logImplCPU, maxImpl: maxImplCPU, maximumImpl: maximumImplCPU, minimumImpl: minimumImplCPU, multiplyImpl: multiplyImplCPU, negImpl: negImplCPU, notEqualImpl: notEqualImplCPU, prodImpl: prodImplCPU, rangeImpl: rangeImplCPU, rsqrtImpl: rsqrtImplCPU, sigmoidImpl: sigmoidImplCPU, simpleAbsImpl: simpleAbsImplCPU, sliceImpl: sliceImplCPU, sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU, sparseReshapeImpl: sparseReshapeImplCPU, sparseSegmentReductionImpl: sparseSegmentReductionImplCPU, sqrtImpl: sqrtImplCPU, stridedSliceImpl: stridedSliceImplCPU, stringNGramsImpl: stringNGramsImplCPU, stringSplitImpl: stringSplitImplCPU, stringToHashBucketFastImpl: stringToHashBucketFastImplCPU, subImpl: subImplCPU, tileImpl: tileImplCPU, topKImpl: topKImplCPU, transposeImpl: transposeImplCPU, uniqueImpl: uniqueImplCPU } = shared_exports;\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js\nfunction getVecChannels(name, rank) {\n  return [\"x\", \"y\", \"z\", \"w\", \"u\", \"v\"].slice(0, rank).map((d) => `${name}.${d}`);\n}\nfunction getChannels(name, rank) {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\nfunction getSourceCoords(rank, dims) {\n  if (rank === 1) {\n    return \"rc\";\n  }\n  let coords2 = \"\";\n  for (let i = 0; i < rank; i++) {\n    coords2 += dims[i];\n    if (i < rank - 1) {\n      coords2 += \",\";\n    }\n  }\n  return coords2;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js\nvar PackProgram = class {\n  constructor(outputShape) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels(\"rc\", this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup49 = this.getSetup(channels);\n      const output = this.getOutput(channels);\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup49}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n  getSourceCoordsArr(dims) {\n    const coords2 = [];\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? \"r\" : \"rp1\"}, ${col === 0 ? \"c\" : \"cp1\"}`;\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n        coords2.push(coord);\n      }\n    }\n    return coords2;\n  }\n  getOutOfBoundsCondition(dims) {\n    if (this.rank === 1) {\n      return `rc > ${this.enableShapeUniforms ? \"outShape\" : this.outputShape[0]}`;\n    }\n    let cond = \"\";\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += \"||\";\n      }\n    }\n    return cond;\n  }\n  getSetup(dims) {\n    if (this.rank === 1) {\n      return \"\";\n    }\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n  getOutput(dims) {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape = this.enableShapeUniforms ? \"outShape\" : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js\nvar ReshapePackedProgram = class {\n  constructor(outputShape, inputShape) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{ name: \"inputShape\", type: \"ivec3\" }];\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : \"\"}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? \"}\" : \"\"}\n      `;\n    }\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${this.enableShapeUniforms ? getFlatIndexFrom3DOutput() : getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? \"outShape[1]\" : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? \"outShape[2]\" : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n};\nfunction getReshapedInputCoords(shape, enableShapeUniforms) {\n  const coordsFromIndexSnippet = enableShapeUniforms ? getLogicalCoordinatesFromFlatIndexByUniform([\"r\", \"c\", \"d\"], \"inputShape\") : getLogicalCoordinatesFromFlatIndex([\"r\", \"c\", \"d\"], shape);\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js\nvar TextureManager = class {\n  constructor(gpgpu) {\n    this.gpgpu = gpgpu;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n    this.freeTextures = {};\n    this.logEnabled = false;\n    this.usedTextures = {};\n  }\n  acquireTexture(shapeRC, usage, isPacked) {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n    const texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture2 = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture2);\n      return newTexture2;\n    }\n    let newTexture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture = this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture = this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture = this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture = this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n    return newTexture;\n  }\n  releaseTexture(texture, shape, logicalTexType, isPacked) {\n    if (this.freeTextures == null) {\n      return;\n    }\n    const physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    const texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n    const deleteTexThreshold = env().get(\"WEBGL_DELETE_TEXTURE_THRESHOLD\");\n    if (deleteTexThreshold !== -1 && this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture.texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n    this.numUsedTextures--;\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\"Cannot release a texture that was never provided by this texture manager\");\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n  log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\"Free/Used\", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * freeRatio)}%)`);\n  }\n  get numBytesAllocated() {\n    return this._numBytesAllocated;\n  }\n  get numBytesFree() {\n    return this._numBytesFree;\n  }\n  getNumUsedTextures() {\n    return this.numUsedTextures;\n  }\n  getNumFreeTextures() {\n    return this.numFreeTextures;\n  }\n  dispose() {\n    if (this.freeTextures == null) {\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach((tex) => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach((tex) => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n};\nfunction numBytesForInternalFormat(gl, internalFormat) {\n  const glany = gl;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  } else if (internalFormat === glany.RGBA8) {\n    return 4;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\nfunction computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {\n  const internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n  let numElements;\n  if (isPacked) {\n    const [packedWidth, packedHeight] = getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n  } else {\n    const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n  const bytesPerElement2 = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement2;\n}\nfunction internalFormatForPhysicalTexType(physicalTexType, textureConfig) {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\nfunction getPhysicalTextureForRendering(isPacked) {\n  if (env().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\nfunction getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (logicalTexType === TextureUsage.DOWNLOAD || logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\nfunction getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js\nvar UnaryOpProgram = class {\n  constructor(aShape, opSnippet) {\n    this.variableNames = [\"A\"];\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n};\nvar CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\nvar LINEAR = `return x;`;\nvar ABS = `return abs(x);`;\nvar ELU2 = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nvar RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nvar RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nvar CLONE = \"return x;\";\nvar SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js\nvar LINEAR2 = `return x;`;\nvar ELU3 = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\nvar RELU2 = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nvar RELU62 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nvar SIGMOID2 = `return 1.0 / (1.0 + exp(-1.0 * x));`;\nvar UnaryOpPackedProgram = class {\n  constructor(aShape, opSnippet) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js\nvar UnpackProgram = class {\n  constructor(outputShape) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = true;\n    this.packedOutput = false;\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const rank = outputShape.length;\n    const channels = getChannels(\"rc\", rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords2 = rank <= 1 ? \"rc\" : `vec2(${innerDims.join(\",\")})`;\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords2}));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js\nvar whereImpl3 = kernel_impls_exports.whereImpl;\nvar EPSILON_FLOAT322 = 1e-7;\nvar EPSILON_FLOAT162 = 1e-4;\nvar binaryCaches = {};\nfunction getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\nvar CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber(\"CPU_HANDOFF_SIZE_THRESHOLD\");\nvar BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024;\n  }\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nvar MathBackendWebGL = class extends KernelBackend {\n  constructor(gpuResource) {\n    super();\n    this.pendingRead = /* @__PURE__ */ new WeakMap();\n    this.pendingDisposal = /* @__PURE__ */ new WeakSet();\n    this.dataRefCount = /* @__PURE__ */ new WeakMap();\n    this.numBytesInGPU = 0;\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    this.lastGlFlushTime = 0;\n    this.warnedAboutMemory = false;\n    this.pendingDeletes = 0;\n    this.disposed = false;\n    if (!env().getBool(\"HAS_WEBGL\")) {\n      throw new Error(\"WebGL is not supported on this device\");\n    }\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl = getWebGLContext(env().getNumber(\"WEBGL_VERSION\"), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber(\"WEBGL_VERSION\"));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber(\"WEBGL_VERSION\"));\n      this.gpgpuCreatedLocally = true;\n    }\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n  nextDataId() {\n    return MathBackendWebGL.nextDataId++;\n  }\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n  write(values, shape, dtype) {\n    if (env().getBool(\"WEBGL_CHECK_NUMERICAL_PROBLEMS\") || env().getBool(\"DEBUG\")) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === \"complex64\" && values != null) {\n      throw new Error(`Cannot write to a complex64 dtype. Please use tf.complex(real, imag).`);\n    }\n    const dataId = { id: this.nextDataId() };\n    this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1 });\n    return dataId;\n  }\n  refCount(dataId) {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n  incRef(dataId) {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n  decRef(dataId) {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n  move(dataId, values, shape, dtype, refCount) {\n    if (env().getBool(\"DEBUG\")) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === \"complex64\") {\n      throw new Error(`Cannot write to a complex64 dtype. Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount });\n  }\n  disposeIntermediateTensorInfo(tensorInfo) {\n    this.disposeData(tensorInfo.dataId);\n  }\n  readSync(dataId) {\n    const texData = this.texData.get(dataId);\n    const { values, dtype, complexTensorInfos, slice: slice5, shape, isPacked } = texData;\n    if (slice5 != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === \"string\") {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n    if (shouldTimeProgram) {\n      start = util_exports.now();\n    }\n    let result;\n    if (dtype === \"complex64\") {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      result = backend_util_exports.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util_exports.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n  async read(dataId) {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers2 = this.pendingRead.get(dataId);\n      return new Promise((resolve) => subscribers2.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const { values, shape, slice: slice5, dtype, complexTensorInfos, isPacked } = texData;\n    if (slice5 != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (env().getBool(\"DEBUG\")) {\n      if (!env().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\") && env().getNumber(\"WEBGL_VERSION\") === 2) {\n        throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n    let buffer2 = null;\n    let tmpDownloadTarget;\n    if (dtype !== \"complex64\" && env().get(\"WEBGL_BUFFER_SUPPORTED\")) {\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n      buffer2 = this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ...getDenseTexShape(shape));\n    }\n    this.pendingRead.set(dataId, []);\n    if (dtype !== \"complex64\") {\n      await this.gpgpu.createAndWaitForFence();\n    }\n    let vals;\n    if (dtype === \"complex64\") {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util_exports.mergeRealAndImagArrays(realValues, imagValues);\n    } else if (buffer2 == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util_exports.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer2, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer2 != null) {\n      const gl = this.gpgpu.gl;\n      callAndCheck(gl, () => gl.deleteBuffer(buffer2));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n    subscribers.forEach((resolve) => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n  readToGPU(dataId, options = {}) {\n    const texData = this.texData.get(dataId);\n    const { values, shape, slice: slice5, dtype, isPacked, texture } = texData;\n    if (dtype === \"complex64\") {\n      throw new Error(\"Does not support reading texture for complex64 dtype.\");\n    }\n    if (slice5 != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n    if (texture == null) {\n      if (values != null) {\n        throw new Error(\"Data is not on GPU but on CPU.\");\n      } else {\n        throw new Error(\"There is no data on GPU or CPU.\");\n      }\n    }\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n    const tensorRef = engine().makeTensorFromDataId(tmpTarget.dataId, tmpTarget.shape, tmpTarget.dtype);\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return Object.assign({ tensorRef }, tmpData.texture);\n  }\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n    let decodedData = data;\n    if (t.dtype === \"string\") {\n      try {\n        decodedData = data.map((d) => util_exports.decodeString(d));\n      } catch (_a) {\n        throw new Error(\"Failed to decode encoded string bytes into utf-8\");\n      }\n    }\n    return buffer(t.shape, t.dtype, decodedData);\n  }\n  checkNumericalProblems(values) {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i];\n      if (!canBeRepresented(num)) {\n        if (env().getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\")) {\n          throw Error(`The value ${num} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n  getValuesFromTexture(dataId) {\n    const { shape, dtype, isPacked } = this.texData.get(dataId);\n    const size = util_exports.sizeFromShape(shape);\n    if (env().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\")) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData2 = this.texData.get(tmpTarget.dataId);\n      const vals2 = this.gpgpu.downloadMatrixFromPackedTexture(tmpData2.texture.texture, ...getDenseTexShape(shape)).subarray(0, size);\n      this.disposeIntermediateTensorInfo(tmpTarget);\n      return vals2;\n    }\n    const shouldUsePackedProgram = env().getBool(\"WEBGL_PACK\") && isPacked === true;\n    const outputShape = shouldUsePackedProgram ? getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], \"float32\");\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n    return vals;\n  }\n  timerAvailable() {\n    return env().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0;\n  }\n  time(f) {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers = [];\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n    f();\n    const flattenedActiveTimerQueries = util_exports.flatten(this.activeTimers.map((d) => d.query)).filter((d) => d != null);\n    const flattenedActiveTimerNames = util_exports.flatten(this.activeTimers.map((d) => d.name)).filter((d) => d != null);\n    this.activeTimers = oldActiveTimers;\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n    const res = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null\n    };\n    return (async () => {\n      if (env().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n        res[\"kernelMs\"] = util_exports.sum(kernelMs);\n        res[\"getExtraProfileInfo\"] = () => kernelMs.map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d })).map((d) => `${d.name}: ${d.ms}`).join(\", \");\n      } else {\n        res[\"kernelMs\"] = {\n          error: \"WebGL query timers are not supported in this environment.\"\n        };\n      }\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  memory() {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    };\n  }\n  startTimer() {\n    if (env().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return { startMs: util_exports.now(), endMs: null };\n  }\n  endTimer(query) {\n    if (env().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    query.endMs = util_exports.now();\n    return query;\n  }\n  async getQueryTime(query) {\n    if (env().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query);\n    }\n    const timerQuery = query;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n  disposeData(dataId, force = false) {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n    this.releaseGPUData(dataId);\n    const { complexTensorInfos } = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n    this.texData.delete(dataId);\n    return true;\n  }\n  releaseGPUData(dataId) {\n    const { texture, dtype, texShape, usage, isPacked, slice: slice5 } = this.texData.get(dataId);\n    const key = slice5 && slice5.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n  getTexture(dataId) {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n  getDataInfo(dataId) {\n    return this.texData.get(dataId);\n  }\n  shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n    return env().getBool(\"WEBGL_CPU_FORWARD\") && inputs.every((input2) => this.texData.get(input2.dataId).texture == null && util_exports.sizeFromShape(input2.shape) < sizeThreshold);\n  }\n  getGPGPUContext() {\n    return this.gpgpu;\n  }\n  where(condition) {\n    backend_util_exports.warn(\"tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead\");\n    const condVals = condition.dataSync();\n    return whereImpl3(condition.shape, condVals);\n  }\n  packedUnaryOp(x, op2, dtype) {\n    const program = new UnaryOpPackedProgram(x.shape, op2);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n  abs(x) {\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== \"complex64\") {\n      const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n    if (env().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) {\n      return this.packedUnaryOp(x, ABS, x.dtype);\n    }\n    const program = new UnaryOpProgram(x.shape, ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n  makeTensorInfo(shape, dtype, values) {\n    let dataId;\n    if (dtype === \"string\" && values != null && values.length > 0 && util_exports.isString(values[0])) {\n      const encodedValues = values.map((d) => util_exports.encodeString(d));\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values, shape, dtype);\n    }\n    this.texData.get(dataId).usage = null;\n    return { dataId, shape, dtype };\n  }\n  makeOutput(shape, dtype, values) {\n    const { dataId } = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n  }\n  unpackTensor(input2) {\n    const program = new UnpackProgram(input2.shape);\n    return this.runWebGLProgram(program, [input2], input2.dtype);\n  }\n  packTensor(input2) {\n    const program = new PackProgram(input2.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(program, [input2], input2.dtype, null, preventEagerUnpackingOutput);\n  }\n  packedReshape(input2, afterShape) {\n    const input3DShape = [\n      getBatchDim(input2.shape),\n      ...getRowsCols(input2.shape)\n    ];\n    const input3D = {\n      dtype: input2.dtype,\n      shape: input3DShape,\n      dataId: input2.dataId\n    };\n    const afterShapeAs3D = [\n      getBatchDim(afterShape),\n      ...getRowsCols(afterShape)\n    ];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(program, [input3D], input2.dtype, customValues, preventEagerUnpackingOfOutput);\n    return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n  }\n  decode(dataId, customTexShape) {\n    const texData = this.texData.get(dataId);\n    const { isPacked, shape, dtype } = texData;\n    if (customTexShape != null) {\n      const size = util_exports.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util_exports.assert(size <= texSize, () => \"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.\");\n    }\n    const shapeAs3D = getShapeAs3D(shape);\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [customTexShape != null ? customTexShape : getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);\n    return { dtype, shape, dataId: out.dataId };\n  }\n  runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false, customTexShape) {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ? customTexShape : getDenseTexShape(program.outputShape);\n      outData.texShape = texelShape.map((d) => d * 2);\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util_exports.sizeFromShape(output.shape) === 0) {\n      outData.values = util_exports.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n    const dataToDispose = [];\n    const inputsData = inputs.map((input2) => {\n      if (input2.dtype === \"complex64\") {\n        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.`);\n      }\n      let texData = this.texData.get(input2.dataId);\n      if (texData.texture == null) {\n        if (!program.packedInputs && util_exports.sizeFromShape(input2.shape) <= env().getNumber(\"WEBGL_SIZE_UPLOAD_UNIFORM\")) {\n          return {\n            shape: input2.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values\n          };\n        }\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input2.shape;\n        }\n      }\n      this.uploadToGPU(input2.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input2 = texData.isPacked ? this.unpackTensor(input2) : this.packTensor(input2);\n        dataToDispose.push(input2);\n        texData = this.texData.get(input2.dataId);\n      } else if (texData.isPacked && !isReshapeFree(texData.shape, input2.shape)) {\n        const savedInput = input2;\n        const targetShape = input2.shape;\n        input2.shape = texData.shape;\n        input2 = this.packedReshape(input2, targetShape);\n        dataToDispose.push(input2);\n        texData = this.texData.get(input2.dataId);\n        savedInput.shape = targetShape;\n      }\n      return { shape: input2.shape, texData, isUniform: false };\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = { shape: output.shape, texData: outData, isUniform: false };\n    const key = makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return compileProgram(this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n    runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    dataToDispose.forEach((info) => this.disposeIntermediateTensorInfo(info));\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n    }\n    const glFlushThreshold = env().get(\"WEBGL_FLUSH_THRESHOLD\");\n    if (glFlushThreshold > 0) {\n      const time2 = util_exports.now();\n      if (time2 - this.lastGlFlushTime > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time2;\n      }\n    }\n    if (!env().getBool(\"WEBGL_LAZILY_UNPACK\") && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n  compileAndRun(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n  getAndSaveBinary(key, getBinary) {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n  getTextureManager() {\n    return this.textureManager;\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (!env().getBool(\"IS_TEST\")) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach((key) => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null && (typeof HTMLCanvasElement !== \"undefined\" && this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n  floatPrecision() {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get(\"WEBGL_RENDER_FLOAT32_ENABLED\")) {\n          const debugFlag = env().getBool(\"DEBUG\");\n          env().set(\"DEBUG\", false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set(\"DEBUG\", debugFlag);\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT322 : EPSILON_FLOAT162;\n  }\n  uploadToGPU(dataId) {\n    const texData = this.texData.get(dataId);\n    const { shape, dtype, values, texture, usage, isPacked } = texData;\n    if (texture != null) {\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n    if (shouldTimeProgram) {\n      start = util_exports.now();\n    }\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n    if (values != null) {\n      const shapeAs3D = getShapeAs3D(shape);\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n      if (isPacked || !isByteArray) {\n        [width, height] = getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n      }\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n      const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n      const customValues = [[height, width]];\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking);\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId);\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util_exports.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n  convertAndCacheOnCPU(dataId, float32Values) {\n    const texData = this.texData.get(dataId);\n    const { dtype } = texData;\n    this.releaseGPUData(dataId);\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n    return texData.values;\n  }\n  acquireTexture(texShape, texType, dtype, isPacked) {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(`High memory usage in GPU: ${mb} MB, most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n  computeBytes(shape, dtype) {\n    return shape[0] * shape[1] * util_exports.bytesPerElement(dtype);\n  }\n};\nMathBackendWebGL.nextDataId = 0;\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === \"float32\" || dtype === \"complex64\") {\n    return a;\n  } else if (dtype === \"int32\" || dtype === \"bool\") {\n    const result = dtype === \"int32\" ? new Int32Array(a.length) : new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/version.js\nvar version6 = \"3.13.0\";\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl.js\nfunction forceHalfFloat() {\n  env().set(\"WEBGL_FORCE_F16_TEXTURES\", true);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/base.js\nif (device_util_exports.isBrowser()) {\n  registerBackend(\"webgl\", () => new MathBackendWebGL(), 2);\n}\nvar webgl = { forceHalfFloat };\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js\nvar CHECK_NAN_SNIPPET2 = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nvar BinaryOpProgram = class {\n  constructor(op2, aShape, bShape) {\n    this.variableNames = [\"A\", \"B\"];\n    this.outputShape = backend_util_exports.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op2}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js\nvar CHECK_NAN_SNIPPET3 = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\nvar BinaryOpPackedProgram = class {\n  constructor(op2, aShape, bShape, checkOutOfBounds = false) {\n    this.variableNames = [\"A\", \"B\"];\n    this.supportsBroadcasting = true;\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = backend_util_exports.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = \"\";\n    if (checkOutOfBounds) {\n      if (rank === 0 || util_exports.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels(\"coords\", rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op2}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js\nfunction identity3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x } = inputs;\n  backend2.incRef(x.dataId);\n  return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };\n}\nvar identityConfig2 = {\n  kernelName: Identity,\n  backendName: \"webgl\",\n  kernelFunc: identity3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js\nfunction complex3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { real: real4, imag: imag4 } = inputs;\n  const complexInfo = backend2.makeTensorInfo(real4.shape, \"complex64\");\n  const complex4 = backend2.texData.get(complexInfo.dataId);\n  const realTensorInfo = identity3({ inputs: { x: real4 }, backend: backend2 });\n  const imagTensorInfo = identity3({ inputs: { x: imag4 }, backend: backend2 });\n  complex4.complexTensorInfos = { real: realTensorInfo, imag: imagTensorInfo };\n  return complexInfo;\n}\nvar complexConfig2 = {\n  kernelName: Complex,\n  backendName: \"webgl\",\n  kernelFunc: complex3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LeakyRelu.js\nvar LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nvar LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nfunction leakyRelu3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { alpha } = attrs;\n  const $alpha = backend2.makeTensorInfo([], \"float32\", util_exports.createScalarValue(alpha, \"float32\"));\n  const program = env().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) : new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend2.runWebGLProgram(program, [x, $alpha], \"float32\");\n  backend2.disposeIntermediateTensorInfo($alpha);\n  return result;\n}\nvar leakyReluConfig2 = {\n  kernelName: LeakyRelu,\n  backendName: \"webgl\",\n  kernelFunc: leakyRelu3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prelu.js\nvar PRELU = `return (a < 0.) ? b * a : a;`;\nvar PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nfunction prelu4(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x, alpha } = inputs;\n  const program = env().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) : new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend2.runWebGLProgram(program, [x, alpha], \"float32\");\n}\nvar preluConfig2 = {\n  kernelName: Prelu,\n  backendName: \"webgl\",\n  kernelFunc: prelu4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js\nvar CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\nvar CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nvar CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\nfunction unaryKernelFunc2({ opSnippet, packedOpSnippet, cpuKernelImpl, dtype }) {\n  return ({ inputs, backend: backend2 }) => {\n    const { x } = inputs;\n    const webglBackend = backend2;\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n    const shouldUsePackedProgram = env().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\") && packedOpSnippet != null;\n    let program;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\nfunction binaryKernelFunc2({ opSnippet, packedOpSnippet, checkOutOfBounds = false, supportsComplex = false, cpuKernelImpl, dtype }) {\n  return ({ inputs, backend: backend2 }) => {\n    const { a, b } = inputs;\n    const webglBackend = backend2;\n    if (supportsComplex && a.dtype === \"complex64\") {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n      const [real4, imag4] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map((complexParts) => {\n        const [aPart, bPart] = complexParts;\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n        const program2 = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(program2, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n      const complexOutput = complex3({ inputs: { real: real4, imag: imag4 }, backend: webglBackend });\n      webglBackend.disposeIntermediateTensorInfo(real4);\n      webglBackend.disposeIntermediateTensorInfo(imag4);\n      return complexOutput;\n    }\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === \"string\" || b.dtype === \"string\" || webglBackend.shouldExecuteOnCPU([a, b])) && cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values;\n      const bVals = webglBackend.texData.get(b.dataId).values;\n      const decodedAVals = a.dtype === \"string\" ? backend_util_exports.fromUint8ToStringArray(aVals) : aVals;\n      const decodedBVals = a.dtype === \"string\" ? backend_util_exports.fromUint8ToStringArray(bVals) : bVals;\n      const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n    const shouldUsePackedProgram = env().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") && packedOpSnippet != null;\n    let program;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\nfunction mapActivationToShaderProgram(activation2, packed = false) {\n  if (activation2 === \"linear\") {\n    if (packed) {\n      return LINEAR2;\n    }\n    return LINEAR;\n  } else if (activation2 === \"relu\") {\n    if (packed) {\n      return RELU2;\n    }\n    return RELU;\n  } else if (activation2 === \"elu\") {\n    if (packed) {\n      return ELU3;\n    }\n    return ELU2;\n  } else if (activation2 === \"relu6\") {\n    if (packed) {\n      return RELU62;\n    }\n    return RELU6;\n  } else if (activation2 === \"prelu\") {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation2 === \"leakyrelu\") {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation2 === \"sigmoid\") {\n    if (packed) {\n      return SIGMOID2;\n    }\n    return SIGMOID;\n  }\n  throw new Error(`Activation ${activation2} has not been implemented for the WebGL backend.`);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js\nvar MatMulPackedProgram = class {\n  constructor(aShape, bShape, outputShape, transposeA = false, transposeB = false, addBias = false, activation2 = null, hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.variableNames = [\"matrixA\", \"matrixB\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n    const aSample = transposeA ? \"i * 2, rc.y\" : \"rc.y, i * 2\";\n    const bSample = transposeB ? \"rc.z, i * 2\" : \"i * 2, rc.z\";\n    const aSwizzle = transposeA ? [\"a.xxyy\", \"a.zzww\"] : [\"a.xxzz\", \"a.yyww\"];\n    const bSwizzle = transposeB ? [\"b.xzxz\", \"b.ywyw\"] : [\"b.xyxy\", \"b.zwzw\"];\n    let activationSnippet = \"\", applyActivationSnippet = \"\";\n    if (activation2) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation2}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation2}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation2}\n        }`;\n      }\n      applyActivationSnippet = `result = activation(result);`;\n    }\n    const addBiasSnippet = addBias ? \"result += getBiasAtOutCoords();\" : \"\";\n    if (addBias) {\n      this.variableNames.push(\"bias\");\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push(\"preluActivationWeights\");\n    }\n    if (hasLeakyreluActivation) {\n      this.variableNames.push(\"leakyreluAlpha\");\n    }\n    let batchASnippet = \"rc.x\";\n    let batchBSnippet = \"rc.x\";\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;\n    }\n    this.userCode = `\n      ${activationSnippet}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          int batchA = ${batchASnippet};\n          int batchB = ${batchBSnippet};\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js\nvar COMPLEX_MULTIPLY = {\n  REAL: \"return areal * breal - aimag * bimag;\",\n  IMAG: \"return areal * bimag + aimag * breal;\"\n};\nvar BinaryOpComplexProgram = class {\n  constructor(op2, aShape, bShape) {\n    this.variableNames = [\"AReal\", \"AImag\", \"BReal\", \"BImag\"];\n    this.outputShape = backend_util_exports.assertAndGetBroadcastShape(aShape, bShape);\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op2}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multiply.js\nvar MUL = \"return a * b;\";\nfunction multiply3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { a, b } = inputs;\n  const dtype = backend_util_exports.upcastType(a.dtype, b.dtype);\n  if (a.dtype === \"complex64\") {\n    const aData = backend2.texData.get(a.dataId);\n    const bData = backend2.texData.get(b.dataId);\n    const realProgram = new BinaryOpComplexProgram(COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n    const inputs2 = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n    const realPart = backend2.runWebGLProgram(realProgram, inputs2, \"float32\");\n    const imagPart = backend2.runWebGLProgram(imagProgram, inputs2, \"float32\");\n    const complexOutput = complex3({ inputs: { real: realPart, imag: imagPart }, backend: backend2 });\n    backend2.disposeIntermediateTensorInfo(realPart);\n    backend2.disposeIntermediateTensorInfo(imagPart);\n    return complexOutput;\n  }\n  if (backend2.shouldExecuteOnCPU([a, b])) {\n    const aData = backend2.texData.get(a.dataId);\n    const bData = backend2.texData.get(b.dataId);\n    const [outValues, outShape] = multiplyImplCPU(a.shape, b.shape, aData.values, bData.values, dtype);\n    const out = backend2.makeTensorInfo(outShape, dtype);\n    const outData = backend2.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n  let program;\n  if (env().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n  return backend2.runWebGLProgram(program, [a, b], dtype);\n}\nvar multiplyConfig2 = {\n  kernelName: Multiply,\n  backendName: \"webgl\",\n  kernelFunc: multiply3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js\nfunction packedReshape(input2, afterShape, backend2) {\n  const input3DShape = [\n    getBatchDim(input2.shape),\n    ...getRowsCols(input2.shape)\n  ];\n  const input3D = {\n    dtype: input2.dtype,\n    shape: input3DShape,\n    dataId: input2.dataId\n  };\n  const afterShapeAs3D = [\n    getBatchDim(afterShape),\n    ...getRowsCols(afterShape)\n  ];\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const customValues = [input3DShape];\n  const output = backend2.runWebGLProgram(program, [input3D], input2.dtype, customValues, preventEagerUnpackingOfOutput);\n  return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js\nfunction reshape4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { shape } = attrs;\n  const webglBackend = backend2;\n  const xSize = util_exports.sizeFromShape(x.shape);\n  const $shape = util_exports.inferFromImplicitShape(shape, xSize);\n  const $xSize = util_exports.sizeFromShape($shape);\n  util_exports.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old shape (${x.shape}) has ${xSize} elements. The new shape and old shape must have the same number of elements.`);\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) && !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n  webglBackend.incRef(x.dataId);\n  return { dataId: x.dataId, shape: $shape, dtype: x.dtype };\n}\nvar reshapeConfig2 = {\n  kernelName: Reshape,\n  backendName: \"webgl\",\n  kernelFunc: reshape4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/mean_gpu.js\nvar MeanProgram = class {\n  constructor(reduceInfo, divisor) {\n    this.variableNames = [\"x\"];\n    const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${util_exports.isInt(denominator) ? denominator.toPrecision(2) : denominator}, ones);`;\n    }\n    let checkOutOfBounds = \"\";\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js\nvar ReduceProgram = class {\n  constructor(reduceInfo, reduceType) {\n    this.variableNames = [\"x\"];\n    const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n    let initializationValue = \"0.0\";\n    let compareOp = ``;\n    if (reduceType === \"prod\") {\n      initializationValue = \"1.0\";\n    } else if (reduceType === \"min\") {\n      initializationValue = \"1.0 / 1e-20\";\n      compareOp = `min`;\n    } else if (reduceType === \"max\") {\n      initializationValue = \"-1.0 / 1e-20\";\n      compareOp = `max`;\n    }\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;\n    if (reduceType === \"sum\") {\n      returnValue = `sumValue`;\n    } else if (reduceType === \"prod\") {\n      returnValue = `prodValue`;\n    } else if (reduceType === \"all\") {\n      returnValue = `allValue`;\n    } else if (reduceType === \"any\") {\n      returnValue = `anyValue`;\n    }\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n    let updateSnippet = `\n      if (${reduceType === \"sum\"}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === \"prod\"}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === \"min\"} || ${reduceType === \"max\"}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n    let vecType = `vec4`;\n    if (reduceType === \"all\") {\n      initializationValue = \"1.0\";\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === \"any\") {\n      initializationValue = \"0.0\";\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n    let checkOutOfBounds = \"\";\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js\nfunction getReductionStages(inShape) {\n  const stages = [];\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util_exports.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n  return stages;\n}\nfunction reduce(x, dtype, reductionType, backend2) {\n  const reductionStages = getReductionStages(x.shape);\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const { inSize, windowSize, outSize } = reductionStages[i];\n    let program;\n    let previousResult;\n    if (reductionType === \"mean\") {\n      program = i === 0 ? new MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, inSize) : new MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize });\n    } else {\n      program = new ReduceProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, reductionType);\n    }\n    previousResult = result;\n    result = backend2.runWebGLProgram(program, [result], dtype);\n    if (previousResult.dataId !== x.dataId) {\n      backend2.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n  return result;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js\nvar TransposeProgram = class {\n  constructor(aShape, newDim) {\n    this.variableNames = [\"A\"];\n    const outputShape = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n};\nfunction getSwitchedCoords(newDim) {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder = [\"resRC.x\", \"resRC.y\", \"resRC.z\", \"resRC.w\", \"resRC.u\", \"resRC.v\"];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js\nvar TransposePackedProgram = class {\n  constructor(aShape, newDim) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    const outputShape = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n    const outputOrder = getVecChannels(\"rc\", this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js\nfunction transposeImpl2(x, perm, backend2) {\n  const program = env().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new TransposePackedProgram(x.shape, perm) : new TransposeProgram(x.shape, perm);\n  return backend2.runWebGLProgram(program, [x], x.dtype);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum_impl.js\nfunction sumImpl(x, axis, keepDims, backend2) {\n  const reductionIndices = axis;\n  const xRank = x.shape.length;\n  const origAxes = util_exports.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl2(x, permutedAxes, backend2);\n    axes = backend_util_exports.getInnerMostAxes(axes.length, xRank);\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"sum\", axes, xRank);\n  const [sumOutShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(sumInput.shape, axes);\n  let outShape = sumOutShape;\n  if (keepDims) {\n    outShape = backend_util_exports.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n  const inSize = util_exports.sizeFromShape(reduceShape);\n  const xSize = util_exports.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape4({ inputs: { x: sumInput }, attrs: { shape: [batchSize, inSize] }, backend: backend2 });\n  const outType = sumOutType(x.dtype);\n  const reduced = reduce(reshapedInput, outType, \"sum\", backend2);\n  const out = reshape4({ inputs: { x: reduced }, attrs: { shape: outShape }, backend: backend2 });\n  backend2.disposeIntermediateTensorInfo(reshapedInput);\n  backend2.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend2.disposeIntermediateTensorInfo(sumInput);\n  }\n  return out;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum.js\nfunction sum4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, keepDims } = attrs;\n  return sumImpl(x, axis, keepDims, backend2);\n}\nvar sumConfig2 = {\n  kernelName: Sum,\n  backendName: \"webgl\",\n  kernelFunc: sum4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js\nfunction transpose3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { perm } = attrs;\n  const webglBackend = backend2;\n  const xRank = x.shape.length;\n  const newShape = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n  let out;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values;\n    const outValues = transposeImplCPU(values, x.shape, x.dtype, perm, newShape);\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl2(x, perm, webglBackend);\n  }\n  return out;\n}\nvar transposeConfig2 = {\n  kernelName: Transpose,\n  backendName: \"webgl\",\n  kernelFunc: transpose3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul_impl.js\nvar MATMUL_SHARED_DIM_THRESHOLD = 1e3;\nfunction batchMatMulImpl({ a, b, transposeA, transposeB, backend: backend2, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation: activation2 = null }) {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n  const batchDimA = util_exports.sizeFromShape(outerDimsA);\n  const batchDimB = util_exports.sizeFromShape(outerDimsB);\n  const outShapeOuterDims = broadcast_util_exports.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n  util_exports.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (${innerShapeB}) of Tensors with shapes ${a.shape} and ${b.shape} and transposeA=${transposeA} and transposeB=${transposeB} must match.`);\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] : [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] : [batchDimB, innerShapeB, outerShapeB];\n  const a3d = reshape4({ inputs: { x: a }, backend: backend2, attrs: { shape: a3dShape } });\n  const b3d = reshape4({ inputs: { x: b }, backend: backend2, attrs: { shape: b3dShape } });\n  const intermediates = [a3d, b3d];\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation2 === \"leakyrelu\";\n  const fusedActivation = activation2 != null ? mapActivationToShaderProgram(activation2, true) : null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights || hasLeakyreluAlpha || fusedActivation != null;\n  let out;\n  if ((outerShapeA === 1 || outerShapeB === 1) && sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose3({ inputs: { x: a3d }, backend: backend2, attrs: { perm: [0, 2, 1] } });\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose3({ inputs: { x: b3d }, backend: backend2, attrs: { perm: [0, 2, 1] } });\n      intermediates.push(bVec);\n    }\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape4({\n        inputs: { x: aVec },\n        backend: backend2,\n        attrs: { shape: [batchDim, sharedDim, 1] }\n      });\n      intermediates.push(aVec3d);\n    }\n    const axis = outerShapeB === 1 ? 2 : 1;\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape4({\n        inputs: { x: bVec },\n        backend: backend2,\n        attrs: { shape: [batchDim, 1, sharedDim] }\n      });\n      intermediates.push(bVec3d);\n    }\n    const product = multiply3({ inputs: { a: aVec3d, b: bVec3d }, backend: backend2 });\n    out = sum4({ inputs: { x: product }, backend: backend2, attrs: { axis, keepDims: true } });\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n    const program = new MatMulPackedProgram(a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend2.makeTensorInfo([], \"float32\", util_exports.createScalarValue(leakyreluAlpha, \"float32\"));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend2.runWebGLProgram(program, inputs, dtype);\n  }\n  const outReshaped = reshape4({ inputs: { x: out }, backend: backend2, attrs: { shape: outShape } });\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend2.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/_FusedMatMul.js\nfunction _fusedMatMul2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { a, b, bias, preluActivationWeights } = inputs;\n  const { transposeA, transposeB, activation: activation2, leakyreluAlpha } = attrs;\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend: backend2,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation: activation2\n  });\n}\nvar _fusedMatMulConfig2 = {\n  kernelName: _FusedMatMul,\n  backendName: \"webgl\",\n  kernelFunc: _fusedMatMul2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Abs.js\nvar ABS2 = `return abs(x);`;\nfunction abs3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x } = inputs;\n  if (backend2.shouldExecuteOnCPU([x]) && x.dtype !== \"complex64\") {\n    const xData = backend2.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values);\n    return backend2.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n  let program;\n  if (env().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) {\n    program = new UnaryOpPackedProgram(x.shape, ABS2);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS2);\n  }\n  return backend2.runWebGLProgram(program, [x], x.dtype);\n}\nvar absConfig2 = {\n  kernelName: Abs,\n  backendName: \"webgl\",\n  kernelFunc: abs3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acos.js\nvar ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\nvar acos3 = unaryKernelFunc2({ opSnippet: ACOS });\nvar acosConfig2 = {\n  kernelName: Acos,\n  backendName: \"webgl\",\n  kernelFunc: acos3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acosh.js\nvar ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\nvar acosh3 = unaryKernelFunc2({ opSnippet: ACOSH });\nvar acoshConfig2 = {\n  kernelName: Acosh,\n  backendName: \"webgl\",\n  kernelFunc: acosh3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Add.js\nvar ADD = \"return a + b;\";\nvar addKernelFunc = binaryKernelFunc2({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: addImplCPU\n});\nvar addConfig2 = {\n  kernelName: Add,\n  backendName: \"webgl\",\n  kernelFunc: addKernelFunc\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js\nvar AddNProgram = class {\n  constructor(outputShape, shapes) {\n    this.outputShape = [];\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    const snippets = [];\n    this.variableNames.forEach((variable2) => {\n      snippets.push(`float v${variable2} = get${variable2}AtOutCoords();`);\n    });\n    const operation = this.variableNames.map((variable2) => {\n      return `v${variable2}`;\n    }).join(\" + \");\n    this.userCode = `\n      void main() {\n        ${snippets.join(\"\\n        \")}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js\nvar AddNPackedProgram = class {\n  constructor(outputShape, shapes) {\n    this.outputShape = [];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    const snippets = [];\n    this.variableNames.forEach((variable2) => {\n      snippets.push(`vec4 v${variable2} = get${variable2}AtOutCoords();`);\n    });\n    const operation = this.variableNames.map((variable2) => {\n      return `v${variable2}`;\n    }).join(\" + \");\n    this.userCode = `\n      void main() {\n        ${snippets.join(\"\\n        \")}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AddN.js\nfunction addN3(args) {\n  const { inputs, backend: backend2 } = args;\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity3({ inputs: { x: tensors[0] }, backend: backend2 });\n  }\n  if (tensors.length > env().get(\"WEBGL_MAX_TEXTURES_IN_SHADER\")) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN3({ inputs: tensors.slice(0, midIndex), backend: backend2 });\n    const rightSide = addN3({ inputs: tensors.slice(midIndex), backend: backend2 });\n    return addN3({ inputs: [leftSide, rightSide], backend: backend2 });\n  }\n  const dtype = tensors.map((t) => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map((t) => t.shape);\n  const usePackedOp = env().getBool(\"WEBGL_PACK\");\n  const program = usePackedOp ? new AddNPackedProgram(tensors[0].shape, shapes) : new AddNProgram(tensors[0].shape, shapes);\n  return backend2.runWebGLProgram(program, tensors, dtype);\n}\nvar addNConfig2 = {\n  kernelName: AddN,\n  backendName: \"webgl\",\n  kernelFunc: addN3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/All.js\nfunction all3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, keepDims } = attrs;\n  const xRank = x.shape.length;\n  const origAxes = util_exports.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose3({ inputs: { x }, backend: backend2, attrs: { perm: permutedAxes } });\n    axes = backend_util_exports.getInnerMostAxes(axes.length, xRank);\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"all\", axes, xRank);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util_exports.sizeFromShape(reduceShape);\n  const a2D = reshape4({ inputs: { x: permutedX }, backend: backend2, attrs: { shape: [-1, inSize] } });\n  const reduced = reduce(a2D, a2D.dtype, \"all\", backend2);\n  let res;\n  if (keepDims) {\n    const newShape = backend_util_exports.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape4({ inputs: { x: reduced }, backend: backend2, attrs: { shape: newShape } });\n  } else {\n    res = reshape4({ inputs: { x: reduced }, backend: backend2, attrs: { shape: outShape } });\n  }\n  backend2.disposeIntermediateTensorInfo(a2D);\n  backend2.disposeIntermediateTensorInfo(reduced);\n  if (permutedAxes != null) {\n    backend2.disposeIntermediateTensorInfo(permutedX);\n  }\n  return res;\n}\nvar allConfig2 = {\n  kernelName: All,\n  backendName: \"webgl\",\n  kernelFunc: all3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Any.js\nfunction any3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, keepDims } = attrs;\n  const xRank = x.shape.length;\n  const origAxes = util_exports.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose3({ inputs: { x }, backend: backend2, attrs: { perm: permutedAxes } });\n    axes = backend_util_exports.getInnerMostAxes(axes.length, xRank);\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"any\", axes, xRank);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util_exports.sizeFromShape(reduceShape);\n  const a2D = reshape4({ inputs: { x: permutedX }, backend: backend2, attrs: { shape: [-1, inSize] } });\n  const reduced = reduce(a2D, a2D.dtype, \"any\", backend2);\n  let res;\n  if (keepDims) {\n    const newShape = backend_util_exports.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape4({ inputs: { x: reduced }, backend: backend2, attrs: { shape: newShape } });\n  } else {\n    res = reshape4({ inputs: { x: reduced }, backend: backend2, attrs: { shape: outShape } });\n  }\n  backend2.disposeIntermediateTensorInfo(a2D);\n  backend2.disposeIntermediateTensorInfo(reduced);\n  if (permutedAxes != null) {\n    backend2.disposeIntermediateTensorInfo(permutedX);\n  }\n  return res;\n}\nvar anyConfig2 = {\n  kernelName: Any,\n  backendName: \"webgl\",\n  kernelFunc: any3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js\nvar ArgMinMaxProgram = class {\n  constructor(reduceInfo, op2, firstPass) {\n    this.variableNames = [\"A\"];\n    const { windowSize, batchSize, outSize } = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push(\"bestIndicesA\");\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = op2 === \"max\" ? \">\" : \"<\";\n    const indexSnippet = firstPass ? \"inOffset + i;\" : \"round(getBestIndicesA(batch, inOffset + i));\";\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js\nvar ArgMinMaxPackedProgram = class {\n  constructor(shape, windowSize, op2, firstPass) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    util_exports.assert(shape.length > 2, () => `Packed arg${op2.charAt(0).toUpperCase() + op2.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push(\"bestIndicesA\");\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords2 = getChannels(\"coords\", rank);\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords2.join()}, 0);\n        ++${coords2[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords2.join()}, 0);\n        ++${coords2[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords2.join()}, 0);\n        --${coords2[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords2.join()}, 0);\n        --${coords2[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords2[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords2[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords2[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords2[rank - 2]};`;\n    }\n    const channels = [\"x\", \"y\", \"z\", \"w\", \"u\", \"v\"].slice(0, sourceRank);\n    const inChannel = \".\" + channels[sourceRank - 1];\n    const intChannels = channels.map((x) => \"int \" + x);\n    const srcRCoords = getChannels(\"sourceLocR\", sourceRank - 1).concat(\"inIdx.r\");\n    const srcGCoords = getChannels(\"sourceLocG\", sourceRank - 1).concat(\"inIdx.g\");\n    const srcBCoords = getChannels(\"sourceLocB\", sourceRank - 1).concat(\"inIdx.b\");\n    const srcACoords = getChannels(\"sourceLocA\", sourceRank - 1).concat(\"inIdx.a\");\n    const compOp = op2 === \"max\" ? \"greaterThan\" : \"lessThan\";\n    const fetchCandidateIdx = firstPass ? \"\" : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n    const getBestIndicesAChannelSnippet = firstPass ? \"\" : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords2[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords2[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/arg_min_max.js\nfunction argReduce(backend2, x, reduceType, bestIndicesA = null) {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util_exports.computeOptimalWindowSize(inSize);\n  const reduceInfo = { windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize) };\n  const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend2.runWebGLProgram(program, inputs, \"int32\");\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend2, x, reduceType, output);\n  backend2.disposeIntermediateTensorInfo(output);\n  return result;\n}\nfunction argReducePacked(backend2, x, reduceType, bestIndicesA = null) {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util_exports.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend2.runWebGLProgram(program, inputs, \"int32\");\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend2, x, reduceType, output);\n    backend2.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\nfunction argMinMaxReduce(backend2, x, axis, reduceType) {\n  const axes = [axis];\n  backend_util_exports.assertAxesAreInnerMostDims(\"arg\" + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n  if (!env().getBool(\"WEBGL_PACK_REDUCE\") || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    const xtexData = backend2.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend2.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n    const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util_exports.sizeFromShape(reduceShape);\n    const a2D = reshape4({ inputs: { x: xUnPacked }, backend: backend2, attrs: { shape: [-1, inSize] } });\n    intermediateTensorInfos.push(a2D);\n    const reduced = argReduce(backend2, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped = reshape4({ inputs: { x: reduced }, backend: backend2, attrs: { shape: outShape } });\n    intermediateTensorInfos.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend2, x, reduceType);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMax.js\nfunction argMax3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis } = attrs;\n  let axes = util_exports.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose3({ inputs: { x }, backend: backend2, attrs: { perm: permutedAxes } });\n    intermediateTensorInfos.push($x);\n    axes = backend_util_exports.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"argMax\", [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend2, $x, axes[0], \"max\");\n  intermediateTensorInfos.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return out;\n}\nvar argMaxConfig2 = {\n  kernelName: ArgMax,\n  backendName: \"webgl\",\n  kernelFunc: argMax3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMin.js\nfunction argMin3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis } = attrs;\n  let axes = util_exports.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose3({ inputs: { x }, backend: backend2, attrs: { perm: permutedAxes } });\n    intermediateTensorInfos.push($x);\n    axes = backend_util_exports.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"argMin\", [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend2, $x, axes[0], \"min\");\n  intermediateTensorInfos.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return out;\n}\nvar argMinConfig2 = {\n  kernelName: ArgMin,\n  backendName: \"webgl\",\n  kernelFunc: argMin3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asin.js\nvar ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\nvar asin3 = unaryKernelFunc2({ opSnippet: ASIN });\nvar asinConfig2 = {\n  kernelName: Asin,\n  backendName: \"webgl\",\n  kernelFunc: asin3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asinh.js\nvar ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\nvar asinh3 = unaryKernelFunc2({ opSnippet: ASINH });\nvar asinhConfig2 = {\n  kernelName: Asinh,\n  backendName: \"webgl\",\n  kernelFunc: asinh3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan.js\nvar ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\nvar atan4 = unaryKernelFunc2({ opSnippet: ATAN });\nvar atanConfig2 = {\n  kernelName: Atan,\n  backendName: \"webgl\",\n  kernelFunc: atan4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan2.js\nvar ATAN2 = CHECK_NAN_SNIPPET_BINARY + `\n  return atan(a, b);\n`;\nvar ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` + CHECK_NAN_SNIPPET_BINARY_PACKED + `\n  return result;\n`;\nvar atan23 = binaryKernelFunc2({ opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED });\nvar atan2Config2 = {\n  kernelName: Atan2,\n  backendName: \"webgl\",\n  kernelFunc: atan23\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atanh.js\nvar ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\nvar atanh3 = unaryKernelFunc2({ opSnippet: ATANH });\nvar atanhConfig2 = {\n  kernelName: Atanh,\n  backendName: \"webgl\",\n  kernelFunc: atanh3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js\nvar Pool2DProgram = class {\n  constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n    this.variableNames = [\"x\"];\n    if (poolType === \"avg\" && computePositions) {\n      throw new Error(\"Cannot compute positions for average pool.\");\n    }\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n    const isAvgPool = poolType === \"avg\";\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    let initializationValue = \"0.0\";\n    if (!isAvgPool) {\n      initializationValue = \"-1.0 / 1e-20\";\n    }\n    if (computePositions) {\n      const compareOp2 = \">=\";\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp2} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${flattenPositions ? includeBatchInIndex ? batchFlattenPositionStr : flattenPositionStr : `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n    const compareOp = \"max\";\n    let returnValue = `${poolType}(${poolType}(${poolType}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;\n    if (poolType === \"avg\") {\n      returnValue = `avgValue / count`;\n    }\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n};\nvar Pool3DProgram = class {\n  constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n    this.variableNames = [\"x\"];\n    if (poolType === \"avg\" && computePositions) {\n      throw new Error(\"Cannot compute positions for average pool.\");\n    }\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n    const isAvgPool = poolType === \"avg\";\n    let initializationValue = \"0.0\";\n    if (!isAvgPool) {\n      initializationValue = \"-1.0 / 1e-20\";\n    }\n    if (computePositions) {\n      const compareOp2 = \">=\";\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp2} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${flattenPositions ? includeBatchInIndex ? `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` : `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` : `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n    const compareOp = \"max\";\n    let returnValue = `${poolType}(${poolType}(${poolType}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;\n    if (poolType === \"avg\") {\n      returnValue = `avgValue / count`;\n    }\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool.js\nfunction avgPool3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  assertNotComplex2(x, \"avgPool\");\n  const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n  const dilations = 1;\n  util_exports.assert(backend_util_exports.eitherStridesOrDilationsAreOne(strides, dilations), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util_exports.computePool2DInfo(x.shape, filterSize, strides, dilations, pad3, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util_exports.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity3({ inputs: { x }, backend: backend2 });\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, \"avg\", false);\n  return backend2.runWebGLProgram(avgPoolProgram, [x], \"float32\");\n}\nvar avgPoolConfig2 = {\n  kernelName: AvgPool,\n  backendName: \"webgl\",\n  kernelFunc: avgPool3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3D.js\nfunction avgPool3D2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { filterSize, strides, pad: pad3, dimRoundingMode, dataFormat } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util_exports.computePool3DInfo(x.shape, filterSize, strides, dilations, pad3, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, \"avg\", false);\n  return backend2.runWebGLProgram(avgPoolProgram, [x], \"float32\");\n}\nvar avgPool3DConfig2 = {\n  kernelName: AvgPool3D,\n  backendName: \"webgl\",\n  kernelFunc: avgPool3D2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js\nvar AvgPool2DBackpropProgram = class {\n  constructor(convInfo) {\n    this.variableNames = [\"dy\"];\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n};\nvar AvgPool3DBackpropProgram = class {\n  constructor(convInfo) {\n    this.variableNames = [\"dy\"];\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3DGrad.js\nfunction avgPool3DGrad2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, input: input2 } = inputs;\n  const x = input2;\n  const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util_exports.computePool3DInfo(x.shape, filterSize, strides, dilations, pad3, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend2.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\nvar avgPool3DGradConfig3 = {\n  kernelName: AvgPool3DGrad,\n  backendName: \"webgl\",\n  kernelFunc: avgPool3DGrad2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPoolGrad.js\nfunction avgPoolGrad3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, input: input2 } = inputs;\n  const x = input2;\n  assertNotComplex2([dy, input2], \"avgPoolGrad\");\n  const { filterSize, strides, pad: pad3 } = attrs;\n  const convInfo = backend_util_exports.computePool2DInfo(x.shape, filterSize, strides, 1, pad3);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend2.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\nvar avgPoolGradConfig3 = {\n  kernelName: AvgPoolGrad,\n  backendName: \"webgl\",\n  kernelFunc: avgPoolGrad3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul.js\nfunction batchMatMul2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { a, b } = inputs;\n  const { transposeA, transposeB } = attrs;\n  return batchMatMulImpl({ a, b, transposeA, transposeB, backend: backend2 });\n}\nvar batchMatMulConfig2 = {\n  kernelName: BatchMatMul,\n  backendName: \"webgl\",\n  kernelFunc: batchMatMul2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js\nvar BatchNormProgram = class {\n  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n    this.outputShape = [];\n    this.variableNames = [\"x\", \"mean\", \"variance\"];\n    backend_util_exports.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util_exports.assertAndGetBroadcastShape(xShape, varianceShape);\n    let offsetSnippet = \"0.0\";\n    if (offsetShape != null) {\n      backend_util_exports.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push(\"offset\");\n      offsetSnippet = \"getOffsetAtOutCoords()\";\n    }\n    let scaleSnippet = \"1.0\";\n    if (scaleShape != null) {\n      backend_util_exports.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push(\"scale\");\n      scaleSnippet = \"getScaleAtOutCoords()\";\n    }\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js\nvar BatchNormPackedProgram = class {\n  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.variableNames = [\"x\", \"mean\", \"variance\"];\n    backend_util_exports.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util_exports.assertAndGetBroadcastShape(xShape, varianceShape);\n    let offsetSnippet = \"vec4(0.0)\";\n    if (offsetShape != null) {\n      backend_util_exports.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push(\"offset\");\n      offsetSnippet = \"getOffsetAtOutCoords()\";\n    }\n    let scaleSnippet = \"vec4(1.0)\";\n    if (scaleShape != null) {\n      backend_util_exports.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push(\"scale\");\n      scaleSnippet = \"getScaleAtOutCoords()\";\n    }\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchNorm.js\nvar batchNorm3 = ({ inputs, backend: backend2, attrs }) => {\n  const { x, mean: mean4, variance, offset, scale: scale2 } = inputs;\n  util_exports.assert(mean4.shape.length === variance.shape.length, () => \"Batch normalization gradient requires mean and variance to have equal ranks.\");\n  util_exports.assert(offset == null || mean4.shape.length === offset.shape.length, () => \"Batch normalization gradient requires mean and offset to have equal ranks.\");\n  util_exports.assert(scale2 == null || mean4.shape.length === scale2.shape.length, () => \"Batch normalization gradient requires mean and scale to have equal ranks.\");\n  let { varianceEpsilon } = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 1e-3;\n  }\n  const finalInputs = [x, mean4, variance];\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n  let scaleShape = null;\n  if (scale2 != null) {\n    scaleShape = scale2.shape;\n    finalInputs.push(scale2);\n  }\n  const program = env().getBool(\"WEBGL_PACK_NORMALIZATION\") ? new BatchNormPackedProgram(x.shape, mean4.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) : new BatchNormProgram(x.shape, mean4.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n  const output = backend2.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n  return output;\n};\nvar batchNormConfig2 = {\n  kernelName: FusedBatchNorm,\n  backendName: \"webgl\",\n  kernelFunc: batchNorm3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js\nvar SliceProgram = class {\n  constructor(destSize) {\n    this.variableNames = [\"source\"];\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{ name: \"start\", arrayIndex: this.rank, type: \"int\" }];\n    const sourceCoords = getCoords(this.rank);\n    let body;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join(\"\\n\")}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n};\nvar coords = [\"x\", \"y\", \"z\", \"w\", \"u\", \"v\"];\nfunction getCoords(rank) {\n  if (rank === 1) {\n    return \"sourceLoc\";\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map((x) => \"sourceLoc.\" + x).join(\",\");\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js\nvar SlicePackedProgram = class {\n  constructor(destSize) {\n    this.variableNames = [\"source\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{ name: \"start\", arrayIndex: this.rank, type: \"int\" }];\n    const dtype = getCoordsDataType(this.rank);\n    const coords2 = getChannels(\"coords\", this.rank);\n    const sourceLoc = getChannels(\"sourceLoc\", this.rank);\n    const innerDims = this.rank === 1 ? \"sourceLoc\" : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords2[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? \"\" : `\n      --${coords2[this.rank - 1]};\n      if (++${coords2[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords2[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n    const sourceLocSetup = this.rank <= 4 ? `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` : destSize.map((_, i) => `${sourceLoc[i]} = ${coords2[i]} + start[${i}];`).join(\"\\n\");\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js\nfunction shallowSlice(x, begin, size, backend2) {\n  const xTexData = backend2.texData.get(x.dataId);\n  const t = backend2.makeTensorInfo(size, x.dtype);\n  const newTexData = backend2.texData.get(t.dataId);\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset = slice_util_exports.computeFlatOffset(begin, util_exports.computeStrides(x.shape));\n  if (xTexData.slice) {\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n  const refCount = backend2.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend2.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\nfunction slice3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { begin, size } = attrs;\n  const [$begin, $size] = slice_util_exports.parseSliceParams(x, begin, size);\n  slice_util_exports.assertParamsValid(x, $begin, $size);\n  if (util_exports.sizeFromShape($size) === 0) {\n    return backend2.makeTensorInfo($size, x.dtype, []);\n  }\n  if (backend2.shouldExecuteOnCPU([x]) || x.dtype === \"string\") {\n    const xTexData = backend2.texData.get(x.dataId);\n    const outValues = sliceImplCPU(xTexData.values, $begin, $size, x.shape, x.dtype);\n    return backend2.makeTensorInfo($size, x.dtype, outValues);\n  }\n  const { isPacked } = backend2.texData.get(x.dataId);\n  const isContinous = slice_util_exports.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new SlicePackedProgram($size) : new SliceProgram($size);\n    const customValues = [$begin];\n    return backend2.runWebGLProgram(program, [x], x.dtype, customValues);\n  }\n  backend2.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend2);\n}\nvar sliceConfig2 = {\n  kernelName: Slice,\n  backendName: \"webgl\",\n  kernelFunc: slice3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchToSpaceND.js\nvar batchToSpaceND3 = (args) => {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { blockShape, crops } = attrs;\n  util_exports.assert(x.shape.length <= 4, () => \"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet\");\n  const prod5 = blockShape.reduce((a, b) => a * b);\n  const reshaped = backend_util_exports.getReshaped(x.shape, blockShape, prod5);\n  const permuted = backend_util_exports.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted = backend_util_exports.getReshapedPermuted(x.shape, blockShape, prod5);\n  const sliceBeginCoords = backend_util_exports.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize = backend_util_exports.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  const toDispose = [];\n  const reshapedIntermediate = reshape4({ inputs: { x }, backend: backend2, attrs: { shape: reshaped } });\n  const transposedIntermediate = transpose3({ inputs: { x: reshapedIntermediate }, backend: backend2, attrs: { perm: permuted } });\n  const reshapedIntermediate2 = reshape4({\n    inputs: { x: transposedIntermediate },\n    backend: backend2,\n    attrs: { shape: reshapedPermuted }\n  });\n  const sliced = slice3({\n    inputs: { x: reshapedIntermediate2 },\n    backend: backend2,\n    attrs: { begin: sliceBeginCoords, size: sliceSize }\n  });\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n  toDispose.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return sliced;\n};\nvar batchToSpaceNDConfig2 = {\n  kernelName: BatchToSpaceND,\n  backendName: \"webgl\",\n  kernelFunc: batchToSpaceND3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Bincount.js\nfunction bincount3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, weights } = inputs;\n  const { size } = attrs;\n  const xVals = backend2.readSync(x.dataId);\n  const weightsVals = backend2.readSync(weights.dataId);\n  const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n  return backend2.makeTensorInfo([size], weights.dtype, outVals);\n}\nvar bincountConfig2 = {\n  kernelName: Bincount,\n  backendName: \"webgl\",\n  kernelFunc: bincount3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BroadcastArgs.js\nfunction broadcastArgs3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { s0, s1 } = inputs;\n  const s0Vals = backend2.readSync(s0.dataId);\n  const s1Vals = backend2.readSync(s1.dataId);\n  const broadcastShape = backend_util_exports.assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));\n  return backend2.makeTensorInfo([broadcastShape.length], \"int32\", Int32Array.from(broadcastShape));\n}\nvar broadcastArgsConfig2 = {\n  kernelName: BroadcastArgs,\n  backendName: \"webgl\",\n  kernelFunc: broadcastArgs3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NotEqual.js\nvar NOT_EQUAL = `return float(a != b);`;\nvar notEqual3 = binaryKernelFunc2({ opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: \"bool\" });\nvar notEqualConfig2 = {\n  kernelName: NotEqual,\n  backendName: \"webgl\",\n  kernelFunc: notEqual3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js\nfunction real3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { input: input2 } = inputs;\n  const inputData = backend2.texData.get(input2.dataId);\n  return identity3({ inputs: { x: inputData.complexTensorInfos.real }, backend: backend2 });\n}\nvar realConfig2 = {\n  kernelName: Real,\n  backendName: \"webgl\",\n  kernelFunc: real3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/int.js\nvar TO_INT = `return float(int(x));`;\nfunction int(input2, backend2) {\n  const program = new UnaryOpProgram(input2.shape, TO_INT);\n  const output = backend2.runWebGLProgram(program, [input2], \"int32\");\n  return { dataId: output.dataId, shape: output.shape, dtype: output.dtype };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cast.js\nfunction cast4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { dtype } = attrs;\n  if (dtype === \"complex64\") {\n    if (x.dtype === \"complex64\") {\n      return identity3({ inputs: { x }, backend: backend2 });\n    }\n    const zerosTensor = zeros(x.shape);\n    const floatX = cast4({ inputs: { x }, backend: backend2, attrs: { dtype: \"float32\" } });\n    const result = complex3({ inputs: { real: floatX, imag: zerosTensor }, backend: backend2 });\n    zerosTensor.dispose();\n    backend2.disposeIntermediateTensorInfo(floatX);\n    return result;\n  }\n  if (x.dtype === \"complex64\") {\n    const realPart = real3({ inputs: { input: x }, backend: backend2 });\n    const result = cast4({ inputs: { x: realPart }, backend: backend2, attrs: { dtype } });\n    backend2.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n  if (!util_exports.hasEncodingLoss(x.dtype, dtype)) {\n    const result = identity3({ inputs: { x }, backend: backend2 });\n    return { dataId: result.dataId, shape: result.shape, dtype };\n  }\n  if (dtype === \"int32\") {\n    return int(x, backend2);\n  }\n  if (dtype === \"bool\") {\n    const zerosTensorInfo = backend2.makeTensorInfo([], \"bool\", util_exports.getTypedArrayFromDType(\"bool\", 1));\n    const binaryInputs = { a: x, b: zerosTensorInfo };\n    const result = notEqual3({ inputs: binaryInputs, backend: backend2 });\n    backend2.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nvar castConfig2 = {\n  kernelName: Cast,\n  backendName: \"webgl\",\n  kernelFunc: cast4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Ceil.js\nvar CEIL = `return ceil(x);`;\nvar ceil3 = unaryKernelFunc2({ opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU });\nvar ceilConfig2 = {\n  kernelName: Ceil,\n  backendName: \"webgl\",\n  kernelFunc: ceil3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js\nvar ClipProgram = class {\n  constructor(aShape) {\n    this.variableNames = [\"A\"];\n    this.customUniforms = [\n      { name: \"minVal\", type: \"float\" },\n      { name: \"maxVal\", type: \"float\" }\n    ];\n    this.outputShape = aShape;\n    this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js\nvar ClipPackedProgram = class {\n  constructor(aShape) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [\n      { name: \"minVal\", type: \"float\" },\n      { name: \"maxVal\", type: \"float\" }\n    ];\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ClipByValue.js\nfunction clipByValue3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { clipValueMin, clipValueMax } = attrs;\n  let program;\n  if (env().getBool(\"WEBGL_PACK_CLIP\")) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customValues = [[clipValueMin], [clipValueMax]];\n  return backend2.runWebGLProgram(program, [x], x.dtype, customValues);\n}\nvar clipByValueConfig2 = {\n  kernelName: ClipByValue,\n  backendName: \"webgl\",\n  kernelFunc: clipByValue3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js\nvar ComplexAbsProgram = class {\n  constructor(shape) {\n    this.variableNames = [\"real\", \"imag\"];\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ComplexAbs.js\nfunction makeComplexComponentTensorInfo(complexTensor, complexPart) {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\nfunction complexAbs2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x } = inputs;\n  const xData = backend2.texData.get(x.dataId);\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag)\n  ];\n  return backend2.runWebGLProgram(program, programInputs, programInputs[0].dtype);\n}\nvar complexAbsConfig2 = {\n  kernelName: ComplexAbs,\n  backendName: \"webgl\",\n  kernelFunc: complexAbs2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js\nvar ConcatProgram = class {\n  constructor(shapes) {\n    this.outputShape = [];\n    this.outputShape = backend_util_exports.computeOutShape(shapes, 1);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    const offsets = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(`else if (yC < ${offsets[i]}) setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join(\"\\n        \")}\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js\nvar ConcatPackedProgram = class {\n  constructor(shapes, axis) {\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = [];\n    this.outputShape = backend_util_exports.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords2 = getChannels(\"coords\", rank);\n    const channels = [\"x\", \"y\", \"z\", \"w\", \"u\", \"v\"].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    const offsets = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift2 = offsets[i - 1];\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift2)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift2)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n    this.userCode = `\n      float getValue(${channels.map((x) => \"int \" + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords2}), 0., 0., 0.);\n\n        ${coords2[rank - 1]} = ${coords2[rank - 1]} + 1;\n        if (${coords2[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords2});\n        }\n\n        ${coords2[rank - 2]} = ${coords2[rank - 2]} + 1;\n        if (${coords2[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords2});\n        }\n\n        ${coords2[rank - 1]} = ${coords2[rank - 1]} - 1;\n        if (${coords2[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords2[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords2});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n};\nfunction shiftedChannels(channels, channel, shift) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Imag.js\nfunction imag3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { input: input2 } = inputs;\n  const inputData = backend2.texData.get(input2.dataId);\n  return identity3({ inputs: { x: inputData.complexTensorInfos.imag }, backend: backend2 });\n}\nvar imagConfig2 = {\n  kernelName: Imag,\n  backendName: \"webgl\",\n  kernelFunc: imag3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat_impl.js\nfunction concatImpl2(inputs, axis, backend2) {\n  const dtype = inputs[0].dtype;\n  if (dtype === \"complex64\") {\n    const reals = inputs.map((t) => real3({ inputs: { input: t }, backend: backend2 }));\n    const imags = inputs.map((t) => imag3({ inputs: { input: t }, backend: backend2 }));\n    const realConcated = concatImpl2(reals, axis, backend2);\n    const imagConcated = concatImpl2(imags, axis, backend2);\n    const result2 = complex3({ inputs: { real: realConcated, imag: imagConcated }, backend: backend2 });\n    reals.forEach((r) => backend2.disposeIntermediateTensorInfo(r));\n    imags.forEach((i) => backend2.disposeIntermediateTensorInfo(i));\n    backend2.disposeIntermediateTensorInfo(realConcated);\n    backend2.disposeIntermediateTensorInfo(imagConcated);\n    return result2;\n  }\n  let runOnCpu = backend2.shouldExecuteOnCPU(inputs);\n  if (dtype === \"string\") {\n    runOnCpu = true;\n  }\n  if (runOnCpu) {\n    const tensors2D2 = inputs.map((t) => {\n      const innerSize = util_exports.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape4({ inputs: { x: t }, backend: backend2, attrs: { shape } });\n    });\n    const inputsValShapes = tensors2D2.map((t) => {\n      return { vals: backend2.readSync(t.dataId), shape: t.shape };\n    });\n    const outShape2 = backend_util_exports.computeOutShape(tensors2D2.map((t) => t.shape), 1);\n    const simplyConcat = tensors2D2[0].shape[0] === 1;\n    const outVals = concatImplCPU(inputsValShapes, outShape2, dtype, simplyConcat);\n    const finalOutShape = backend_util_exports.computeOutShape(inputs.map((t) => t.shape), axis);\n    const outInfo = backend2.makeTensorInfo(finalOutShape, dtype, outVals);\n    tensors2D2.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n    return outInfo;\n  }\n  if (inputs.length > env().getNumber(\"WEBGL_MAX_TEXTURES_IN_SHADER\")) {\n    const midIndex = Math.floor(inputs.length / 2);\n    const leftSide = concatImpl2(inputs.slice(0, midIndex), axis, backend2);\n    const rightSide = concatImpl2(inputs.slice(midIndex), axis, backend2);\n    const result2 = concatImpl2([leftSide, rightSide], axis, backend2);\n    backend2.disposeIntermediateTensorInfo(leftSide);\n    backend2.disposeIntermediateTensorInfo(rightSide);\n    return result2;\n  }\n  if (env().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") && inputs[0].shape.length > 1) {\n    const program2 = new ConcatPackedProgram(inputs.map((t) => t.shape), axis);\n    return backend2.runWebGLProgram(program2, inputs, dtype);\n  }\n  const { tensors2D, outShape } = computeTensors2D(inputs, axis, backend2);\n  const program = new ConcatProgram(tensors2D.map((t) => t.shape));\n  const result = backend2.runWebGLProgram(program, tensors2D, dtype);\n  tensors2D.forEach((r) => backend2.disposeIntermediateTensorInfo(r));\n  const reshapedResult = reshape4({ inputs: { x: result }, attrs: { shape: outShape }, backend: backend2 });\n  backend2.disposeIntermediateTensorInfo(result);\n  return reshapedResult;\n}\nfunction computeTensors2D(inputs, axis, backend2) {\n  const outShape = backend_util_exports.computeOutShape(inputs.map((t) => t.shape), axis);\n  const tensors2D = inputs.map((x) => reshape4({\n    inputs: { x },\n    attrs: { shape: [-1, util_exports.sizeFromShape(x.shape.slice(axis))] },\n    backend: backend2\n  }));\n  return { tensors2D, outShape };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat.js\nfunction concat3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { axis } = attrs;\n  const $axis = util_exports.parseAxisParam(axis, inputs[0].shape)[0];\n  const outShape = backend_util_exports.computeOutShape(inputs.map((t) => t.shape), $axis);\n  if (util_exports.sizeFromShape(outShape) === 0) {\n    return backend2.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n  const $inputs = inputs.filter((t) => util_exports.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity3({ inputs: { x: $inputs[0] }, backend: backend2 });\n  }\n  const shapes = $inputs.map((t) => t.shape);\n  backend_util_exports.assertParamsConsistent(shapes, $axis);\n  return concatImpl2($inputs, $axis, backend2);\n}\nvar concatConfig2 = {\n  kernelName: Concat,\n  backendName: \"webgl\",\n  kernelFunc: concat3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js\nvar Conv2DProgram = class {\n  constructor(convInfo, addBias = false, activation2 = null, hasPreluActivationWeights = false, hasLeakyreluAlpha = false) {\n    this.variableNames = [\"x\", \"W\"];\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === \"channelsLast\";\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n    let activationSnippet = \"\", applyActivationSnippet = \"\";\n    if (activation2) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation2}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation2}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation2}\n          }\n        `;\n      }\n      applyActivationSnippet = `result = activation(result);`;\n    }\n    const addBiasSnippet = addBias ? \"result += getBiasAtOutCoords();\" : \"\";\n    if (addBias) {\n      this.variableNames.push(\"bias\");\n    }\n    if (hasPreluActivationWeights) {\n      this.variableNames.push(\"preluActivationWeights\");\n    }\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push(\"leakyreluAlpha\");\n    }\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n};\nvar Conv3DProgram = class {\n  constructor(convInfo) {\n    this.variableNames = [\"x\", \"W\"];\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js\nvar Im2ColPackedProgram = class {\n  constructor(outputShape, convInfo) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [\n      { name: \"inputShape\", type: \"ivec3\" },\n      { name: \"pad\", type: \"ivec2\" },\n      { name: \"stride\", type: \"ivec2\" },\n      { name: \"dilation\", type: \"ivec2\" },\n      { name: \"inChannels\", type: \"int\" },\n      { name: \"itemsPerBlockRow\", type: \"int\" },\n      { name: \"outWidth\", type: \"int\" }\n    ];\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const { dataFormat } = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === \"channelsLast\";\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n    const boundsCheckingSnippet = this.enableShapeUniforms ? \"if(blockIndex < outShape[1] && pos < outShape[0]) {\" : `if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {`;\n    let unrolled = ``;\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D_impl.js\nfunction conv2dByMatMul({ x, filter, convInfo, backend: backend2, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation: activation2 = null }) {\n  const xShape = x.shape;\n  const xTexData = backend2.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === \"channelsLast\";\n  const transposeA = false;\n  const transposeB = false;\n  let out;\n  const intermediates = [];\n  const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) && sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked && isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 && util_exports.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n  if (canOptimize) {\n    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n    const xReshaped = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util_exports.assert(isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);\n    const filterReshaped = reshape4({\n      inputs: { x: filter },\n      backend: backend2,\n      attrs: { shape: [1, convInfo.inChannels, convInfo.outChannels] }\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend: backend2,\n      transposeA,\n      transposeB,\n      bias,\n      activation: activation2,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n    const pointwiseConvTexData = backend2.texData.get(pointwiseConv.dataId);\n    util_exports.assert(pointwiseConvTexData.isPacked, () => \"batchMatMul result is expected to be packed\");\n    xTexData.shape = originalXTexDataShape;\n    pointwiseConvTexData.shape = convInfo.outShape;\n    out = identity3({ inputs: { x: pointwiseConv }, backend: backend2 });\n    out.shape = convInfo.outShape;\n    intermediates.push(pointwiseConv);\n  } else {\n    const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] : xShape[0] * xShape[2] * xShape[3];\n    const xReshaped = reshape4({\n      inputs: { x },\n      backend: backend2,\n      attrs: { shape: [1, targetShape, convInfo.inChannels] }\n    });\n    const filterReshaped = reshape4({\n      inputs: { x: filter },\n      backend: backend2,\n      attrs: { shape: [1, convInfo.inChannels, convInfo.outChannels] }\n    });\n    const result = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      transposeA,\n      transposeB,\n      backend: backend2,\n      bias,\n      activation: activation2,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n    out = reshape4({ inputs: { x: result }, backend: backend2, attrs: { shape: convInfo.outShape } });\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  }\n  for (const i of intermediates) {\n    backend2.disposeIntermediateTensorInfo(i);\n  }\n  return out;\n}\nfunction conv2dWithIm2Row({ x, filter, convInfo, backend: backend2, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation: activation2 = null }) {\n  const { filterWidth, filterHeight, inChannels, outWidth, outHeight, dataFormat } = convInfo;\n  const isChannelsLast = dataFormat === \"channelsLast\";\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n  const intermediates = [];\n  const xSqueezed = reshape4({ inputs: { x }, backend: backend2, attrs: { shape: x.shape.slice(1) } });\n  const w2Row = reshape4({\n    inputs: { x: filter },\n    backend: backend2,\n    attrs: { shape: [1, sharedDim, util_exports.sizeFromShape(filter.shape) / sharedDim] }\n  });\n  intermediates.push(xSqueezed);\n  intermediates.push(w2Row);\n  const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n  const customValues = [\n    xSqueezed.shape,\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inChannels],\n    [convInfo.filterWidth * convInfo.inChannels],\n    [convInfo.outWidth]\n  ];\n  const im2Col = backend2.runWebGLProgram(im2ColProgram, [xSqueezed], \"float32\", customValues);\n  const im2ColReshaped = reshape4({\n    inputs: { x: im2Col },\n    backend: backend2,\n    attrs: { shape: [1, x2ColShape[0], x2ColShape[1]] }\n  });\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation2 === \"leakyrelu\";\n  const fusedActivation = activation2 ? mapActivationToShaderProgram(activation2, true) : null;\n  const matmulProgram = new MatMulPackedProgram(im2ColReshaped.shape, w2Row.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs = [im2ColReshaped, w2Row];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend2.makeTensorInfo([], \"float32\", util_exports.createScalarValue(leakyreluAlpha, \"float32\"));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend2.runWebGLProgram(matmulProgram, inputs, \"float32\");\n  const outShape = isChannelsLast ? [1, outHeight, outWidth, convInfo.outChannels] : [1, convInfo.outChannels, outHeight, outWidth];\n  const out = reshape4({ inputs: { x: product }, backend: backend2, attrs: { shape: outShape } });\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend2.disposeIntermediateTensorInfo(i);\n  }\n  return out;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D.js\nfunction conv2d4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, filter } = inputs;\n  const { strides, pad: pad3, dataFormat, dilations, dimRoundingMode } = attrs;\n  const $dataFormat = backend_util_exports.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad3, dimRoundingMode, false, $dataFormat);\n  let out;\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === \"SAME\" || convInfo.padInfo.type === \"VALID\")) {\n    out = conv2dByMatMul({ x, filter, convInfo, backend: backend2 });\n  } else if (env().getBool(\"WEBGL_CONV_IM2COL\") && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({ x, filter, convInfo, backend: backend2 });\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend2.runWebGLProgram(program, [x, filter], \"float32\");\n  }\n  const outReshaped = reshape4({ inputs: { x: out }, backend: backend2, attrs: { shape: convInfo.outShape } });\n  backend2.disposeIntermediateTensorInfo(out);\n  return outReshaped;\n}\nvar conv2DConfig2 = {\n  kernelName: Conv2D,\n  backendName: \"webgl\",\n  kernelFunc: conv2d4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js\nvar Conv2DDerFilterProgram = class {\n  constructor(convInfo) {\n    this.variableNames = [\"x\", \"dy\"];\n    this.outputShape = convInfo.filterShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === \"channelsLast\";\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n};\nvar Conv2DDerInputProgram = class {\n  constructor(convInfo) {\n    this.variableNames = [\"dy\", \"W\"];\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === \"channelsLast\";\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n};\nvar Conv3DDerFilterProgram = class {\n  constructor(convInfo) {\n    this.variableNames = [\"x\", \"dy\"];\n    this.outputShape = convInfo.filterShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n};\nvar Conv3DDerInputProgram = class {\n  constructor(convInfo) {\n    this.variableNames = [\"dy\", \"W\"];\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropFilter.js\nfunction conv2DBackpropFilter3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, dy } = inputs;\n  const { strides, pad: pad3, dataFormat, dimRoundingMode, filterShape } = attrs;\n  const $dataFormat = backend_util_exports.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filterShape, strides, 1, pad3, dimRoundingMode, false, $dataFormat);\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend2.runWebGLProgram(program, [x, dy], \"float32\");\n}\nvar conv2DBackpropFilterConfig2 = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: \"webgl\",\n  kernelFunc: conv2DBackpropFilter3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropInput.js\nfunction conv2DBackpropInput3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, filter } = inputs;\n  const { inputShape, strides, pad: pad3, dataFormat, dimRoundingMode } = attrs;\n  const $dataFormat = backend_util_exports.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util_exports.computeConv2DInfo(inputShape, filter.shape, strides, 1, pad3, dimRoundingMode, false, $dataFormat);\n  const program = new Conv2DDerInputProgram(convInfo);\n  return backend2.runWebGLProgram(program, [dy, filter], \"float32\");\n}\nvar conv2DBackpropInputConfig2 = {\n  kernelName: Conv2DBackpropInput,\n  backendName: \"webgl\",\n  kernelFunc: conv2DBackpropInput3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3D.js\nfunction conv3D2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, filter } = inputs;\n  const { strides, pad: pad3, dilations } = attrs;\n  const convInfo = backend_util_exports.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad3);\n  const program = new Conv3DProgram(convInfo);\n  return backend2.runWebGLProgram(program, [x, filter], \"float32\");\n}\nvar conv3DConfig2 = {\n  kernelName: Conv3D,\n  backendName: \"webgl\",\n  kernelFunc: conv3D2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropFilterV2.js\nfunction conv3DBackpropFilterV22(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, dy } = inputs;\n  const { strides, pad: pad3, filterShape } = attrs;\n  const convInfo = backend_util_exports.computeConv3DInfo(x.shape, filterShape, strides, 1, pad3);\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend2.runWebGLProgram(program, [x, dy], \"float32\");\n}\nvar conv3DBackpropFilterV2Config2 = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: \"webgl\",\n  kernelFunc: conv3DBackpropFilterV22\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropInputV2.js\nfunction conv3DBackpropInput2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, filter } = inputs;\n  const { pad: pad3, strides, inputShape } = attrs;\n  const convInfo = backend_util_exports.computeConv3DInfo(inputShape, filter.shape, strides, 1, pad3);\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend2.runWebGLProgram(program, [dy, filter], \"float32\");\n}\nvar conv3DBackpropInputConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: \"webgl\",\n  kernelFunc: conv3DBackpropInput2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cos.js\nvar COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\nvar cos3 = unaryKernelFunc2({ opSnippet: COS });\nvar cosConfig2 = {\n  kernelName: Cos,\n  backendName: \"webgl\",\n  kernelFunc: cos3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cosh.js\nvar COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\nvar cosh3 = unaryKernelFunc2({ opSnippet: COSH });\nvar coshConfig2 = {\n  kernelName: Cosh,\n  backendName: \"webgl\",\n  kernelFunc: cosh3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js\nvar CropAndResizeProgram = class {\n  constructor(imageShape, boxShape, cropSize, method, extrapolationValue) {\n    this.variableNames = [\"Image\", \"Boxes\", \"BoxInd\"];\n    this.outputShape = [];\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === \"bilinear\" ? 1 : 0;\n    const [inputHeightFloat, inputWidthFloat] = [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ? [\n      `${(imageHeight - 1) / (cropHeight - 1)}`,\n      \"(y2-y1) * height_ratio\",\n      `y1*${inputHeightFloat} + float(y)*(height_scale)`\n    ] : [\n      \"0.0\",\n      \"0.0\",\n      `0.5 * (y1+y2) * ${inputHeightFloat}`\n    ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ? [\n      `${(imageWidth - 1) / (cropWidth - 1)}`,\n      \"(x2-x1) * width_ratio\",\n      `x1*${inputWidthFloat} + float(x)*(width_scale)`\n    ] : [\n      \"0.0\",\n      \"0.0\",\n      `0.5 * (x1+x2) * ${inputWidthFloat}`\n    ];\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/CropAndResize.js\nvar cropAndResize3 = (args) => {\n  const { inputs, backend: backend2, attrs } = args;\n  const { image: image2, boxes, boxInd } = inputs;\n  const { cropSize, method, extrapolationValue } = attrs;\n  const program = new CropAndResizeProgram(image2.shape, boxes.shape, cropSize, method, extrapolationValue);\n  return backend2.runWebGLProgram(program, [image2, boxes, boxInd], \"float32\");\n};\nvar cropAndResizeConfig2 = {\n  kernelName: CropAndResize,\n  backendName: \"webgl\",\n  kernelFunc: cropAndResize3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/cumsum_gpu.js\nvar CumSumProgram = class {\n  constructor(shape, exclusive, reverse5) {\n    this.variableNames = [\"x\"];\n    this.customUniforms = [{ name: \"index\", type: \"float\" }];\n    this.outputShape = shape;\n    const rank = shape.length;\n    const val = exclusive ? \"0.0\" : `getX(${getCoords2(rank, \"coords\")})`;\n    const length = shape[shape.length - 1];\n    let condition = \"\";\n    let idxString = \"\";\n    if (exclusive) {\n      condition = reverse5 ? `end != ${length - 1}` : \"end != 0\";\n      idxString = reverse5 ? \"end + 1\" : \"end - 1\";\n    } else {\n      condition = reverse5 ? `end + pow2 < ${length}` : \"end >= pow2\";\n      idxString = reverse5 ? \"end + pow2\" : \"end - pow2\";\n    }\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, \"coords\")};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, \"coords\")} = idx;\n          val += getX(${getCoords2(rank, \"coords\")});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n};\nfunction getCoords2(rank, name) {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\nfunction getFinalCoord(rank, name) {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cumsum.js\nfunction cumsum3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, exclusive, reverse: reverse5 } = attrs;\n  const xRank = x.shape.length;\n  const permutation = backend_util_exports.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose3({ inputs: { x }, backend: backend2, attrs: { perm: permutation } });\n  }\n  const permutedAxis = backend_util_exports.getInnerMostAxes(1, xRank)[0];\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.shape.length - 1} but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity3({ inputs: { x: permutedX }, backend: backend2 });\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumSumProgram(permutedX.shape, false, reverse5);\n    const customValues = [[i]];\n    const prevResult = result;\n    result = backend2.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend2.disposeIntermediateTensorInfo(prevResult);\n  }\n  if (exclusive) {\n    const program = new CumSumProgram(permutedX.shape, exclusive, reverse5);\n    const prevResult = result;\n    result = backend2.runWebGLProgram(program, [result], result.dtype);\n    backend2.disposeIntermediateTensorInfo(prevResult);\n  }\n  if (permutation != null) {\n    const reversePermutation = backend_util_exports.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose3({ inputs: { x: result }, backend: backend2, attrs: { perm: reversePermutation } });\n    backend2.disposeIntermediateTensorInfo(result);\n    backend2.disposeIntermediateTensorInfo(permutedX);\n    return reverseTransposedResult;\n  }\n  return result;\n}\nvar cumsumConfig2 = {\n  kernelName: Cumsum,\n  backendName: \"webgl\",\n  kernelFunc: cumsum3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DenseBincount.js\nfunction denseBincount3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, weights } = inputs;\n  const { size, binaryOutput } = attrs;\n  if (x.shape.length === 1) {\n    const xVals = backend2.readSync(x.dataId);\n    const weightsVals = backend2.readSync(weights.dataId);\n    const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend2.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend2.bufferSync(x);\n    const weightsBuf = backend2.bufferSync(weights);\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n    return backend2.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${x.shape.length}.`);\n}\nvar denseBincountConfig2 = {\n  kernelName: DenseBincount,\n  backendName: \"webgl\",\n  kernelFunc: denseBincount3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js\nvar DepthToSpaceProgram = class {\n  constructor(outputShape, blockSize, dataFormat) {\n    this.variableNames = [\"x\"];\n    this.outputShape = [];\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n  getHeightCoordString() {\n    if (this.dataFormat === \"NHWC\") {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n  getWidthCoordString() {\n    if (this.dataFormat === \"NHWC\") {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n  getDepthCoordString() {\n    if (this.dataFormat === \"NHWC\") {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n  getOutputDepthSize() {\n    if (this.dataFormat === \"NHWC\") {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n  getInputSamplingString() {\n    if (this.dataFormat === \"NHWC\") {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthToSpace.js\nfunction depthToSpace3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { blockSize, dataFormat } = attrs;\n  const batchSize = x.shape[0];\n  const inputHeight = dataFormat === \"NHWC\" ? x.shape[1] : x.shape[2];\n  const inputWidth = dataFormat === \"NHWC\" ? x.shape[2] : x.shape[3];\n  const inputDepth = dataFormat === \"NHWC\" ? x.shape[3] : x.shape[1];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const outputShape = dataFormat === \"NHWC\" ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend2.runWebGLProgram(program, [x], x.dtype);\n}\nvar depthToSpaceConfig2 = {\n  kernelName: DepthToSpace,\n  backendName: \"webgl\",\n  kernelFunc: depthToSpace3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js\nvar DepthwiseConv2DProgram = class {\n  constructor(convInfo, addBias = false, activation2 = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n    this.variableNames = [\"x\", \"W\"];\n    this.customUniforms = [\n      { name: \"pads\", type: \"ivec2\" },\n      { name: \"strides\", type: \"ivec2\" },\n      { name: \"dilations\", type: \"ivec2\" },\n      { name: \"inDims\", type: \"ivec2\" }\n    ];\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    let activationSnippet = \"\", applyActivationSnippet = \"\";\n    if (activation2) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation2}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation2}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation2}\n          }\n        `;\n      }\n      applyActivationSnippet = `result = activation(result);`;\n    }\n    const addBiasSnippet = addBias ? \"result += getBiasAtOutCoords();\" : \"\";\n    if (addBias) {\n      this.variableNames.push(\"bias\");\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push(\"preluActivationWeights\");\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push(\"leakyreluAlpha\");\n    }\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js\nvar DepthwiseConvPacked2DProgram = class {\n  constructor(convInfo, addBias = false, activation2 = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n    this.variableNames = [\"x\", \"W\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [\n      { name: \"pads\", type: \"ivec2\" },\n      { name: \"strides\", type: \"ivec2\" },\n      { name: \"dilations\", type: \"ivec2\" },\n      { name: \"inDims\", type: \"ivec2\" }\n    ];\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n    mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n    }\n    mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n      mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${colIndex}.xy);\n                `;\n            } else {\n              mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n            }\n          } else {\n            mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n          }\n          if (colIndex + 1 < filterWidth) {\n            const nextTexelOffset = padLeft % 2 === 0 ? util_exports.nearestLargerEven(dilationWidth) : dilationWidth;\n            if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {\n              mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n              if (dilationWidth > 1) {\n                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                      xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${colIndex}Ready = 1;\n                    }\n                    `;\n              }\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.xy);\n                  `;\n            } else {\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n              } else {\n                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n              }\n            }\n          }\n        }\n      } else {\n        if (colIndex < filterWidth) {\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n              `;\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n            }\n          } else {\n            mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n                `;\n            }\n          }\n        }\n      }\n      if (colIndex < filterWidth) {\n        mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n        }\n      }\n    }\n    mainLoop += `\n    }\n  `;\n    mainLoop += `\n      }\n    `;\n    let activationSnippet = \"\", applyActivationSnippet = \"\";\n    if (activation2) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation2}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation2}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation2}\n        }`;\n      }\n      applyActivationSnippet = `result = activation(result);`;\n    }\n    const addBiasSnippet = addBias ? \"result += getBiasAtOutCoords();\" : \"\";\n    if (addBias) {\n      this.variableNames.push(\"bias\");\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push(\"preluActivationWeights\");\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push(\"leakyreluAlpha\");\n    }\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNative.js\nfunction depthwiseConv2dNative2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, filter } = inputs;\n  const { strides, pad: pad3, dilations, dimRoundingMode } = attrs;\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  util_exports.assert(backend_util_exports.eitherStridesOrDilationsAreOne(strides, $dilations), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${strides} and dilations '${$dilations}'`);\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad3, dimRoundingMode, true);\n  let program;\n  if (env().getBool(\"WEBGL_PACK_DEPTHWISECONV\") && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  return backend2.runWebGLProgram(program, [x, filter], \"float32\", customValues);\n}\nvar depthwiseConv2dNativeConfig2 = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: \"webgl\",\n  kernelFunc: depthwiseConv2dNative2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js\nvar DepthwiseConv2DDerFilterProgram = class {\n  constructor(convInfo) {\n    this.variableNames = [\"x\", \"dy\"];\n    this.outputShape = convInfo.filterShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n};\nvar DepthwiseConv2DDerInputProgram = class {\n  constructor(convInfo) {\n    this.variableNames = [\"dy\", \"W\"];\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js\nfunction depthwiseConv2dNativeBackpropFilter3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, dy } = inputs;\n  const { strides, dilations, pad: pad3, dimRoundingMode, filterShape } = attrs;\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad3, dimRoundingMode, true);\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend2.runWebGLProgram(program, [x, dy], \"float32\");\n}\nvar depthwiseConv2dNativeBackpropFilterConfig2 = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: \"webgl\",\n  kernelFunc: depthwiseConv2dNativeBackpropFilter3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropInput.js\nfunction depthwiseConv2dNativeBackpropInput3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, filter } = inputs;\n  const { strides, dilations, pad: pad3, dimRoundingMode, inputShape } = attrs;\n  const convInfo = backend_util_exports.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad3, dimRoundingMode, true);\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend2.runWebGLProgram(program, [dy, filter], \"float32\");\n}\nvar depthwiseConv2dNativeBackpropInputConfig2 = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: \"webgl\",\n  kernelFunc: depthwiseConv2dNativeBackpropInput3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js\nvar DiagProgram = class {\n  constructor(size) {\n    this.variableNames = [\"X\"];\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Diag.js\nfunction diag3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x } = inputs;\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util_exports.sizeFromShape(x.shape);\n  const flat = reshape4({ inputs: { x }, backend: backend2, attrs: { shape: [xSize] } });\n  const program = new DiagProgram(xSize);\n  const res = backend2.runWebGLProgram(program, [flat], flat.dtype);\n  const out = reshape4({ inputs: { x: res }, backend: backend2, attrs: { shape: outShape } });\n  backend2.disposeIntermediateTensorInfo(flat);\n  backend2.disposeIntermediateTensorInfo(res);\n  return out;\n}\nvar diagConfig2 = {\n  kernelName: Diag,\n  backendName: \"webgl\",\n  kernelFunc: diag3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/dilation_gpu.js\nvar Dilation2DProgram = class {\n  constructor(convInfo) {\n    this.variableNames = [\"x\", \"W\"];\n    this.outputShape = convInfo.outShape;\n    const { inHeight, inWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth } = convInfo;\n    const { top: padTop, left: padLeft } = padInfo;\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Dilation2D.js\nfunction dilation2D(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, filter } = inputs;\n  const { strides, pad: pad3, dilations } = attrs;\n  const convInfo = backend_util_exports.computeDilation2DInfo(x.shape, filter.shape, strides, pad3, \"NHWC\", dilations);\n  let out;\n  const program = new Dilation2DProgram(convInfo);\n  out = backend2.runWebGLProgram(program, [x, filter], \"float32\");\n  const outReshaped = reshape4({ inputs: { x: out }, backend: backend2, attrs: { shape: convInfo.outShape } });\n  backend2.disposeIntermediateTensorInfo(out);\n  return outReshaped;\n}\nvar dilation2DConfig2 = {\n  kernelName: Dilation2D,\n  backendName: \"webgl\",\n  kernelFunc: dilation2D\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Einsum.js\nfunction einsum3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { equation } = attrs;\n  const tensors = inputs;\n  const { allDims, summedDims, idDims } = backend_util_exports.decodeEinsumEquation(equation, tensors.length);\n  backend_util_exports.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const { path, steps } = backend_util_exports.getEinsumComputePath(summedDims, idDims);\n  const nSteps = steps.length;\n  let out = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const { permutationIndices: perm, expandDims: dimsToExpand } = backend_util_exports.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x;\n      if (backend_util_exports.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose3({ inputs: { x: tensors[idTerm] }, backend: backend2, attrs: { perm } });\n        tensorsToDispose.push(x);\n      }\n      const targetShape = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n      if (!util_exports.arraysEqual(x.shape, targetShape)) {\n        x = reshape4({ inputs: { x }, backend: backend2, attrs: { shape: targetShape } });\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        out = multiply3({ inputs: { a: x, b: out }, backend: backend2 });\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum4({\n          inputs: { x: out },\n          backend: backend2,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend2.disposeIntermediateTensorInfo(tensorInfo);\n  }\n  return out;\n}\nvar einsumConfig2 = {\n  kernelName: Einsum,\n  backendName: \"webgl\",\n  kernelFunc: einsum3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Elu.js\nvar ELU4 = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nvar ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\nvar elu5 = unaryKernelFunc2({ opSnippet: ELU4, packedOpSnippet: ELU_PACKED });\nvar eluConfig2 = {\n  kernelName: Elu,\n  backendName: \"webgl\",\n  kernelFunc: elu5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/EluGrad.js\nvar ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nvar ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nvar eluGrad2 = (args) => {\n  const { inputs, backend: backend2 } = args;\n  const { dy, y } = inputs;\n  const program = env().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) : new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n  return backend2.runWebGLProgram(program, [dy, y], dy.dtype);\n};\nvar eluGradConfig3 = {\n  kernelName: EluGrad,\n  backendName: \"webgl\",\n  kernelFunc: eluGrad2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Equal.js\nvar PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\nvar EQUAL = `return float(a == b);`;\nvar equal3 = binaryKernelFunc2({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: \"bool\",\n  cpuKernelImpl: equalImplCPU\n});\nvar equalConfig2 = {\n  kernelName: Equal,\n  backendName: \"webgl\",\n  kernelFunc: equal3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Erf.js\nvar ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util_exports.ERF_P};\n  float a1 = ${backend_util_exports.ERF_A1};\n  float a2 = ${backend_util_exports.ERF_A2};\n  float a3 = ${backend_util_exports.ERF_A3};\n  float a4 = ${backend_util_exports.ERF_A4};\n  float a5 = ${backend_util_exports.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\nvar erf3 = unaryKernelFunc2({ opSnippet: ERF });\nvar erfConfig2 = {\n  kernelName: Erf,\n  backendName: \"webgl\",\n  kernelFunc: erf3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Exp.js\nvar EXP = CHECK_NAN_SNIPPET_UNARY + `\n  return exp(x);\n`;\nvar EXP_PACKED = `\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nvar exp3 = unaryKernelFunc2({\n  opSnippet: EXP,\n  packedOpSnippet: EXP_PACKED,\n  cpuKernelImpl: expImplCPU,\n  dtype: \"float32\"\n});\nvar expConfig2 = {\n  kernelName: Exp,\n  backendName: \"webgl\",\n  kernelFunc: exp3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ExpandDims.js\nfunction expandDims4(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const { dim } = attrs;\n  const { input: input2 } = inputs;\n  const inputRank = input2.shape.length;\n  const newShape = input2.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    util_exports.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n  return reshape4({ inputs: { x: input2 }, backend: backend2, attrs: { shape: newShape } });\n}\nvar expandDimsConfig2 = {\n  kernelName: ExpandDims,\n  backendName: \"webgl\",\n  kernelFunc: expandDims4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Expm1.js\nvar EXPM1 = `return exp(x) - 1.0;`;\nvar expm13 = unaryKernelFunc2({ opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU });\nvar expm1Config2 = {\n  kernelName: Expm1,\n  backendName: \"webgl\",\n  kernelFunc: expm13\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js\nvar FFTProgram = class {\n  constructor(component, inputShape, inverse) {\n    this.variableNames = [\"real\", \"imag\"];\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n    const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : \"1.0\";\n    let opString;\n    if (component === \"real\") {\n      opString = \"return real * expR - imag * expI;\";\n    } else if (component === \"imag\") {\n      opString = \"return real * expI + imag * expR;\";\n    } else {\n      throw new Error(`FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT_impl.js\nfunction fftImpl2(x, inverse, backend2) {\n  const xData = backend2.texData.get(x.dataId);\n  const inputSize = util_exports.sizeFromShape(x.shape);\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n  const input2D = reshape4({ inputs: { x }, backend: backend2, attrs: { shape: [batch, innerDimensionSize] } });\n  const xShape = input2D.shape;\n  const realProgram = new FFTProgram(\"real\", xShape, inverse);\n  const imagProgram = new FFTProgram(\"imag\", xShape, inverse);\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n  const realPart = backend2.runWebGLProgram(realProgram, inputs, \"float32\");\n  const imagPart = backend2.runWebGLProgram(imagProgram, inputs, \"float32\");\n  const complexOutput = complex3({ inputs: { real: realPart, imag: imagPart }, backend: backend2 });\n  backend2.disposeIntermediateTensorInfo(realPart);\n  backend2.disposeIntermediateTensorInfo(imagPart);\n  const complexOutputReshaped = reshape4({ inputs: { x: complexOutput }, backend: backend2, attrs: { shape: x.shape } });\n  backend2.disposeIntermediateTensorInfo(input2D);\n  backend2.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT.js\nfunction fft3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { input: input2 } = inputs;\n  return fftImpl2(input2, false, backend2);\n}\nvar fftConfig2 = {\n  kernelName: FFT,\n  backendName: \"webgl\",\n  kernelFunc: fft3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js\nvar FillProgram = class {\n  constructor(shape, value) {\n    this.outputShape = [];\n    this.customUniforms = [{ name: \"value\", type: \"float\" }];\n    this.variableNames = [\"x\"];\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Fill.js\nfunction fill3(args) {\n  const { backend: backend2, attrs } = args;\n  const { shape, value } = attrs;\n  let { dtype } = attrs;\n  dtype = dtype || util_exports.inferDtype(value);\n  if (dtype === \"string\") {\n    const values = util_exports.getArrayFromDType(dtype, util_exports.sizeFromShape(shape));\n    values.fill(value);\n    return backend2.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value);\n    const customValues = [[value]];\n    return backend2.runWebGLProgram(program, [], dtype, customValues);\n  }\n}\nvar fillConfig2 = {\n  kernelName: Fill,\n  backendName: \"webgl\",\n  kernelFunc: fill3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/flip_left_right_gpu.js\nvar FlipLeftRightProgram = class {\n  constructor(imageShape) {\n    this.variableNames = [\"Image\"];\n    this.outputShape = [];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FlipLeftRight.js\nvar flipLeftRightConfig2 = {\n  kernelName: FlipLeftRight,\n  backendName: \"webgl\",\n  kernelFunc: ({ inputs, backend: backend2 }) => {\n    const { image: image2 } = inputs;\n    const webglBackend = backend2;\n    const program = new FlipLeftRightProgram(image2.shape);\n    const output = webglBackend.runWebGLProgram(program, [image2], image2.dtype);\n    return output;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Floor.js\nvar FLOOR = `return floor(x);`;\nvar floor3 = unaryKernelFunc2({ opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU });\nvar floorConfig2 = {\n  kernelName: Floor,\n  backendName: \"webgl\",\n  kernelFunc: floor3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FloorDiv.js\nvar INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\nvar INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\nvar floorDiv3 = binaryKernelFunc2({ opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: \"int32\" });\nvar floorDivConfig2 = {\n  kernelName: FloorDiv,\n  backendName: \"webgl\",\n  kernelFunc: floorDiv3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js\nvar FromPixelsProgram = class {\n  constructor(outputShape) {\n    this.variableNames = [\"A\"];\n    const glsl = getGlslDifferences();\n    const [height, width] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js\nvar FromPixelsPackedProgram = class {\n  constructor(outputShape) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    const glsl = getGlslDifferences();\n    const [height, width] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js\nvar fromPixelsConfig = {\n  kernelName: FromPixels,\n  backendName: \"webgl\",\n  kernelFunc: fromPixels2\n};\nvar fromPixels2DContext2;\nfunction fromPixels2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  let { pixels } = inputs;\n  const { numChannels } = attrs;\n  const isVideo = typeof HTMLVideoElement !== \"undefined\" && pixels instanceof HTMLVideoElement;\n  const isImage = typeof HTMLImageElement !== \"undefined\" && pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ? [\n    pixels.videoWidth,\n    pixels.videoHeight\n  ] : [pixels.width, pixels.height];\n  const texShape = [height, width];\n  const outShape = [height, width, numChannels];\n  if (isImage || isVideo) {\n    if (fromPixels2DContext2 == null) {\n      fromPixels2DContext2 = document.createElement(\"canvas\").getContext(\"2d\");\n    }\n    fromPixels2DContext2.canvas.width = width;\n    fromPixels2DContext2.canvas.height = height;\n    fromPixels2DContext2.drawImage(pixels, 0, 0, width, height);\n    pixels = fromPixels2DContext2.canvas;\n  }\n  const tempPixelHandle = backend2.makeTensorInfo(texShape, \"int32\");\n  backend2.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend2.gpgpu.uploadPixelDataToTexture(backend2.getTexture(tempPixelHandle.dataId), pixels);\n  const program = env().getBool(\"WEBGL_PACK\") ? new FromPixelsPackedProgram(outShape) : new FromPixelsProgram(outShape);\n  const res = backend2.runWebGLProgram(program, [tempPixelHandle], \"int32\");\n  backend2.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedConv2D.js\nfunction fusedConv2d(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, filter, bias, preluActivationWeights } = inputs;\n  const { strides, pad: pad3, dataFormat, dilations, dimRoundingMode, activation: activation2, leakyreluAlpha } = attrs;\n  const $dataFormat = backend_util_exports.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad3, dimRoundingMode, false, $dataFormat);\n  let out;\n  const intermediates = [];\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === \"SAME\" || convInfo.padInfo.type === \"VALID\")) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend: backend2,\n      bias,\n      activation: activation2,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool(\"WEBGL_CONV_IM2COL\") && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend: backend2,\n      bias,\n      activation: activation2,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation2 === \"leakyrelu\";\n    const fusedActivation = activation2 ? mapActivationToShaderProgram(activation2, false) : null;\n    const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs2 = [x, filter];\n    if (bias) {\n      inputs2.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs2.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend2.makeTensorInfo([], \"float32\", util_exports.createScalarValue(leakyreluAlpha, \"float32\"));\n      inputs2.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend2.runWebGLProgram(program, inputs2, \"float32\");\n  }\n  const outReshaped = reshape4({ inputs: { x: out }, backend: backend2, attrs: { shape: convInfo.outShape } });\n  intermediates.push(out);\n  intermediates.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return outReshaped;\n}\nvar fusedConv2DConfig2 = {\n  kernelName: FusedConv2D,\n  backendName: \"webgl\",\n  kernelFunc: fusedConv2d\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedDepthwiseConv2D.js\nfunction fusedDepthwiseConv2D2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, filter, bias, preluActivationWeights } = inputs;\n  const { strides, pad: pad3, dilations, dimRoundingMode, activation: activation2, leakyreluAlpha } = attrs;\n  const intermediates = [];\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  util_exports.assert(backend_util_exports.eitherStridesOrDilationsAreOne(strides, $dilations), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${strides} and dilations '${$dilations}'`);\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad3, dimRoundingMode, true);\n  const shouldPackDepthwiseConv = env().getBool(\"WEBGL_PACK_DEPTHWISECONV\") && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation2 ? mapActivationToShaderProgram(activation2, shouldPackDepthwiseConv) : null;\n  const programInputs = [x, filter];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation2 === \"leakyrelu\";\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend2.makeTensorInfo([], \"float32\", util_exports.createScalarValue(leakyreluAlpha, \"float32\"));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  let program;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  const result = backend2.runWebGLProgram(program, programInputs, \"float32\", customValues);\n  intermediates.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return result;\n}\nvar fusedDepthwiseConv2DConfig2 = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: \"webgl\",\n  kernelFunc: fusedDepthwiseConv2D2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js\nvar GatherNDProgram = class {\n  constructor(sliceDim, strides, shape) {\n    this.sliceDim = sliceDim;\n    this.strides = strides;\n    this.variableNames = [\"x\", \"indices\"];\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? \"strides[j]\" : \"strides\";\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherNd.js\nfunction gatherNd2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { params, indices } = inputs;\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util_exports.sizeFromShape(params.shape);\n  const [resultShape, numSlices, sliceSize, strides] = backend_util_exports.prepareAndValidate(params, indices);\n  const flattenIndices = reshape4({ inputs: { x: indices }, backend: backend2, attrs: { shape: [numSlices, sliceRank] } });\n  const flattenX = reshape4({\n    inputs: { x: params },\n    backend: backend2,\n    attrs: { shape: [util_exports.sizeFromShape(params.shape) / sliceSize, sliceSize] }\n  });\n  if (backend2.shouldExecuteOnCPU([params, indices]) || params.dtype === \"string\") {\n    const indicesData = backend2.readSync(indices.dataId);\n    const paramsBuf = backend2.bufferSync(params);\n    const outValue = gatherNdImplCPU(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n    return backend2.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n  const res = backend2.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);\n  const reshaped = reshape4({ inputs: { x: res }, backend: backend2, attrs: { shape: resultShape } });\n  backend2.disposeIntermediateTensorInfo(flattenIndices);\n  backend2.disposeIntermediateTensorInfo(flattenX);\n  backend2.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nvar gatherNdConfig2 = {\n  kernelName: GatherNd,\n  backendName: \"webgl\",\n  kernelFunc: gatherNd2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js\nvar GatherProgram = class {\n  constructor(aShape, outputShape) {\n    this.variableNames = [\"A\", \"indices\"];\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords2(aShape, 2);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n  }\n};\nfunction getSourceCoords2(aShape, axis) {\n  const currentCoords = [\"resRC.x\", \"resRC.y\", \"resRC.z\", \"resRC.w\"];\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push(\"index\");\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherV2.js\nfunction gatherV22(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, indices } = inputs;\n  const { axis, batchDims } = attrs;\n  const parsedAxis = util_exports.parseAxisParam(axis, x.shape)[0];\n  if (env().get(\"DEBUG\")) {\n    const indicesVals = backend2.readSync(indices.dataId);\n    const axisDim = x.shape[parsedAxis];\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util_exports.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n  const shapeInfo = backend_util_exports.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n  const indicesSize = util_exports.sizeFromShape(indices.shape);\n  const toDispose = [];\n  const flattenX = reshape4({\n    inputs: { x },\n    backend: backend2,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize,\n        shapeInfo.outerSize,\n        shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n  const flattenIndex = reshape4({\n    inputs: { x: indices },\n    backend: backend2,\n    attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] }\n  });\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n  const flattenOutputShape = [\n    shapeInfo.batchSize,\n    shapeInfo.outerSize,\n    indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n  if (backend2.shouldExecuteOnCPU([x, indices]) || x.dtype === \"string\") {\n    const indicesBuf = backend2.bufferSync(flattenIndex);\n    const xBuf = backend2.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n    toDispose.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n    return backend2.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend2.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n  const reshaped = reshape4({ inputs: { x: res }, backend: backend2, attrs: { shape: shapeInfo.outputShape } });\n  toDispose.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\nvar gatherV2Config2 = {\n  kernelName: GatherV2,\n  backendName: \"webgl\",\n  kernelFunc: gatherV22\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Greater.js\nvar GREATER = `return float(a > b);`;\nvar GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\nvar greater4 = binaryKernelFunc2({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: \"bool\"\n});\nvar greaterConfig2 = {\n  kernelName: Greater,\n  backendName: \"webgl\",\n  kernelFunc: greater4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GreaterEqual.js\nvar GREATER_EQUAL = `return float(a >= b);`;\nvar GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\nvar greaterEqual3 = binaryKernelFunc2({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: \"bool\",\n  cpuKernelImpl: greaterEqualImplCPU\n});\nvar greaterEqualConfig2 = {\n  kernelName: GreaterEqual,\n  backendName: \"webgl\",\n  kernelFunc: greaterEqual3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IFFT.js\nfunction ifft3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { input: input2 } = inputs;\n  return fftImpl2(input2, true, backend2);\n}\nvar ifftConfig2 = {\n  kernelName: IFFT,\n  backendName: \"webgl\",\n  kernelFunc: ifft3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsFinite.js\nvar IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\nvar isFinite4 = unaryKernelFunc2({ opSnippet: IS_FINITE, dtype: \"bool\" });\nvar isFiniteConfig2 = {\n  kernelName: IsFinite,\n  backendName: \"webgl\",\n  kernelFunc: isFinite4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsInf.js\nvar IS_INF = `return float(isinf(x));`;\nvar isInf3 = unaryKernelFunc2({ opSnippet: IS_INF, dtype: \"bool\" });\nvar isInfConfig2 = {\n  kernelName: IsInf,\n  backendName: \"webgl\",\n  kernelFunc: isInf3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsNaN.js\nvar IS_NAN = `return float(isnan(x));`;\nvar isNaN4 = unaryKernelFunc2({ opSnippet: IS_NAN, dtype: \"bool\" });\nvar isNaNConfig2 = {\n  kernelName: IsNan,\n  backendName: \"webgl\",\n  kernelFunc: isNaN4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Less.js\nvar LESS = `return float(a < b);`;\nvar LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\nvar less4 = binaryKernelFunc2({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: \"bool\"\n});\nvar lessConfig2 = {\n  kernelName: Less,\n  backendName: \"webgl\",\n  kernelFunc: less4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LessEqual.js\nvar LESS_EQUAL = `return float(a <= b);`;\nvar LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\nvar lessEqual3 = binaryKernelFunc2({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: \"bool\"\n});\nvar lessEqualConfig2 = {\n  kernelName: LessEqual,\n  backendName: \"webgl\",\n  kernelFunc: lessEqual3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LinSpace.js\nfunction linSpace2(args) {\n  const { backend: backend2, attrs } = args;\n  const { start, stop, num } = attrs;\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend2.makeTensorInfo([outVals.length], \"float32\", outVals);\n}\nvar linSpaceConfig2 = {\n  kernelName: LinSpace,\n  backendName: \"webgl\",\n  kernelFunc: linSpace2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log.js\nvar LOG = CHECK_NAN_SNIPPET_UNARY + `\n  return x < 0.0 ? 0./0. : log(x);\n`;\nvar LOG_PACKED = `\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n`;\nvar log4 = unaryKernelFunc2({ opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU });\nvar logConfig2 = {\n  kernelName: Log,\n  backendName: \"webgl\",\n  kernelFunc: log4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log1p.js\nvar LOG1P = CHECK_NAN_SNIPPET_UNARY + `\n  return log(1.0 + x);\n`;\nvar log1p3 = unaryKernelFunc2({ opSnippet: LOG1P });\nvar log1pConfig2 = {\n  kernelName: Log1p,\n  backendName: \"webgl\",\n  kernelFunc: log1p3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalAnd.js\nvar LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nvar LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\nvar logicalAnd3 = binaryKernelFunc2({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: \"bool\"\n});\nvar logicalAndConfig2 = {\n  kernelName: LogicalAnd,\n  backendName: \"webgl\",\n  kernelFunc: logicalAnd3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalNot.js\nvar LOGICAL_NOT = `return float(!(x >= 1.0));`;\nvar logicalNot3 = unaryKernelFunc2({ opSnippet: LOGICAL_NOT });\nvar logicalNotConfig2 = {\n  kernelName: LogicalNot,\n  backendName: \"webgl\",\n  kernelFunc: logicalNot3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalOr.js\nvar LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nvar LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\nvar logicalOr3 = binaryKernelFunc2({ opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: \"bool\" });\nvar logicalOrConfig2 = {\n  kernelName: LogicalOr,\n  backendName: \"webgl\",\n  kernelFunc: logicalOr3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js\nvar LRNProgram = class {\n  constructor(xShape, radius, bias, alpha, beta) {\n    this.variableNames = [\"x\"];\n    this.outputShape = [];\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js\nvar LRNPackedProgram = class {\n  constructor(xShape, radius, bias, alpha, beta) {\n    this.variableNames = [\"x\"];\n    this.outputShape = [];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRN.js\nvar lrn = (args) => {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { depthRadius, bias, alpha, beta } = attrs;\n  const program = env().getBool(\"WEBGL_PACK_NORMALIZATION\") ? new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) : new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend2.runWebGLProgram(program, [x], x.dtype);\n};\nvar LRNConfig2 = {\n  kernelName: LRN,\n  backendName: \"webgl\",\n  kernelFunc: lrn\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js\nvar LRNGradProgram = class {\n  constructor(inputShape, depthRadius, bias, alpha, beta) {\n    this.variableNames = [\"inputImage\", \"outputImage\", \"dy\"];\n    this.outputShape = [];\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRNGrad.js\nvar lrnGrad = (args) => {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, y, dy } = inputs;\n  const { depthRadius, bias, alpha, beta } = attrs;\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend2.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\nvar LRNGradConfig2 = {\n  kernelName: LRNGrad,\n  backendName: \"webgl\",\n  kernelFunc: lrnGrad\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js\nfunction maxImpl2(x, reduceShape, outShape, backend2) {\n  const inSize = util_exports.sizeFromShape(reduceShape);\n  const xSize = util_exports.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape4({ inputs: { x }, attrs: { shape: [batchSize, inSize] }, backend: backend2 });\n  const reduced = reduce(reshapedInput, x.dtype, \"max\", backend2);\n  const reshapedOutput = reshape4({ inputs: { x: reduced }, attrs: { shape: outShape }, backend: backend2 });\n  backend2.disposeIntermediateTensorInfo(reshapedInput);\n  backend2.disposeIntermediateTensorInfo(reduced);\n  return reshapedOutput;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js\nfunction max4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { reductionIndices, keepDims } = attrs;\n  const xRank = x.shape.length;\n  const origAxes = util_exports.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend2.shouldExecuteOnCPU([x]);\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend2.texData.get(maxInput.dataId);\n      const values = xTexData.values;\n      const newShape = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n      maxInput = backend2.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend2.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl2(x, permutedAxes, backend2);\n    }\n    axes = backend_util_exports.getInnerMostAxes(axes.length, xRank);\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"max\", axes, xRank);\n  const [maxOutShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(maxInput.shape, axes);\n  let outShape = maxOutShape;\n  if (keepDims) {\n    outShape = backend_util_exports.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend2.texData.get(maxInput.dataId);\n    const values = xTexData.values;\n    const outValues = maxImplCPU(values, util_exports.sizeFromShape(reduceShape), outShape, x.dtype);\n    out = backend2.makeTensorInfo(outShape, x.dtype);\n    const outData = backend2.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl2(maxInput, reduceShape, outShape, backend2);\n  }\n  if (maxInputIsTransposed) {\n    backend2.disposeIntermediateTensorInfo(maxInput);\n  }\n  return out;\n}\nvar maxConfig2 = {\n  kernelName: Max,\n  backendName: \"webgl\",\n  kernelFunc: max4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Maximum.js\nvar MAXIMUM = CHECK_NAN_SNIPPET2 + `\n  return max(a, b);\n`;\nvar MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` + CHECK_NAN_SNIPPET3 + `\n  return result;\n`;\nvar maximum4 = binaryKernelFunc2({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\nvar maximumConfig2 = {\n  kernelName: Maximum,\n  backendName: \"webgl\",\n  kernelFunc: maximum4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool.js\nfunction maxPool3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  assertNotComplex2(x, \"maxPool\");\n  const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n  const dilations = 1;\n  util_exports.assert(backend_util_exports.eitherStridesOrDilationsAreOne(strides, dilations), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util_exports.computePool2DInfo(x.shape, filterSize, strides, dilations, pad3, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util_exports.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity3({ inputs: { x }, backend: backend2 });\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, \"max\", false);\n  return backend2.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nvar maxPoolConfig2 = {\n  kernelName: MaxPool,\n  backendName: \"webgl\",\n  kernelFunc: maxPool3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3D.js\nfunction maxPool3d2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { filterSize, strides, pad: pad3, dataFormat, dimRoundingMode } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util_exports.computePool3DInfo(x.shape, filterSize, strides, dilations, pad3, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, \"max\", false);\n  return backend2.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nvar maxPool3DConfig2 = {\n  kernelName: MaxPool3D,\n  backendName: \"webgl\",\n  kernelFunc: maxPool3d2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js\nvar MaxPool2DBackpropProgram = class {\n  constructor(convInfo) {\n    this.variableNames = [\"dy\", \"maxPos\"];\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n};\nvar MaxPool3DBackpropProgram = class {\n  constructor(convInfo) {\n    this.variableNames = [\"dy\", \"maxPos\"];\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3DGrad.js\nfunction maxPool3DGrad2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, input: input2 } = inputs;\n  const x = input2;\n  const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util_exports.computePool3DInfo(x.shape, filterSize, strides, dilations, pad3, dimRoundingMode);\n  const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, \"max\", true);\n  const maxPool3dPositions2 = backend2.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend2.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions2], x.dtype);\n  backend2.disposeIntermediateTensorInfo(maxPool3dPositions2);\n  return result;\n}\nvar maxPool3DGradConfig3 = {\n  kernelName: MaxPool3DGrad,\n  backendName: \"webgl\",\n  kernelFunc: maxPool3DGrad2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolGrad.js\nfunction maxPoolGrad3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { dy, input: input2, output } = inputs;\n  const x = input2;\n  assertNotComplex2([input2, output], \"maxPoolGrad\");\n  const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n  const convInfo = backend_util_exports.computePool2DInfo(x.shape, filterSize, strides, 1, pad3, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram = new Pool2DProgram(convInfo, \"max\", getPositions);\n  const maxPoolPositions2 = backend2.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend2.runWebGLProgram(maxPoolBackPropProgram, [dy, maxPoolPositions2], x.dtype);\n  backend2.disposeIntermediateTensorInfo(maxPoolPositions2);\n  return result;\n}\nvar maxPoolGradConfig3 = {\n  kernelName: MaxPoolGrad,\n  backendName: \"webgl\",\n  kernelFunc: maxPoolGrad3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js\nfunction maxPoolWithArgmaxImpl2(x, includeBatchInIndex, convInfo, backend2) {\n  let program = new Pool2DProgram(convInfo, \"max\", false);\n  const poolOutput = backend2.runWebGLProgram(program, [x], \"float32\");\n  program = new Pool2DProgram(convInfo, \"max\", true, true, includeBatchInIndex);\n  const indexOutput = backend2.runWebGLProgram(program, [x], \"float32\");\n  return [poolOutput, indexOutput];\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js\nvar maxPoolWithArgmaxConfig2 = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: \"webgl\",\n  kernelFunc: ({ inputs, attrs, backend: backend2 }) => {\n    const { x } = inputs;\n    const { filterSize, strides, pad: pad3, includeBatchInIndex } = attrs;\n    const webglBackend = backend2;\n    util_exports.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);\n    const dilations = [1, 1];\n    util_exports.assert(backend_util_exports.eitherStridesOrDilationsAreOne(strides, dilations), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util_exports.computePool2DInfo(x.shape, filterSize, strides, dilations, pad3);\n    const [result, indexes] = maxPoolWithArgmaxImpl2(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean_impl.js\nfunction meanImpl(x, reduceShape, outShape, backend2) {\n  const inSize = util_exports.sizeFromShape(reduceShape);\n  const xSize = util_exports.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape4({ inputs: { x }, attrs: { shape: [batchSize, inSize] }, backend: backend2 });\n  const reduced = reduce(reshapedInput, \"float32\", \"mean\", backend2);\n  const reshapedOutput = reshape4({ inputs: { x: reduced }, attrs: { shape: outShape }, backend: backend2 });\n  backend2.disposeIntermediateTensorInfo(reshapedInput);\n  backend2.disposeIntermediateTensorInfo(reduced);\n  return reshapedOutput;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean.js\nvar meanConfig2 = {\n  kernelName: Mean,\n  backendName: \"webgl\",\n  kernelFunc: ({ inputs, attrs, backend: backend2 }) => {\n    const { x } = inputs;\n    const { keepDims, axis } = attrs;\n    const webglBackend = backend2;\n    const xRank = x.shape.length;\n    const origAxes = util_exports.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util_exports.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n    const intermediates = [];\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values;\n        const newShape = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl2(x, permutedAxes, webglBackend);\n      }\n      intermediates.push(meanInput);\n      axes = backend_util_exports.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util_exports.assertAxesAreInnerMostDims(\"sum\", axes, xRank);\n    const [meanOutShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(meanInput.shape, axes);\n    let outShape = meanOutShape;\n    if (keepDims) {\n      outShape = backend_util_exports.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n    return out;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Min.js\nfunction min4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, keepDims } = attrs;\n  const xRank = x.shape.length;\n  const origAxes = util_exports.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose3({ inputs: { x }, backend: backend2, attrs: { perm: permutedAxes } });\n    axes = backend_util_exports.getInnerMostAxes(axes.length, x.shape.length);\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"min\", axes, xRank);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util_exports.sizeFromShape(reduceShape);\n  const a2D = reshape4({ inputs: { x: permutedX }, backend: backend2, attrs: { shape: [-1, inSize] } });\n  const reduced = reduce(a2D, a2D.dtype, \"min\", backend2);\n  let res;\n  if (keepDims) {\n    const newShape = backend_util_exports.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape4({ inputs: { x: reduced }, backend: backend2, attrs: { shape: newShape } });\n  } else {\n    res = reshape4({ inputs: { x: reduced }, backend: backend2, attrs: { shape: outShape } });\n  }\n  backend2.disposeIntermediateTensorInfo(a2D);\n  backend2.disposeIntermediateTensorInfo(reduced);\n  if (permutedAxes != null) {\n    backend2.disposeIntermediateTensorInfo(permutedX);\n  }\n  return res;\n}\nvar minConfig2 = {\n  kernelName: Min,\n  backendName: \"webgl\",\n  kernelFunc: min4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Minimum.js\nvar MINIMUM = CHECK_NAN_SNIPPET2 + `\n  return min(a, b);\n`;\nvar MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` + CHECK_NAN_SNIPPET3 + `\n  return result;\n`;\nvar minimum4 = binaryKernelFunc2({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\nvar minimumConfig2 = {\n  kernelName: Minimum,\n  backendName: \"webgl\",\n  kernelFunc: minimum4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_gpu.js\nvar MirrorPadProgram = class {\n  constructor(xShape, paddings, mode) {\n    this.variableNames = [\"x\"];\n    this.outputShape = paddings.map((p2, i) => p2[0] + xShape[i] + p2[1]);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n    const start = paddings.map((p2) => p2[0]).join(\",\");\n    const end = paddings.map((p2, i) => p2[0] + xShape[i]).join(\",\");\n    const unpackedCoords = [\"coords[0]\", \"coords[1]\", \"coords[2]\", \"coords[3]\"].slice(0, rank);\n    const offset = mode === \"reflect\" ? 0 : 1;\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_packed_gpu.js\nvar MirrorPadPackedProgram = class {\n  constructor(xShape, paddings, mode) {\n    this.variableNames = [\"x\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = paddings.map((p2, i) => p2[0] + xShape[i] + p2[1]);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n    const start = paddings.map((p2) => p2[0]).join(\",\");\n    const end = paddings.map((p2, i) => p2[0] + xShape[i]).join(\",\");\n    const coords2 = getChannels(\"rc\", rank);\n    const source = getChannels(\"source\", rank);\n    const cLimit = `${coords2[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims = rank === 1 ? \"source\" : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === \"reflect\" ? 0 : 1;\n    let mainLoop = \"\";\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords2[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords2[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords2[rank - 2]} += 1;\n        if(${coords2[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords2[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MirrorPad.js\nvar mirrorPadKernelFunc = ({ inputs, backend: backend2, attrs }) => {\n  const { x } = inputs;\n  const { paddings, mode } = attrs;\n  const program = env().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new MirrorPadPackedProgram(x.shape, paddings, mode) : new MirrorPadProgram(x.shape, paddings, mode);\n  const output = backend2.runWebGLProgram(program, [x], x.dtype);\n  return output;\n};\nvar mirrorPadConfig2 = {\n  kernelName: MirrorPad,\n  backendName: \"webgl\",\n  kernelFunc: mirrorPadKernelFunc\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mod.js\nvar MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\nvar MOD_PACKED = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` + CHECK_NAN_SNIPPET3 + `\n  return result;\n`;\nvar mod3 = binaryKernelFunc2({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED\n});\nvar modConfig2 = {\n  kernelName: Mod,\n  backendName: \"webgl\",\n  kernelFunc: mod3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js\nvar MultinomialProgram = class {\n  constructor(batchSize, numOutcomes, numSamples) {\n    this.variableNames = [\"probs\"];\n    this.customUniforms = [{ name: \"seed\", type: \"float\" }];\n    this.outputShape = [batchSize, numSamples];\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RealDiv.js\nvar DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\nvar DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\nvar realDiv = binaryKernelFunc2({ opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true });\nvar realDivConfig2 = {\n  kernelName: RealDiv,\n  backendName: \"webgl\",\n  kernelFunc: realDiv\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sub.js\nvar SUB = \"return a - b;\";\nvar sub3 = binaryKernelFunc2({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: subImplCPU\n});\nvar subConfig2 = {\n  kernelName: Sub,\n  backendName: \"webgl\",\n  kernelFunc: sub3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softmax.js\nfunction softmax4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { logits } = inputs;\n  const { dim } = attrs;\n  const axes = util_exports.parseAxisParam([dim], logits.shape);\n  const maxLogit = max4({\n    inputs: { x: logits },\n    backend: backend2,\n    attrs: { reductionIndices: axes, keepDims: false }\n  });\n  const expandedShape = backend_util_exports.expandShapeToKeepDim(maxLogit.shape, axes);\n  const maxLogitsReshaped = reshape4({ inputs: { x: maxLogit }, backend: backend2, attrs: { shape: expandedShape } });\n  const a = sub3({ inputs: { a: logits, b: maxLogitsReshaped }, backend: backend2 });\n  const b = exp3({ inputs: { x: a }, backend: backend2 });\n  const sumExp = sum4({ inputs: { x: b }, backend: backend2, attrs: { axis: axes, keepDims: false } });\n  const sumExpReshaped = reshape4({ inputs: { x: sumExp }, backend: backend2, attrs: { shape: expandedShape } });\n  const res = realDiv({ inputs: { a: b, b: sumExpReshaped }, backend: backend2 });\n  backend2.disposeIntermediateTensorInfo(maxLogit);\n  backend2.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend2.disposeIntermediateTensorInfo(a);\n  backend2.disposeIntermediateTensorInfo(b);\n  backend2.disposeIntermediateTensorInfo(sumExp);\n  backend2.disposeIntermediateTensorInfo(sumExpReshaped);\n  return res;\n}\nvar softmaxConfig2 = {\n  kernelName: Softmax,\n  backendName: \"webgl\",\n  kernelFunc: softmax4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multinomial.js\nfunction multinomial3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { logits } = inputs;\n  const { numSamples, seed, normalized } = attrs;\n  const probs = normalized ? logits : softmax4({ inputs: { logits }, backend: backend2, attrs: { dim: logits.shape.length - 1 } });\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend2.runWebGLProgram(program, [probs], \"int32\", customValues);\n  if (!normalized) {\n    backend2.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\nvar multinomialConfig2 = {\n  kernelName: Multinomial,\n  backendName: \"webgl\",\n  kernelFunc: multinomial3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Neg.js\nvar NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\nvar NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nfunction neg3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x } = inputs;\n  if (backend2.shouldExecuteOnCPU([x])) {\n    const xData = backend2.texData.get(x.dataId);\n    const [outValues, newShape] = negImplCPU(xData.values, x.shape, x.dtype);\n    return backend2.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  let program;\n  if (env().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) {\n    program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n  return backend2.runWebGLProgram(program, [x], x.dtype);\n}\nvar negConfig2 = {\n  kernelName: Neg,\n  backendName: \"webgl\",\n  kernelFunc: neg3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js\nvar nonMaxSuppressionV3Impl3 = kernel_impls_exports.nonMaxSuppressionV3Impl;\nfunction nonMaxSuppressionV32(args) {\n  backend_util_exports.warn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\");\n  const { inputs, backend: backend2, attrs } = args;\n  const { boxes, scores } = inputs;\n  const { maxOutputSize, iouThreshold, scoreThreshold } = attrs;\n  const boxesVals = backend2.readSync(boxes.dataId);\n  const scoresVals = backend2.readSync(scores.dataId);\n  const { selectedIndices } = nonMaxSuppressionV3Impl3(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  return backend2.makeTensorInfo([selectedIndices.length], \"int32\", new Int32Array(selectedIndices));\n}\nvar nonMaxSuppressionV3Config2 = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: \"webgl\",\n  kernelFunc: nonMaxSuppressionV32\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV4.js\nvar nonMaxSuppressionV4Impl3 = kernel_impls_exports.nonMaxSuppressionV4Impl;\nfunction nonMaxSuppressionV42(args) {\n  backend_util_exports.warn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\");\n  const { inputs, backend: backend2, attrs } = args;\n  const { boxes, scores } = inputs;\n  const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;\n  const boxesVals = backend2.readSync(boxes.dataId);\n  const scoresVals = backend2.readSync(scores.dataId);\n  const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl3(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n  return [\n    backend2.makeTensorInfo([selectedIndices.length], \"int32\", new Int32Array(selectedIndices)),\n    backend2.makeTensorInfo([], \"int32\", new Int32Array([validOutputs]))\n  ];\n}\nvar nonMaxSuppressionV4Config2 = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: \"webgl\",\n  kernelFunc: nonMaxSuppressionV42\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js\nvar nonMaxSuppressionV5Impl3 = kernel_impls_exports.nonMaxSuppressionV5Impl;\nfunction nonMaxSuppressionV52(args) {\n  backend_util_exports.warn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\");\n  const { inputs, backend: backend2, attrs } = args;\n  const { boxes, scores } = inputs;\n  const { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = attrs;\n  const boxesVals = backend2.readSync(boxes.dataId);\n  const scoresVals = backend2.readSync(scores.dataId);\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n  const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl3(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n  return [\n    backend2.makeTensorInfo([selectedIndices.length], \"int32\", new Int32Array(selectedIndices)),\n    backend2.makeTensorInfo([selectedScores.length], \"float32\", new Float32Array(selectedScores))\n  ];\n}\nvar nonMaxSuppressionV5Config2 = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: \"webgl\",\n  kernelFunc: nonMaxSuppressionV52\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js\nvar OneHotProgram = class {\n  constructor(numIndices, depth, onValue, offValue) {\n    this.variableNames = [\"indices\"];\n    this.outputShape = [numIndices, depth];\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OneHot.js\nvar oneHot3 = (args) => {\n  const { inputs, backend: backend2, attrs } = args;\n  const { indices } = inputs;\n  const { depth, onValue, offValue } = attrs;\n  const indicesSize = util_exports.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped = reshape4({ inputs: { x: indices }, backend: backend2, attrs: { shape: [indicesSize] } });\n  const result = backend2.runWebGLProgram(program, [reshaped], indices.dtype);\n  backend2.disposeIntermediateTensorInfo(reshaped);\n  const outShape = [...indices.shape, depth];\n  const out = reshape4({ inputs: { x: result }, backend: backend2, attrs: { shape: outShape } });\n  backend2.disposeIntermediateTensorInfo(result);\n  return out;\n};\nvar oneHotConfig2 = {\n  kernelName: OneHot,\n  backendName: \"webgl\",\n  kernelFunc: oneHot3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ZerosLike.js\nfunction zerosLike3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x } = inputs;\n  if (x.dtype === \"complex64\") {\n    const realPart = real3({ inputs: { input: x }, backend: backend2 });\n    const r = zerosLike3({ inputs: { x: realPart }, backend: backend2 });\n    const imagPart = imag3({ inputs: { input: x }, backend: backend2 });\n    const i = zerosLike3({ inputs: { x: imagPart }, backend: backend2 });\n    const result = complex3({ inputs: { real: r, imag: i }, backend: backend2 });\n    backend2.disposeIntermediateTensorInfo(realPart);\n    backend2.disposeIntermediateTensorInfo(r);\n    backend2.disposeIntermediateTensorInfo(imagPart);\n    backend2.disposeIntermediateTensorInfo(i);\n    return result;\n  } else {\n    return fill3({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === \"string\" ? \"\" : 0\n      },\n      backend: backend2\n    });\n  }\n}\nvar zerosLikeConfig2 = {\n  kernelName: ZerosLike,\n  backendName: \"webgl\",\n  kernelFunc: zerosLike3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OnesLike.js\nfunction onesLike3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x } = inputs;\n  if (x.dtype === \"string\") {\n    throw new Error(\"onesLike is not supported under string dtype\");\n  } else if (x.dtype === \"complex64\") {\n    const realPart = real3({ inputs: { input: x }, backend: backend2 });\n    const r = onesLike3({ inputs: { x: realPart }, backend: backend2 });\n    const imagPart = imag3({ inputs: { input: x }, backend: backend2 });\n    const i = zerosLike3({ inputs: { x: imagPart }, backend: backend2 });\n    const result = complex3({ inputs: { real: r, imag: i }, backend: backend2 });\n    backend2.disposeIntermediateTensorInfo(realPart);\n    backend2.disposeIntermediateTensorInfo(r);\n    backend2.disposeIntermediateTensorInfo(imagPart);\n    backend2.disposeIntermediateTensorInfo(i);\n    return result;\n  } else {\n    return fill3({ attrs: { shape: x.shape, dtype: x.dtype, value: 1 }, backend: backend2 });\n  }\n}\nvar onesLikeConfig2 = {\n  kernelName: OnesLike,\n  backendName: \"webgl\",\n  kernelFunc: onesLike3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pack.js\nfunction pack2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { axis } = attrs;\n  if (inputs.length === 1) {\n    return expandDims4({ inputs: { input: inputs[0] }, backend: backend2, attrs: { dim: axis } });\n  }\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n  inputs.forEach((t) => {\n    util_exports.assertShapesMatch(shape, t.shape, \"All tensors passed to stack must have matching shapes\");\n    util_exports.assert(dtype === t.dtype, () => \"All tensors passed to stack must have matching dtypes\");\n  });\n  const intermediateTensorInfos = [];\n  const expandedTensors = inputs.map((t) => {\n    const expandedT = expandDims4({ inputs: { input: t }, backend: backend2, attrs: { dim: axis } });\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n  const result = concat3({ inputs: expandedTensors, backend: backend2, attrs: { axis } });\n  intermediateTensorInfos.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return result;\n}\nvar packConfig2 = {\n  kernelName: Pack,\n  backendName: \"webgl\",\n  kernelFunc: pack2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js\nvar PadProgram = class {\n  constructor(xShape, paddings, constantValue) {\n    this.variableNames = [\"x\"];\n    this.customUniforms = [{ name: \"value\", type: \"float\" }];\n    this.outputShape = paddings.map((p2, i) => p2[0] + xShape[i] + p2[1]);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n    const start = paddings.map((p2) => p2[0]).join(\",\");\n    const end = paddings.map((p2, i) => p2[0] + xShape[i]).join(\",\");\n    const unpackedCoords = [\"coords[0]\", \"coords[1]\", \"coords[2]\", \"coords[3]\"].slice(0, rank);\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js\nvar PadPackedProgram = class {\n  constructor(xShape, paddings, constantValue) {\n    this.variableNames = [\"x\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{ name: \"value\", type: \"float\" }];\n    this.outputShape = paddings.map((p2, i) => p2[0] + xShape[i] + p2[1]);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n    const start = paddings.map((p2) => p2[0]).join(\",\");\n    const end = paddings.map((p2, i) => p2[0] + xShape[i]).join(\",\");\n    const coords2 = getChannels(\"rc\", rank);\n    const source = getChannels(\"source\", rank);\n    const cLimit = `${coords2[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims = rank === 1 ? \"source\" : `vec2(${source.slice(-2).join()})`;\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`,\n      `${coords2[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? \"\" : `}\n       rc = outputLoc;\n       ${coords2[rank - 2]} += 1;\n       if(${coords2[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? \"\" : `  ${coords2[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n    const paddingArea = rank === 1 ? \"rc < start || rc >= end\" : \"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))\";\n    let mainLoop = \"\";\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += rank === 1 ? `} ` : `}}`;\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/PadV2.js\nvar padV22 = (args) => {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { paddings, constantValue } = attrs;\n  if (util_exports.sizeFromShape(x.shape) === 0) {\n    const outputShape = paddings.map((p2, i) => p2[0] + x.shape[i] + p2[1]);\n    return fill3({\n      backend: backend2,\n      attrs: { shape: outputShape, value: constantValue, dtype: x.dtype }\n    });\n  }\n  const program = env().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new PadPackedProgram(x.shape, paddings, constantValue) : new PadProgram(x.shape, paddings, constantValue);\n  const customValues = [[constantValue]];\n  return backend2.runWebGLProgram(program, [x], x.dtype, customValues);\n};\nvar padV2Config2 = {\n  kernelName: PadV2,\n  backendName: \"webgl\",\n  kernelFunc: padV22\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pow.js\nvar POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nvar POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` + CHECK_NAN_SNIPPET3 + `\n  return result;\n`;\nvar pow3 = binaryKernelFunc2({ opSnippet: POW, packedOpSnippet: POW_PACKED });\nvar powConfig2 = {\n  kernelName: Pow,\n  backendName: \"webgl\",\n  kernelFunc: pow3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prod.js\nfunction prod3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, keepDims } = attrs;\n  const xRank = x.shape.length;\n  const toDispose = [];\n  const origAxes = util_exports.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose3({ inputs: { x }, backend: backend2, attrs: { perm: permutedAxes } });\n    axes = backend_util_exports.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"prod\", axes, xRank);\n  let res;\n  if (backend2.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend2.texData.get(permutedX.dataId).values;\n    const { outVals, outShape, outDtype } = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend2.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util_exports.sizeFromShape(reduceShape);\n    const a2D = reshape4({ inputs: { x: permutedX }, backend: backend2, attrs: { shape: [-1, inSize] } });\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, \"prod\", backend2);\n    res = reshape4({ inputs: { x: reduced }, backend: backend2, attrs: { shape: outShape } });\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util_exports.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape4({ inputs: { x: res }, backend: backend2, attrs: { shape: newShape } });\n  }\n  toDispose.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return res;\n}\nvar prodConfig2 = {\n  kernelName: Prod,\n  backendName: \"webgl\",\n  kernelFunc: prod3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Range.js\nvar range4 = (args) => {\n  const { backend: backend2, attrs } = args;\n  const { start, stop, step: step5, dtype } = attrs;\n  const values = rangeImplCPU(start, stop, step5, dtype);\n  return backend2.makeTensorInfo([values.length], dtype, values);\n};\nvar rangeConfig2 = {\n  kernelName: Range,\n  backendName: \"webgl\",\n  kernelFunc: range4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reciprocal.js\nvar RECIPROCAL = `return 1.0 / x;`;\nvar reciprocal3 = unaryKernelFunc2({ opSnippet: RECIPROCAL });\nvar reciprocalConfig2 = {\n  kernelName: Reciprocal,\n  backendName: \"webgl\",\n  kernelFunc: reciprocal3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu.js\nvar RELU3 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nvar RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nvar relu3 = unaryKernelFunc2({ opSnippet: RELU3, packedOpSnippet: RELU_PACKED });\nvar reluConfig2 = {\n  kernelName: Relu,\n  backendName: \"webgl\",\n  kernelFunc: relu3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu6.js\nvar RELU63 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nvar RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nvar relu63 = unaryKernelFunc2({ opSnippet: RELU63, packedOpSnippet: RELU6_PACKED });\nvar relu6Config2 = {\n  kernelName: Relu6,\n  backendName: \"webgl\",\n  kernelFunc: relu63\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js\nvar ResizeBilinearProgram = class {\n  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n    this.variableNames = [\"A\"];\n    this.outputShape = [];\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n    const effectiveInSize = [\n      alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,\n      alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth\n    ];\n    const effectiveOutSize = [\n      alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,\n      alignCorners && newWidth > 1 ? newWidth - 1 : newWidth\n    ];\n    let sourceFracIndexRC;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js\nvar ResizeBilinearPackedProgram = class {\n  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = [];\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n    const effectiveInSize = [\n      alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,\n      alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth\n    ];\n    const effectiveOutSize = [\n      alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,\n      alignCorners && newWidth > 1 ? newWidth - 1 : newWidth\n    ];\n    let sourceFracIndexRC;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinear.js\nfunction resizeBilinear3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { images } = inputs;\n  const { alignCorners, halfPixelCenters, size } = attrs;\n  const [newHeight, newWidth] = size;\n  const program = env().getBool(\"WEBGL_PACK_IMAGE_OPERATIONS\") ? new ResizeBilinearPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) : new ResizeBilinearProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);\n  return backend2.runWebGLProgram(program, [images], \"float32\");\n}\nvar resizeBilinearConfig2 = {\n  kernelName: ResizeBilinear,\n  backendName: \"webgl\",\n  kernelFunc: resizeBilinear3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js\nvar ResizeBilinearBackpropProgram = class {\n  constructor(dyShape, inputShape, alignCorners) {\n    this.variableNames = [\"dy\"];\n    this.outputShape = [];\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n    const effectiveXSize = [\n      alignCorners && yHeight > 1 ? xHeight - 1 : xHeight,\n      alignCorners && yWidth > 1 ? xWidth - 1 : xWidth\n    ];\n    const effectiveYSize = [\n      alignCorners && yHeight > 1 ? yHeight - 1 : yHeight,\n      alignCorners && yWidth > 1 ? yWidth - 1 : yWidth\n    ];\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n    const winHeight = Math.ceil(invHeightScale) * 2 + 2;\n    const winWidth = Math.ceil(invWidthScale) * 2 + 2;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinearGrad.js\nfunction resizeBilinearGrad2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { images, dy } = inputs;\n  const { alignCorners } = attrs;\n  const program = new ResizeBilinearBackpropProgram(dy.shape, images.shape, alignCorners);\n  return backend2.runWebGLProgram(program, [dy], dy.dtype);\n}\nvar resizeBilinearGradConfig3 = {\n  kernelName: ResizeBilinearGrad,\n  backendName: \"webgl\",\n  kernelFunc: resizeBilinearGrad2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js\nvar ResizeNearestNeighborProgram = class {\n  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n    this.variableNames = [\"A\"];\n    this.outputShape = [];\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n    const effectiveInSize = [\n      alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,\n      alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth\n    ];\n    const effectiveOutSize = [\n      alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,\n      alignCorners && newWidth > 1 ? newWidth - 1 : newWidth\n    ];\n    const roundBase = alignCorners ? \"0.5\" : \"0.0\";\n    let sourceFracIndexRC;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_packed_gpu.js\nvar ResizeNearestNeighborPackedProgram = class {\n  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n    this.variableNames = [\"A\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = [];\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n    const effectiveInSize = [\n      alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,\n      alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth\n    ];\n    const effectiveOutSize = [\n      alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,\n      alignCorners && newWidth > 1 ? newWidth - 1 : newWidth\n    ];\n    const roundBase = alignCorners ? \"0.5\" : \"0.0\";\n    let sourceFracIndexRC;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighbor.js\nfunction resizeNearestNeighbor3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { images } = inputs;\n  const { alignCorners, halfPixelCenters, size } = attrs;\n  const [newHeight, newWidth] = size;\n  const program = env().getBool(\"WEBGL_PACK_IMAGE_OPERATIONS\") ? new ResizeNearestNeighborPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) : new ResizeNearestNeighborProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);\n  return backend2.runWebGLProgram(program, [images], images.dtype);\n}\nvar resizeNearestNeighborConfig2 = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: \"webgl\",\n  kernelFunc: resizeNearestNeighbor3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js\nvar ResizeNearestNeigborBackpropProgram = class {\n  constructor(dyShape, inputShape, alignCorners) {\n    this.variableNames = [\"dy\"];\n    this.outputShape = [];\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n    const effectiveXSize = [\n      alignCorners && yHeight > 1 ? xHeight - 1 : xHeight,\n      alignCorners && yWidth > 1 ? xWidth - 1 : xWidth\n    ];\n    const effectiveYSize = [\n      alignCorners && yHeight > 1 ? yHeight - 1 : yHeight,\n      alignCorners && yWidth > 1 ? yWidth - 1 : yWidth\n    ];\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n    const winHeight = Math.ceil(invHeightScale) * 2 + 2;\n    const winWidth = Math.ceil(invWidthScale) * 2 + 2;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighborGrad.js\nfunction resizeNearestNeighborGrad2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { images, dy } = inputs;\n  const { alignCorners } = attrs;\n  const program = new ResizeNearestNeigborBackpropProgram(dy.shape, images.shape, alignCorners);\n  return backend2.runWebGLProgram(program, [dy], dy.dtype);\n}\nvar resizeNearestNeighborGradConfig3 = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: \"webgl\",\n  kernelFunc: resizeNearestNeighborGrad2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js\nvar ReverseProgram = class {\n  constructor(xShape, axis) {\n    this.variableNames = [\"x\"];\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(\",\");\n    const type = getCoordsDataType(rank);\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js\nvar ReversePackedProgram = class {\n  constructor(xShape, axis) {\n    this.variableNames = [\"x\"];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels(\"rc\", rank);\n    const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n    function getR(channels2) {\n      return getChannel(channels2);\n    }\n    function getG(channels2) {\n      channels2[rank - 1] = \"(\" + channels2[rank - 1] + ` + 1)`;\n      return getChannel(channels2);\n    }\n    function getB(channels2) {\n      channels2[rank - 2] = \"(\" + channels2[rank - 2] + ` + 1)`;\n      return getChannel(channels2);\n    }\n    function getA(channels2) {\n      channels2[rank - 1] = \"(\" + channels2[rank - 1] + ` + 1)`;\n      channels2[rank - 2] = \"(\" + channels2[rank - 2] + ` + 1)`;\n      return getChannel(channels2);\n    }\n    function getChannel(channels2) {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels2));\n      const inCoords = inCoordsArray.join(\",\");\n      const innerDims = inCoordsArray.slice(-2).join(\",\");\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n    function getInCoord(i, channels1) {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reverse.js\nfunction reverse3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { dims } = attrs;\n  const xRank = x.shape.length;\n  const $dims = util_exports.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity3({ inputs: { x }, backend: backend2 });\n  }\n  const program = env().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new ReversePackedProgram(x.shape, $dims) : new ReverseProgram(x.shape, $dims);\n  return backend2.runWebGLProgram(program, [x], x.dtype);\n}\nvar reverseConfig2 = {\n  kernelName: Reverse,\n  backendName: \"webgl\",\n  kernelFunc: reverse3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js\nvar RotateProgram = class {\n  constructor(imageShape, fillValue) {\n    this.variableNames = [\"Image\"];\n    this.outputShape = [];\n    this.customUniforms = [{ name: \"params\", type: \"vec4\" }];\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n    let fillSnippet = \"\";\n    if (typeof fillValue === \"number\") {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(\",\")});\n        float outputValue = fill[coords[3]];`;\n    }\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RotateWithOffset.js\nvar rotateWithOffsetConfig2 = {\n  kernelName: RotateWithOffset,\n  backendName: \"webgl\",\n  kernelFunc: ({ inputs, attrs, backend: backend2 }) => {\n    const { image: image2 } = inputs;\n    const { radians, fillValue, center } = attrs;\n    const webglBackend = backend2;\n    const program = new RotateProgram(image2.shape, fillValue);\n    const [centerX, centerY] = backend_util_exports.getImageCenter(center, image2.shape[1], image2.shape[2]);\n    const customValues = [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n    const output = webglBackend.runWebGLProgram(program, [image2], image2.dtype, customValues);\n    return output;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Round.js\nvar ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\nvar round4 = unaryKernelFunc2({ opSnippet: ROUND });\nvar roundConfig2 = {\n  kernelName: Round,\n  backendName: \"webgl\",\n  kernelFunc: round4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Rsqrt.js\nvar RSQRT = `return inversesqrt(x);`;\nvar rsqrt3 = unaryKernelFunc2({ opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU });\nvar rsqrtConfig2 = {\n  kernelName: Rsqrt,\n  backendName: \"webgl\",\n  kernelFunc: rsqrt3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js\nvar ScatterProgram = class {\n  constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {\n    this.variableNames = [\"updates\", \"indices\", \"defaultValue\"];\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = \"\";\n    if (indicesRank === 1) {\n      indicesString = \"i\";\n    } else if (indicesRank === 2) {\n      indicesString = \"i, j\";\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n    let updatesString = \"\";\n    if (updatesRank === 1) {\n      updatesString = \"i\";\n    } else if (updatesRank === 2) {\n      updatesString = \"i, coords[1]\";\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n    const strideString = sliceDim > 1 ? \"strides[j]\" : \"strides\";\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ScatterNd.js\nfunction scatterNd2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { indices, updates } = inputs;\n  const { shape } = attrs;\n  const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util_exports.calculateShapes(updates, indices, shape);\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  if (outputSize === 0) {\n    return backend2.makeTensorInfo(shape, indices.dtype);\n  }\n  const flattenIndices = reshape4({ inputs: { x: indices }, backend: backend2, attrs: { shape: [numUpdates, sliceRank] } });\n  const flattenX = reshape4({ inputs: { x: updates }, backend: backend2, attrs: { shape: [numUpdates, sliceSize] } });\n  const defaultValue = backend2.makeTensorInfo([], \"float32\", new Float32Array([0]));\n  const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n  const res = backend2.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n  const reshaped = reshape4({ inputs: { x: res }, backend: backend2, attrs: { shape } });\n  backend2.disposeIntermediateTensorInfo(flattenIndices);\n  backend2.disposeIntermediateTensorInfo(flattenX);\n  backend2.disposeIntermediateTensorInfo(res);\n  backend2.disposeIntermediateTensorInfo(defaultValue);\n  return reshaped;\n}\nvar scatterNdConfig2 = {\n  kernelName: ScatterNd,\n  backendName: \"webgl\",\n  kernelFunc: scatterNd2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js\nvar SelectProgram = class {\n  constructor(cRank, shape, rank) {\n    this.variableNames = [\"c\", \"a\", \"b\"];\n    this.outputShape = shape;\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = [\"resRC.x\", \"resRC.y\", \"resRC.z\", \"resRC.w\"];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n    const dtype = getCoordsDataType(rank);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Select.js\nfunction select3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { condition, t, e } = inputs;\n  const program = new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend2.runWebGLProgram(program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\nvar selectConfig2 = {\n  kernelName: Select,\n  backendName: \"webgl\",\n  kernelFunc: select3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Selu.js\nvar SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util_exports.SELU_SCALEALPHA};\n  float scale = ${backend_util_exports.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\nvar selu3 = unaryKernelFunc2({ opSnippet: SELU });\nvar seluConfig2 = {\n  kernelName: Selu,\n  backendName: \"webgl\",\n  kernelFunc: selu3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sigmoid.js\nvar SIGMOID3 = CHECK_NAN_SNIPPET_UNARY + `\n  return 1.0 / (1.0 + exp(-1.0 * x));\n`;\nvar SIGMOID_PACKED = `\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nvar sigmoid3 = unaryKernelFunc2({\n  opSnippet: SIGMOID3,\n  packedOpSnippet: SIGMOID_PACKED,\n  cpuKernelImpl: sigmoidImplCPU\n});\nvar sigmoidConfig2 = {\n  kernelName: Sigmoid,\n  backendName: \"webgl\",\n  kernelFunc: sigmoid3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sign.js\nvar SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\nvar sign3 = unaryKernelFunc2({ opSnippet: SIGN });\nvar signConfig2 = {\n  kernelName: Sign,\n  backendName: \"webgl\",\n  kernelFunc: sign3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sin.js\nvar SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\nvar sin3 = unaryKernelFunc2({ opSnippet: SIN });\nvar sinConfig2 = {\n  kernelName: Sin,\n  backendName: \"webgl\",\n  kernelFunc: sin3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sinh.js\nvar SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\nvar sinh3 = unaryKernelFunc2({ opSnippet: SINH });\nvar sinhConfig2 = {\n  kernelName: Sinh,\n  backendName: \"webgl\",\n  kernelFunc: sinh3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softplus.js\nvar SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\nvar softplus3 = unaryKernelFunc2({ opSnippet: SOFTPLUS });\nvar softplusConfig2 = {\n  kernelName: Softplus,\n  backendName: \"webgl\",\n  kernelFunc: softplus3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SpaceToBatchND.js\nvar spaceToBatchND3 = (args) => {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { blockShape, paddings } = attrs;\n  util_exports.assert(x.shape.length <= 4, () => \"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet\");\n  const prod5 = blockShape.reduce((a, b) => a * b);\n  const completePaddings = [[0, 0]];\n  completePaddings.push(...paddings);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n  const toDispose = [];\n  const paddedX = padV22({\n    inputs: { x },\n    backend: backend2,\n    attrs: { paddings: completePaddings, constantValue: 0 }\n  });\n  const reshapedPaddedShape = backend_util_exports.getReshaped(paddedX.shape, blockShape, prod5, false);\n  const permutedReshapedPaddedPermutation = backend_util_exports.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  const flattenShape = backend_util_exports.getReshapedPermuted(paddedX.shape, blockShape, prod5, false);\n  const reshapedPaddedX = reshape4({ inputs: { x: paddedX }, backend: backend2, attrs: { shape: reshapedPaddedShape } });\n  const paddedXT = transpose3({\n    inputs: { x: reshapedPaddedX },\n    backend: backend2,\n    attrs: { perm: permutedReshapedPaddedPermutation }\n  });\n  const result = reshape4({ inputs: { x: paddedXT }, backend: backend2, attrs: { shape: flattenShape } });\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n  toDispose.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return result;\n};\nvar spaceToBatchNDConfig2 = {\n  kernelName: SpaceToBatchND,\n  backendName: \"webgl\",\n  kernelFunc: spaceToBatchND3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseFillEmptyRows.js\nfunction sparseFillEmptyRows3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { indices, values, denseShape, defaultValue } = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n  const $indices = backend2.readSync(indices.dataId);\n  const $values = backend2.readSync(values.dataId);\n  const $denseShape = backend2.readSync(denseShape.dataId);\n  const $defaultValue = backend2.readSync(defaultValue.dataId)[0];\n  const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = sparseFillEmptyRowsImplCPU($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);\n  return [\n    backend2.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend2.makeTensorInfo([outputIndicesShape[0]], values.dtype, outputValues),\n    backend2.makeTensorInfo([emptyRowIndicator.length], \"bool\", new Uint8Array(emptyRowIndicator.map((value) => Number(value)))),\n    backend2.makeTensorInfo([reverseIndexMap.length], indices.dtype, new Int32Array(reverseIndexMap))\n  ];\n}\nvar sparseFillEmptyRowsConfig2 = {\n  kernelName: SparseFillEmptyRows,\n  backendName: \"webgl\",\n  kernelFunc: sparseFillEmptyRows3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseReshape.js\nfunction sparseReshape3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { inputIndices, inputShape, newShape } = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${inputShape.shape}`);\n  }\n  if (newShape.shape.length !== 1) {\n    throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n  const $inputShape = Array.from(backend2.readSync(inputShape.dataId));\n  const $inputIndices = backend2.readSync(inputIndices.dataId);\n  const targetShape = Array.from(backend2.readSync(newShape.dataId));\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);\n  return [\n    backend2.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend2.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))\n  ];\n}\nvar sparseReshapeConfig2 = {\n  kernelName: SparseReshape,\n  backendName: \"webgl\",\n  kernelFunc: sparseReshape3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseSegmentMean.js\nfunction sparseSegmentMean3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { data, indices, segmentIds } = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n  const $data = backend2.readSync(data.dataId);\n  const $indices = backend2.readSync(indices.dataId);\n  const $segmentIds = backend2.readSync(segmentIds.dataId);\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend2.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nvar sparseSegmentMeanConfig2 = {\n  kernelName: SparseSegmentMean,\n  backendName: \"webgl\",\n  kernelFunc: sparseSegmentMean3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseSegmentSum.js\nfunction sparseSegmentSum3(args) {\n  const { inputs, backend: backend2 } = args;\n  const { data, indices, segmentIds } = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n  const $data = backend2.readSync(data.dataId);\n  const $indices = backend2.readSync(indices.dataId);\n  const $segmentIds = backend2.readSync(segmentIds.dataId);\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend2.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nvar sparseSegmentSumConfig2 = {\n  kernelName: SparseSegmentSum,\n  backendName: \"webgl\",\n  kernelFunc: sparseSegmentSum3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseToDense.js\nfunction sparseToDense3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { sparseIndices, sparseValues, defaultValue } = inputs;\n  const { outputShape } = attrs;\n  const { sliceRank, numUpdates, strides, outputSize } = backend_util_exports.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n  const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n  const res = backend2.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n  const reshaped = reshape4({ inputs: { x: res }, backend: backend2, attrs: { shape: outputShape } });\n  backend2.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nvar sparseToDenseConfig2 = {\n  kernelName: SparseToDense,\n  backendName: \"webgl\",\n  kernelFunc: sparseToDense3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SplitV.js\nfunction splitV2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { numOrSizeSplits, axis } = attrs;\n  const $axis = util_exports.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util_exports.prepareSplitSize(x, numOrSizeSplits, $axis);\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map((s) => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT = slice3({ inputs: { x }, backend: backend2, attrs: { begin, size: sliceSize } });\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\nvar splitVConfig2 = {\n  kernelName: SplitV,\n  backendName: \"webgl\",\n  kernelFunc: splitV2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sqrt.js\nvar SQRT = `return sqrt(x);`;\nvar sqrt3 = unaryKernelFunc2({ opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU });\nvar sqrtConfig2 = {\n  kernelName: Sqrt,\n  backendName: \"webgl\",\n  kernelFunc: sqrt3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js\nvar SQUARE = `return x * x;`;\nvar square3 = unaryKernelFunc2({ opSnippet: SQUARE });\nvar squareConfig2 = {\n  kernelName: Square,\n  backendName: \"webgl\",\n  kernelFunc: square3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js\nvar SQUARED_DIFFERENCE = \"return (a - b) * (a - b);\";\nvar squaredDifference3 = binaryKernelFunc2({ opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE });\nvar squaredDifferenceConfig2 = {\n  kernelName: SquaredDifference,\n  backendName: \"webgl\",\n  kernelFunc: squaredDifference3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Step.js\nfunction step3({ inputs, attrs, backend: backend2 }) {\n  const { x } = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n  return backend2.runWebGLProgram(program, [x], x.dtype);\n}\nvar stepConfig2 = {\n  kernelName: Step,\n  backendName: \"webgl\",\n  kernelFunc: step3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js\nvar StridedSliceProgram = class {\n  constructor(begin, strides, size) {\n    this.variableNames = [\"x\"];\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n    let newCoords = \"\";\n    if (rank === 1) {\n      newCoords = \"coords * strides + begin\";\n    } else {\n      let outputAxis = 0;\n      newCoords = size.map((_, i) => {\n        outputAxis++;\n        return size.length === 1 ? `coords * strides[${i}] + begin[${i}]` : `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n      }).join(\",\");\n    }\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StridedSlice.js\nfunction stridedSlice3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n  const { finalShapeSparse, finalShape, isIdentity, sliceDim0, isSimpleSlice, begin: $begin, end: $end, strides: $strides } = slice_util_exports.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n  let result;\n  if (isIdentity) {\n    result = reshape4({ inputs: { x }, backend: backend2, attrs: { shape: finalShape } });\n  } else if (sliceDim0 || isSimpleSlice) {\n    util_exports.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n    const size = slice_util_exports.computeOutShape($begin, $end, $strides);\n    const sliced = slice3({ inputs: { x }, backend: backend2, attrs: { begin: $begin, size } });\n    result = reshape4({ inputs: { x: sliced }, backend: backend2, attrs: { shape: finalShape } });\n    backend2.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend2.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      const values = backend2.readSync(x.dataId);\n      const xBuf = buffer(x.shape, x.dtype, values);\n      const resultValues = stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend2.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend2.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n  const resultReshaped = reshape4({ inputs: { x: result }, backend: backend2, attrs: { shape: finalShape } });\n  backend2.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nvar stridedSliceConfig2 = {\n  kernelName: StridedSlice,\n  backendName: \"webgl\",\n  kernelFunc: stridedSlice3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringNGrams.js\nfunction stringNGrams3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { separator, nGramWidths, leftPad, rightPad: rightPad2, padWidth, preserveShortSequences } = attrs;\n  const { data, dataSplits } = inputs;\n  const $data = backend2.readSync(data.dataId);\n  const $dataSplits = backend2.readSync(dataSplits.dataId);\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU($data, $dataSplits, separator, nGramWidths, leftPad, rightPad2, padWidth, preserveShortSequences);\n  return [\n    backend2.makeTensorInfo([nGrams.length], \"string\", nGrams),\n    backend2.makeTensorInfo(dataSplits.shape, \"int32\", nGramsSplits)\n  ];\n}\nvar stringNGramsConfig2 = {\n  kernelName: StringNGrams,\n  backendName: \"webgl\",\n  kernelFunc: stringNGrams3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringSplit.js\nfunction stringSplit3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { skipEmpty } = attrs;\n  const { input: input2, delimiter } = inputs;\n  if (input2.dtype !== \"string\") {\n    throw new Error(\"Input must be of datatype string\");\n  }\n  if (input2.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input2.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n  const $input = backend2.readSync(input2.dataId);\n  const $delimiter = backend2.readSync(delimiter.dataId)[0];\n  const [indices, values, shape] = stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend2.makeTensorInfo([outputSize, 2], \"int32\", indices),\n    backend2.makeTensorInfo([outputSize], \"string\", values),\n    backend2.makeTensorInfo([2], \"int32\", new Int32Array(shape))\n  ];\n}\nvar stringSplitConfig2 = {\n  kernelName: StringSplit,\n  backendName: \"webgl\",\n  kernelFunc: stringSplit3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringToHashBucketFast.js\nfunction stringToHashBucketFast3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { numBuckets } = attrs;\n  const { input: input2 } = inputs;\n  if (input2.dtype !== \"string\") {\n    throw new Error(\"Input must be of datatype string\");\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n  const $input = backend2.readSync(input2.dataId);\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend2.makeTensorInfo(input2.shape, \"int32\", output);\n}\nvar stringToHashBucketFastConfig2 = {\n  kernelName: StringToHashBucketFast,\n  backendName: \"webgl\",\n  kernelFunc: stringToHashBucketFast3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tan.js\nvar TAN = `return tan(x);`;\nvar tan3 = unaryKernelFunc2({ opSnippet: TAN });\nvar tanConfig2 = {\n  kernelName: Tan,\n  backendName: \"webgl\",\n  kernelFunc: tan3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tanh.js\nvar TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\nvar tanh4 = unaryKernelFunc2({ opSnippet: TANH });\nvar tanhConfig2 = {\n  kernelName: Tanh,\n  backendName: \"webgl\",\n  kernelFunc: tanh4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js\nvar TileProgram = class {\n  constructor(aShape, reps) {\n    this.variableNames = [\"A\"];\n    const outputShape = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords3(aShape);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n};\nfunction getSourceCoords3(aShape) {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n  const currentCoords = [\"resRC.x\", \"resRC.y\", \"resRC.z\", \"resRC.w\", \"resRC.u\"];\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tile.js\nfunction tile4(params) {\n  const { inputs, backend: backend2, attrs } = params;\n  const { x } = inputs;\n  const { reps } = attrs;\n  if (x.dtype === \"string\" || x.shape.length > 5) {\n    const data = backend2.readSync(x.dataId);\n    const value = x.dtype === \"string\" ? data.map((d) => util_exports.decodeString(d)) : data;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend2.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n  const program = new TileProgram(x.shape, reps);\n  const output = backend2.runWebGLProgram(program, [x], x.dtype);\n  return output;\n}\nvar tileConfig2 = {\n  kernelName: Tile,\n  backendName: \"webgl\",\n  kernelFunc: tile4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/top_k_gpu.js\nvar SwapProgram = class {\n  constructor(shape) {\n    this.variableNames = [\"x\", \"indices\"];\n    this.customUniforms = [\n      { name: \"n\", type: \"int\" },\n      { name: \"firstPass\", type: \"int\" },\n      { name: \"negativeInf\", type: \"float\" },\n      { name: \"dir\", type: \"int\" },\n      { name: \"inc\", type: \"int\" }\n    ];\n    this.outputShape = shape;\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n};\nvar MergeProgram = class {\n  constructor(shape) {\n    this.variableNames = [\"x\", \"indices\"];\n    this.customUniforms = [\n      { name: \"n\", type: \"int\" },\n      { name: \"firstPass\", type: \"int\" },\n      { name: \"k\", type: \"int\" }\n    ];\n    this.outputShape = shape;\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/TopK.js\nfunction disposeIntermediateTensorInfoOrNull(backend2, tensorInfo) {\n  if (tensorInfo !== null) {\n    backend2.disposeIntermediateTensorInfo(tensorInfo);\n  }\n}\nfunction roundUpToPow2(num) {\n  let pow22 = 1;\n  while (pow22 < num) {\n    pow22 *= 2;\n  }\n  return pow22;\n}\nfunction topK2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { k, sorted } = attrs;\n  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber(\"TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD\");\n  const TOPK_K_CPU_HANDOFF_THRESHOLD = env().getNumber(\"TOPK_K_CPU_HANDOFF_THRESHOLD\");\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n  if (backend2.shouldExecuteOnCPU([x]) || lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD || k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n    const xVals = backend2.readSync(x.dataId);\n    const [allTopKVals, allTopKIndices] = topKImplCPU(xVals, xShape, x.dtype, k, sorted);\n    return [\n      backend2.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend2.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend2.makeTensorInfo(xShape, x.dtype, []),\n      backend2.makeTensorInfo(xShape, \"int32\", [])\n    ];\n  }\n  if (lastDim === 1) {\n    return [\n      x,\n      fill3({ attrs: { shape: xShape, dtype: \"int32\", value: 0 }, backend: backend2 })\n    ];\n  }\n  const xtexData = backend2.texData.get(x.dataId);\n  const xIsPacked = xtexData !== null && xtexData.isPacked;\n  const xUnPacked = xIsPacked ? backend2.unpackTensor(x) : x;\n  const xSize = util_exports.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape4({ inputs: { x: xUnPacked }, attrs: { shape: [batch, lastDim] }, backend: backend2 });\n  if (xIsPacked) {\n    disposeIntermediateTensorInfoOrNull(backend2, xUnPacked);\n  }\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n  let indices = null;\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n  const runSwap = (dir, inc, shape) => {\n    const inputs2 = getInputs();\n    const program = new SwapProgram(shape);\n    const fistPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n    const prevIndices2 = indices;\n    indices = backend2.runWebGLProgram(program, inputs2, \"int32\", customValues);\n    disposeIntermediateTensorInfoOrNull(backend2, prevIndices2);\n  };\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs2 = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [firstPass], [kPow2]];\n    const prevIndices2 = indices;\n    indices = backend2.runWebGLProgram(mergeProgram, inputs2, \"int32\", customValues);\n    disposeIntermediateTensorInfoOrNull(backend2, prevIndices2);\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n  let prevIndices = indices;\n  indices = slice3({ inputs: { x: indices }, backend: backend2, attrs: { begin: 0, size: [batch, k] } });\n  disposeIntermediateTensorInfoOrNull(backend2, prevIndices);\n  let values = gatherV22({ inputs: { x: x2D, indices }, backend: backend2, attrs: { axis: 1, batchDims: 1 } });\n  disposeIntermediateTensorInfoOrNull(backend2, x2D);\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n  prevIndices = indices;\n  indices = reshape4({ inputs: { x: indices }, attrs: { shape: newShape }, backend: backend2 });\n  disposeIntermediateTensorInfoOrNull(backend2, prevIndices);\n  const prevValues = values;\n  values = reshape4({ inputs: { x: values }, attrs: { shape: newShape }, backend: backend2 });\n  disposeIntermediateTensorInfoOrNull(backend2, prevValues);\n  return [values, indices];\n}\nvar topKConfig2 = {\n  kernelName: TopK,\n  backendName: \"webgl\",\n  kernelFunc: topK2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/transform_gpu.js\nvar TransformProgram = class {\n  constructor(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape) {\n    this.variableNames = [\"Image\", \"Transforms\"];\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === \"nearest\" ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case \"constant\":\n        fillModeId = 1;\n        break;\n      case \"reflect\":\n        fillModeId = 2;\n        break;\n      case \"wrap\":\n        fillModeId = 3;\n        break;\n      case \"nearest\":\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transform.js\nfunction transform3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { image: image2, transforms } = inputs;\n  const { interpolation, fillMode, fillValue, outputShape } = attrs;\n  const [batch, imageHeight, imageWidth, numChannels] = image2.shape;\n  const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [\n    batch,\n    outHeight,\n    outWidth,\n    numChannels\n  ];\n  const program = new TransformProgram(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend2.runWebGLProgram(program, [image2, transforms], \"float32\");\n}\nvar transformConfig2 = {\n  kernelName: Transform,\n  backendName: \"webgl\",\n  kernelFunc: transform3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unique.js\nfunction unique4(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const { axis } = attrs;\n  const { x } = inputs;\n  assertNotComplex2(x, \"unique\");\n  console.warn(\"WARNING: \", \"UI might be locked temporarily as data is being downloaded\");\n  const values = backend2.readSync(x.dataId);\n  const { outputValues, outputShape, indices } = uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend2.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend2.makeTensorInfo([indices.length], \"int32\", indices)\n  ];\n}\nvar uniqueConfig2 = {\n  kernelName: Unique,\n  backendName: \"webgl\",\n  kernelFunc: unique4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unpack.js\nfunction unpack2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { value } = inputs;\n  let { axis } = attrs;\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n  const x = value;\n  const xRank = x.shape.length;\n  const num = value.shape[axis];\n  const outShape = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n  const toDispose = [];\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice3({ inputs: { x }, backend: backend2, attrs: { begin, size } });\n    const reshaped = reshape4({ inputs: { x: sliced }, backend: backend2, attrs: { shape: outShape } });\n    res[i] = reshaped;\n    toDispose.push(sliced);\n  }\n  toDispose.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return res;\n}\nvar unpackConfig2 = {\n  kernelName: Unpack,\n  backendName: \"webgl\",\n  kernelFunc: unpack2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js\nvar SegmentOpProgram = class {\n  constructor(segOpInfo, segOpType) {\n    this.variableNames = [\"x\", \"segmentIds\"];\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n    const initializationValue = \"0.0\";\n    const returnValue = `sumValue`;\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n    let checkValueOutOfBounds = \"\";\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    let checkSegmentIdOutOfBounds = \"\";\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/UnsortedSegmentSum.js\nfunction unsortedSegmentSum3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x, segmentIds } = inputs;\n  const { numSegments } = attrs;\n  const xRank = x.shape.length;\n  const toDispose = [];\n  let axis = 0;\n  const permutation = backend_util_exports.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose3({ inputs: { x }, backend: backend2, attrs: { perm: permutation } });\n    toDispose.push(permutedX);\n    axis = backend_util_exports.getInnerMostAxes(1, xRank)[0];\n  }\n  const outShape = backend_util_exports.segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n  const inSize = util_exports.sizeFromShape([permutedX.shape[axis]]);\n  const a2D = reshape4({ inputs: { x: permutedX }, backend: backend2, attrs: { shape: [-1, inSize] } });\n  toDispose.push(a2D);\n  const outputDType = sumOutType(x.dtype);\n  const segOpCompute = (x2, segOpType, segmentIds2, dtype, numSegments2) => {\n    const batchSize = x2.shape[0];\n    const inSize2 = x2.shape[1];\n    const windowSize = backend_util_exports.segment_util.segOpComputeOptimalWindowSize(inSize2, numSegments2);\n    const segOpInfo = { windowSize, inSize: inSize2, batchSize, numSegments: numSegments2 };\n    const program = new SegmentOpProgram(segOpInfo, segOpType);\n    const output = backend2.compileAndRun(program, [x2, segmentIds2], dtype);\n    toDispose.push(output);\n    if (output.shape[1] === numSegments2) {\n      return output;\n    }\n    const rangeInfo = range4({\n      backend: backend2,\n      attrs: { start: 0, stop: numSegments2, step: 1, dtype: \"float32\" }\n    });\n    const tileInfo = tile4({\n      inputs: { x: rangeInfo },\n      backend: backend2,\n      attrs: { reps: [inSize2 / windowSize] }\n    });\n    toDispose.push(rangeInfo);\n    toDispose.push(tileInfo);\n    const result2 = segOpCompute(output, segOpType, tileInfo, dtype, numSegments2);\n    return result2;\n  };\n  const segOpResult = segOpCompute(a2D, \"unsortedSegmentSum\", segmentIds, outputDType, numSegments);\n  const reshaped = reshape4({ inputs: { x: segOpResult }, backend: backend2, attrs: { shape: outShape } });\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util_exports.getUndoAxesPermutation(permutation);\n    result = transpose3({ inputs: { x: result }, backend: backend2, attrs: { perm } });\n  }\n  toDispose.forEach((t) => backend2.disposeIntermediateTensorInfo(t));\n  return result;\n}\nvar unsortedSegmentSumConfig2 = {\n  kernelName: UnsortedSegmentSum,\n  backendName: \"webgl\",\n  kernelFunc: unsortedSegmentSum3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-webgl@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js\nvar kernelConfigs2 = [\n  _fusedMatMulConfig2,\n  absConfig2,\n  acosConfig2,\n  acoshConfig2,\n  addConfig2,\n  addNConfig2,\n  allConfig2,\n  anyConfig2,\n  argMaxConfig2,\n  argMinConfig2,\n  asinConfig2,\n  asinhConfig2,\n  atanConfig2,\n  atan2Config2,\n  atanhConfig2,\n  avgPoolConfig2,\n  avgPool3DConfig2,\n  avgPool3DGradConfig3,\n  avgPoolGradConfig3,\n  batchMatMulConfig2,\n  batchNormConfig2,\n  batchToSpaceNDConfig2,\n  bincountConfig2,\n  broadcastArgsConfig2,\n  castConfig2,\n  ceilConfig2,\n  clipByValueConfig2,\n  complexConfig2,\n  complexAbsConfig2,\n  concatConfig2,\n  conv2DConfig2,\n  conv2DBackpropFilterConfig2,\n  conv2DBackpropInputConfig2,\n  conv3DConfig2,\n  conv3DBackpropFilterV2Config2,\n  conv3DBackpropInputConfig,\n  cosConfig2,\n  coshConfig2,\n  cropAndResizeConfig2,\n  cumsumConfig2,\n  denseBincountConfig2,\n  depthToSpaceConfig2,\n  depthwiseConv2dNativeConfig2,\n  depthwiseConv2dNativeBackpropFilterConfig2,\n  depthwiseConv2dNativeBackpropInputConfig2,\n  diagConfig2,\n  dilation2DConfig2,\n  einsumConfig2,\n  eluConfig2,\n  eluGradConfig3,\n  equalConfig2,\n  erfConfig2,\n  expConfig2,\n  expandDimsConfig2,\n  expm1Config2,\n  fftConfig2,\n  fillConfig2,\n  flipLeftRightConfig2,\n  floorConfig2,\n  floorDivConfig2,\n  fromPixelsConfig,\n  fusedConv2DConfig2,\n  fusedDepthwiseConv2DConfig2,\n  gatherNdConfig2,\n  gatherV2Config2,\n  greaterConfig2,\n  greaterEqualConfig2,\n  identityConfig2,\n  ifftConfig2,\n  imagConfig2,\n  isFiniteConfig2,\n  isInfConfig2,\n  isNaNConfig2,\n  leakyReluConfig2,\n  lessConfig2,\n  lessEqualConfig2,\n  linSpaceConfig2,\n  logConfig2,\n  log1pConfig2,\n  logicalAndConfig2,\n  logicalNotConfig2,\n  logicalOrConfig2,\n  LRNConfig2,\n  LRNGradConfig2,\n  maxConfig2,\n  maximumConfig2,\n  maxPoolConfig2,\n  maxPool3DConfig2,\n  maxPool3DGradConfig3,\n  maxPoolGradConfig3,\n  maxPoolWithArgmaxConfig2,\n  meanConfig2,\n  minConfig2,\n  minimumConfig2,\n  mirrorPadConfig2,\n  modConfig2,\n  multinomialConfig2,\n  multiplyConfig2,\n  negConfig2,\n  nonMaxSuppressionV3Config2,\n  nonMaxSuppressionV4Config2,\n  nonMaxSuppressionV5Config2,\n  notEqualConfig2,\n  oneHotConfig2,\n  onesLikeConfig2,\n  packConfig2,\n  padV2Config2,\n  powConfig2,\n  preluConfig2,\n  prodConfig2,\n  rangeConfig2,\n  realConfig2,\n  realDivConfig2,\n  reciprocalConfig2,\n  reluConfig2,\n  relu6Config2,\n  reshapeConfig2,\n  resizeBilinearConfig2,\n  resizeBilinearGradConfig3,\n  resizeNearestNeighborConfig2,\n  resizeNearestNeighborGradConfig3,\n  reverseConfig2,\n  rotateWithOffsetConfig2,\n  roundConfig2,\n  rsqrtConfig2,\n  scatterNdConfig2,\n  selectConfig2,\n  seluConfig2,\n  sigmoidConfig2,\n  signConfig2,\n  sinConfig2,\n  sinhConfig2,\n  sliceConfig2,\n  softmaxConfig2,\n  softplusConfig2,\n  spaceToBatchNDConfig2,\n  sparseFillEmptyRowsConfig2,\n  sparseReshapeConfig2,\n  sparseSegmentMeanConfig2,\n  sparseSegmentSumConfig2,\n  sparseToDenseConfig2,\n  splitVConfig2,\n  sqrtConfig2,\n  squareConfig2,\n  squaredDifferenceConfig2,\n  stepConfig2,\n  stridedSliceConfig2,\n  stringNGramsConfig2,\n  stringSplitConfig2,\n  stringToHashBucketFastConfig2,\n  subConfig2,\n  sumConfig2,\n  tanConfig2,\n  tanhConfig2,\n  tileConfig2,\n  topKConfig2,\n  transformConfig2,\n  transposeConfig2,\n  uniqueConfig2,\n  unpackConfig2,\n  unsortedSegmentSumConfig2,\n  zerosLikeConfig2\n];\nfor (const kernelConfig of kernelConfigs2) {\n  registerKernel(kernelConfig);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/types.js\nvar CppDType;\n(function(CppDType2) {\n  CppDType2[CppDType2[\"float32\"] = 0] = \"float32\";\n  CppDType2[CppDType2[\"int32\"] = 1] = \"int32\";\n  CppDType2[CppDType2[\"bool\"] = 2] = \"bool\";\n  CppDType2[CppDType2[\"string\"] = 3] = \"string\";\n  CppDType2[CppDType2[\"complex64\"] = 4] = \"complex64\";\n})(CppDType || (CppDType = {}));\nvar FusableActivation;\n(function(FusableActivation2) {\n  FusableActivation2[FusableActivation2[\"linear\"] = 0] = \"linear\";\n  FusableActivation2[FusableActivation2[\"relu\"] = 1] = \"relu\";\n  FusableActivation2[FusableActivation2[\"relu6\"] = 2] = \"relu6\";\n  FusableActivation2[FusableActivation2[\"prelu\"] = 3] = \"prelu\";\n  FusableActivation2[FusableActivation2[\"leakyrelu\"] = 4] = \"leakyrelu\";\n  FusableActivation2[FusableActivation2[\"sigmoid\"] = 5] = \"sigmoid\";\n  FusableActivation2[FusableActivation2[\"elu\"] = 6] = \"elu\";\n})(FusableActivation || (FusableActivation = {}));\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/_FusedMatMul.js\nvar wasmFusedMatMul;\nfunction setup(backend2) {\n  wasmFusedMatMul = backend2.wasm.cwrap(_FusedMatMul, null, [\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction fusedBatchMatMul(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { a, b, bias, preluActivationWeights } = inputs;\n  if (a.dtype !== \"float32\" || b.dtype !== \"float32\") {\n    throw new Error(`_FusedMatMul for non non-float32 tensors not yet supported.`);\n  }\n  const { transposeA, transposeB, activation: activation2, leakyreluAlpha } = attrs;\n  const aId = backend2.dataIdMap.get(a.dataId).id;\n  const bId = backend2.dataIdMap.get(b.dataId).id;\n  let biasId = 0;\n  if (bias != null) {\n    const biasData = backend2.dataIdMap.get(bias.dataId);\n    if (biasData.shape.length !== 1) {\n      throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${biasData.shape.length}.`);\n    }\n    biasId = biasData.id;\n  }\n  const preluActivationWeightsId = preluActivationWeights == null ? 0 : backend2.dataIdMap.get(preluActivationWeights.dataId).id;\n  const fusedActivation = FusableActivation[activation2];\n  if (fusedActivation == null) {\n    throw new Error(`${activation2} activation not yet supported for FusedConv2D in the wasm backend.`);\n  }\n  const leftDim = transposeA ? a.shape[2] : a.shape[1];\n  const rightDim = transposeB ? b.shape[1] : b.shape[2];\n  const batchDims = broadcast_util_exports.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const out = backend2.makeOutput([...batchDims, leftDim, rightDim], a.dtype);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const aShapeBytes = new Uint8Array(new Int32Array(a.shape).buffer);\n  const bShapeBytes = new Uint8Array(new Int32Array(b.shape).buffer);\n  wasmFusedMatMul(aId, aShapeBytes, a.shape.length, bId, bShapeBytes, b.shape.length, transposeA, transposeB, fusedActivation, biasId, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n  return out;\n}\nvar _fusedMatMulConfig3 = {\n  kernelName: _FusedMatMul,\n  backendName: \"wasm\",\n  setupFunc: setup,\n  kernelFunc: fusedBatchMatMul\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/unary_kernel.js\nfunction createUnaryKernelConfig(kernelName, outType) {\n  let wasmFunc9;\n  function setupFunc3(backend2) {\n    wasmFunc9 = backend2.wasm.cwrap(kernelName, null, [\n      \"number\",\n      \"number\",\n      \"number\"\n    ]);\n  }\n  function kernelFunc3(args) {\n    const { backend: backend2, inputs: { x } } = args;\n    const xId = backend2.dataIdMap.get(x.dataId).id;\n    const out = backend2.makeOutput(x.shape, outType || x.dtype);\n    const outId = backend2.dataIdMap.get(out.dataId).id;\n    if (util_exports.sizeFromShape(out.shape) === 0) {\n      return out;\n    }\n    wasmFunc9(xId, CppDType[x.dtype], outId);\n    return out;\n  }\n  return { kernelName, backendName: \"wasm\", setupFunc: setupFunc3, kernelFunc: kernelFunc3 };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Abs.js\nvar absConfig3 = createUnaryKernelConfig(Abs);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/binary_kernel.js\nfunction createBinaryKernelConfig(kernelName, supportsFullBroadcast17, dtype) {\n  let wasmFunc9;\n  function setupFunc3(backend2) {\n    wasmFunc9 = backend2.wasm.cwrap(kernelName, null, [\n      \"number\",\n      \"array\",\n      \"number\",\n      \"number\",\n      \"array\",\n      \"number\",\n      \"number\",\n      \"number\"\n    ]);\n  }\n  function kernelFunc3(args) {\n    const { backend: backend2, inputs } = args;\n    const { a, b } = inputs;\n    const aId = backend2.dataIdMap.get(a.dataId).id;\n    const bId = backend2.dataIdMap.get(b.dataId).id;\n    const outputType = dtype != null ? dtype : a.dtype;\n    const newShape = backend_util_exports.assertAndGetBroadcastShape(a.shape, b.shape);\n    const out = backend2.makeOutput(newShape, outputType);\n    if (util_exports.sizeFromShape(newShape) === 0) {\n      return out;\n    }\n    const aShapeBytes = new Uint8Array(new Int32Array(a.shape).buffer);\n    const bShapeBytes = new Uint8Array(new Int32Array(b.shape).buffer);\n    const outId = backend2.dataIdMap.get(out.dataId).id;\n    const kernelFunc4 = () => wasmFunc9(aId, aShapeBytes, a.shape.length, bId, bShapeBytes, b.shape.length, CppDType[a.dtype], outId);\n    kernelFunc4();\n    return out;\n  }\n  return { kernelName, backendName: \"wasm\", setupFunc: setupFunc3, kernelFunc: kernelFunc3 };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Add.js\nvar supportsFullBroadcast = true;\nvar addConfig3 = createBinaryKernelConfig(Add, supportsFullBroadcast);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/AddN.js\nvar wasmFunc;\nfunction setupFunc(backend2) {\n  wasmFunc = backend2.wasm.cwrap(AddN, null, [\n    \"array\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction addn(args) {\n  const { inputs, backend: backend2 } = args;\n  const out = backend2.makeOutput(inputs[0].shape, inputs[0].dtype);\n  if (util_exports.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n  const inputIds = inputs.map((x) => backend2.dataIdMap.get(x.dataId).id);\n  const inputIdsBytes = new Uint8Array(new Int32Array(inputIds).buffer);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmFunc(inputIdsBytes, inputIds.length, CppDType[out.dtype], outId);\n  return out;\n}\nvar addNConfig3 = {\n  kernelName: AddN,\n  backendName: \"wasm\",\n  setupFunc,\n  kernelFunc: addn\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Identity.js\nfunction identity4(args) {\n  const { inputs: { x }, backend: backend2 } = args;\n  const out = backend2.makeOutput(x.shape, x.dtype);\n  const inVals = backend2.typedArrayFromHeap(x);\n  const outVals = backend2.typedArrayFromHeap(out);\n  outVals.set(inVals);\n  return out;\n}\nvar identityConfig3 = {\n  kernelName: Identity,\n  backendName: \"wasm\",\n  kernelFunc: identity4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Transpose.js\nvar wasmTranspose;\nfunction setup2(backend2) {\n  wasmTranspose = backend2.wasm.cwrap(Transpose, null, [\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"array\",\n    \"number\"\n  ]);\n}\nfunction transpose4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const [reducedShape, perm] = removeOneSizeDims(inputs.x.shape, attrs.perm);\n  let permIsNoOp = true;\n  for (let i = 0; i < perm.length; i++) {\n    if (perm[i] !== i) {\n      permIsNoOp = false;\n    }\n  }\n  const outShape = computeOutShape4(inputs.x.shape, attrs.perm);\n  const x = {\n    dataId: inputs.x.dataId,\n    shape: reducedShape,\n    dtype: inputs.x.dtype\n  };\n  if (permIsNoOp) {\n    const cloned = identity4({ inputs, backend: backend2 });\n    cloned.shape = outShape;\n    return cloned;\n  }\n  const out = backend2.makeOutput(outShape, x.dtype);\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const permBytes = new Uint8Array(new Int32Array(perm).buffer);\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  wasmTranspose(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], outId, permBytes, perm.length);\n  return out;\n}\nfunction computeOutShape4(inShape, perm) {\n  const outShape = new Array(inShape.length);\n  for (let i = 0; i < outShape.length; i++) {\n    outShape[i] = inShape[perm[i]];\n  }\n  return outShape;\n}\nfunction removeOneSizeDims(shape, perm) {\n  const newShape = [];\n  const newPerm = [];\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n    }\n    if (shape[perm[i]] !== 1) {\n      newPerm.push(perm[i]);\n    }\n  }\n  for (let i = 0; i < newPerm.length; ++i) {\n    let minValIdx = -1;\n    for (let j = 0; j < newPerm.length; ++j) {\n      if (newPerm[j] >= i && (minValIdx === -1 || newPerm[minValIdx] > newPerm[j])) {\n        minValIdx = j;\n      }\n    }\n    newPerm[minValIdx] = i;\n  }\n  return [newShape, newPerm];\n}\nvar transposeConfig3 = {\n  kernelName: Transpose,\n  backendName: \"wasm\",\n  kernelFunc: transpose4,\n  setupFunc: setup2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/kernel_utils.js\nfunction permuteAxesAndTranspose(x, axis, backend2) {\n  const xShape = x.shape;\n  const xRank = x.shape.length;\n  const originalAxes = util_exports.parseAxisParam(axis, xShape);\n  let axes = originalAxes;\n  const permutedAxes = backend_util_exports.getAxesPermutation(axes, xRank);\n  let xTransposed = null;\n  let inputWasTransposed = false;\n  if (permutedAxes != null) {\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n    axes = backend_util_exports.getInnerMostAxes(axes.length, xRank);\n    xTransposed = transpose4({ inputs: { x }, attrs: { perm: permutedAxes }, backend: backend2 });\n    const xId = backend2.dataIdMap.get(x.dataId).id;\n    const transposedId = backend2.dataIdMap.get(xTransposed.dataId).id;\n    if (transposedId !== xId) {\n      inputWasTransposed = true;\n    }\n  }\n  return { transposed: xTransposed, originalAxes, axes, inputWasTransposed };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/All.js\nvar wasmAll;\nfunction setup3(backend2) {\n  wasmAll = backend2.wasm.cwrap(All, null, [\"number, number, number\"]);\n}\nfunction all4(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { axis, keepDims } = attrs;\n  const { x } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input2 = x;\n  const { transposed, axes, originalAxes, inputWasTransposed } = permuteAxesAndTranspose(x, axis, backend2);\n  if (inputWasTransposed) {\n    const transposedId = backend2.dataIdMap.get(transposed.dataId).id;\n    input2 = transposed;\n    inputId = transposedId;\n  }\n  const inputRank = input2.shape.length;\n  backend_util_exports.assertAxesAreInnerMostDims(\"all\", axes, inputRank);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(input2.shape, axes);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const out = backend2.makeOutput(outShape, x.dtype);\n  if (util_exports.sizeFromShape(input2.shape) !== 0) {\n    const outId = backend2.dataIdMap.get(out.dataId).id;\n    wasmAll(inputId, reduceSize, outId);\n  }\n  if (inputWasTransposed) {\n    backend2.disposeData(transposed.dataId);\n  }\n  if (keepDims) {\n    const newShape = backend_util_exports.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n  return out;\n}\nvar allConfig3 = {\n  kernelName: All,\n  backendName: \"wasm\",\n  setupFunc: setup3,\n  kernelFunc: all4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Any.js\nvar wasmAny;\nfunction setup4(backend2) {\n  wasmAny = backend2.wasm.cwrap(Any, null, [\"number, number, number\"]);\n}\nfunction any4(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { axis, keepDims } = attrs;\n  const { x } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input2 = x;\n  const { transposed, axes, originalAxes, inputWasTransposed } = permuteAxesAndTranspose(x, axis, backend2);\n  if (inputWasTransposed) {\n    const transposedId = backend2.dataIdMap.get(transposed.dataId).id;\n    input2 = transposed;\n    inputId = transposedId;\n  }\n  const inputRank = input2.shape.length;\n  backend_util_exports.assertAxesAreInnerMostDims(\"any\", axes, inputRank);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(input2.shape, axes);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const out = backend2.makeOutput(outShape, x.dtype);\n  if (util_exports.sizeFromShape(input2.shape) !== 0) {\n    const outId = backend2.dataIdMap.get(out.dataId).id;\n    wasmAny(inputId, reduceSize, outId);\n  }\n  if (inputWasTransposed) {\n    backend2.disposeData(transposed.dataId);\n  }\n  if (keepDims) {\n    const newShape = backend_util_exports.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n  return out;\n}\nvar anyConfig3 = {\n  kernelName: Any,\n  backendName: \"wasm\",\n  setupFunc: setup4,\n  kernelFunc: any4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/ArgMax.js\nvar wasmFunc2;\nfunction setup5(backend2) {\n  wasmFunc2 = backend2.wasm.cwrap(ArgMax, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction argmax(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { axis } = attrs;\n  const { x } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input2 = x;\n  const { transposed, axes, inputWasTransposed } = permuteAxesAndTranspose(x, axis, backend2);\n  if (inputWasTransposed) {\n    const transposedId = backend2.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      input2 = transposed;\n      inputId = transposedId;\n    }\n  }\n  const outShape = input2.shape.slice(0, -1);\n  const out = backend2.makeOutput(outShape, \"int32\");\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const outerSize = util_exports.sizeFromShape(out.shape);\n  const innerSize = input2.shape[axes[0]];\n  wasmFunc2(inputId, CppDType[input2.dtype], outerSize, innerSize, outId);\n  if (inputWasTransposed) {\n    backend2.disposeData(transposed.dataId);\n  }\n  return out;\n}\nvar argMaxConfig3 = {\n  kernelName: ArgMax,\n  backendName: \"wasm\",\n  kernelFunc: argmax,\n  setupFunc: setup5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/AvgPool.js\nvar wasmAvgPool;\nfunction setup6(backend2) {\n  wasmAvgPool = backend2.wasm.cwrap(AvgPool, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction avgPool4(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const x = inputs.x;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n  const convInfo = backend_util_exports.computePool2DInfo(x.shape, filterSize, strides, 1, pad3, dimRoundingMode);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const channels = convInfo.inChannels;\n  if (convInfo.dataFormat !== \"channelsLast\") {\n    throw new Error(`wasm backend does not support dataFormat:'${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n  if (convInfo.dilationWidth !== 1 || convInfo.dilationHeight !== 1) {\n    throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${convInfo.dilationHeight}, ${convInfo.dilationWidth}].`);\n  }\n  const out = backend2.makeOutput(convInfo.outShape, \"float32\");\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmAvgPool(xId, x.shape[0], x.shape[1], x.shape[2], filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, strideHeight, strideWidth, channels, outId);\n  return out;\n}\nvar avgPoolConfig3 = {\n  kernelName: AvgPool,\n  backendName: \"wasm\",\n  setupFunc: setup6,\n  kernelFunc: avgPool4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Reshape.js\nfunction reshape5(args) {\n  const { inputs, attrs } = args;\n  const { x } = inputs;\n  const { shape } = attrs;\n  const xSize = util_exports.sizeFromShape(x.shape);\n  const $shape = util_exports.inferFromImplicitShape(shape, xSize);\n  util_exports.assert(xSize === util_exports.sizeFromShape($shape), () => `new shape: ${$shape}, old shape: ${x.shape}. New shape and old shape must have the same number of elements.`);\n  args.backend.incRef(x.dataId);\n  return { dataId: x.dataId, shape: $shape, dtype: x.dtype };\n}\nvar reshapeConfig3 = {\n  kernelName: Reshape,\n  backendName: \"wasm\",\n  kernelFunc: reshape5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/BatchMatMul.js\nvar wasmBatchMatMul;\nfunction setup7(backend2) {\n  wasmBatchMatMul = backend2.wasm.cwrap(BatchMatMul, null, [\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction batchMatMul3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { a, b } = inputs;\n  const { transposeA, transposeB } = attrs;\n  if (a.dtype !== \"float32\" || b.dtype !== \"float32\") {\n    throw new Error(`BatchMatMul for non non-float32 tensors not yet supported.`);\n  }\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n  const batchDimA = util_exports.sizeFromShape(outerDimsA);\n  const batchDimB = util_exports.sizeFromShape(outerDimsB);\n  const outShapeOuterDims = broadcast_util_exports.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n  util_exports.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (${innerShapeB}) of Tensors with shapes ${a.shape} and ${b.shape} and transposeA=${transposeA} and transposeB=${transposeB} must match.`);\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] : [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] : [batchDimB, innerShapeB, outerShapeB];\n  const a3d = reshape5({ inputs: { x: a }, backend: backend2, attrs: { shape: a3dShape } });\n  const b3d = reshape5({ inputs: { x: b }, backend: backend2, attrs: { shape: b3dShape } });\n  const a3dId = backend2.dataIdMap.get(a3d.dataId).id;\n  const b3dId = backend2.dataIdMap.get(b3d.dataId).id;\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const out = backend2.makeOutput([batchDim, leftDim, rightDim], a3d.dtype);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const aShapeBytes = new Uint8Array(new Int32Array(a3d.shape).buffer);\n  const bShapeBytes = new Uint8Array(new Int32Array(b3d.shape).buffer);\n  wasmBatchMatMul(a3dId, aShapeBytes, a3d.shape.length, b3dId, bShapeBytes, b3d.shape.length, transposeA, transposeB, outId);\n  backend2.disposeData(a3d.dataId);\n  backend2.disposeData(b3d.dataId);\n  out.shape = outShape;\n  return out;\n}\nvar batchMatMulConfig3 = {\n  kernelName: BatchMatMul,\n  backendName: \"wasm\",\n  setupFunc: setup7,\n  kernelFunc: batchMatMul3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Slice.js\nfunction slice4(args) {\n  const { inputs: { x }, attrs: { begin, size }, backend: backend2 } = args;\n  const [begin_, size_] = slice_util_exports.parseSliceParams(x, begin, size);\n  const isContinous = slice_util_exports.isSliceContinous(x.shape, begin_, size_);\n  const xVals = backend2.readSync(x.dataId);\n  const out = backend2.makeOutput(size_, x.dtype);\n  const xStrides = util_exports.computeStrides(x.shape);\n  const outData = backend2.dataIdMap.get(out.dataId);\n  if (isContinous) {\n    const flatOffset = slice_util_exports.computeFlatOffset(begin_, xStrides);\n    if (x.dtype === \"string\") {\n      outData.stringBytes = xVals.slice(flatOffset, flatOffset + util_exports.sizeFromShape(size_));\n    } else {\n      const outVals2 = backend2.typedArrayFromHeap(out);\n      outVals2.set(xVals.subarray(flatOffset, flatOffset + util_exports.sizeFromShape(size_)));\n    }\n    return out;\n  }\n  if (x.dtype === \"string\") {\n    const res = sliceImpl(xVals, begin_, size_, x.shape, x.dtype);\n    outData.stringBytes = res;\n    return out;\n  }\n  const outVals = backend2.typedArrayFromHeap(out);\n  const rank = x.shape.length;\n  if (rank === 2) {\n    slice2d2(xVals, xStrides[0], outVals, begin_, size_);\n  } else if (rank === 3) {\n    slice3d2(xVals, xStrides[0], xStrides[1], outVals, begin_, size_);\n  } else if (rank === 4) {\n    slice4d2(xVals, xStrides[0], xStrides[1], xStrides[2], outVals, begin_, size_);\n  } else {\n    const res = sliceImpl(xVals, begin_, size_, x.shape, x.dtype);\n    outVals.set(res);\n  }\n  return out;\n}\nfunction slice2d2(xVals, xStride, outVals, begin, size) {\n  let outOffset = 0;\n  const beginI = begin[0];\n  const beginJ = begin[1];\n  const endI = beginI + size[0];\n  for (let i = beginI; i < endI; i++) {\n    const xOffset = i * xStride + beginJ;\n    outVals.set(xVals.subarray(xOffset, xOffset + size[1]), outOffset);\n    outOffset += size[1];\n  }\n}\nfunction slice3d2(xVals, xStride1, xStride2, outVals, begin, size) {\n  let outOffset = 0;\n  const beginI = begin[0];\n  const beginJ = begin[1];\n  const beginK = begin[2];\n  const endI = beginI + size[0];\n  const endJ = beginJ + size[1];\n  for (let i = beginI; i < endI; i++) {\n    for (let j = beginJ; j < endJ; j++) {\n      const xOffset = i * xStride1 + j * xStride2 + beginK;\n      outVals.set(xVals.subarray(xOffset, xOffset + size[2]), outOffset);\n      outOffset += size[2];\n    }\n  }\n}\nfunction slice4d2(xVals, xStride1, xStride2, xStride3, outVals, begin, size) {\n  let outOffset = 0;\n  const beginI = begin[0];\n  const beginJ = begin[1];\n  const beginK = begin[2];\n  const endI = beginI + size[0];\n  const endJ = beginJ + size[1];\n  const endK = beginK + size[2];\n  const beginL = begin[3];\n  for (let i = beginI; i < endI; i++) {\n    for (let j = beginJ; j < endJ; j++) {\n      for (let k = beginK; k < endK; k++) {\n        const xOffset = i * xStride1 + j * xStride2 + k * xStride3 + beginL;\n        outVals.set(xVals.subarray(xOffset, xOffset + size[3]), outOffset);\n        outOffset += size[3];\n      }\n    }\n  }\n}\nvar sliceConfig3 = {\n  kernelName: Slice,\n  backendName: \"wasm\",\n  kernelFunc: slice4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/BatchToSpaceND.js\nfunction batchToSpaceND4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { blockShape, crops } = attrs;\n  const prod5 = blockShape.reduce((a, b) => a * b);\n  const reshaped = backend_util_exports.getReshaped(x.shape, blockShape, prod5);\n  const permuted = backend_util_exports.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted = backend_util_exports.getReshapedPermuted(x.shape, blockShape, prod5);\n  const sliceBeginCoords = backend_util_exports.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize = backend_util_exports.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  const xReshaped = reshape5({ inputs: { x }, backend: backend2, attrs: { shape: reshaped } });\n  const xTransposed = transpose4({ inputs: { x: xReshaped }, backend: backend2, attrs: { perm: permuted } });\n  const xTransposedReshaped = reshape5({ inputs: { x: xTransposed }, backend: backend2, attrs: { shape: reshapedPermuted } });\n  const result = slice4({\n    inputs: { x: xTransposedReshaped },\n    backend: backend2,\n    attrs: { begin: sliceBeginCoords, size: sliceSize }\n  });\n  backend2.disposeData(xReshaped.dataId);\n  backend2.disposeData(xTransposed.dataId);\n  backend2.disposeData(xReshaped.dataId);\n  return result;\n}\nvar batchToSpaceNDConfig3 = {\n  kernelName: BatchToSpaceND,\n  backendName: \"wasm\",\n  kernelFunc: batchToSpaceND4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Cast.js\nfunction cast5(args) {\n  const { inputs: { x }, attrs: { dtype }, backend: backend2 } = args;\n  const out = backend2.makeOutput(x.shape, dtype);\n  const inVals = backend2.typedArrayFromHeap(x);\n  const outVals = backend2.typedArrayFromHeap(out);\n  outVals.set(inVals);\n  return out;\n}\nvar castConfig3 = {\n  kernelName: Cast,\n  backendName: \"wasm\",\n  kernelFunc: cast5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Ceil.js\nvar ceilConfig3 = createUnaryKernelConfig(Ceil);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/ClipByValue.js\nvar wasmClip;\nfunction setup8(backend2) {\n  wasmClip = backend2.wasm.cwrap(ClipByValue, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction clip(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { clipValueMin, clipValueMax } = attrs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const out = backend2.makeOutput(x.shape, x.dtype);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmClip(xId, clipValueMin, clipValueMax, outId);\n  return out;\n}\nvar clipByValueConfig3 = {\n  kernelName: ClipByValue,\n  backendName: \"wasm\",\n  setupFunc: setup8,\n  kernelFunc: clip\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Concat.js\nfunction concat4(args) {\n  const { inputs, backend: backend2 } = args;\n  const axis = util_exports.parseAxisParam(args.attrs.axis, inputs[0].shape)[0];\n  let outShape = backend_util_exports.computeOutShape(inputs.map((t) => t.shape), axis);\n  const $inputs = inputs.filter((t) => util_exports.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity4({ inputs: { x: $inputs[0] }, backend: backend2 });\n  }\n  const out = backend2.makeOutput(outShape, inputs[0].dtype);\n  if (util_exports.sizeFromShape(outShape) === 0) {\n    return out;\n  }\n  const shapes = $inputs.map((t) => t.shape);\n  backend_util_exports.assertParamsConsistent(shapes, axis);\n  if ($inputs[0].dtype === \"string\") {\n    const inputs2D = $inputs.map((t) => {\n      const innerSize = util_exports.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape5({ inputs: { x: t }, backend: backend2, attrs: { shape } });\n    });\n    const inputsValShapes = inputs2D.map((t) => {\n      return { vals: backend2.readSync(t.dataId), shape: t.shape };\n    });\n    outShape = backend_util_exports.computeOutShape(inputs2D.map((t) => t.shape), 1);\n    const simplyConcat = inputs2D[0].shape[0] === 1;\n    const outVals2 = concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n    const finalOutShape = backend_util_exports.computeOutShape($inputs.map((t) => t.shape), axis);\n    out.shape = finalOutShape;\n    const outData = backend2.dataIdMap.get(out.dataId);\n    outData.stringBytes = backend_util_exports.fromStringArrayToUint8(outVals2);\n    inputs2D.forEach((t) => backend2.disposeData(t.dataId));\n    return out;\n  }\n  const batchDim = util_exports.sizeFromShape($inputs[0].shape.slice(0, axis));\n  let sumInnerDims = 0;\n  const innerDims = $inputs.map((input2) => {\n    const innerDim = util_exports.sizeFromShape(input2.shape.slice(axis));\n    sumInnerDims += innerDim;\n    return innerDim;\n  });\n  const inVals = $inputs.map((input2) => backend2.typedArrayFromHeap(input2));\n  const outVals = backend2.typedArrayFromHeap(out);\n  for (let b = 0; b < batchDim; b++) {\n    let outOffset = b * sumInnerDims;\n    for (let i = 0; i < inVals.length; i++) {\n      const innerDim = innerDims[i];\n      const inOffset = b * innerDim;\n      const vals = inVals[i].subarray(inOffset, inOffset + innerDim);\n      outVals.set(vals, outOffset);\n      outOffset += innerDim;\n    }\n  }\n  return out;\n}\nvar concatConfig3 = {\n  kernelName: Concat,\n  backendName: \"wasm\",\n  kernelFunc: concat4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Conv2D.js\nvar wasmConv2d;\nfunction setup9(backend2) {\n  wasmConv2d = backend2.wasm.cwrap(Conv2D, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction conv2d5(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const { x, filter } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const filterId = backend2.dataIdMap.get(filter.dataId).id;\n  const { strides, dilations, pad: pad3, dimRoundingMode, dataFormat } = attrs;\n  const $dataFormat = backend_util_exports.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad3, dimRoundingMode, false, $dataFormat);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n  const isSamePad = convInfo.padInfo.type === \"SAME\" ? 1 : 0;\n  if (convInfo.dataFormat !== \"channelsLast\") {\n    throw new Error(`wasm backend Conv2D does not support dataFormat:'${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n  const out = backend2.makeOutput(convInfo.outShape, \"float32\");\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmConv2d(xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n  return out;\n}\nvar conv2DConfig3 = {\n  kernelName: Conv2D,\n  backendName: \"wasm\",\n  setupFunc: setup9,\n  kernelFunc: conv2d5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Conv2DBackpropInput.js\nvar wasmConv2DBackpropInput;\nfunction setup10(backend2) {\n  wasmConv2DBackpropInput = backend2.wasm.cwrap(Conv2DBackpropInput, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction conv2DBackpropInput4(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { dy, filter } = inputs;\n  const { strides, pad: pad3, dataFormat, dimRoundingMode, inputShape } = attrs;\n  const dilations = 1;\n  const $dataFormat = backend_util_exports.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util_exports.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad3, dimRoundingMode, false, $dataFormat);\n  const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const isChannelsLast = convInfo.dataFormat === \"channelsLast\";\n  const dxStrides = util_exports.computeStrides(convInfo.inShape);\n  const dyStrides = util_exports.computeStrides(dy.shape);\n  const [fltS0, fltS1, fltS2] = util_exports.computeStrides(filter.shape);\n  const xBatchStride = dxStrides[0];\n  const xRowStride = isChannelsLast ? dxStrides[1] : dxStrides[2];\n  const xColStride = isChannelsLast ? dxStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dxStrides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n  const out = backend2.makeOutput(convInfo.inShape, \"float32\");\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const dyId = backend2.dataIdMap.get(dy.dataId).id;\n  const filterId = backend2.dataIdMap.get(filter.dataId).id;\n  wasmConv2DBackpropInput(dyId, filterId, batchSize, filterHeight, filterWidth, inHeight, inWidth, inChannels, outHeight, outWidth, outChannels, strideHeight, strideWidth, topPad, leftPad, fltS0, fltS1, fltS2, xBatchStride, xRowStride, xColStride, xChannelStride, yBatchStride, yRowStride, yColStride, yChannelStride, outId);\n  return out;\n}\nvar conv2DBackpropInputConfig3 = {\n  kernelName: Conv2DBackpropInput,\n  backendName: \"wasm\",\n  setupFunc: setup10,\n  kernelFunc: conv2DBackpropInput4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Cos.js\nvar cosConfig3 = createUnaryKernelConfig(Cos);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Cosh.js\nvar coshConfig3 = createUnaryKernelConfig(Cosh);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/CropAndResize.js\nvar InterpolationMethod;\n(function(InterpolationMethod2) {\n  InterpolationMethod2[InterpolationMethod2[\"bilinear\"] = 0] = \"bilinear\";\n  InterpolationMethod2[InterpolationMethod2[\"nearest\"] = 1] = \"nearest\";\n})(InterpolationMethod || (InterpolationMethod = {}));\nvar wasmCropAndResize;\nfunction setup11(backend2) {\n  wasmCropAndResize = backend2.wasm.cwrap(CropAndResize, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction cropAndResize4(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { method, extrapolationValue, cropSize } = attrs;\n  const { image: image2, boxes, boxInd } = inputs;\n  const numBoxes = boxes.shape[0];\n  const [cropHeight, cropWidth] = cropSize;\n  const outShape = [numBoxes, cropHeight, cropWidth, image2.shape[3]];\n  let imagesData = backend2.dataIdMap.get(image2.dataId);\n  let castedData;\n  if (image2.dtype !== \"float32\") {\n    castedData = cast5({ backend: backend2, inputs: { x: image2 }, attrs: { dtype: \"float32\" } });\n    imagesData = backend2.dataIdMap.get(castedData.dataId);\n  }\n  const imagesId = imagesData.id;\n  const boxesId = backend2.dataIdMap.get(boxes.dataId).id;\n  const boxIndId = backend2.dataIdMap.get(boxInd.dataId).id;\n  const out = backend2.makeOutput(outShape, \"float32\");\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const imagesShapeBytes = new Uint8Array(new Int32Array(image2.shape).buffer);\n  wasmCropAndResize(imagesId, boxesId, boxIndId, numBoxes, imagesShapeBytes, cropHeight, cropWidth, InterpolationMethod[method], extrapolationValue, outId);\n  if (castedData != null) {\n    backend2.disposeData(castedData.dataId);\n  }\n  return out;\n}\nvar cropAndResizeConfig3 = {\n  kernelName: CropAndResize,\n  backendName: \"wasm\",\n  setupFunc: setup11,\n  kernelFunc: cropAndResize4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Cumsum.js\nvar wasmCumsum;\nfunction setup12(backend2) {\n  wasmCumsum = backend2.wasm.cwrap(Cumsum, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction cumsum4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { axis, exclusive, reverse: reverse5 } = attrs;\n  const xRank = x.shape.length;\n  util_exports.assert(x.dtype === \"float32\" || x.dtype === \"int32\", () => `cumsum does not support ${x.dtype} tensors in the WASM backend`);\n  const permutation = backend_util_exports.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation !== null) {\n    permutedX = transpose4({ inputs: { x }, attrs: { perm: permutation }, backend: backend2 });\n  }\n  const permutedAxis = backend_util_exports.getInnerMostAxes(1, xRank)[0];\n  backend_util_exports.assertAxesAreInnerMostDims(\"cumsum\", [permutedAxis], xRank);\n  const permutedOut = backend2.makeOutput(permutedX.shape, permutedX.dtype);\n  const finalDim = permutedX.shape[permutedAxis];\n  const permutedXId = backend2.dataIdMap.get(permutedX.dataId).id;\n  const permutedOutId = backend2.dataIdMap.get(permutedOut.dataId).id;\n  wasmCumsum(permutedXId, exclusive ? 1 : 0, reverse5 ? 1 : 0, finalDim, permutedOutId, CppDType[x.dtype]);\n  let out = permutedOut;\n  if (permutation !== null) {\n    const undoPermutation = backend_util_exports.getUndoAxesPermutation(permutation);\n    out = transpose4({ inputs: { x: permutedOut }, attrs: { perm: undoPermutation }, backend: backend2 });\n    backend2.disposeData(permutedX.dataId);\n    backend2.disposeData(permutedOut.dataId);\n  }\n  return out;\n}\nvar cumsumConfig3 = {\n  kernelName: Cumsum,\n  backendName: \"wasm\",\n  setupFunc: setup12,\n  kernelFunc: cumsum4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/DepthToSpace.js\nvar wasmDepthToSpace;\nfunction setup13(backend2) {\n  wasmDepthToSpace = backend2.wasm.cwrap(DepthToSpace, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"array\",\n    \"number\",\n    \"array\",\n    \"array\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction depthToSpace4(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { x } = inputs;\n  const { blockSize, dataFormat } = attrs;\n  const batchSize = x.shape[0];\n  const inputHeight = dataFormat === \"NHWC\" ? x.shape[1] : x.shape[2];\n  const inputWidth = dataFormat === \"NHWC\" ? x.shape[2] : x.shape[3];\n  const inputDepth = dataFormat === \"NHWC\" ? x.shape[3] : x.shape[1];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const outputShape = dataFormat === \"NHWC\" ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];\n  const out = backend2.makeOutput(outputShape, \"float32\");\n  const xData = backend2.dataIdMap.get(x.dataId);\n  const xId = xData.id;\n  const xStridesBytes = new Uint8Array(new Int32Array(util_exports.computeStrides(x.shape)).buffer);\n  const outputShapeBytes = new Uint8Array(new Int32Array(outputShape).buffer);\n  const outStridesBytes = new Uint8Array(new Int32Array(util_exports.computeStrides(outputShape)).buffer);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const channelsLast = dataFormat === \"NHWC\" ? 1 : 0;\n  wasmDepthToSpace(xId, blockSize, channelsLast, xStridesBytes, x.shape.length - 1, outputShapeBytes, outStridesBytes, outputShape.length, outId);\n  return out;\n}\nvar depthToSpaceConfig3 = {\n  kernelName: DepthToSpace,\n  backendName: \"wasm\",\n  setupFunc: setup13,\n  kernelFunc: depthToSpace4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/DepthwiseConv2dNative.js\nvar wasmDepthwiseConv2d;\nfunction setup14(backend2) {\n  wasmDepthwiseConv2d = backend2.wasm.cwrap(DepthwiseConv2dNative, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction depthwiseConv2d5(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const { x, filter } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const filterId = backend2.dataIdMap.get(filter.dataId).id;\n  const { strides, dilations, pad: pad3, dimRoundingMode } = attrs;\n  const $dilations = dilations == null ? [1, 1] : dilations;\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad3, dimRoundingMode, true);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n  const isSamePad = convInfo.padInfo.type === \"SAME\" ? 1 : 0;\n  if (convInfo.dataFormat !== \"channelsLast\") {\n    throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n  const out = backend2.makeOutput(convInfo.outShape, \"float32\");\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmDepthwiseConv2d(xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n  return out;\n}\nvar depthwiseConv2dNativeConfig3 = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: \"wasm\",\n  setupFunc: setup14,\n  kernelFunc: depthwiseConv2d5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Elu.js\nvar eluConfig3 = createUnaryKernelConfig(Elu);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Equal.js\nvar supportsFullBroadcast2 = false;\nvar equalConfig3 = createBinaryKernelConfig(Equal, supportsFullBroadcast2, \"bool\");\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Exp.js\nvar expConfig3 = createUnaryKernelConfig(Exp, \"float32\");\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/ExpandDims.js\nfunction expandDims5(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const { input: input2 } = inputs;\n  const { dim } = attrs;\n  const inputRank = input2.shape.length;\n  const newShape = input2.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    util_exports.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n  return reshape5({ inputs: { x: input2 }, backend: backend2, attrs: { shape: newShape } });\n}\nvar expandDimsConfig3 = {\n  kernelName: ExpandDims,\n  backendName: \"wasm\",\n  kernelFunc: expandDims5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Fill.js\nfunction fill4(args) {\n  const { attrs: { shape, value, dtype }, backend: backend2 } = args;\n  const out = backend2.makeOutput(shape, dtype);\n  const outVals = backend2.typedArrayFromHeap(out);\n  outVals.fill(value);\n  return out;\n}\nvar fillConfig3 = {\n  kernelName: Fill,\n  backendName: \"wasm\",\n  kernelFunc: fill4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/FlipLeftRight.js\nvar wasmFlipLeftRight;\nfunction setup15(backend2) {\n  wasmFlipLeftRight = backend2.wasm.cwrap(FlipLeftRight, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction flipLeftRight2(args) {\n  const { inputs, backend: backend2 } = args;\n  const { image: image2 } = inputs;\n  const out = backend2.makeOutput(image2.shape, image2.dtype);\n  const imageId = backend2.dataIdMap.get(image2.dataId).id;\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const [batch, imageHeight, imageWidth, numChannels] = image2.shape;\n  wasmFlipLeftRight(imageId, batch, imageHeight, imageWidth, numChannels, outId);\n  return out;\n}\nvar flipLeftRightConfig3 = {\n  kernelName: FlipLeftRight,\n  backendName: \"wasm\",\n  kernelFunc: flipLeftRight2,\n  setupFunc: setup15\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Floor.js\nvar floorConfig3 = createUnaryKernelConfig(Floor);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/FloorDiv.js\nvar supportsFullBroadcast3 = false;\nvar floorDivConfig3 = createBinaryKernelConfig(FloorDiv, supportsFullBroadcast3);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/FusedBatchNorm.js\nvar wasmBatchNorm;\nfunction setup16(backend2) {\n  wasmBatchNorm = backend2.wasm.cwrap(FusedBatchNorm, null, [\"number\", \"number\", \"number\", \"number\", \"number\", \"number\", \"number\"]);\n}\nfunction fusedBatchNorm(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { varianceEpsilon } = attrs;\n  const { x, mean: mean4, variance, offset, scale: scale2 } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const meanId = backend2.dataIdMap.get(mean4.dataId).id;\n  const varianceId = backend2.dataIdMap.get(variance.dataId).id;\n  const offsetId = offset != null ? backend2.dataIdMap.get(offset.dataId).id : 0;\n  const scaleId = scale2 != null ? backend2.dataIdMap.get(scale2.dataId).id : 0;\n  const out = backend2.makeOutput(x.shape, x.dtype);\n  if (util_exports.sizeFromShape(x.shape) === 0) {\n    return out;\n  }\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmBatchNorm(xId, meanId, varianceId, offsetId, scaleId, varianceEpsilon, outId);\n  return out;\n}\nvar fusedBatchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: \"wasm\",\n  setupFunc: setup16,\n  kernelFunc: fusedBatchNorm\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/FusedConv2D.js\nvar wasmFusedConv2d;\nfunction setup17(backend2) {\n  wasmFusedConv2d = backend2.wasm.cwrap(FusedConv2D, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction fusedConv2d2(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const { x, filter, bias, preluActivationWeights } = inputs;\n  const { strides, pad: pad3, dilations, dataFormat, dimRoundingMode, activation: activation2, leakyreluAlpha } = attrs;\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad3, dimRoundingMode);\n  const fusedActivation = FusableActivation[activation2];\n  if (fusedActivation == null) {\n    throw new Error(`${activation2} activation not yet supported for FusedConv2D in the wasm backend.`);\n  }\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const filterId = backend2.dataIdMap.get(filter.dataId).id;\n  const outputChannels = convInfo.outChannels;\n  let biasId = 0;\n  if (bias != null) {\n    const biasData = backend2.dataIdMap.get(bias.dataId);\n    if (biasData.shape.length !== 1) {\n      throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${biasData.shape.length}.`);\n    }\n    if (biasData.shape[0] !== outputChannels) {\n      throw new Error(`FusedConv2D bias shape (${biasData.shape}) does not match the number of output channels (${outputChannels})`);\n    }\n    biasId = biasData.id;\n  }\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const isSamePad = convInfo.padInfo.type === \"SAME\" ? 1 : 0;\n  const batchSize = convInfo.batchSize;\n  const inHeight = convInfo.inHeight;\n  const inWidth = convInfo.inWidth;\n  if (dataFormat !== \"NHWC\") {\n    throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${dataFormat}'. Please use 'NHWC'.`);\n  }\n  const out = backend2.makeOutput(convInfo.outShape, \"float32\");\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const preluActivationWeightsId = preluActivationWeights == null ? 0 : backend2.dataIdMap.get(preluActivationWeights.dataId).id;\n  wasmFusedConv2d(xId, batchSize, inHeight, inWidth, filterId, filterHeight, filterWidth, biasId, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, fusedActivation, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n  return out;\n}\nvar fusedConv2DConfig3 = {\n  kernelName: FusedConv2D,\n  backendName: \"wasm\",\n  setupFunc: setup17,\n  kernelFunc: fusedConv2d2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/FusedDepthwiseConv2D.js\nvar wasmFusedDepthwiseConv2d;\nfunction setup18(backend2) {\n  wasmFusedDepthwiseConv2d = backend2.wasm.cwrap(FusedDepthwiseConv2D, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction fusedDepthwiseConv2d(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const { x, filter, bias, preluActivationWeights } = inputs;\n  const { strides, pad: pad3, dilations, dataFormat, dimRoundingMode, activation: activation2, leakyreluAlpha } = attrs;\n  const convInfo = backend_util_exports.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad3, dimRoundingMode, true);\n  const fusedActivation = FusableActivation[activation2];\n  if (fusedActivation == null) {\n    throw new Error(`${activation2} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`);\n  }\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const filterId = backend2.dataIdMap.get(filter.dataId).id;\n  const outputChannels = convInfo.outChannels;\n  let biasId = 0;\n  if (bias != null) {\n    const biasData = backend2.dataIdMap.get(bias.dataId);\n    if (biasData.shape.length !== 1) {\n      throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${biasData.shape.length}.`);\n    }\n    if (biasData.shape[0] !== outputChannels) {\n      throw new Error(`FusedDepthwiseConv2D bias shape (${biasData.shape}) does not match the number of output channels (${outputChannels})`);\n    }\n    biasId = biasData.id;\n  }\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const isSamePad = convInfo.padInfo.type === \"SAME\" ? 1 : 0;\n  const batchSize = convInfo.batchSize;\n  const inHeight = convInfo.inHeight;\n  const inWidth = convInfo.inWidth;\n  if (dataFormat !== \"NHWC\") {\n    throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${dataFormat}'. Please use 'NHWC'.`);\n  }\n  const out = backend2.makeOutput(convInfo.outShape, \"float32\");\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const preluActivationWeightsId = preluActivationWeights == null ? 0 : backend2.dataIdMap.get(preluActivationWeights.dataId).id;\n  wasmFusedDepthwiseConv2d(xId, batchSize, inHeight, inWidth, filterId, filterHeight, filterWidth, biasId, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, fusedActivation, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n  return out;\n}\nvar fusedDepthwiseConv2DConfig3 = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: \"wasm\",\n  setupFunc: setup18,\n  kernelFunc: fusedDepthwiseConv2d\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/GatherNd.js\nvar wasmGatherNd;\nfunction setup19(backend2) {\n  wasmGatherNd = backend2.wasm.cwrap(GatherNd, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"array\",\n    \"number\"\n  ]);\n}\nfunction gatherNd3(args) {\n  const { backend: backend2, inputs } = args;\n  const { params, indices } = inputs;\n  const [resultShape, numSlices, sliceSize, strides] = gather_nd_util_exports.prepareAndValidate(params, indices);\n  const out = backend2.makeOutput(resultShape, params.dtype);\n  if (numSlices === 0) {\n    return out;\n  }\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const xData = backend2.dataIdMap.get(params.dataId);\n  const xId = xData.id;\n  const indicesData = backend2.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n  const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmGatherNd(xId, CppDType[params.dtype], indicesId, numSlices, sliceRank, sliceSize, stridesBytes, outId);\n  return out;\n}\nvar gatherNdConfig3 = {\n  kernelName: GatherNd,\n  backendName: \"wasm\",\n  setupFunc: setup19,\n  kernelFunc: gatherNd3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/GatherV2.js\nvar wasmGather;\nfunction setup20(backend2) {\n  wasmGather = backend2.wasm.cwrap(\"Gather\", null, [\n    \"number\",\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"array\",\n    \"number\"\n  ]);\n}\nfunction gatherV23(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { x, indices } = inputs;\n  const { axis, batchDims } = attrs;\n  const parsedAxis = util_exports.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend2.readSync(indices.dataId);\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util_exports.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n  const shapeInfo = backend_util_exports.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n  const flattenX = reshape5({\n    inputs: { x },\n    attrs: {\n      shape: [\n        shapeInfo.batchSize,\n        shapeInfo.outerSize,\n        shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    },\n    backend: backend2\n  });\n  const indicesSize = util_exports.sizeFromShape(indices.shape);\n  const flattenIndex = reshape5({\n    inputs: { x: indices },\n    attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] },\n    backend: backend2\n  });\n  const flattenOutputShape = [\n    shapeInfo.batchSize,\n    shapeInfo.outerSize,\n    indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n  const out = backend2.makeOutput(flattenOutputShape, x.dtype);\n  if (util_exports.sizeFromShape(x.shape) === 0) {\n    return out;\n  }\n  const stridesSize = flattenX.shape.length - 1;\n  const xData = backend2.dataIdMap.get(flattenX.dataId);\n  const xId = xData.id;\n  const indicesData = backend2.dataIdMap.get(flattenIndex.dataId);\n  const indicesId = indicesData.id;\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const xStridesBytes = new Uint8Array(new Int32Array(util_exports.computeStrides(flattenX.shape)).buffer);\n  const outStridesBytes = new Uint8Array(new Int32Array(util_exports.computeStrides(flattenOutputShape)).buffer);\n  wasmGather(xId, CppDType[x.dtype], xStridesBytes, stridesSize, indicesId, shapeInfo.batchSize, outStridesBytes, outId);\n  backend2.disposeData(flattenX.dataId);\n  backend2.disposeData(flattenIndex.dataId);\n  out.shape = shapeInfo.outputShape;\n  return out;\n}\nvar gatherV2Config3 = {\n  kernelName: GatherV2,\n  backendName: \"wasm\",\n  setupFunc: setup20,\n  kernelFunc: gatherV23\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Greater.js\nvar supportsFullBroadcast4 = false;\nvar greaterConfig3 = createBinaryKernelConfig(Greater, supportsFullBroadcast4, \"bool\");\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/GreaterEqual.js\nvar supportsFullBroadcast5 = false;\nvar greaterEqualConfig3 = createBinaryKernelConfig(GreaterEqual, supportsFullBroadcast5, \"bool\");\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/LeakyRelu.js\nvar wasmFunc3;\nfunction setupFunc2(backend2) {\n  wasmFunc3 = backend2.wasm.cwrap(LeakyRelu, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction leakyRelu4(args) {\n  const { inputs: { x }, attrs: { alpha }, backend: backend2 } = args;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const out = backend2.makeOutput(x.shape, \"float32\");\n  if (util_exports.sizeFromShape(x.shape) !== 0) {\n    const outId = backend2.dataIdMap.get(out.dataId).id;\n    wasmFunc3(xId, CppDType[x.dtype], alpha, outId);\n  }\n  return out;\n}\nvar leakyReluConfig3 = {\n  kernelName: LeakyRelu,\n  backendName: \"wasm\",\n  setupFunc: setupFunc2,\n  kernelFunc: leakyRelu4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Less.js\nvar supportsFullBroadcast6 = false;\nvar lessConfig3 = createBinaryKernelConfig(Less, supportsFullBroadcast6, \"bool\");\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/LessEqual.js\nvar supportsFullBroadcast7 = false;\nvar lessEqualConfig3 = createBinaryKernelConfig(LessEqual, supportsFullBroadcast7, \"bool\");\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Log.js\nvar logConfig3 = createUnaryKernelConfig(Log);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/LogicalAnd.js\nvar supportsFullBroadcast8 = false;\nvar logicalAndConfig3 = createBinaryKernelConfig(LogicalAnd, supportsFullBroadcast8, \"bool\");\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Max.js\nvar wasmMax;\nfunction setup21(backend2) {\n  wasmMax = backend2.wasm.cwrap(Max, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction max5(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { reductionIndices: axis, keepDims } = attrs;\n  const { x } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input2 = x;\n  const { transposed, axes, originalAxes, inputWasTransposed } = permuteAxesAndTranspose(x, axis, backend2);\n  if (inputWasTransposed) {\n    const transposedId = backend2.dataIdMap.get(transposed.dataId).id;\n    input2 = transposed;\n    inputId = transposedId;\n  }\n  const inputRank = input2.shape.length;\n  backend_util_exports.assertAxesAreInnerMostDims(\"max\", axes, inputRank);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(input2.shape, axes);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const out = backend2.makeOutput(outShape, x.dtype);\n  if (util_exports.sizeFromShape(input2.shape) !== 0) {\n    const outId = backend2.dataIdMap.get(out.dataId).id;\n    wasmMax(inputId, CppDType[x.dtype], reduceSize, outId);\n  }\n  if (inputWasTransposed) {\n    backend2.disposeData(transposed.dataId);\n  }\n  if (keepDims) {\n    const newShape = backend_util_exports.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n  return out;\n}\nvar maxConfig3 = {\n  kernelName: Max,\n  backendName: \"wasm\",\n  setupFunc: setup21,\n  kernelFunc: max5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Maximum.js\nvar supportsFullBroadcast9 = false;\nvar maximumConfig3 = createBinaryKernelConfig(Maximum, supportsFullBroadcast9);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/MaxPool.js\nvar wasmMaxPool;\nfunction setup22(backend2) {\n  wasmMaxPool = backend2.wasm.cwrap(MaxPool, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction maxPool4(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const x = inputs.x;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  util_exports.assert(x.dtype === \"float32\", () => `Error in MaxPool: only float32 input is supported. Got ${x.dtype}.`);\n  const { filterSize, strides, pad: pad3, dimRoundingMode } = attrs;\n  const convInfo = backend_util_exports.computePool2DInfo(x.shape, filterSize, strides, 1, pad3, dimRoundingMode);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n  if (convInfo.dataFormat !== \"channelsLast\") {\n    throw new Error(`wasm backend does not support dataFormat:'${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n  const out = backend2.makeOutput(convInfo.outShape, \"float32\");\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmMaxPool(xId, x.shape[0], x.shape[1], x.shape[2], filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n  return out;\n}\nvar maxPoolConfig3 = {\n  kernelName: MaxPool,\n  backendName: \"wasm\",\n  setupFunc: setup22,\n  kernelFunc: maxPool4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Mean.js\nvar wasmMean;\nfunction setup23(backend2) {\n  wasmMean = backend2.wasm.cwrap(Mean, null, [\"number, number, number\"]);\n}\nfunction mean3(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { axis, keepDims } = attrs;\n  const { x } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input2 = x;\n  const { transposed, axes, originalAxes, inputWasTransposed } = permuteAxesAndTranspose(x, axis, backend2);\n  let reductionAxes = axes;\n  if (inputWasTransposed) {\n    const transposedId = backend2.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      input2 = transposed;\n      inputId = transposedId;\n      reductionAxes = backend_util_exports.getInnerMostAxes(reductionAxes.length, input2.shape.length);\n    }\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"mean\", reductionAxes, input2.shape.length);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(input2.shape, reductionAxes);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  let castedInput = input2;\n  if (input2.dtype !== \"float32\") {\n    castedInput = cast5({ backend: backend2, inputs: { x: input2 }, attrs: { dtype: \"float32\" } });\n    inputId = backend2.dataIdMap.get(castedInput.dataId).id;\n  }\n  const out = backend2.makeOutput(outShape, \"float32\");\n  if (util_exports.sizeFromShape(input2.shape) !== 0) {\n    const outId = backend2.dataIdMap.get(out.dataId).id;\n    wasmMean(inputId, reduceSize, outId);\n  }\n  if (inputWasTransposed) {\n    backend2.disposeData(transposed.dataId);\n  }\n  if (keepDims) {\n    const newShape = backend_util_exports.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n  if (input2.dtype !== \"float32\") {\n    backend2.disposeData(castedInput.dataId);\n  }\n  return out;\n}\nvar meanConfig3 = {\n  kernelName: Mean,\n  backendName: \"wasm\",\n  setupFunc: setup23,\n  kernelFunc: mean3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Min.js\nvar wasmMin;\nfunction setup24(backend2) {\n  wasmMin = backend2.wasm.cwrap(Min, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction min5(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { axis, keepDims } = attrs;\n  const { x } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input2 = x;\n  const { transposed, axes, originalAxes, inputWasTransposed } = permuteAxesAndTranspose(x, axis, backend2);\n  if (inputWasTransposed) {\n    const transposedId = backend2.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      input2 = transposed;\n      inputId = transposedId;\n    }\n  }\n  const inputRank = input2.shape.length;\n  backend_util_exports.assertAxesAreInnerMostDims(\"min\", axes, inputRank);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(input2.shape, axes);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const out = backend2.makeOutput(outShape, input2.dtype);\n  if (util_exports.sizeFromShape(input2.shape) !== 0) {\n    const outId = backend2.dataIdMap.get(out.dataId).id;\n    wasmMin(inputId, CppDType[x.dtype], reduceSize, outId);\n  }\n  if (inputWasTransposed) {\n    backend2.disposeData(transposed.dataId);\n  }\n  if (keepDims) {\n    const newShape = backend_util_exports.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n  return out;\n}\nvar minConfig3 = {\n  kernelName: Min,\n  backendName: \"wasm\",\n  setupFunc: setup24,\n  kernelFunc: min5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Minimum.js\nvar supportsFullBroadcast10 = false;\nvar minimumConfig3 = createBinaryKernelConfig(Minimum, supportsFullBroadcast10);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/MirrorPad.js\nvar MirrorPaddingMode;\n(function(MirrorPaddingMode2) {\n  MirrorPaddingMode2[MirrorPaddingMode2[\"reflect\"] = 0] = \"reflect\";\n  MirrorPaddingMode2[MirrorPaddingMode2[\"symmetric\"] = 1] = \"symmetric\";\n})(MirrorPaddingMode || (MirrorPaddingMode = {}));\nvar wasmMirrorPad;\nfunction setup25(backend2) {\n  wasmMirrorPad = backend2.wasm.cwrap(MirrorPad, null, [\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\",\n    \"array\",\n    \"array\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction mirrorPad3(args) {\n  const { inputs: { x }, backend: backend2, attrs: { paddings, mode } } = args;\n  const outShape = paddings.map((p2, i) => p2[0] + x.shape[i] + p2[1]);\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const out = backend2.makeOutput(outShape, x.dtype);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  const prePaddingsFlat = paddings.map((padTuple) => padTuple[0]);\n  const postPaddingsFlat = paddings.map((padTuple) => padTuple[1]);\n  const prePaddingsBytes = new Uint8Array(new Int32Array(prePaddingsFlat).buffer);\n  const postPaddingsBytes = new Uint8Array(new Int32Array(postPaddingsFlat).buffer);\n  wasmMirrorPad(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], prePaddingsBytes, postPaddingsBytes, MirrorPaddingMode[mode], outId);\n  return out;\n}\nvar mirrorPadConfig3 = {\n  kernelName: MirrorPad,\n  backendName: \"wasm\",\n  kernelFunc: mirrorPad3,\n  setupFunc: setup25\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Multiply.js\nvar supportsFullBroadcast11 = true;\nvar multiplyConfig3 = createBinaryKernelConfig(Multiply, supportsFullBroadcast11);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Neg.js\nvar negConfig3 = createUnaryKernelConfig(Neg);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/NonMaxSuppression_util.js\nfunction parseResultStruct(backend2, resOffset) {\n  const result = new Int32Array(backend2.wasm.HEAPU8.buffer, resOffset, 4);\n  const pSelectedIndices = result[0];\n  const selectedSize = result[1];\n  const pSelectedScores = result[2];\n  const pValidOutputs = result[3];\n  backend2.wasm._free(resOffset);\n  return { pSelectedIndices, selectedSize, pSelectedScores, pValidOutputs };\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/NonMaxSuppressionV3.js\nvar wasmFunc4;\nfunction setup26(backend2) {\n  wasmFunc4 = backend2.wasm.cwrap(NonMaxSuppressionV3, \"number\", [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction kernelFunc(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { iouThreshold, maxOutputSize, scoreThreshold } = attrs;\n  const { boxes, scores } = inputs;\n  const boxesId = backend2.dataIdMap.get(boxes.dataId).id;\n  const scoresId = backend2.dataIdMap.get(scores.dataId).id;\n  const resOffset = wasmFunc4(boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold);\n  const { pSelectedIndices, selectedSize, pSelectedScores, pValidOutputs } = parseResultStruct(backend2, resOffset);\n  backend2.wasm._free(pSelectedScores);\n  backend2.wasm._free(pValidOutputs);\n  const selectedIndicesTensor = backend2.makeOutput([selectedSize], \"int32\", pSelectedIndices);\n  return selectedIndicesTensor;\n}\nvar nonMaxSuppressionV3Config3 = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: \"wasm\",\n  setupFunc: setup26,\n  kernelFunc\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/NonMaxSuppressionV4.js\nvar wasmFunc5;\nfunction setup27(backend2) {\n  wasmFunc5 = backend2.wasm.cwrap(NonMaxSuppressionV4, \"number\", [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"bool\"\n  ]);\n}\nfunction nonMaxSuppressionV43(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { iouThreshold, maxOutputSize, scoreThreshold, padToMaxOutputSize } = attrs;\n  const { boxes, scores } = inputs;\n  const boxesId = backend2.dataIdMap.get(boxes.dataId).id;\n  const scoresId = backend2.dataIdMap.get(scores.dataId).id;\n  const resOffset = wasmFunc5(boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n  const { pSelectedIndices, selectedSize, pSelectedScores, pValidOutputs } = parseResultStruct(backend2, resOffset);\n  backend2.wasm._free(pSelectedScores);\n  const selectedIndicesTensor = backend2.makeOutput([selectedSize], \"int32\", pSelectedIndices);\n  const validOutputsTensor = backend2.makeOutput([], \"int32\", pValidOutputs);\n  return [selectedIndicesTensor, validOutputsTensor];\n}\nvar nonMaxSuppressionV4Config3 = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: \"wasm\",\n  setupFunc: setup27,\n  kernelFunc: nonMaxSuppressionV43\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/NonMaxSuppressionV5.js\nvar wasmFunc6;\nfunction setup28(backend2) {\n  wasmFunc6 = backend2.wasm.cwrap(NonMaxSuppressionV5, \"number\", [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction kernelFunc2(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { iouThreshold, maxOutputSize, scoreThreshold, softNmsSigma } = attrs;\n  const { boxes, scores } = inputs;\n  const boxesId = backend2.dataIdMap.get(boxes.dataId).id;\n  const scoresId = backend2.dataIdMap.get(scores.dataId).id;\n  const resOffset = wasmFunc6(boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n  const { pSelectedIndices, selectedSize, pSelectedScores, pValidOutputs } = parseResultStruct(backend2, resOffset);\n  backend2.wasm._free(pValidOutputs);\n  const selectedIndicesTensor = backend2.makeOutput([selectedSize], \"int32\", pSelectedIndices);\n  const selectedScoresTensor = backend2.makeOutput([selectedSize], \"float32\", pSelectedScores);\n  return [selectedIndicesTensor, selectedScoresTensor];\n}\nvar nonMaxSuppressionV5Config3 = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: \"wasm\",\n  setupFunc: setup28,\n  kernelFunc: kernelFunc2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/NotEqual.js\nvar supportsFullBroadcast12 = false;\nvar notEqualConfig3 = createBinaryKernelConfig(NotEqual, supportsFullBroadcast12, \"bool\");\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/OneHot.js\nvar wasmOneHot;\nfunction setup29(backend2) {\n  wasmOneHot = backend2.wasm.cwrap(OneHot, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction oneHot4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { indices } = inputs;\n  const { depth, onValue, offValue } = attrs;\n  const out = backend2.makeOutput([...indices.shape, depth], \"int32\");\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const indicesData = backend2.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n  wasmOneHot(indicesId, depth, onValue, offValue, outId);\n  return out;\n}\nvar oneHotConfig3 = {\n  kernelName: OneHot,\n  backendName: \"wasm\",\n  setupFunc: setup29,\n  kernelFunc: oneHot4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/OnesLike.js\nfunction onesLike4(args) {\n  const { inputs: { x }, backend: backend2 } = args;\n  const out = backend2.makeOutput(x.shape, x.dtype);\n  const outVals = backend2.typedArrayFromHeap(out);\n  outVals.fill(1);\n  return out;\n}\nvar onesLikeConfig3 = {\n  kernelName: OnesLike,\n  backendName: \"wasm\",\n  kernelFunc: onesLike4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Pack.js\nfunction pack3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { axis } = attrs;\n  if (inputs.length === 1) {\n    return expandDims5({ inputs: { input: inputs[0] }, backend: backend2, attrs: { dim: axis } });\n  }\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n  inputs.forEach((t) => {\n    util_exports.assertShapesMatch(shape, t.shape, \"All tensors passed to stack must have matching shapes\");\n    util_exports.assert(dtype === t.dtype, () => \"All tensors passed to stack must have matching dtypes\");\n  });\n  const intermediateTensorInfos = [];\n  const expandedTensors = inputs.map((t) => {\n    const expandedT = expandDims5({ inputs: { input: t }, backend: backend2, attrs: { dim: axis } });\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n  const result = concat4({ inputs: expandedTensors, backend: backend2, attrs: { axis } });\n  intermediateTensorInfos.forEach((t) => backend2.disposeData(t.dataId));\n  return result;\n}\nvar packConfig3 = {\n  kernelName: Pack,\n  backendName: \"wasm\",\n  kernelFunc: pack3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/PadV2.js\nvar wasmPadV2;\nfunction setup30(backend2) {\n  wasmPadV2 = backend2.wasm.cwrap(PadV2, null, [\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\",\n    \"array\",\n    \"array\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction pad2(args) {\n  const { inputs: { x }, backend: backend2, attrs: { paddings, constantValue } } = args;\n  const outShape = paddings.map((p2, i) => p2[0] + x.shape[i] + p2[1]);\n  if (util_exports.sizeFromShape(x.shape) === 0) {\n    return fill4({\n      backend: backend2,\n      attrs: { shape: outShape, value: constantValue, dtype: x.dtype }\n    });\n  }\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const out = backend2.makeOutput(outShape, x.dtype);\n  const outTensorData = backend2.dataIdMap.get(out.dataId);\n  const outId = outTensorData.id;\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  const prePaddingsFlat = paddings.map((padTuple) => padTuple[0]);\n  const postPaddingsFlat = paddings.map((padTuple) => padTuple[1]);\n  const prePaddingsBytes = new Uint8Array(new Int32Array(prePaddingsFlat).buffer);\n  const postPaddingsBytes = new Uint8Array(new Int32Array(postPaddingsFlat).buffer);\n  wasmPadV2(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], prePaddingsBytes, postPaddingsBytes, constantValue, outId);\n  return out;\n}\nvar padV2Config3 = {\n  kernelName: PadV2,\n  backendName: \"wasm\",\n  kernelFunc: pad2,\n  setupFunc: setup30\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Pow.js\nvar supportsFullBroadcast13 = false;\nvar powConfig3 = createBinaryKernelConfig(Pow, supportsFullBroadcast13);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Prelu.js\nvar wasmPrelu;\nfunction setup31(backend2) {\n  wasmPrelu = backend2.wasm.cwrap(Prelu, null, [\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction prelu5(args) {\n  const { inputs, backend: backend2 } = args;\n  const { x, alpha } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const weightsId = backend2.dataIdMap.get(alpha.dataId).id;\n  let inputId = xId;\n  const input2 = x;\n  let castedInput = input2;\n  if (input2.dtype !== \"float32\") {\n    castedInput = cast5({ backend: backend2, inputs: { x }, attrs: { dtype: \"float32\" } });\n    inputId = backend2.dataIdMap.get(castedInput.dataId).id;\n  }\n  const out = backend2.makeOutput(x.shape, \"float32\");\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmPrelu(inputId, weightsId, outId);\n  if (input2.dtype !== \"float32\") {\n    backend2.disposeData(castedInput.dataId);\n  }\n  return out;\n}\nvar preluConfig3 = {\n  kernelName: Prelu,\n  backendName: \"wasm\",\n  setupFunc: setup31,\n  kernelFunc: prelu5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Prod.js\nvar wasmProd;\nfunction setup32(backend2) {\n  wasmProd = backend2.wasm.cwrap(Prod, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction prod4(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { axis, keepDims } = attrs;\n  const { x } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input2 = x;\n  const { transposed, axes, originalAxes, inputWasTransposed } = permuteAxesAndTranspose(x, axis, backend2);\n  let reductionAxes = axes;\n  if (inputWasTransposed) {\n    const transposedId = backend2.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      input2 = transposed;\n      inputId = transposedId;\n      reductionAxes = backend_util_exports.getInnerMostAxes(reductionAxes.length, input2.shape.length);\n    }\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"prod\", reductionAxes, input2.shape.length);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(input2.shape, reductionAxes);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const out = backend2.makeOutput(outShape, input2.dtype);\n  if (util_exports.sizeFromShape(input2.shape) !== 0) {\n    const outId = backend2.dataIdMap.get(out.dataId).id;\n    wasmProd(inputId, reduceSize, CppDType[out.dtype], outId);\n  }\n  if (inputWasTransposed) {\n    backend2.disposeData(transposed.dataId);\n  }\n  if (keepDims) {\n    const newShape = backend_util_exports.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n  return out;\n}\nvar prodConfig3 = {\n  kernelName: Prod,\n  backendName: \"wasm\",\n  setupFunc: setup32,\n  kernelFunc: prod4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Range.js\nvar range5 = (args) => {\n  const { backend: backend2, attrs } = args;\n  const { start, stop, step: step5, dtype } = attrs;\n  const values = rangeImpl(start, stop, step5, dtype);\n  const out = backend2.makeOutput([values.length], dtype);\n  const outVals = backend2.typedArrayFromHeap(out);\n  outVals.set(values);\n  return out;\n};\nvar rangeConfig3 = {\n  kernelName: Range,\n  backendName: \"wasm\",\n  kernelFunc: range5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/RealDiv.js\nvar supportsFullBroadcast14 = true;\nvar realDivConfig3 = createBinaryKernelConfig(RealDiv, supportsFullBroadcast14);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Relu.js\nvar reluConfig3 = createUnaryKernelConfig(Relu);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Relu6.js\nvar relu6Config3 = createUnaryKernelConfig(Relu6);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/ResizeBilinear.js\nvar wasmResizeBilinear;\nfunction setup33(backend2) {\n  wasmResizeBilinear = backend2.wasm.cwrap(ResizeBilinear, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction resizeBilinear4(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { images } = inputs;\n  const { alignCorners, halfPixelCenters, size } = attrs;\n  const [newHeight, newWidth] = size;\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const outShape = [batch, newHeight, newWidth, numChannels];\n  let xData = backend2.dataIdMap.get(images.dataId);\n  let castedData;\n  if (xData.dtype !== \"float32\") {\n    castedData = cast5({ backend: backend2, inputs: { x: images }, attrs: { dtype: \"float32\" } });\n    xData = backend2.dataIdMap.get(castedData.dataId);\n  }\n  const xId = xData.id;\n  const out = backend2.makeOutput(outShape, \"float32\");\n  if (util_exports.sizeFromShape(images.shape) === 0) {\n    return out;\n  }\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmResizeBilinear(xId, batch, oldHeight, oldWidth, numChannels, newHeight, newWidth, alignCorners ? 1 : 0, halfPixelCenters ? 1 : 0, outId);\n  if (castedData != null) {\n    backend2.disposeData(castedData.dataId);\n  }\n  return out;\n}\nvar resizeBilinearConfig3 = {\n  kernelName: ResizeBilinear,\n  backendName: \"wasm\",\n  setupFunc: setup33,\n  kernelFunc: resizeBilinear4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Reverse.js\nvar wasmReverse;\nfunction setup34(backend2) {\n  wasmReverse = backend2.wasm.cwrap(Reverse, null, [\n    \"number\",\n    \"array\",\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction reverse4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { dims } = attrs;\n  const axes = util_exports.parseAxisParam(dims, x.shape);\n  if (x.shape.length === 0) {\n    return identity4({ inputs: { x }, backend: backend2 });\n  }\n  const out = backend2.makeOutput(x.shape, x.dtype);\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const axesBytes = new Uint8Array(new Int32Array(axes).buffer);\n  const outShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  wasmReverse(xId, axesBytes, axes.length, outShapeBytes, x.shape.length, outId);\n  const reshaped = reshape5({ inputs: { x: out }, attrs: { shape: x.shape }, backend: backend2 });\n  backend2.disposeData(out.dataId);\n  return reshaped;\n}\nvar reverseConfig3 = {\n  kernelName: Reverse,\n  backendName: \"wasm\",\n  kernelFunc: reverse4,\n  setupFunc: setup34\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/RotateWithOffset.js\nvar wasmRotate;\nfunction setup35(backend2) {\n  wasmRotate = backend2.wasm.cwrap(RotateWithOffset, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction rotateWithOffset2(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { image: image2 } = inputs;\n  const { radians, fillValue, center } = attrs;\n  const out = backend2.makeOutput(image2.shape, image2.dtype);\n  const imageId = backend2.dataIdMap.get(image2.dataId).id;\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const [batch, imageHeight, imageWidth, numChannels] = image2.shape;\n  const [centerX, centerY] = backend_util_exports.getImageCenter(center, imageHeight, imageWidth);\n  const fillIsBlack = fillValue === 0;\n  const fullOpacityValue = 255;\n  const fillValues2 = typeof fillValue === \"number\" ? [fillValue, fillValue, fillValue, fillIsBlack ? 0 : fullOpacityValue] : [...fillValue, fullOpacityValue];\n  const fillBytes = new Uint8Array(new Int32Array(fillValues2).buffer);\n  wasmRotate(imageId, batch, imageHeight, imageWidth, numChannels, radians, centerX, centerY, fillBytes, fillValues2.length, outId);\n  return out;\n}\nvar rotateWithOffsetConfig3 = {\n  kernelName: RotateWithOffset,\n  backendName: \"wasm\",\n  kernelFunc: rotateWithOffset2,\n  setupFunc: setup35\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Round.js\nvar roundConfig3 = createUnaryKernelConfig(Round);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Rsqrt.js\nvar rsqrtConfig3 = createUnaryKernelConfig(Rsqrt);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/ScatterNd.js\nvar wasmScatterNd;\nfunction setup36(backend2) {\n  wasmScatterNd = backend2.wasm.cwrap(ScatterNd, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction scatterNd3(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { indices, updates } = inputs;\n  const { shape } = attrs;\n  const out = backend2.makeOutput(shape, updates.dtype);\n  if (util_exports.sizeFromShape(shape) === 0) {\n    return out;\n  }\n  const { sliceRank, numUpdates, sliceSize, strides, outputSize } = scatter_nd_util_exports.calculateShapes(updates, indices, shape);\n  const indicesData = backend2.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n  const updatesData = backend2.dataIdMap.get(updates.dataId);\n  const updatesId = updatesData.id;\n  const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmScatterNd(indicesId, updatesId, CppDType[updates.dtype], sliceRank, numUpdates, sliceSize, stridesBytes, outputSize, outId);\n  return out;\n}\nvar scatterNdConfig3 = {\n  kernelName: ScatterNd,\n  backendName: \"wasm\",\n  setupFunc: setup36,\n  kernelFunc: scatterNd3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Select.js\nvar wasmSelect;\nfunction setup37(backend2) {\n  wasmSelect = backend2.wasm.cwrap(\"SelectV2\", null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction select4(args) {\n  const { inputs, backend: backend2 } = args;\n  const { condition, t, e } = inputs;\n  const conditionId = backend2.dataIdMap.get(condition.dataId).id;\n  const tId = backend2.dataIdMap.get(t.dataId).id;\n  const eId = backend2.dataIdMap.get(e.dataId).id;\n  const out = backend2.makeOutput(t.shape, t.dtype);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const cRank = condition.shape.length;\n  const tRank = t.shape.length;\n  const offset = cRank === 0 || cRank > 1 || tRank === 1 ? 1 : util_exports.sizeFromShape(t.shape.slice(1));\n  wasmSelect(conditionId, tId, eId, offset, outId);\n  return out;\n}\nvar selectConfig3 = {\n  kernelName: Select,\n  backendName: \"wasm\",\n  kernelFunc: select4,\n  setupFunc: setup37\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Sigmoid.js\nvar wasmFunc7;\nfunction setup38(backend2) {\n  wasmFunc7 = backend2.wasm.cwrap(Sigmoid, null, [\"number\", \"number\"]);\n}\nfunction sigmoid4(args) {\n  const { backend: backend2, inputs: { x } } = args;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const out = backend2.makeOutput(x.shape, x.dtype);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  if (util_exports.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n  wasmFunc7(xId, outId);\n  return out;\n}\nvar sigmoidConfig3 = {\n  kernelName: \"Sigmoid\",\n  backendName: \"wasm\",\n  setupFunc: setup38,\n  kernelFunc: sigmoid4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Sin.js\nvar sinConfig3 = createUnaryKernelConfig(Sin);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Softmax.js\nvar wasmFunc8;\nfunction setup39(backend2) {\n  wasmFunc8 = backend2.wasm.cwrap(Softmax, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction softmax5(args) {\n  const { backend: backend2, inputs: { logits }, attrs: { dim } } = args;\n  const xId = backend2.dataIdMap.get(logits.dataId).id;\n  const out = backend2.makeOutput(logits.shape, logits.dtype);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const channels = logits.shape[dim];\n  const batch = util_exports.sizeFromShape(logits.shape) / channels;\n  if (util_exports.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n  wasmFunc8(xId, outId, channels, batch);\n  return out;\n}\nvar softmaxConfig3 = {\n  kernelName: Softmax,\n  backendName: \"wasm\",\n  setupFunc: setup39,\n  kernelFunc: softmax5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/SpaceToBatchND.js\nfunction spaceToBatchND4(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const { blockShape, paddings } = attrs;\n  const prod5 = util_exports.sizeFromShape(blockShape);\n  const completePaddings = [[0, 0]];\n  completePaddings.push(...paddings);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n  const paddedX = padV2Config3.kernelFunc({\n    inputs: { x },\n    backend: backend2,\n    attrs: { paddings: completePaddings, constantValue: 0 }\n  });\n  const reshapedPaddedShape = backend_util_exports.getReshaped(paddedX.shape, blockShape, prod5, false);\n  const permutedReshapedPaddedPermutation = backend_util_exports.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  const flattenShape = backend_util_exports.getReshapedPermuted(paddedX.shape, blockShape, prod5, false);\n  const reshapeInputs = { x: paddedX };\n  const reshapeAttrs = { shape: reshapedPaddedShape };\n  const paddedXReshaped = reshape5({ inputs: reshapeInputs, backend: backend2, attrs: reshapeAttrs });\n  const transposeInputs = { x: paddedXReshaped };\n  const transposeAttrs = { perm: permutedReshapedPaddedPermutation };\n  const paddedXT = transpose4({ inputs: transposeInputs, backend: backend2, attrs: transposeAttrs });\n  const resultReshapeInputs = { x: paddedXT };\n  const resultReshapeAttrs = { shape: flattenShape };\n  const result = reshape5({ inputs: resultReshapeInputs, backend: backend2, attrs: resultReshapeAttrs });\n  backend2.disposeData(paddedX.dataId);\n  backend2.disposeData(paddedXReshaped.dataId);\n  backend2.disposeData(paddedXT.dataId);\n  return result;\n}\nvar spaceToBatchNDConfig3 = {\n  kernelName: SpaceToBatchND,\n  backendName: \"wasm\",\n  kernelFunc: spaceToBatchND4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/SparseFillEmptyRows.js\nvar wasmSparseFillEmptyRows;\nfunction setup40(backend2) {\n  wasmSparseFillEmptyRows = backend2.wasm.cwrap(\"SparseFillEmptyRows\", \"number\", [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction sparseFillEmptyRows4(args) {\n  const { backend: backend2, inputs } = args;\n  const { indices, values, denseShape, defaultValue } = inputs;\n  const indicesCount = indices.shape[0];\n  const rank = indices.shape[1];\n  const denseRows = backend2.readSync(denseShape.dataId)[0];\n  const maxOutputIndicesShape = [indicesCount + denseRows, rank];\n  const indicesId = backend2.dataIdMap.get(indices.dataId).id;\n  const valuesId = backend2.dataIdMap.get(values.dataId).id;\n  const defaultValueId = backend2.dataIdMap.get(defaultValue.dataId).id;\n  const outputIndices = backend2.makeOutput(maxOutputIndicesShape, indices.dtype);\n  const outputIndicesId = backend2.dataIdMap.get(outputIndices.dataId).id;\n  const outputValues = backend2.makeOutput(maxOutputIndicesShape.slice(0, 1), values.dtype);\n  const outputValuesId = backend2.dataIdMap.get(outputValues.dataId).id;\n  const emptyRowIndicator = backend2.makeOutput([denseRows], \"bool\");\n  const emptyRowIndicatorId = backend2.dataIdMap.get(emptyRowIndicator.dataId).id;\n  const reverseIndexMap = backend2.makeOutput([indicesCount], indices.dtype);\n  const reverseIndexMapId = backend2.dataIdMap.get(reverseIndexMap.dataId).id;\n  const exceptionValues = backend2.makeOutput([4], \"int32\");\n  const exceptionValuesId = backend2.dataIdMap.get(exceptionValues.dataId).id;\n  const outputRows = wasmSparseFillEmptyRows(indicesId, valuesId, CppDType[values.dtype], indicesCount, denseRows, rank, defaultValueId, outputIndicesId, outputValuesId, emptyRowIndicatorId, reverseIndexMapId, exceptionValuesId);\n  const exceptionValuesArray = backend2.readSync(exceptionValues.dataId);\n  let exceptionMessage;\n  switch (exceptionValuesArray[0]) {\n    case 1: {\n      exceptionMessage = backend_util_exports.getSparseFillEmptyRowsIndicesDenseShapeMismatch(exceptionValuesArray[1]);\n      break;\n    }\n    case 2: {\n      exceptionMessage = backend_util_exports.getSparseFillEmptyRowsNegativeIndexErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2]);\n      break;\n    }\n    case 3:\n      exceptionMessage = backend_util_exports.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2], exceptionValuesArray[3]);\n      break;\n    default:\n      exceptionMessage = \"\";\n  }\n  backend2.disposeData(exceptionValues.dataId);\n  if (exceptionMessage) {\n    backend2.disposeData(outputIndices.dataId);\n    backend2.disposeData(outputValues.dataId);\n    backend2.disposeData(emptyRowIndicator.dataId);\n    backend2.disposeData(reverseIndexMap.dataId);\n    throw new Error(exceptionMessage);\n  }\n  let resizedIndices = outputIndices;\n  let resizedValues = outputValues;\n  if (outputRows !== maxOutputIndicesShape[0]) {\n    resizedIndices = slice4({\n      inputs: { x: outputIndices },\n      attrs: { begin: 0, size: [outputRows, rank] },\n      backend: backend2\n    });\n    resizedValues = slice4({\n      inputs: { x: outputValues },\n      attrs: { begin: 0, size: outputRows },\n      backend: backend2\n    });\n    backend2.disposeData(outputIndices.dataId);\n    backend2.disposeData(outputValues.dataId);\n  }\n  return [resizedIndices, resizedValues, emptyRowIndicator, reverseIndexMap];\n}\nvar sparseFillEmptyRowsConfig3 = {\n  kernelName: SparseFillEmptyRows,\n  backendName: \"wasm\",\n  setupFunc: setup40,\n  kernelFunc: sparseFillEmptyRows4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/SparseReshape.js\nvar wasmSparseReshape;\nfunction setup41(backend2) {\n  wasmSparseReshape = backend2.wasm.cwrap(SparseReshape, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction sparseReshape4(args) {\n  const { backend: backend2, inputs } = args;\n  const { inputIndices, inputShape, newShape } = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n  if (newShape.shape.length !== 1) {\n    throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n  const inputIndicesId = backend2.dataIdMap.get(inputIndices.dataId).id;\n  const inputShapeId = backend2.dataIdMap.get(inputShape.dataId).id;\n  const newShapeId = backend2.dataIdMap.get(newShape.dataId).id;\n  const nnz = inputIndices.shape[0];\n  const outputRank = util_exports.sizeFromShape(newShape.shape);\n  const newIndices = backend2.makeOutput([nnz, outputRank], inputIndices.dtype);\n  const newIndicesId = backend2.dataIdMap.get(newIndices.dataId).id;\n  const outputShape = backend2.makeOutput([outputRank], newShape.dtype);\n  const outputShapeId = backend2.dataIdMap.get(outputShape.dataId).id;\n  const exceptionValues = backend2.makeOutput([3], \"int32\");\n  const exceptionValuesId = backend2.dataIdMap.get(exceptionValues.dataId).id;\n  wasmSparseReshape(inputIndicesId, inputShapeId, newShapeId, nnz, newIndicesId, outputShapeId, exceptionValuesId);\n  const exceptionValuesArray = backend2.readSync(exceptionValues.dataId);\n  let exceptionMessage;\n  switch (exceptionValuesArray[0]) {\n    case 0: {\n      exceptionMessage = backend_util_exports.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2]);\n      break;\n    }\n    case 1: {\n      exceptionMessage = backend_util_exports.getSparseReshapeNegativeOutputDimErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2]);\n      break;\n    }\n    case 2:\n      exceptionMessage = backend_util_exports.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage();\n      break;\n    case 3: {\n      const inputShapeValues = Array.from(backend2.readSync(inputShape.dataId)), outputShapeValues = Array.from(backend2.readSync(outputShape.dataId));\n      exceptionMessage = backend_util_exports.getSparseReshapeInputOutputMultipleErrorMessage(inputShapeValues, outputShapeValues);\n      break;\n    }\n    case 4: {\n      const inputShapeValues = Array.from(backend2.readSync(inputShape.dataId)), outputShapeValues = Array.from(backend2.readSync(outputShape.dataId));\n      exceptionMessage = backend_util_exports.getSparseReshapeInputOutputMismatchErrorMessage(inputShapeValues, outputShapeValues);\n      break;\n    }\n    default:\n      exceptionMessage = \"\";\n  }\n  backend2.disposeData(exceptionValues.dataId);\n  if (exceptionMessage) {\n    backend2.disposeData(newIndices.dataId);\n    backend2.disposeData(outputShape.dataId);\n    throw new Error(exceptionMessage);\n  }\n  return [newIndices, outputShape];\n}\nvar sparseReshapeConfig3 = {\n  kernelName: SparseReshape,\n  backendName: \"wasm\",\n  setupFunc: setup41,\n  kernelFunc: sparseReshape4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/SparseSegmentReduction.js\nvar wasmSparseSegmentReduction;\nfunction setup42(backend2) {\n  wasmSparseSegmentReduction = backend2.wasm.cwrap(\"SparseSegmentReduction\", null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction sparseSegmentReduction(args, isMean) {\n  const { backend: backend2, inputs } = args;\n  const { data, indices, segmentIds } = inputs;\n  const numIndices = indices.shape[0];\n  const segmentIdsBack = backend2.readSync(segmentIds.dataId, numIndices - 1, numIndices)[0];\n  const lastSegmentIdPlusOne = numIndices > 0 ? segmentIdsBack + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n  if (outputRows < 0) {\n    throw new Error(backend_util_exports.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n  const outputShape = data.shape.slice();\n  outputShape[0] = outputRows;\n  const dataId = backend2.dataIdMap.get(data.dataId).id;\n  const indicesId = backend2.dataIdMap.get(indices.dataId).id;\n  const segmentIdsId = backend2.dataIdMap.get(segmentIds.dataId).id;\n  const output = backend2.makeOutput(outputShape, data.dtype);\n  const outputId = backend2.dataIdMap.get(output.dataId).id;\n  const exceptionValues = backend2.makeOutput([4], \"int32\");\n  const exceptionValuesId = backend2.dataIdMap.get(exceptionValues.dataId).id;\n  wasmSparseSegmentReduction(dataId, CppDType[data.dtype], data.shape[0], indicesId, segmentIdsId, outputId, exceptionValuesId, isMean, 0);\n  const exceptionValuesArray = backend2.readSync(exceptionValues.dataId);\n  let exceptionMessage;\n  switch (exceptionValuesArray[0]) {\n    case 0: {\n      exceptionMessage = backend_util_exports.getSparseSegmentReductionNegativeSegmentIdsErrorMessage();\n      break;\n    }\n    case 1: {\n      exceptionMessage = backend_util_exports.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();\n      break;\n    }\n    case 2:\n      exceptionMessage = backend_util_exports.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2]);\n      break;\n    case 3:\n      exceptionMessage = backend_util_exports.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2], exceptionValuesArray[3]);\n      break;\n    default:\n      exceptionMessage = \"\";\n  }\n  backend2.disposeData(exceptionValues.dataId);\n  if (exceptionMessage) {\n    backend2.disposeData(output.dataId);\n    throw new Error(exceptionMessage);\n  }\n  return output;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/SparseSegmentMean.js\nfunction sparseSegmentMean4(args) {\n  return sparseSegmentReduction(args, true);\n}\nvar sparseSegmentMeanConfig3 = {\n  kernelName: SparseSegmentMean,\n  backendName: \"wasm\",\n  setupFunc: setup42,\n  kernelFunc: sparseSegmentMean4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/SparseSegmentSum.js\nfunction sparseSegmentSum4(args) {\n  return sparseSegmentReduction(args, false);\n}\nvar sparseSegmentSumConfig3 = {\n  kernelName: SparseSegmentSum,\n  backendName: \"wasm\",\n  setupFunc: setup42,\n  kernelFunc: sparseSegmentSum4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/SplitV.js\nfunction splitV3(args) {\n  const { inputs, attrs, backend: backend2 } = args;\n  const { x } = inputs;\n  const { numOrSizeSplits, axis } = attrs;\n  const $axis = util_exports.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util_exports.prepareSplitSize(x, numOrSizeSplits, $axis);\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map((s) => {\n    const xSliceSize = [...size];\n    xSliceSize[$axis] = s;\n    const xSlice = slice4({ inputs: { x }, attrs: { begin, size: xSliceSize }, backend: backend2 });\n    begin[$axis] += s;\n    return xSlice;\n  });\n}\nvar splitVConfig3 = {\n  kernelName: SplitV,\n  backendName: \"wasm\",\n  kernelFunc: splitV3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Sqrt.js\nvar sqrtConfig3 = createUnaryKernelConfig(Sqrt);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Square.js\nvar squareConfig3 = createUnaryKernelConfig(Square);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/SquaredDifference.js\nvar supportsFullBroadcast15 = true;\nvar squaredDifferenceConfig3 = createBinaryKernelConfig(SquaredDifference, supportsFullBroadcast15);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Step.js\nvar wasmStep;\nfunction setup43(backend2) {\n  wasmStep = backend2.wasm.cwrap(Step, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction step4(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { alpha } = attrs;\n  const { x } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const out = backend2.makeOutput(x.shape, x.dtype);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmStep(xId, alpha, CppDType[x.dtype], outId);\n  return out;\n}\nvar stepConfig3 = {\n  kernelName: Step,\n  backendName: \"wasm\",\n  setupFunc: setup43,\n  kernelFunc: step4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/StridedSlice.js\nvar wasmStridedSlice;\nfunction setup44(backend2) {\n  wasmStridedSlice = backend2.wasm.cwrap(StridedSlice, null, [\n    \"number\",\n    \"array\",\n    \"number\",\n    \"array\",\n    \"array\",\n    \"array\",\n    \"array\",\n    \"array\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction stridedSlice4(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { x } = inputs;\n  const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n  const { finalShapeSparse, finalShape, isIdentity, sliceDim0, isSimpleSlice, begin: $begin, end: $end, strides: $strides } = slice_util_exports.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n  let result;\n  if (isIdentity) {\n    result = reshape5({ inputs: { x }, backend: backend2, attrs: { shape: finalShape } });\n  } else if (sliceDim0 || isSimpleSlice) {\n    util_exports.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n    const size = slice_util_exports.computeOutShape($begin, $end, $strides);\n    const sliced = slice4({ inputs: { x }, backend: backend2, attrs: { begin: $begin, size } });\n    result = reshape5({ inputs: { x: sliced }, backend: backend2, attrs: { shape: finalShape } });\n    backend2.disposeData(sliced.dataId);\n  } else {\n    const out = backend2.makeOutput(finalShapeSparse, \"float32\");\n    const xId = backend2.dataIdMap.get(x.dataId).id;\n    const xStridesBytes = new Uint8Array(new Int32Array(util_exports.computeStrides(x.shape)).buffer);\n    const beginBytes = new Uint8Array(new Int32Array($begin).buffer);\n    const endBytes = new Uint8Array(new Int32Array($end).buffer);\n    const stridesBytes = new Uint8Array(new Int32Array($strides).buffer);\n    const outputShapeBytes = new Uint8Array(new Int32Array(finalShapeSparse).buffer);\n    const outStridesBytes = new Uint8Array(new Int32Array(util_exports.computeStrides(finalShapeSparse)).buffer);\n    const outId = backend2.dataIdMap.get(out.dataId).id;\n    wasmStridedSlice(xId, xStridesBytes, x.shape.length, beginBytes, endBytes, stridesBytes, outputShapeBytes, outStridesBytes, finalShapeSparse.length, outId);\n    result = reshape5({ inputs: { x: out }, backend: backend2, attrs: { shape: finalShape } });\n    backend2.disposeData(out.dataId);\n  }\n  return result;\n}\nvar stridedSliceConfig3 = {\n  kernelName: StridedSlice,\n  backendName: \"wasm\",\n  setupFunc: setup44,\n  kernelFunc: stridedSlice4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Sub.js\nvar supportsFullBroadcast16 = true;\nvar subConfig3 = createBinaryKernelConfig(Sub, supportsFullBroadcast16);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Sum.js\nvar wasmSum;\nfunction setup45(backend2) {\n  wasmSum = backend2.wasm.cwrap(Sum, null, [\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction sum5(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { axis, keepDims } = attrs;\n  const { x } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input2 = x;\n  const { transposed, axes, originalAxes, inputWasTransposed } = permuteAxesAndTranspose(x, axis, backend2);\n  let reductionAxes = axes;\n  if (inputWasTransposed) {\n    const transposedId = backend2.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      input2 = transposed;\n      inputId = transposedId;\n      reductionAxes = backend_util_exports.getInnerMostAxes(reductionAxes.length, input2.shape.length);\n    }\n  }\n  backend_util_exports.assertAxesAreInnerMostDims(\"sum\", reductionAxes, input2.shape.length);\n  const [outShape, reduceShape] = backend_util_exports.computeOutAndReduceShapes(input2.shape, reductionAxes);\n  const reduceSize = util_exports.sizeFromShape(reduceShape);\n  const out = backend2.makeOutput(outShape, input2.dtype);\n  if (util_exports.sizeFromShape(input2.shape) !== 0) {\n    const outId = backend2.dataIdMap.get(out.dataId).id;\n    wasmSum(inputId, reduceSize, CppDType[out.dtype], outId);\n  }\n  if (inputWasTransposed) {\n    backend2.disposeData(transposed.dataId);\n  }\n  if (keepDims) {\n    const newShape = backend_util_exports.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n  return out;\n}\nvar sumConfig3 = {\n  kernelName: Sum,\n  backendName: \"wasm\",\n  setupFunc: setup45,\n  kernelFunc: sum5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Tan.js\nvar tanConfig3 = createUnaryKernelConfig(Tan);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Tanh.js\nvar tanhConfig3 = createUnaryKernelConfig(Tanh);\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Tile.js\nvar wasmTile;\nfunction setup46(backend2) {\n  wasmTile = backend2.wasm.cwrap(Tile, null, [\n    \"number\",\n    \"array\",\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction tile5(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { x } = inputs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const { reps } = attrs;\n  const newShape = new Array(x.shape.length);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[i] * reps[i];\n  }\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  const newShapeBytes = new Uint8Array(new Int32Array(newShape).buffer);\n  const out = backend2.makeOutput(newShape, x.dtype);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  wasmTile(xId, xShapeBytes, x.shape.length, newShapeBytes, newShape.length, CppDType[out.dtype], outId);\n  return out;\n}\nvar tileConfig3 = {\n  kernelName: Tile,\n  backendName: \"wasm\",\n  setupFunc: setup46,\n  kernelFunc: tile5\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/TopK.js\nvar wasmTopK;\nfunction setup47(backend2) {\n  wasmTopK = backend2.wasm.cwrap(TopK, null, [\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"bool\",\n    \"number\",\n    \"number\"\n  ]);\n}\nvar topk2 = ({ inputs, backend: backend2, attrs }) => {\n  const { x } = inputs;\n  const { k, sorted } = attrs;\n  const xId = backend2.dataIdMap.get(x.dataId).id;\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  const outputShape = x.shape.slice();\n  outputShape[outputShape.length - 1] = k;\n  const outValues = backend2.makeOutput(outputShape, x.dtype);\n  const outValuesId = backend2.dataIdMap.get(outValues.dataId).id;\n  const outIndices = backend2.makeOutput(outputShape, \"int32\");\n  const outIndicesId = backend2.dataIdMap.get(outIndices.dataId).id;\n  wasmTopK(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], k, sorted, outValuesId, outIndicesId);\n  return [outValues, outIndices];\n};\nvar topKConfig3 = {\n  kernelName: TopK,\n  backendName: \"wasm\",\n  setupFunc: setup47,\n  kernelFunc: topk2\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Transform.js\nvar wasmTransform;\nfunction setup48(backend2) {\n  wasmTransform = backend2.wasm.cwrap(Transform, null, [\n    \"number\",\n    \"number\",\n    \"bool\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"array\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\",\n    \"number\"\n  ]);\n}\nfunction transform4(args) {\n  const { backend: backend2, inputs, attrs } = args;\n  const { image: image2, transforms } = inputs;\n  const { interpolation, fillMode, fillValue, outputShape } = attrs;\n  const [batch, imageHeight, imageWidth, numChannels] = image2.shape;\n  const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [\n    batch,\n    outHeight,\n    outWidth,\n    numChannels\n  ];\n  const strides = new Uint8Array(new Int32Array(util_exports.computeStrides(image2.shape)).buffer);\n  const out = backend2.makeOutput(outShape, image2.dtype);\n  const outId = backend2.dataIdMap.get(out.dataId).id;\n  const imageData = backend2.dataIdMap.get(image2.dataId);\n  const imageId = imageData.id;\n  const transformsData = backend2.dataIdMap.get(transforms.dataId);\n  const transformsId = transformsData.id;\n  const interpolationModeId = interpolation === \"nearest\" ? 1 : 2;\n  let fillModeId;\n  switch (fillMode) {\n    case \"constant\":\n      fillModeId = 1;\n      break;\n    case \"reflect\":\n      fillModeId = 2;\n      break;\n    case \"wrap\":\n      fillModeId = 3;\n      break;\n    case \"nearest\":\n      fillModeId = 4;\n      break;\n    default:\n      fillModeId = 1;\n      break;\n  }\n  wasmTransform(imageId, transformsId, transforms.shape[0] > 1, batch, outHeight, outWidth, numChannels, imageWidth, imageHeight, strides, image2.shape.length - 1, interpolationModeId, fillModeId, fillValue, outId);\n  return out;\n}\nvar transformConfig3 = {\n  kernelName: Transform,\n  backendName: \"wasm\",\n  setupFunc: setup48,\n  kernelFunc: transform4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Unpack.js\nfunction unpack3(args) {\n  const { inputs, backend: backend2, attrs } = args;\n  const { value } = inputs;\n  let { axis } = attrs;\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n  const numOutputs = value.shape[axis];\n  const rank = value.shape.length;\n  const outShape = new Array(rank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < rank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n  const outs = new Array(numOutputs);\n  const begin = new Array(rank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  for (let i = 0; i < outs.length; i++) {\n    begin[axis] = i;\n    outs[i] = slice4({ inputs: { x: value }, attrs: { begin, size }, backend: backend2 });\n  }\n  return outs.map(({ dataId, dtype }) => ({ dataId, dtype, shape: outShape }));\n}\nvar unpackConfig3 = {\n  kernelName: Unpack,\n  backendName: \"wasm\",\n  kernelFunc: unpack3\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/ZerosLike.js\nfunction zerosLike4(args) {\n  const { inputs: { x }, backend: backend2 } = args;\n  const out = backend2.makeOutput(x.shape, x.dtype);\n  const outVals = backend2.typedArrayFromHeap(out);\n  outVals.fill(0);\n  return out;\n}\nvar zerosLikeConfig3 = {\n  kernelName: ZerosLike,\n  backendName: \"wasm\",\n  kernelFunc: zerosLike4\n};\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/register_all_kernels.js\nvar kernelConfigs3 = [\n  _fusedMatMulConfig3,\n  absConfig3,\n  addConfig3,\n  addNConfig3,\n  allConfig3,\n  anyConfig3,\n  argMaxConfig3,\n  avgPoolConfig3,\n  batchMatMulConfig3,\n  batchToSpaceNDConfig3,\n  castConfig3,\n  ceilConfig3,\n  clipByValueConfig3,\n  concatConfig3,\n  conv2DConfig3,\n  conv2DBackpropInputConfig3,\n  cosConfig3,\n  coshConfig3,\n  cropAndResizeConfig3,\n  cumsumConfig3,\n  depthToSpaceConfig3,\n  depthwiseConv2dNativeConfig3,\n  eluConfig3,\n  equalConfig3,\n  expConfig3,\n  expandDimsConfig3,\n  fillConfig3,\n  flipLeftRightConfig3,\n  floorConfig3,\n  floorDivConfig3,\n  fusedBatchNormConfig,\n  fusedConv2DConfig3,\n  fusedDepthwiseConv2DConfig3,\n  gatherNdConfig3,\n  gatherV2Config3,\n  greaterConfig3,\n  greaterEqualConfig3,\n  identityConfig3,\n  leakyReluConfig3,\n  lessConfig3,\n  lessEqualConfig3,\n  logConfig3,\n  logicalAndConfig3,\n  maxConfig3,\n  maximumConfig3,\n  maxPoolConfig3,\n  meanConfig3,\n  minConfig3,\n  minimumConfig3,\n  mirrorPadConfig3,\n  multiplyConfig3,\n  negConfig3,\n  nonMaxSuppressionV3Config3,\n  nonMaxSuppressionV4Config3,\n  nonMaxSuppressionV5Config3,\n  notEqualConfig3,\n  oneHotConfig3,\n  onesLikeConfig3,\n  packConfig3,\n  padV2Config3,\n  powConfig3,\n  preluConfig3,\n  prodConfig3,\n  rangeConfig3,\n  realDivConfig3,\n  reluConfig3,\n  relu6Config3,\n  reshapeConfig3,\n  resizeBilinearConfig3,\n  reverseConfig3,\n  rotateWithOffsetConfig3,\n  roundConfig3,\n  rsqrtConfig3,\n  scatterNdConfig3,\n  selectConfig3,\n  sigmoidConfig3,\n  sinConfig3,\n  sliceConfig3,\n  softmaxConfig3,\n  spaceToBatchNDConfig3,\n  sparseFillEmptyRowsConfig3,\n  sparseReshapeConfig3,\n  sparseSegmentMeanConfig3,\n  sparseSegmentSumConfig3,\n  splitVConfig3,\n  sqrtConfig3,\n  squareConfig3,\n  squaredDifferenceConfig3,\n  stepConfig3,\n  stridedSliceConfig3,\n  subConfig3,\n  sumConfig3,\n  tanConfig3,\n  tanhConfig3,\n  tileConfig3,\n  topKConfig3,\n  transformConfig3,\n  transposeConfig3,\n  unpackConfig3,\n  zerosLikeConfig3\n];\nfor (const kernelConfig of kernelConfigs3) {\n  registerKernel(kernelConfig);\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/flags_wasm.js\nvar ENV5 = env();\nENV5.registerFlag(\"WASM_HAS_SIMD_SUPPORT\", async () => WebAssembly.validate(new Uint8Array([\n  0,\n  97,\n  115,\n  109,\n  1,\n  0,\n  0,\n  0,\n  1,\n  4,\n  1,\n  96,\n  0,\n  0,\n  3,\n  2,\n  1,\n  0,\n  10,\n  9,\n  1,\n  7,\n  0,\n  65,\n  0,\n  253,\n  15,\n  26,\n  11\n])));\nENV5.registerFlag(\"WASM_HAS_MULTITHREAD_SUPPORT\", async () => {\n  if (ENV5.get(\"IS_NODE\")) {\n    return false;\n  }\n  try {\n    new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    return WebAssembly.validate(new Uint8Array([\n      0,\n      97,\n      115,\n      109,\n      1,\n      0,\n      0,\n      0,\n      1,\n      4,\n      1,\n      96,\n      0,\n      0,\n      3,\n      2,\n      1,\n      0,\n      5,\n      4,\n      1,\n      3,\n      1,\n      1,\n      10,\n      11,\n      1,\n      9,\n      0,\n      65,\n      0,\n      254,\n      16,\n      2,\n      0,\n      26,\n      11\n    ]));\n  } catch (e) {\n    return false;\n  }\n});\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/backend_wasm.js\nvar import_tfjs_backend_wasm_threaded_simd = __toESM(require_tfjs_backend_wasm_threaded_simd());\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm-threaded-simd.worker.js\nvar wasmWorkerContents = 'var Module={};function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(\" \");console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(\" \");postMessage({cmd:\"alert\",text:text,threadId:Module[\"_pthread_self\"]()})}var err=threadPrintErr;this.alert=threadAlert;Module[\"instantiateWasm\"]=function(info,receiveInstance){var instance=new WebAssembly.Instance(Module[\"wasmModule\"],info);Module[\"wasmModule\"]=null;receiveInstance(instance);return instance.exports};function moduleLoaded(){}this.onmessage=function(e){try{if(e.data.cmd===\"load\"){Module[\"wasmModule\"]=e.data.wasmModule;Module[\"wasmMemory\"]=e.data.wasmMemory;Module[\"buffer\"]=Module[\"wasmMemory\"].buffer;Module[\"ENVIRONMENT_IS_PTHREAD\"]=true;if(typeof e.data.urlOrBlob===\"string\"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module).then(function(instance){Module=instance;moduleLoaded()})}else if(e.data.cmd===\"objectTransfer\"){Module[\"PThread\"].receiveObjectTransfer(e.data)}else if(e.data.cmd===\"run\"){Module[\"__performance_now_clock_drift\"]=performance.now()-e.data.time;Module[\"__emscripten_thread_init\"](e.data.threadInfoStruct,0,0);var max=e.data.stackBase;var top=e.data.stackBase+e.data.stackSize;Module[\"establishStackSpace\"](top,max);Module[\"_emscripten_tls_init\"]();Module[\"PThread\"].receiveObjectTransfer(e.data);Module[\"PThread\"].setThreadStatus(Module[\"_pthread_self\"](),1);try{var result=Module[\"invokeEntryPoint\"](e.data.start_routine,e.data.arg);if(!Module[\"getNoExitRuntime\"]())Module[\"PThread\"].threadExit(result)}catch(ex){if(ex===\"Canceled!\"){Module[\"PThread\"].threadCancel()}else if(ex!=\"unwind\"){if(ex instanceof Module[\"ExitStatus\"]){if(Module[\"getNoExitRuntime\"]()){}else{Module[\"PThread\"].threadExit(ex.status)}}else{Module[\"PThread\"].threadExit(-2);throw ex}}}}else if(e.data.cmd===\"cancel\"){if(Module[\"_pthread_self\"]()){Module[\"PThread\"].threadCancel()}}else if(e.data.target===\"setimmediate\"){}else if(e.data.cmd===\"processThreadQueue\"){if(Module[\"_pthread_self\"]()){Module[\"_emscripten_current_thread_process_queued_calls\"]()}}else{err(\"worker.js received unknown command \"+e.data.cmd);err(e.data)}}catch(ex){err(\"worker.js onmessage() captured an uncaught exception: \"+ex);if(ex&&ex.stack)err(ex.stack);throw ex}};if(typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\"){self={location:{href:__filename}};var onmessage=this.onmessage;var nodeWorkerThreads=require(\"worker_threads\");global.Worker=nodeWorkerThreads.Worker;var parentPort=nodeWorkerThreads.parentPort;parentPort.on(\"message\",function(data){onmessage({data:data})});var nodeFS=require(\"fs\");var nodeRead=function(filename){return nodeFS.readFileSync(filename,\"utf8\")};function globalEval(x){global.require=require;global.Module=Module;eval.call(null,x)}importScripts=function(f){globalEval(nodeRead(f))};postMessage=function(msg){parentPort.postMessage(msg)};if(typeof performance===\"undefined\"){performance={now:function(){return Date.now()}}}}';\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/backend_wasm.js\nvar import_tfjs_backend_wasm = __toESM(require_tfjs_backend_wasm());\nvar BackendWasm = class extends KernelBackend {\n  constructor(wasm) {\n    super();\n    this.wasm = wasm;\n    this.dataIdNextNumber = 1;\n    this.wasm.tfjs.initWithThreadsCount(threadsCount);\n    actualThreadsCount = this.wasm.tfjs.getThreadsCount();\n    this.dataIdMap = new DataStorage(this, engine());\n  }\n  write(values, shape, dtype) {\n    const dataId = { id: this.dataIdNextNumber++ };\n    this.move(dataId, values, shape, dtype, 1);\n    return dataId;\n  }\n  numDataIds() {\n    return this.dataIdMap.numDataIds();\n  }\n  async time(f) {\n    const start = util_exports.now();\n    f();\n    const kernelMs = util_exports.now() - start;\n    return { kernelMs };\n  }\n  move(dataId, values, shape, dtype, refCount) {\n    const id = this.dataIdNextNumber++;\n    if (dtype === \"string\") {\n      const stringBytes = values;\n      this.dataIdMap.set(dataId, { id, stringBytes, shape, dtype, memoryOffset: null, refCount });\n      return;\n    }\n    const size = util_exports.sizeFromShape(shape);\n    const numBytes = size * util_exports.bytesPerElement(dtype);\n    const memoryOffset = this.wasm._malloc(numBytes);\n    this.dataIdMap.set(dataId, { id, memoryOffset, shape, dtype, refCount });\n    this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n    if (values != null) {\n      this.wasm.HEAPU8.set(new Uint8Array(values.buffer, values.byteOffset, numBytes), memoryOffset);\n    }\n  }\n  async read(dataId) {\n    return this.readSync(dataId);\n  }\n  readSync(dataId, start, end) {\n    const { memoryOffset, dtype, shape, stringBytes } = this.dataIdMap.get(dataId);\n    if (dtype === \"string\") {\n      if ((start == null || start === 0) && (end == null || end >= stringBytes.length)) {\n        return stringBytes;\n      }\n      return stringBytes.slice(start, end);\n    }\n    start = start || 0;\n    end = end || util_exports.sizeFromShape(shape);\n    const bytesPerElement2 = util_exports.bytesPerElement(dtype);\n    const bytes = this.wasm.HEAPU8.slice(memoryOffset + start * bytesPerElement2, memoryOffset + end * bytesPerElement2);\n    return typedArrayFromBuffer(bytes.buffer, dtype);\n  }\n  disposeData(dataId, force = false) {\n    if (this.dataIdMap.has(dataId)) {\n      const data = this.dataIdMap.get(dataId);\n      data.refCount--;\n      if (!force && data.refCount > 0) {\n        return false;\n      }\n      this.wasm._free(data.memoryOffset);\n      this.wasm.tfjs.disposeData(data.id);\n      this.dataIdMap.delete(dataId);\n    }\n    return true;\n  }\n  refCount(dataId) {\n    if (this.dataIdMap.has(dataId)) {\n      const tensorData = this.dataIdMap.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n  incRef(dataId) {\n    const data = this.dataIdMap.get(dataId);\n    if (data != null) {\n      data.refCount++;\n    }\n  }\n  floatPrecision() {\n    return 32;\n  }\n  getMemoryOffset(dataId) {\n    return this.dataIdMap.get(dataId).memoryOffset;\n  }\n  dispose() {\n    this.wasm.tfjs.dispose();\n    if (\"PThread\" in this.wasm) {\n      this.wasm.PThread.terminateAllThreads();\n    }\n    this.wasm = null;\n  }\n  memory() {\n    return { unreliable: false };\n  }\n  makeOutput(shape, dtype, memoryOffset) {\n    let dataId;\n    if (memoryOffset == null) {\n      dataId = this.write(null, shape, dtype);\n    } else {\n      const id = this.dataIdNextNumber++;\n      dataId = { id };\n      this.dataIdMap.set(dataId, { id, memoryOffset, shape, dtype, refCount: 1 });\n      const size = util_exports.sizeFromShape(shape);\n      this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n    }\n    return { dataId, shape, dtype };\n  }\n  typedArrayFromHeap({ shape, dtype, dataId }) {\n    const buffer2 = this.wasm.HEAPU8.buffer;\n    const { memoryOffset } = this.dataIdMap.get(dataId);\n    const size = util_exports.sizeFromShape(shape);\n    switch (dtype) {\n      case \"float32\":\n        return new Float32Array(buffer2, memoryOffset, size);\n      case \"int32\":\n        return new Int32Array(buffer2, memoryOffset, size);\n      case \"bool\":\n        return new Uint8Array(buffer2, memoryOffset, size);\n      default:\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n  }\n};\nfunction createInstantiateWasmFunc(path) {\n  return (imports, callback) => {\n    util_exports.fetch(path, { credentials: \"same-origin\" }).then((response) => {\n      if (!response[\"ok\"]) {\n        imports.env.a(`failed to load wasm binary file at '${path}'`);\n      }\n      response.arrayBuffer().then((binary) => {\n        WebAssembly.instantiate(binary, imports).then((output) => {\n          callback(output.instance, output.module);\n        });\n      });\n    });\n    return {};\n  };\n}\nfunction getPathToWasmBinary(simdSupported, threadsSupported, wasmModuleFolder) {\n  if (wasmPath != null) {\n    return wasmPath;\n  }\n  let path = \"tfjs-backend-wasm.wasm\";\n  if (simdSupported && threadsSupported) {\n    path = \"tfjs-backend-wasm-threaded-simd.wasm\";\n  } else if (simdSupported) {\n    path = \"tfjs-backend-wasm-simd.wasm\";\n  }\n  if (wasmFileMap != null) {\n    if (wasmFileMap[path] != null) {\n      return wasmFileMap[path];\n    }\n  }\n  return wasmModuleFolder + path;\n}\nasync function init() {\n  const [simdSupported, threadsSupported] = await Promise.all([\n    env().getAsync(\"WASM_HAS_SIMD_SUPPORT\"),\n    env().getAsync(\"WASM_HAS_MULTITHREAD_SUPPORT\")\n  ]);\n  return new Promise((resolve, reject) => {\n    const factoryConfig = {};\n    factoryConfig.locateFile = (path, prefix) => {\n      if (path.endsWith(\".worker.js\")) {\n        const response = wasmWorkerContents;\n        const blob = new Blob([response], { type: \"application/javascript\" });\n        return URL.createObjectURL(blob);\n      }\n      if (path.endsWith(\".wasm\")) {\n        return getPathToWasmBinary(simdSupported, threadsSupported, wasmPathPrefix != null ? wasmPathPrefix : prefix);\n      }\n      return prefix + path;\n    };\n    if (customFetch) {\n      factoryConfig.instantiateWasm = createInstantiateWasmFunc(getPathToWasmBinary(simdSupported, threadsSupported, wasmPathPrefix != null ? wasmPathPrefix : \"\"));\n    }\n    let initialized = false;\n    factoryConfig.onAbort = () => {\n      if (initialized) {\n        return;\n      }\n      if (initAborted) {\n        return;\n      }\n      initAborted = true;\n      const rejectMsg = \"Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers\";\n      reject({ message: rejectMsg });\n    };\n    let wasm;\n    if (threadsSupported && simdSupported && wasmPath == null) {\n      factoryConfig.mainScriptUrlOrBlob = new Blob([`var WasmBackendModuleThreadedSimd = ` + import_tfjs_backend_wasm_threaded_simd.default.toString()], { type: \"text/javascript\" });\n      wasm = (0, import_tfjs_backend_wasm_threaded_simd.default)(factoryConfig);\n    } else {\n      wasm = (0, import_tfjs_backend_wasm.default)(factoryConfig);\n    }\n    wasm.then((module) => {\n      initialized = true;\n      initAborted = false;\n      const voidReturnType = null;\n      module.tfjs = {\n        init: module.cwrap(\"init\", null, []),\n        initWithThreadsCount: module.cwrap(\"init_with_threads_count\", null, [\"number\"]),\n        getThreadsCount: module.cwrap(\"get_threads_count\", \"number\", []),\n        registerTensor: module.cwrap(\"register_tensor\", null, [\n          \"number\",\n          \"number\",\n          \"number\"\n        ]),\n        disposeData: module.cwrap(\"dispose_data\", voidReturnType, [\"number\"]),\n        dispose: module.cwrap(\"dispose\", voidReturnType, [])\n      };\n      resolve({ wasm: module });\n    });\n  });\n}\nfunction typedArrayFromBuffer(buffer2, dtype) {\n  switch (dtype) {\n    case \"float32\":\n      return new Float32Array(buffer2);\n    case \"int32\":\n      return new Int32Array(buffer2);\n    case \"bool\":\n      return new Uint8Array(buffer2);\n    default:\n      throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\nvar wasmBinaryNames = [\n  \"tfjs-backend-wasm.wasm\",\n  \"tfjs-backend-wasm-simd.wasm\",\n  \"tfjs-backend-wasm-threaded-simd.wasm\"\n];\nvar wasmPath = null;\nvar wasmPathPrefix = null;\nvar wasmFileMap = {};\nvar initAborted = false;\nvar customFetch = false;\nfunction setWasmPath(path, usePlatformFetch = false) {\n  deprecationWarn(\"setWasmPath has been deprecated in favor of setWasmPaths and will be removed in a future release.\");\n  if (initAborted) {\n    throw new Error(\"The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`\");\n  }\n  wasmPath = path;\n  customFetch = usePlatformFetch;\n}\nfunction setWasmPaths(prefixOrFileMap, usePlatformFetch = false) {\n  if (initAborted) {\n    throw new Error(\"The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`\");\n  }\n  if (typeof prefixOrFileMap === \"string\") {\n    wasmPathPrefix = prefixOrFileMap;\n  } else {\n    wasmFileMap = prefixOrFileMap;\n    const missingPaths = wasmBinaryNames.filter((name) => wasmFileMap[name] == null);\n    if (missingPaths.length > 0) {\n      throw new Error(`There were no entries found for the following binaries: ${missingPaths.join(\",\")}. Please either call setWasmPaths with a map providing a path for each binary, or with a string indicating the directory where all the binaries can be found.`);\n    }\n  }\n  customFetch = usePlatformFetch;\n}\nvar threadsCount = -1;\nvar actualThreadsCount = -1;\nfunction setThreadsCount(numThreads) {\n  threadsCount = numThreads;\n}\nfunction getThreadsCount() {\n  if (actualThreadsCount === -1) {\n    throw new Error(`WASM backend not initialized.`);\n  }\n  return actualThreadsCount;\n}\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/version.js\nvar version8 = \"3.13.0\";\n\n// node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@3.13.0_@tensorflow+tfjs-core@3.13.0/node_modules/@tensorflow/tfjs-backend-wasm/dist/base.js\nvar WASM_PRIORITY = 2;\nregisterBackend(\"wasm\", async () => {\n  const { wasm } = await init();\n  return new BackendWasm(wasm);\n}, WASM_PRIORITY);\n\n// dist/tfjs.version.js\nvar version9 = \"3.13.0\";\nvar version22 = \"3.13.0\";\nvar version32 = \"3.13.0\";\nvar version42 = \"3.13.0\";\nvar version52 = \"3.13.0\";\nvar version62 = \"3.13.0\";\nvar version72 = \"3.13.0\";\nvar version82 = \"3.13.0\";\nvar version92 = {\n  tfjs: version9,\n  \"tfjs-core\": version22,\n  \"tfjs-data\": version32,\n  \"tfjs-layers\": version42,\n  \"tfjs-converter\": version52,\n  \"tfjs-backend-cpu\": version62,\n  \"tfjs-backend-webgl\": version72,\n  \"tfjs-backend-wasm\": version82\n};\nexport {\n  Abs,\n  Acos,\n  Acosh,\n  AdadeltaOptimizer,\n  AdagradOptimizer,\n  AdamOptimizer,\n  AdamaxOptimizer,\n  Add,\n  AddN,\n  All,\n  Any,\n  ArgMax,\n  ArgMin,\n  Asin,\n  Asinh,\n  Atan,\n  Atan2,\n  Atanh,\n  AvgPool,\n  AvgPool3D,\n  AvgPool3DGrad,\n  AvgPoolGrad,\n  BackendWasm,\n  BatchMatMul,\n  BatchToSpaceND,\n  Bincount,\n  BroadcastArgs,\n  BroadcastTo,\n  Callback,\n  CallbackList,\n  Cast,\n  Ceil,\n  ClipByValue,\n  Complex,\n  ComplexAbs,\n  Concat,\n  Conv2D,\n  Conv2DBackpropFilter,\n  Conv2DBackpropInput,\n  Conv3D,\n  Conv3DBackpropFilterV2,\n  Conv3DBackpropInputV2,\n  Cos,\n  Cosh,\n  CropAndResize,\n  Cumsum,\n  CustomCallback,\n  DataStorage,\n  DenseBincount,\n  DepthToSpace,\n  DepthwiseConv2dNative,\n  DepthwiseConv2dNativeBackpropFilter,\n  DepthwiseConv2dNativeBackpropInput,\n  Diag,\n  Dilation2D,\n  Dilation2DBackpropFilter,\n  Dilation2DBackpropInput,\n  ENV,\n  EarlyStopping,\n  Einsum,\n  Elu,\n  EluGrad,\n  Environment,\n  Equal,\n  Erf,\n  Exp,\n  ExpandDims,\n  Expm1,\n  FFT,\n  Fill,\n  FlipLeftRight,\n  Floor,\n  FloorDiv,\n  FromPixels,\n  FusedBatchNorm,\n  FusedConv2D,\n  FusedDepthwiseConv2D,\n  GPGPUContext,\n  GatherNd,\n  GatherV2,\n  GraphModel,\n  Greater,\n  GreaterEqual,\n  History,\n  IFFT,\n  Identity,\n  Imag,\n  InputSpec,\n  IsFinite,\n  IsInf,\n  IsNan,\n  KernelBackend,\n  LRN,\n  LRNGrad,\n  LayerVariable,\n  LayersModel,\n  LeakyRelu,\n  Less,\n  LessEqual,\n  LinSpace,\n  Log,\n  Log1p,\n  LogSoftmax,\n  LogicalAnd,\n  LogicalNot,\n  LogicalOr,\n  MathBackendWebGL,\n  Max,\n  MaxPool,\n  MaxPool3D,\n  MaxPool3DGrad,\n  MaxPoolGrad,\n  MaxPoolWithArgmax,\n  Maximum,\n  Mean,\n  Min,\n  Minimum,\n  MirrorPad,\n  Mod,\n  MomentumOptimizer,\n  Multinomial,\n  Multiply,\n  Neg,\n  NonMaxSuppressionV3,\n  NonMaxSuppressionV4,\n  NonMaxSuppressionV5,\n  NotEqual,\n  OP_SCOPE_SUFFIX,\n  OneHot,\n  OnesLike,\n  Optimizer,\n  OptimizerConstructors,\n  Pack,\n  PadV2,\n  Pool,\n  Pow,\n  Prelu,\n  Prod,\n  RMSPropOptimizer,\n  RNN,\n  Range,\n  Rank,\n  Real,\n  RealDiv,\n  Reciprocal,\n  Reduction,\n  Relu,\n  Relu6,\n  Reshape,\n  ResizeBilinear,\n  ResizeBilinearGrad,\n  ResizeNearestNeighbor,\n  ResizeNearestNeighborGrad,\n  Reverse,\n  RotateWithOffset,\n  Round,\n  Rsqrt,\n  SGDOptimizer,\n  ScatterNd,\n  Select,\n  Selu,\n  Sequential,\n  Sigmoid,\n  Sign,\n  Sin,\n  Sinh,\n  Slice,\n  Softmax,\n  Softplus,\n  SpaceToBatchND,\n  SparseFillEmptyRows,\n  SparseReshape,\n  SparseSegmentMean,\n  SparseSegmentSum,\n  SparseToDense,\n  SplitV,\n  Sqrt,\n  Square,\n  SquaredDifference,\n  Step,\n  StridedSlice,\n  StringNGrams,\n  StringSplit,\n  StringToHashBucketFast,\n  Sub,\n  Sum,\n  SymbolicTensor,\n  Tan,\n  Tanh,\n  Tensor,\n  TensorBuffer,\n  Tile,\n  TopK,\n  Transform,\n  Transpose,\n  Unique,\n  Unpack,\n  UnsortedSegmentSum,\n  Variable,\n  ZerosLike,\n  _FusedMatMul,\n  abs,\n  acos,\n  acosh,\n  add2 as add,\n  addN,\n  all,\n  any,\n  argMax,\n  argMin,\n  asin,\n  asinh,\n  atan,\n  atan2,\n  atanh,\n  avgPool,\n  avgPool3d,\n  backend,\n  backend_util_exports as backend_util,\n  basicLSTMCell,\n  batchNorm,\n  batchNorm2d,\n  batchNorm3d,\n  batchNorm4d,\n  batchToSpaceND,\n  bincount,\n  booleanMaskAsync,\n  broadcastArgs,\n  broadcastTo,\n  broadcast_util_exports as broadcast_util,\n  browser_exports as browser,\n  buffer,\n  callbacks,\n  cast,\n  ceil,\n  clipByValue,\n  clone,\n  complex,\n  concat,\n  concat1d,\n  concat2d,\n  concat3d,\n  concat4d,\n  exports_constraints_exports as constraints,\n  conv1d,\n  conv2d,\n  conv2dTranspose,\n  conv3d,\n  conv3dTranspose,\n  copyRegisteredKernels,\n  cos,\n  cosh,\n  cosineWindow,\n  cumsum,\n  customGrad,\n  dist_exports2 as data,\n  denseBincount,\n  deprecationWarn,\n  depthToSpace,\n  depthwiseConv2d,\n  deregisterOp,\n  device_util_exports as device_util,\n  diag,\n  dilation2d,\n  disableDeprecationWarnings,\n  dispose,\n  disposeVariables,\n  div,\n  divNoNan,\n  dot,\n  dropout,\n  einsum,\n  elu,\n  enableDebugMode,\n  enableProdMode,\n  enclosingPowerOfTwo,\n  engine,\n  env,\n  equal,\n  erf,\n  exp,\n  expandDims,\n  expm1,\n  eye,\n  fft,\n  fill,\n  findBackend,\n  findBackendFactory,\n  floor,\n  floorDiv,\n  forceHalfFloat,\n  fused_ops_exports as fused,\n  gather,\n  gatherND,\n  gather_nd_util_exports as gather_util,\n  getBackend,\n  getGradient,\n  getKernel,\n  getKernelsForBackend,\n  getThreadsCount,\n  gpgpu_util_exports as gpgpu_util,\n  grad,\n  grads,\n  greater,\n  greaterEqual,\n  ifft,\n  imag,\n  image,\n  inTopKAsync,\n  exports_initializers_exports as initializers,\n  input,\n  io_exports as io,\n  irfft,\n  isFinite2 as isFinite,\n  isInf,\n  isNaN2 as isNaN,\n  keep,\n  kernel_impls_exports as kernel_impls,\n  exports_layers_exports as layers,\n  leakyRelu,\n  less,\n  lessEqual,\n  linalg,\n  linspace,\n  loadGraphModel,\n  loadLayersModel,\n  localResponseNormalization,\n  log2 as log,\n  log1p,\n  logSigmoid,\n  logSoftmax,\n  logSumExp,\n  logicalAnd,\n  logicalNot,\n  logicalOr,\n  logicalXor,\n  losses,\n  matMul,\n  math_exports as math,\n  max,\n  maxPool,\n  maxPool3d,\n  maxPoolWithArgmax,\n  maximum,\n  mean,\n  memory,\n  meshgrid,\n  exports_metrics_exports as metrics,\n  min,\n  minimum,\n  mirrorPad,\n  mod,\n  model,\n  exports_models_exports as models,\n  moments,\n  movingAverage,\n  mul,\n  multiRNNCell,\n  multinomial,\n  neg,\n  nextFrame,\n  norm,\n  notEqual,\n  oneHot,\n  ones2 as ones,\n  onesLike,\n  op,\n  outerProduct,\n  pad,\n  pad1d,\n  pad2d,\n  pad3d,\n  pad4d,\n  pool,\n  pow,\n  prelu,\n  print2 as print,\n  prod,\n  profile,\n  rand,\n  randomGamma,\n  randomNormal,\n  randomUniform,\n  range,\n  ready,\n  real,\n  reciprocal,\n  registerBackend,\n  registerCallbackConstructor,\n  registerGradient,\n  registerKernel,\n  registerOp,\n  exports_regularizers_exports as regularizers,\n  relu,\n  relu6,\n  removeBackend,\n  reshape,\n  reverse,\n  reverse1d,\n  reverse2d,\n  reverse3d,\n  reverse4d,\n  rfft,\n  round2 as round,\n  rsqrt,\n  scalar,\n  scatterND,\n  scatter_nd_util_exports as scatter_util,\n  selu,\n  separableConv2d,\n  sequential,\n  serialization_exports as serialization,\n  setBackend,\n  setPlatform,\n  setThreadsCount,\n  setWasmPath,\n  setWasmPaths,\n  setWebGLContext,\n  setdiff1dAsync,\n  sigmoid,\n  sign,\n  signal,\n  sin,\n  sinh,\n  slice,\n  slice1d,\n  slice2d,\n  slice3d,\n  slice4d,\n  slice_util_exports as slice_util,\n  softmax,\n  softplus,\n  spaceToBatchND,\n  sparse,\n  sparseToDense,\n  spectral,\n  split,\n  sqrt,\n  square,\n  squaredDifference,\n  squeeze,\n  stack,\n  step,\n  stridedSlice,\n  string,\n  sub,\n  sum2 as sum,\n  sumOutType,\n  tan,\n  tanh2 as tanh,\n  tensor,\n  tensor1d,\n  tensor2d,\n  tensor3d,\n  tensor4d,\n  tensor5d,\n  tensor6d,\n  tensor_util_exports as tensor_util,\n  test_util_exports as test_util,\n  tidy,\n  tile,\n  time,\n  topk,\n  train,\n  transpose,\n  truncatedNormal,\n  unique,\n  unregisterGradient,\n  unregisterKernel,\n  unsortedSegmentSum,\n  unstack,\n  upcastType,\n  util_exports as util,\n  valueAndGrad,\n  valueAndGrads,\n  variable,\n  variableGrads,\n  version92 as version,\n  version3 as version_converter,\n  version as version_core,\n  version2 as version_layers,\n  version8 as version_wasm,\n  version6 as version_webgl,\n  webgl,\n  webgl_util_exports as webgl_util,\n  where,\n  whereAsync,\n  zeros,\n  zerosLike\n};\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n* @license\n* Copyright 2018 Google LLC. All Rights Reserved.\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* =============================================================================\n*/\n/** @license See the LICENSE file. */\n", "export * from './drawContour';\nexport * from './drawDetections';\nexport * from './drawFaceExpressions';\nexport * from './DrawBox';\nexport * from './DrawFaceLandmarks';\nexport * from './DrawTextField';\n", "import { Point } from '../classes/index';\n\nexport function drawContour(\n  ctx: CanvasRenderingContext2D,\n  points: Point[],\n  isClosed = false,\n) {\n  ctx.beginPath();\n\n  points.slice(1).forEach(({ x, y }, prevIdx) => {\n    const from = points[prevIdx];\n    ctx.moveTo(from.x, from.y);\n    ctx.lineTo(x, y);\n  });\n\n  if (isClosed) {\n    const from = points[points.length - 1];\n    const to = points[0];\n    if (!from || !to) {\n      return;\n    }\n\n    ctx.moveTo(from.x, from.y);\n    ctx.lineTo(to.x, to.y);\n  }\n\n  ctx.stroke();\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { Point } from '../classes/index';\nimport { Dimensions, IDimensions } from '../classes/Dimensions';\n\nexport function isTensor(tensor: any, dim: number) {\n  return tensor instanceof tf.Tensor && tensor.shape.length === dim;\n}\n\nexport function isTensor1D(tensor: any): tensor is tf.Tensor1D {\n  return isTensor(tensor, 1);\n}\n\nexport function isTensor2D(tensor: any): tensor is tf.Tensor2D {\n  return isTensor(tensor, 2);\n}\n\nexport function isTensor3D(tensor: any): tensor is tf.Tensor3D {\n  return isTensor(tensor, 3);\n}\n\nexport function isTensor4D(tensor: any): tensor is tf.Tensor4D {\n  return isTensor(tensor, 4);\n}\n\nexport function isFloat(num: number) {\n  return num % 1 !== 0;\n}\n\nexport function isEven(num: number) {\n  return num % 2 === 0;\n}\n\nexport function round(num: number, prec = 2) {\n  const f = 10 ** prec;\n  return Math.floor(num * f) / f;\n}\n\nexport function isDimensions(obj: any): boolean {\n  return obj && obj.width && obj.height;\n}\n\nexport function computeReshapedDimensions({ width, height }: IDimensions, inputSize: number) {\n  const scale = inputSize / Math.max(height, width);\n  return new Dimensions(Math.round(width * scale), Math.round(height * scale));\n}\n\nexport function getCenterPoint(pts: Point[]): Point {\n  return pts.reduce((sum, pt) => sum.add(pt), new Point(0, 0))\n    .div(new Point(pts.length, pts.length));\n}\n\nexport function range(num: number, start: number, step: number): number[] {\n  return Array(num).fill(0).map((_, i) => start + (i * step));\n}\n\nexport function isValidNumber(num: any) {\n  return !!num && (num !== Infinity) && (num !== -Infinity) && !Number.isNaN(num) || num === 0;\n}\n\nexport function isValidProbablitiy(num: any) {\n  return isValidNumber(num) && num >= 0 && num <= 1.0;\n}\n", "import { isValidNumber } from '../utils/index';\n\nexport interface IDimensions {\n  width: number\n  height: number\n}\n\nexport class Dimensions implements IDimensions {\n  private _width: number;\n\n  private _height: number;\n\n  constructor(width: number, height: number) {\n    if (!isValidNumber(width) || !isValidNumber(height)) {\n      throw new Error(`Dimensions.constructor - expected width and height to be valid numbers, instead have ${JSON.stringify({ width, height })}`);\n    }\n\n    this._width = width;\n    this._height = height;\n  }\n\n  public get width(): number { return this._width; }\n\n  public get height(): number { return this._height; }\n\n  public reverse(): Dimensions {\n    return new Dimensions(1 / this.width, 1 / this.height);\n  }\n}\n", "export interface IPoint {\n  x: number\n  y: number\n}\n\nexport class Point implements IPoint {\n  private _x: number;\n\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    this._x = x;\n    this._y = y;\n  }\n\n  get x(): number { return this._x; }\n\n  get y(): number { return this._y; }\n\n  public add(pt: IPoint): Point {\n    return new Point(this.x + pt.x, this.y + pt.y);\n  }\n\n  public sub(pt: IPoint): Point {\n    return new Point(this.x - pt.x, this.y - pt.y);\n  }\n\n  public mul(pt: IPoint): Point {\n    return new Point(this.x * pt.x, this.y * pt.y);\n  }\n\n  public div(pt: IPoint): Point {\n    return new Point(this.x / pt.x, this.y / pt.y);\n  }\n\n  public abs(): Point {\n    return new Point(Math.abs(this.x), Math.abs(this.y));\n  }\n\n  public magnitude(): number {\n    return Math.sqrt((this.x ** 2) + (this.y ** 2));\n  }\n\n  public floor(): Point {\n    return new Point(Math.floor(this.x), Math.floor(this.y));\n  }\n}\n", "import { isDimensions, isValidNumber } from '../utils/index';\nimport { IBoundingBox } from './BoundingBox';\nimport { IDimensions } from './Dimensions';\nimport { Point } from './Point';\nimport { IRect } from './Rect';\n\nexport class Box<BoxType = any> implements IBoundingBox, IRect {\n  public static isRect(rect: any): boolean {\n    return !!rect && [rect.x, rect.y, rect.width, rect.height].every(isValidNumber);\n  }\n\n  public static assertIsValidBox(box: any, callee: string, allowNegativeDimensions = false) {\n    if (!Box.isRect(box)) {\n      throw new Error(`${callee} - invalid box: ${JSON.stringify(box)}, expected object with properties x, y, width, height`);\n    }\n\n    if (!allowNegativeDimensions && (box.width < 0 || box.height < 0)) {\n      throw new Error(`${callee} - width (${box.width}) and height (${box.height}) must be positive numbers`);\n    }\n  }\n\n  private _x: number;\n\n  private _y: number;\n\n  private _width: number;\n\n  private _height: number;\n\n  constructor(_box: IBoundingBox | IRect, allowNegativeDimensions = true) {\n    const box = (_box || {}) as any;\n\n    const isBbox = [box.left, box.top, box.right, box.bottom].every(isValidNumber);\n    const isRect = [box.x, box.y, box.width, box.height].every(isValidNumber);\n\n    if (!isRect && !isBbox) {\n      throw new Error(`Box.constructor - expected box to be IBoundingBox | IRect, instead have ${JSON.stringify(box)}`);\n    }\n\n    const [x, y, width, height] = isRect\n      ? [box.x, box.y, box.width, box.height]\n      : [box.left, box.top, box.right - box.left, box.bottom - box.top];\n\n    Box.assertIsValidBox({\n      x, y, width, height,\n    }, 'Box.constructor', allowNegativeDimensions);\n\n    this._x = x;\n    this._y = y;\n    this._width = width;\n    this._height = height;\n  }\n\n  public get x(): number { return this._x; }\n\n  public get y(): number { return this._y; }\n\n  public get width(): number { return this._width; }\n\n  public get height(): number { return this._height; }\n\n  public get left(): number { return this.x; }\n\n  public get top(): number { return this.y; }\n\n  public get right(): number { return this.x + this.width; }\n\n  public get bottom(): number { return this.y + this.height; }\n\n  public get area(): number { return this.width * this.height; }\n\n  public get topLeft(): Point { return new Point(this.left, this.top); }\n\n  public get topRight(): Point { return new Point(this.right, this.top); }\n\n  public get bottomLeft(): Point { return new Point(this.left, this.bottom); }\n\n  public get bottomRight(): Point { return new Point(this.right, this.bottom); }\n\n  public round(): Box<BoxType> {\n    const [x, y, width, height] = [this.x, this.y, this.width, this.height]\n      .map((val) => Math.round(val));\n    return new Box({\n      x, y, width, height,\n    });\n  }\n\n  public floor(): Box<BoxType> {\n    const [x, y, width, height] = [this.x, this.y, this.width, this.height]\n      .map((val) => Math.floor(val));\n    return new Box({\n      x, y, width, height,\n    });\n  }\n\n  public toSquare(): Box<BoxType> {\n    let {\n      x, y, width, height,\n    } = this;\n    const diff = Math.abs(width - height);\n    if (width < height) {\n      x -= (diff / 2);\n      width += diff;\n    }\n    if (height < width) {\n      y -= (diff / 2);\n      height += diff;\n    }\n\n    return new Box({ x, y, width, height });\n  }\n\n  public rescale(s: IDimensions | number): Box<BoxType> {\n    const scaleX = isDimensions(s) ? (s as IDimensions).width : s as number;\n    const scaleY = isDimensions(s) ? (s as IDimensions).height : s as number;\n    return new Box({\n      x: this.x * scaleX,\n      y: this.y * scaleY,\n      width: this.width * scaleX,\n      height: this.height * scaleY,\n    });\n  }\n\n  public pad(padX: number, padY: number): Box<BoxType> {\n    const [x, y, width, height] = [\n      this.x - (padX / 2),\n      this.y - (padY / 2),\n      this.width + padX,\n      this.height + padY,\n    ];\n    return new Box({\n      x, y, width, height,\n    });\n  }\n\n  public clipAtImageBorders(imgWidth: number, imgHeight: number): Box<BoxType> {\n    const { x, y, right, bottom } = this;\n    const clippedX = Math.max(x, 0);\n    const clippedY = Math.max(y, 0);\n\n    const newWidth = right - clippedX;\n    const newHeight = bottom - clippedY;\n    const clippedWidth = Math.min(newWidth, imgWidth - clippedX);\n    const clippedHeight = Math.min(newHeight, imgHeight - clippedY);\n\n    return (new Box({\n      x: clippedX, y: clippedY, width: clippedWidth, height: clippedHeight,\n    })).floor();\n  }\n\n  public shift(sx: number, sy: number): Box<BoxType> {\n    const { width, height } = this;\n    const x = this.x + sx;\n    const y = this.y + sy;\n\n    return new Box({\n      x, y, width, height,\n    });\n  }\n\n  public padAtBorders(imageHeight: number, imageWidth: number) {\n    const w = this.width + 1;\n    const h = this.height + 1;\n\n    const dx = 1;\n    const dy = 1;\n    let edx = w;\n    let edy = h;\n\n    let x = this.left;\n    let y = this.top;\n    let ex = this.right;\n    let ey = this.bottom;\n\n    if (ex > imageWidth) {\n      edx = -ex + imageWidth + w;\n      ex = imageWidth;\n    }\n    if (ey > imageHeight) {\n      edy = -ey + imageHeight + h;\n      ey = imageHeight;\n    }\n    if (x < 1) {\n      edy = 2 - x;\n      x = 1;\n    }\n    if (y < 1) {\n      edy = 2 - y;\n      y = 1;\n    }\n\n    return {\n      dy, edy, dx, edx, y, ey, x, ex, w, h,\n    };\n  }\n\n  public calibrate(region: Box) {\n    return new Box({\n      left: this.left + (region.left * this.width),\n      top: this.top + (region.top * this.height),\n      right: this.right + (region.right * this.width),\n      bottom: this.bottom + (region.bottom * this.height),\n    }).toSquare().round();\n  }\n}\n", "import { Box } from './Box';\n\nexport interface IBoundingBox {\n  left: number\n  top: number\n  right: number\n  bottom: number\n}\n\nexport class BoundingBox extends Box implements IBoundingBox {\n  constructor(left: number, top: number, right: number, bottom: number, allowNegativeDimensions = false) {\n    super({ left, top, right, bottom }, allowNegativeDimensions);\n  }\n}\n", "import { Box } from './Box';\nimport { Dimensions, IDimensions } from './Dimensions';\nimport { IRect, Rect } from './Rect';\n\nexport class ObjectDetection {\n  private _score: number;\n\n  private _classScore: number;\n\n  private _className: string;\n\n  private _box: Rect;\n\n  private _imageDims: Dimensions;\n\n  constructor(\n    score: number,\n    classScore: number,\n    className: string,\n    relativeBox: IRect,\n    imageDims: IDimensions,\n  ) {\n    this._imageDims = new Dimensions(imageDims.width, imageDims.height);\n    this._score = score;\n    this._classScore = classScore;\n    this._className = className;\n    this._box = new Box(relativeBox).rescale(this._imageDims);\n  }\n\n  public get score(): number { return this._score; }\n\n  public get classScore(): number { return this._classScore; }\n\n  public get className(): string { return this._className; }\n\n  public get box(): Box { return this._box; }\n\n  public get imageDims(): Dimensions { return this._imageDims; }\n\n  public get imageWidth(): number { return this.imageDims.width; }\n\n  public get imageHeight(): number { return this.imageDims.height; }\n\n  public get relativeBox(): Box { return new Box(this._box).rescale(this.imageDims.reverse()); }\n\n  public forSize(width: number, height: number): ObjectDetection {\n    return new ObjectDetection(\n      this.score,\n      this.classScore,\n      this.className,\n      this.relativeBox,\n      { width, height },\n    );\n  }\n}\n", "import { Box } from './Box';\nimport { IDimensions } from './Dimensions';\nimport { ObjectDetection } from './ObjectDetection';\nimport { Rect } from './Rect';\n\nexport interface IFaceDetecion {\n  score: number\n  box: Box\n}\n\nexport class FaceDetection extends ObjectDetection implements IFaceDetecion {\n  constructor(\n    score: number,\n    relativeBox: Rect,\n    imageDims: IDimensions,\n  ) {\n    super(score, score, '', relativeBox, imageDims);\n  }\n\n  public override forSize(width: number, height: number): FaceDetection {\n    const { score, relativeBox, imageDims } = super.forSize(width, height);\n    return new FaceDetection(score, relativeBox, imageDims);\n  }\n}\n", "import { Box } from '../classes/Box';\n\nexport function iou(box1: Box, box2: Box, isIOU = true) {\n  const width = Math.max(0.0, Math.min(box1.right, box2.right) - Math.max(box1.left, box2.left));\n  const height = Math.max(0.0, Math.min(box1.bottom, box2.bottom) - Math.max(box1.top, box2.top));\n  const interSection = width * height;\n\n  return isIOU\n    ? interSection / (box1.area + box2.area - interSection)\n    : interSection / Math.min(box1.area, box2.area);\n}\n", "import { BoundingBox, IPoint } from '../classes/index';\n\nexport function minBbox(pts: IPoint[]): BoundingBox {\n  const xs = pts.map((pt) => pt.x);\n  const ys = pts.map((pt) => pt.y);\n  const minX = xs.reduce((min, x) => (x < min ? x : min), Infinity);\n  const minY = ys.reduce((min, y) => (y < min ? y : min), Infinity);\n  const maxX = xs.reduce((max, x) => (max < x ? x : max), 0);\n  const maxY = ys.reduce((max, y) => (max < y ? y : max), 0);\n\n  return new BoundingBox(minX, minY, maxX, maxY);\n}\n", "import { Box } from '../classes/Box';\nimport { iou } from './iou';\n\nexport function nonMaxSuppression(\n  boxes: Box[],\n  scores: number[],\n  iouThreshold: number,\n  isIOU = true,\n): number[] {\n  let indicesSortedByScore = scores\n    .map((score, boxIndex) => ({ score, boxIndex }))\n    .sort((c1, c2) => c1.score - c2.score)\n    .map((c) => c.boxIndex);\n\n  const pick: number[] = [];\n\n  while (indicesSortedByScore.length > 0) {\n    const curr = indicesSortedByScore.pop() as number;\n    pick.push(curr);\n\n    const indices = indicesSortedByScore;\n\n    const outputs: number[] = [];\n    for (let i = 0; i < indices.length; i++) {\n      const idx = indices[i];\n\n      const currBox = boxes[curr];\n      const idxBox = boxes[idx];\n\n      outputs.push(iou(currBox, idxBox, isIOU));\n    }\n\n    indicesSortedByScore = indicesSortedByScore.filter(\n      (_, j) => outputs[j] <= iouThreshold,\n    );\n  }\n\n  return pick;\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nexport function normalize(x: tf.Tensor4D, meanRgb: number[]): tf.Tensor4D {\n  return tf.tidy(() => {\n    const [r, g, b] = meanRgb;\n    const avg_r = tf.fill([...x.shape.slice(0, 3), 1], r, 'float32');\n    const avg_g = tf.fill([...x.shape.slice(0, 3), 1], g, 'float32');\n    const avg_b = tf.fill([...x.shape.slice(0, 3), 1], b, 'float32');\n    const avg_rgb = tf.concat([avg_r, avg_g, avg_b], 3);\n\n    return tf.sub(x, avg_rgb);\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\n/**\n * Pads the smaller dimension of an image tensor with zeros, such that width === height.\n *\n * @param imgTensor The image tensor.\n * @param isCenterImage (optional, default: false) If true, add an equal amount of padding on\n * both sides of the minor dimension oof the image.\n * @returns The padded tensor with width === height.\n */\nexport function padToSquare(imgTensor: tf.Tensor4D, isCenterImage = false): tf.Tensor4D {\n  return tf.tidy(() => {\n    const [height, width] = imgTensor.shape.slice(1);\n    if (height === width) return imgTensor;\n    const dimDiff = Math.abs(height - width);\n    const paddingAmount = Math.round(dimDiff * (isCenterImage ? 0.5 : 1));\n    const paddingAxis = height > width ? 2 : 1;\n    const createPaddingTensor = (paddingAmountLocal: number): tf.Tensor => {\n      const paddingTensorShape = imgTensor.shape.slice();\n      paddingTensorShape[paddingAxis] = paddingAmountLocal;\n      return tf.fill(paddingTensorShape, 0, 'float32');\n    };\n    const paddingTensorAppend = createPaddingTensor(paddingAmount);\n    const remainingPaddingAmount = dimDiff - (paddingTensorAppend.shape[paddingAxis] as number);\n    const paddingTensorPrepend = isCenterImage && remainingPaddingAmount ? createPaddingTensor(remainingPaddingAmount) : null;\n    const tensorsToStack = [paddingTensorPrepend, imgTensor, paddingTensorAppend]\n      .filter((t) => !!t)\n      .map((t) => tf.cast(t as tf.Tensor4D, 'float32')) as tf.Tensor4D[];\n    return tf.concat(tensorsToStack, paddingAxis);\n  });\n}\n", "export function shuffleArray(inputArray: any[]) {\n  const array = inputArray.slice();\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const x = array[i];\n    array[i] = array[j];\n    array[j] = x;\n  }\n  return array;\n}\n", "export * from './iou';\nexport * from './minBbox';\nexport * from './nonMaxSuppression';\nexport * from './normalize';\nexport * from './padToSquare';\nexport * from './shuffleArray';\n\nexport function sigmoid(x: number) {\n  return 1 / (1 + Math.exp(-x));\n}\n\nexport function inverseSigmoid(x: number) {\n  return Math.log(x / (1 - x));\n}\n", "import { Box } from './Box';\n\nexport interface IRect {\n  x: number\n  y: number\n  width: number\n  height: number\n}\n\nexport class Rect extends Box implements IRect {\n  constructor(x: number, y: number, width: number, height: number, allowNegativeDimensions = false) {\n    super({ x, y, width, height }, allowNegativeDimensions);\n  }\n}\n", "import { minBbox } from '../ops/index';\nimport { getCenterPoint } from '../utils/index';\nimport { IBoundingBox } from './BoundingBox';\nimport { Box } from './Box';\nimport { Dimensions, IDimensions } from './Dimensions';\nimport { FaceDetection } from './FaceDetection';\nimport { Point } from './Point';\nimport { IRect, Rect } from './Rect';\n\n// face alignment constants\nconst relX = 0.5;\nconst relY = 0.43;\nconst relScale = 0.45;\n\nexport interface IFaceLandmarks {\n  positions: Point[]\n  shift: Point\n}\n\nexport class FaceLandmarks implements IFaceLandmarks {\n  protected _shift: Point;\n\n  protected _positions: Point[];\n\n  protected _imgDims: Dimensions;\n\n  constructor(\n    relativeFaceLandmarkPositions: Point[],\n    imgDims: IDimensions,\n    shift: Point = new Point(0, 0),\n  ) {\n    const { width, height } = imgDims;\n    this._imgDims = new Dimensions(width, height);\n    this._shift = shift;\n    this._positions = relativeFaceLandmarkPositions.map(\n      (pt) => pt.mul(new Point(width, height)).add(shift),\n    );\n  }\n\n  public get shift(): Point { return new Point(this._shift.x, this._shift.y); }\n\n  public get imageWidth(): number { return this._imgDims.width; }\n\n  public get imageHeight(): number { return this._imgDims.height; }\n\n  public get positions(): Point[] { return this._positions; }\n\n  public get relativePositions(): Point[] {\n    return this._positions.map(\n      (pt) => pt.sub(this._shift).div(new Point(this.imageWidth, this.imageHeight)),\n    );\n  }\n\n  public forSize<T extends FaceLandmarks>(width: number, height: number): T {\n    return new (this.constructor as any)(\n      this.relativePositions,\n      { width, height },\n    );\n  }\n\n  public shiftBy<T extends FaceLandmarks>(x: number, y: number): T {\n    return new (this.constructor as any)(\n      this.relativePositions,\n      this._imgDims,\n      new Point(x, y),\n    );\n  }\n\n  public shiftByPoint<T extends FaceLandmarks>(pt: Point): T {\n    return this.shiftBy(pt.x, pt.y);\n  }\n\n  /**\n   * Aligns the face landmarks after face detection from the relative positions of the faces\n   * bounding box, or it's current shift. This function should be used to align the face images\n   * after face detection has been performed, before they are passed to the face recognition net.\n   * This will make the computed face descriptor more accurate.\n   *\n   * @param detection (optional) The bounding box of the face or the face detection result. If\n   * no argument was passed the position of the face landmarks are assumed to be relative to\n   * it's current shift.\n   * @returns The bounding box of the aligned face.\n   */\n  public align(\n    detection?: FaceDetection | IRect | IBoundingBox | null,\n    options: { useDlibAlignment?: boolean, minBoxPadding?: number } = { },\n  ): Box {\n    if (detection) {\n      const box = detection instanceof FaceDetection\n        ? detection.box.floor()\n        : new Box(detection);\n\n      return this.shiftBy(box.x, box.y).align(null, options);\n    }\n\n    const { useDlibAlignment, minBoxPadding } = { useDlibAlignment: false, minBoxPadding: 0.2, ...options };\n\n    if (useDlibAlignment) {\n      return this.alignDlib();\n    }\n\n    return this.alignMinBbox(minBoxPadding);\n  }\n\n  private alignDlib(): Box {\n    const centers = this.getRefPointsForAlignment();\n\n    const [leftEyeCenter, rightEyeCenter, mouthCenter] = centers;\n    const distToMouth = (pt: Point) => mouthCenter.sub(pt).magnitude();\n    const eyeToMouthDist = (distToMouth(leftEyeCenter) + distToMouth(rightEyeCenter)) / 2;\n\n    const size = Math.floor(eyeToMouthDist / relScale);\n\n    const refPoint = getCenterPoint(centers);\n    // TODO: pad in case rectangle is out of image bounds\n    const x = Math.floor(Math.max(0, refPoint.x - (relX * size)));\n    const y = Math.floor(Math.max(0, refPoint.y - (relY * size)));\n\n    return new Rect(x, y, Math.min(size, this.imageWidth + x), Math.min(size, this.imageHeight + y));\n  }\n\n  private alignMinBbox(padding: number): Box {\n    const box = minBbox(this.positions);\n    return box.pad(box.width * padding, box.height * padding);\n  }\n\n  protected getRefPointsForAlignment(): Point[] {\n    throw new Error('getRefPointsForAlignment not implemented by base class');\n  }\n}\n", "import { getCenterPoint } from '../utils/index';\nimport { FaceLandmarks } from './FaceLandmarks';\nimport { Point } from './Point';\n\nexport class FaceLandmarks5 extends FaceLandmarks {\n  protected override getRefPointsForAlignment(): Point[] {\n    const pts = this.positions;\n    return [\n      pts[0],\n      pts[1],\n      getCenterPoint([pts[3], pts[4]]),\n    ];\n  }\n}\n", "import { getCenterPoint } from '../utils/index';\nimport { FaceLandmarks } from './FaceLandmarks';\nimport { Point } from './Point';\n\nexport class FaceLandmarks68 extends FaceLandmarks {\n  public getJawOutline(): Point[] {\n    return this.positions.slice(0, 17);\n  }\n\n  public getLeftEyeBrow(): Point[] {\n    return this.positions.slice(17, 22);\n  }\n\n  public getRightEyeBrow(): Point[] {\n    return this.positions.slice(22, 27);\n  }\n\n  public getNose(): Point[] {\n    return this.positions.slice(27, 36);\n  }\n\n  public getLeftEye(): Point[] {\n    return this.positions.slice(36, 42);\n  }\n\n  public getRightEye(): Point[] {\n    return this.positions.slice(42, 48);\n  }\n\n  public getMouth(): Point[] {\n    return this.positions.slice(48, 68);\n  }\n\n  protected override getRefPointsForAlignment(): Point[] {\n    return [\n      this.getLeftEye(),\n      this.getRightEye(),\n      this.getMouth(),\n    ].map(getCenterPoint);\n  }\n}\n", "import { round } from '../utils/index';\n\nexport interface IFaceMatch {\n  label: string\n  distance: number\n}\n\nexport class FaceMatch implements IFaceMatch {\n  private _label: string;\n  private _distance: number;\n\n  constructor(label: string, distance: number) {\n    this._label = label;\n    this._distance = distance;\n  }\n\n  public get label(): string { return this._label; }\n\n  public get distance(): number { return this._distance; }\n\n  public toString(withDistance = true): string {\n    return `${this.label}${withDistance ? ` (${round(this.distance)})` : ''}`;\n  }\n}\n", "import { isValidNumber } from '../utils/index';\nimport { IBoundingBox } from './BoundingBox';\nimport { Box } from './Box';\nimport { IRect } from './Rect';\n\nexport class LabeledBox extends Box {\n  public static assertIsValidLabeledBox(box: any, callee: string) {\n    Box.assertIsValidBox(box, callee);\n    if (!isValidNumber(box.label)) {\n      throw new Error(`${callee} - expected property label (${box.label}) to be a number`);\n    }\n  }\n\n  private _label: number;\n\n  constructor(box: IBoundingBox | IRect | any, label: number) {\n    super(box);\n    this._label = label;\n  }\n\n  public get label(): number { return this._label; }\n}\n", "export class LabeledFaceDescriptors {\n  private _label: string;\n\n  private _descriptors: Float32Array[];\n\n  constructor(label: string, descriptors: Float32Array[]) {\n    if (!(typeof label === 'string')) {\n      throw new Error('LabeledFaceDescriptors - constructor expected label to be a string');\n    }\n\n    if (!Array.isArray(descriptors) || descriptors.some((desc) => !(desc instanceof Float32Array))) {\n      throw new Error('LabeledFaceDescriptors - constructor expected descriptors to be an array of Float32Array');\n    }\n\n    this._label = label;\n    this._descriptors = descriptors;\n  }\n\n  public get label(): string { return this._label; }\n\n  public get descriptors(): Float32Array[] { return this._descriptors; }\n\n  public toJSON(): any {\n    return {\n      label: this.label,\n      descriptors: this.descriptors.map((d) => Array.from(d)),\n    };\n  }\n\n  public static fromJSON(json: any): LabeledFaceDescriptors {\n    const descriptors = json.descriptors.map((d: any) => new Float32Array(d));\n    return new LabeledFaceDescriptors(json.label, descriptors);\n  }\n}\n", "import { isValidProbablitiy } from '../utils/index';\nimport { IBoundingBox } from './BoundingBox';\nimport { LabeledBox } from './LabeledBox';\nimport { IRect } from './Rect';\n\nexport class PredictedBox extends LabeledBox {\n  public static assertIsValidPredictedBox(box: any, callee: string) {\n    LabeledBox.assertIsValidLabeledBox(box, callee);\n\n    if (\n      !isValidProbablitiy(box.score)\n      || !isValidProbablitiy(box.classScore)\n    ) {\n      throw new Error(`${callee} - expected properties score (${box.score}) and (${box.classScore}) to be a number between [0, 1]`);\n    }\n  }\n\n  private _score: number;\n\n  private _classScore: number;\n\n  constructor(box: IBoundingBox | IRect | any, label: number, score: number, classScore: number) {\n    super(box, label);\n    this._score = score;\n    this._classScore = classScore;\n  }\n\n  public get score(): number { return this._score; }\n\n  public get classScore(): number { return this._classScore; }\n}\n", "import { FaceDetection } from '../classes/FaceDetection';\n\nexport type WithFaceDetection<TSource> = TSource & {\n  detection: FaceDetection\n}\n\nexport function isWithFaceDetection(obj: any): obj is WithFaceDetection<{}> {\n  return obj.detection instanceof FaceDetection;\n}\n\nexport function extendWithFaceDetection<TSource>(sourceObj: TSource, detection: FaceDetection): WithFaceDetection<TSource> {\n  const extension = { detection };\n  return { ...sourceObj, ...extension };\n}\n", "import { Environment } from './types';\n\nexport function createBrowserEnv(): Environment {\n  const fetch = window.fetch;\n  if (!fetch) throw new Error('fetch - missing fetch implementation for browser environment');\n\n  const readFile = () => {\n    throw new Error('readFile - filesystem not available for browser environment');\n  };\n\n  return {\n    Canvas: HTMLCanvasElement,\n    CanvasRenderingContext2D,\n    Image: HTMLImageElement,\n    ImageData,\n    Video: HTMLVideoElement,\n    createCanvasElement: () => document.createElement('canvas'),\n    createImageElement: () => document.createElement('img'),\n    createVideoElement: () => document.createElement('video'),\n    fetch,\n    readFile,\n  };\n}\n", "export function isNodejs(): boolean {\n  return typeof global === 'object'\n    && typeof process !== 'undefined'\n    && process.versions != null\n    && process.versions.node != null;\n}\n", "import { FileSystem } from './types';\nimport { isNodejs } from './isNodejs';\n\nexport function createFileSystem(fs?: any): FileSystem {\n  let requireFsError = '';\n  if (!fs && isNodejs()) {\n    try {\n      // eslint-disable-next-line global-require\n      fs = require('fs');\n    } catch (err) {\n      requireFsError = (err as any).toString();\n    }\n  }\n\n  const readFile = fs\n    ? (filePath: string) => new Promise((resolve, reject) => { fs.readFile(filePath, (err: any, buffer) => (err ? reject(err) : resolve(buffer))); })\n    : () => { throw new Error(`readFile - failed to require fs in nodejs environment with error: ${requireFsError}`); };\n  return { readFile };\n}\n", "/* eslint-disable max-classes-per-file */\nimport { createFileSystem } from './createFileSystem';\nimport { Environment } from './types';\n\nexport function createNodejsEnv(): Environment {\n  // eslint-disable-next-line dot-notation\n  const Canvas = global['Canvas'] || global.HTMLCanvasElement;\n  const Image = global.Image || global.HTMLImageElement;\n  // eslint-disable-next-line dot-notation\n  const Video = global['Video'] || global.HTMLVideoElement;\n\n  const createCanvasElement = () => {\n    if (Canvas) return new Canvas();\n    throw new Error('createCanvasElement - missing Canvas implementation for nodejs environment');\n  };\n\n  const createImageElement = () => {\n    if (Image) return new Image();\n    throw new Error('createImageElement - missing Image implementation for nodejs environment');\n  };\n\n  const createVideoElement = () => {\n    if (Video) return new Video();\n    throw new Error('createVideoElement - missing Video implementation for nodejs environment');\n  };\n\n  const fetch = global.fetch;\n  // if (!fetch) throw new Error('fetch - missing fetch implementation for nodejs environment');\n\n  const fileSystem = createFileSystem();\n\n  return {\n    Canvas: Canvas || class {},\n    CanvasRenderingContext2D: global.CanvasRenderingContext2D || class {},\n    Image: Image || class {},\n    ImageData: global.ImageData || class {},\n    Video: global.HTMLVideoElement || class {},\n    createCanvasElement,\n    createImageElement,\n    createVideoElement,\n    fetch,\n    ...fileSystem,\n  };\n}\n", "export function isBrowser(): boolean {\n  return typeof window === 'object'\n    && typeof document !== 'undefined'\n    && typeof HTMLImageElement !== 'undefined'\n    && typeof HTMLCanvasElement !== 'undefined'\n    && typeof HTMLVideoElement !== 'undefined'\n    && typeof ImageData !== 'undefined'\n    && typeof CanvasRenderingContext2D !== 'undefined';\n}\n", "import { createBrowserEnv } from './createBrowserEnv';\nimport { createFileSystem } from './createFileSystem';\nimport { createNodejsEnv } from './createNodejsEnv';\nimport { isBrowser } from './isBrowser';\nimport { isNodejs } from './isNodejs';\nimport { Environment } from './types';\n\nlet environment: Environment | null;\n\nfunction getEnv(): Environment {\n  if (!environment) {\n    throw new Error('getEnv - environment is not defined, check isNodejs() and isBrowser()');\n  }\n  return environment;\n}\n\nfunction setEnv(env: Environment) {\n  environment = env;\n}\n\nfunction initialize() {\n  // check for isBrowser() first to prevent electron renderer process\n  // to be initialized with wrong environment due to isNodejs() returning true\n  if (isBrowser()) return setEnv(createBrowserEnv());\n  if (isNodejs()) return setEnv(createNodejsEnv());\n  return null;\n}\n\nfunction monkeyPatch(env: Partial<Environment>) {\n  if (!environment) {\n    initialize();\n  }\n\n  if (!environment) {\n    throw new Error('monkeyPatch - environment is not defined, check isNodejs() and isBrowser()');\n  }\n\n  const { Canvas = environment.Canvas, Image = environment.Image } = env;\n  environment.Canvas = Canvas;\n  environment.Image = Image;\n  environment.createCanvasElement = env.createCanvasElement || (() => new Canvas());\n  environment.createImageElement = env.createImageElement || (() => new Image());\n\n  environment.ImageData = env.ImageData || environment.ImageData;\n  environment.Video = env.Video || environment.Video;\n  environment.fetch = env.fetch || environment.fetch;\n  environment.readFile = env.readFile || environment.readFile;\n}\n\nexport const env = {\n  getEnv,\n  setEnv,\n  initialize,\n  createBrowserEnv,\n  createFileSystem,\n  createNodejsEnv,\n  monkeyPatch,\n  isBrowser,\n  isNodejs,\n};\n\ninitialize();\n\nexport * from './types';\n", "import { env } from '../env/index';\n\nexport function resolveInput(arg: string | any) {\n  if (!env.isNodejs() && typeof arg === 'string') {\n    return document.getElementById(arg);\n  }\n  return arg;\n}\n", "import { env } from '../env/index';\nimport { resolveInput } from './resolveInput';\n\nexport function getContext2dOrThrow(canvasArg: string | HTMLCanvasElement | CanvasRenderingContext2D): CanvasRenderingContext2D {\n  const { Canvas, CanvasRenderingContext2D } = env.getEnv();\n\n  if (canvasArg instanceof CanvasRenderingContext2D) {\n    return canvasArg;\n  }\n\n  const canvas = resolveInput(canvasArg);\n\n  if (!(canvas instanceof Canvas)) {\n    throw new Error('resolveContext2d - expected canvas to be of instance of Canvas');\n  }\n\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    throw new Error('resolveContext2d - canvas 2d context is null');\n  }\n\n  return ctx;\n}\n", "/* eslint-disable max-classes-per-file */\nimport { IDimensions, IPoint } from '../classes/index';\nimport { getContext2dOrThrow } from '../dom/getContext2dOrThrow';\nimport { resolveInput } from '../dom/resolveInput';\n\n// eslint-disable-next-line no-shadow\nexport enum AnchorPosition {\n  // eslint-disable-next-line no-unused-vars\n  TOP_LEFT = 'TOP_LEFT',\n  // eslint-disable-next-line no-unused-vars\n  TOP_RIGHT = 'TOP_RIGHT',\n  // eslint-disable-next-line no-unused-vars\n  BOTTOM_LEFT = 'BOTTOM_LEFT',\n  // eslint-disable-next-line no-unused-vars\n  BOTTOM_RIGHT = 'BOTTOM_RIGHT'\n}\n\nexport interface IDrawTextFieldOptions {\n  anchorPosition?: AnchorPosition\n  backgroundColor?: string\n  fontColor?: string\n  fontSize?: number\n  fontStyle?: string\n  padding?: number\n}\n\nexport class DrawTextFieldOptions implements IDrawTextFieldOptions {\n  public anchorPosition: AnchorPosition;\n\n  public backgroundColor: string;\n\n  public fontColor: string;\n\n  public fontSize: number;\n\n  public fontStyle: string;\n\n  public padding: number;\n\n  constructor(options: IDrawTextFieldOptions = {}) {\n    const {\n      anchorPosition, backgroundColor, fontColor, fontSize, fontStyle, padding,\n    } = options;\n    this.anchorPosition = anchorPosition || AnchorPosition.TOP_LEFT;\n    this.backgroundColor = backgroundColor || 'rgba(0, 0, 0, 0.5)';\n    this.fontColor = fontColor || 'rgba(255, 255, 255, 1)';\n    this.fontSize = fontSize || 14;\n    this.fontStyle = fontStyle || 'Georgia';\n    this.padding = padding || 4;\n  }\n}\n\nexport class DrawTextField {\n  public text: string[];\n\n  public anchor : IPoint;\n\n  public options: DrawTextFieldOptions;\n\n  constructor(\n    text: string | string[] | DrawTextField,\n    anchor: IPoint,\n    options: IDrawTextFieldOptions = {},\n  ) {\n    // eslint-disable-next-line no-nested-ternary\n    this.text = typeof text === 'string'\n      ? [text]\n      : (text instanceof DrawTextField ? text.text : text);\n    this.anchor = anchor;\n    this.options = new DrawTextFieldOptions(options);\n  }\n\n  measureWidth(ctx: CanvasRenderingContext2D): number {\n    const { padding } = this.options;\n    return this.text.map((l) => ctx.measureText(l).width).reduce((w0, w1) => (w0 < w1 ? w1 : w0), 0) + (2 * padding);\n  }\n\n  measureHeight(): number {\n    const { fontSize, padding } = this.options;\n    return this.text.length * fontSize + (2 * padding);\n  }\n\n  getUpperLeft(ctx: CanvasRenderingContext2D, canvasDims?: IDimensions): IPoint {\n    const { anchorPosition } = this.options;\n    const isShiftLeft = anchorPosition === AnchorPosition.BOTTOM_RIGHT || anchorPosition === AnchorPosition.TOP_RIGHT;\n    const isShiftTop = anchorPosition === AnchorPosition.BOTTOM_LEFT || anchorPosition === AnchorPosition.BOTTOM_RIGHT;\n\n    const textFieldWidth = this.measureWidth(ctx);\n    const textFieldHeight = this.measureHeight();\n    const x = (isShiftLeft ? this.anchor.x - textFieldWidth : this.anchor.x);\n    const y = isShiftTop ? this.anchor.y - textFieldHeight : this.anchor.y;\n\n    // adjust anchor if text box exceeds canvas borders\n    if (canvasDims) {\n      const { width, height } = canvasDims;\n      const newX = Math.max(Math.min(x, width - textFieldWidth), 0);\n      const newY = Math.max(Math.min(y, height - textFieldHeight), 0);\n      return { x: newX, y: newY };\n    }\n    return { x, y };\n  }\n\n  draw(canvasArg: string | HTMLCanvasElement | CanvasRenderingContext2D) {\n    const canvas = resolveInput(canvasArg);\n    const ctx = getContext2dOrThrow(canvas);\n\n    const {\n      backgroundColor, fontColor, fontSize, fontStyle, padding,\n    } = this.options;\n\n    ctx.font = `${fontSize}px ${fontStyle}`;\n    const maxTextWidth = this.measureWidth(ctx);\n    const textHeight = this.measureHeight();\n\n    ctx.fillStyle = backgroundColor;\n    const upperLeft = this.getUpperLeft(ctx, canvas);\n    ctx.fillRect(upperLeft.x, upperLeft.y, maxTextWidth, textHeight);\n\n    ctx.fillStyle = fontColor;\n    this.text.forEach((textLine, i) => {\n      const x = padding + upperLeft.x;\n      const y = padding + upperLeft.y + ((i + 1) * fontSize);\n      ctx.fillText(textLine, x, y);\n    });\n  }\n}\n", "/* eslint-disable max-classes-per-file */\nimport { Box, IBoundingBox, IRect } from '../classes/index';\nimport { getContext2dOrThrow } from '../dom/getContext2dOrThrow';\nimport { AnchorPosition, DrawTextField, DrawTextFieldOptions, IDrawTextFieldOptions } from './DrawTextField';\n\nexport interface IDrawBoxOptions {\n  boxColor?: string\n  lineWidth?: number\n  drawLabelOptions?: IDrawTextFieldOptions\n  label?: string\n}\n\nexport class DrawBoxOptions {\n  public boxColor: string;\n\n  public lineWidth: number;\n\n  public drawLabelOptions: DrawTextFieldOptions;\n\n  public label?: string;\n\n  constructor(options: IDrawBoxOptions = {}) {\n    const {\n      boxColor, lineWidth, label, drawLabelOptions,\n    } = options;\n    this.boxColor = boxColor || 'rgba(0, 0, 255, 1)';\n    this.lineWidth = lineWidth || 2;\n    this.label = label;\n\n    const defaultDrawLabelOptions = {\n      anchorPosition: AnchorPosition.BOTTOM_LEFT,\n      backgroundColor: this.boxColor,\n    };\n    this.drawLabelOptions = new DrawTextFieldOptions({ ...defaultDrawLabelOptions, ...drawLabelOptions });\n  }\n}\n\nexport class DrawBox {\n  public box: Box;\n\n  public options: DrawBoxOptions;\n\n  constructor(\n    box: IBoundingBox | IRect,\n    options: IDrawBoxOptions = {},\n  ) {\n    this.box = new Box(box);\n    this.options = new DrawBoxOptions(options);\n  }\n\n  draw(canvasArg: string | HTMLCanvasElement | CanvasRenderingContext2D) {\n    const ctx = getContext2dOrThrow(canvasArg);\n\n    const { boxColor, lineWidth } = this.options;\n\n    const {\n      x, y, width, height,\n    } = this.box;\n    ctx.strokeStyle = boxColor;\n    ctx.lineWidth = lineWidth;\n    ctx.strokeRect(x, y, width, height);\n\n    const { label } = this.options;\n    if (label) {\n      new DrawTextField([label], { x: x - (lineWidth / 2), y }, this.options.drawLabelOptions).draw(canvasArg);\n    }\n  }\n}\n", "import { Box, IBoundingBox, IRect } from '../classes/index';\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { isWithFaceDetection, WithFaceDetection } from '../factories/WithFaceDetection';\nimport { round } from '../utils/index';\nimport { DrawBox } from './DrawBox';\n\nexport type TDrawDetectionsInput = IRect | IBoundingBox | FaceDetection | WithFaceDetection<{}>\n\nexport function drawDetections(\n  canvasArg: string | HTMLCanvasElement,\n  detections: TDrawDetectionsInput | Array<TDrawDetectionsInput>,\n) {\n  const detectionsArray = Array.isArray(detections) ? detections : [detections];\n\n  detectionsArray.forEach((det) => {\n    // eslint-disable-next-line no-nested-ternary\n    const score = det instanceof FaceDetection\n      ? det.score\n      : (isWithFaceDetection(det) ? det.detection.score : undefined);\n\n    // eslint-disable-next-line no-nested-ternary\n    const box = det instanceof FaceDetection\n      ? det.box\n      : (isWithFaceDetection(det) ? det.detection.box : new Box(det));\n\n    const label = score ? `${round(score)}` : undefined;\n    new DrawBox(box, { label }).draw(canvasArg);\n  });\n}\n", "import { env } from '../env/index';\n\nexport function isMediaLoaded(media: HTMLImageElement | HTMLVideoElement) : boolean {\n  const { Image, Video } = env.getEnv();\n\n  return (media instanceof Image && media.complete)\n    || (media instanceof Video && media.readyState >= 3);\n}\n", "import { env } from '../env/index';\nimport { isMediaLoaded } from './isMediaLoaded';\n\nexport function awaitMediaLoaded(media: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement) {\n  // eslint-disable-next-line consistent-return\n  return new Promise((resolve, reject) => {\n    if (media instanceof env.getEnv().Canvas || isMediaLoaded(media)) resolve(null);\n\n    function onError(e: Event) {\n      if (!e.currentTarget) return;\n      // eslint-disable-next-line no-use-before-define\n      e.currentTarget.removeEventListener('load', onLoad);\n      e.currentTarget.removeEventListener('error', onError);\n      reject(e);\n    }\n\n    function onLoad(e: Event) {\n      if (!e.currentTarget) return;\n      e.currentTarget.removeEventListener('load', onLoad);\n      e.currentTarget.removeEventListener('error', onError);\n      resolve(e);\n    }\n\n    media.addEventListener('load', onLoad);\n    media.addEventListener('error', onError);\n  });\n}\n", "import { env } from '../env/index';\n\nexport function bufferToImage(buf: Blob): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    if (!(buf instanceof Blob)) reject(new Error('bufferToImage - expected buf to be of type: Blob'));\n    const reader = new FileReader();\n    reader.onload = () => {\n      if (typeof reader.result !== 'string') reject(new Error('bufferToImage - expected reader.result to be a string, in onload'));\n      const img = env.getEnv().createImageElement();\n      img.onload = () => resolve(img);\n      img.onerror = reject;\n      img.src = reader.result as string;\n    };\n    reader.onerror = reject;\n    reader.readAsDataURL(buf);\n  });\n}\n", "import { Dimensions, IDimensions } from '../classes/Dimensions';\nimport { env } from '../env/index';\n\nexport function getMediaDimensions(input: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | IDimensions): Dimensions {\n  const { Image, Video } = env.getEnv();\n\n  if (input instanceof Image) {\n    return new Dimensions(input.naturalWidth, input.naturalHeight);\n  }\n  if (input instanceof Video) {\n    return new Dimensions(input.videoWidth, input.videoHeight);\n  }\n  return new Dimensions(input.width, input.height);\n}\n", "import { IDimensions } from '../classes/Dimensions';\nimport { env } from '../env/index';\nimport { getContext2dOrThrow } from './getContext2dOrThrow';\nimport { getMediaDimensions } from './getMediaDimensions';\nimport { isMediaLoaded } from './isMediaLoaded';\n\nexport function createCanvas({ width, height }: IDimensions): HTMLCanvasElement {\n  const { createCanvasElement } = env.getEnv();\n  const canvas = createCanvasElement();\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n}\n\nexport function createCanvasFromMedia(media: HTMLImageElement | HTMLVideoElement | ImageData, dims?: IDimensions): HTMLCanvasElement {\n  const { ImageData } = env.getEnv();\n\n  if (!(media instanceof ImageData) && !isMediaLoaded(media)) {\n    throw new Error('createCanvasFromMedia - media has not finished loading yet');\n  }\n\n  const { width, height } = dims || getMediaDimensions(media);\n  const canvas = createCanvas({ width, height });\n\n  if (media instanceof ImageData) {\n    getContext2dOrThrow(canvas).putImageData(media, 0, 0);\n  } else {\n    getContext2dOrThrow(canvas).drawImage(media, 0, 0, width, height);\n  }\n  return canvas;\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { env } from '../env/index';\nimport { isTensor4D } from '../utils/index';\n\nexport async function imageTensorToCanvas(\n  imgTensor: tf.Tensor,\n  canvas?: HTMLCanvasElement,\n): Promise<HTMLCanvasElement> {\n  const targetCanvas = canvas || env.getEnv().createCanvasElement();\n\n  const [height, width, numChannels] = imgTensor.shape.slice(isTensor4D(imgTensor) ? 1 : 0);\n  const imgTensor3D = tf.tidy(() => imgTensor.as3D(height, width, numChannels).toInt());\n  await tf.browser.toPixels(imgTensor3D, targetCanvas);\n\n  imgTensor3D.dispose();\n\n  return targetCanvas;\n}\n", "import { env } from '../env/index';\n\nexport function isMediaElement(input: any) {\n  const { Image, Canvas, Video } = env.getEnv();\n\n  return input instanceof Image\n    || input instanceof Canvas\n    || input instanceof Video;\n}\n", "import { env } from '../env/index';\nimport { createCanvas, createCanvasFromMedia } from './createCanvas';\nimport { getContext2dOrThrow } from './getContext2dOrThrow';\nimport { getMediaDimensions } from './getMediaDimensions';\n\nexport function imageToSquare(input: HTMLImageElement | HTMLCanvasElement, inputSize: number, centerImage = false) {\n  const { Image, Canvas } = env.getEnv();\n\n  if (!(input instanceof Image || input instanceof Canvas)) {\n    throw new Error('imageToSquare - expected arg0 to be HTMLImageElement | HTMLCanvasElement');\n  }\n\n  if (inputSize <= 0) return createCanvas({ width: 1, height: 1 });\n  const dims = getMediaDimensions(input);\n  const scale = inputSize / Math.max(dims.height, dims.width);\n  const width = scale * dims.width;\n  const height = scale * dims.height;\n\n  const targetCanvas = createCanvas({ width: inputSize, height: inputSize });\n  const inputCanvas = input instanceof Canvas ? input : createCanvasFromMedia(input);\n\n  const offset = Math.abs(width - height) / 2;\n  const dx = centerImage && width < height ? offset : 0;\n  const dy = centerImage && height < width ? offset : 0;\n  if (inputCanvas.width > 0 && inputCanvas.height > 0) getContext2dOrThrow(targetCanvas).drawImage(inputCanvas, dx, dy, width, height);\n\n  return targetCanvas;\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { Dimensions } from '../classes/Dimensions';\nimport { env } from '../env/index';\nimport { padToSquare } from '../ops/padToSquare';\nimport { computeReshapedDimensions, isTensor3D, isTensor4D, range } from '../utils/index';\nimport { createCanvasFromMedia } from './createCanvas';\nimport { imageToSquare } from './imageToSquare';\nimport { TResolvedNetInput } from './types';\n\nexport class NetInput {\n  private _imageTensors: Array<tf.Tensor3D | tf.Tensor4D> = [];\n\n  private _canvases: HTMLCanvasElement[] = [];\n\n  private _batchSize: number;\n\n  private _treatAsBatchInput = false;\n\n  private _inputDimensions: number[][] = [];\n\n  private _inputSize = 0;\n\n  constructor(inputs: Array<TResolvedNetInput>, treatAsBatchInput = false) {\n    if (!Array.isArray(inputs)) {\n      throw new Error(`NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have ${inputs}`);\n    }\n\n    this._treatAsBatchInput = treatAsBatchInput;\n    this._batchSize = inputs.length;\n\n    inputs.forEach((input, idx) => {\n      if (isTensor3D(input)) {\n        this._imageTensors[idx] = input;\n        this._inputDimensions[idx] = input.shape;\n        return;\n      }\n\n      if (isTensor4D(input)) {\n        const batchSize = (input as any).shape[0];\n        if (batchSize !== 1) {\n          throw new Error(`NetInput - tf.Tensor4D with batchSize ${batchSize} passed, but not supported in input array`);\n        }\n\n        this._imageTensors[idx] = input;\n        this._inputDimensions[idx] = (input as any).shape.slice(1);\n        return;\n      }\n\n      // @ts-ignore\n      const canvas = (input as any) instanceof env.getEnv().Canvas ? input : createCanvasFromMedia(input);\n      this._canvases[idx] = canvas as HTMLCanvasElement;\n      this._inputDimensions[idx] = [canvas.height, canvas.width, 3];\n    });\n  }\n\n  public get imageTensors(): Array<tf.Tensor3D | tf.Tensor4D> {\n    return this._imageTensors;\n  }\n\n  public get canvases(): HTMLCanvasElement[] {\n    return this._canvases;\n  }\n\n  public get isBatchInput(): boolean {\n    return this.batchSize > 1 || this._treatAsBatchInput;\n  }\n\n  public get batchSize(): number {\n    return this._batchSize;\n  }\n\n  public get inputDimensions(): number[][] {\n    return this._inputDimensions;\n  }\n\n  public get inputSize(): number | undefined {\n    return this._inputSize;\n  }\n\n  public get reshapedInputDimensions(): Dimensions[] {\n    return range(this.batchSize, 0, 1).map(\n      (_, batchIdx) => this.getReshapedInputDimensions(batchIdx),\n    );\n  }\n\n  public getInput(batchIdx: number): tf.Tensor3D | tf.Tensor4D | HTMLCanvasElement {\n    return this.canvases[batchIdx] || this.imageTensors[batchIdx];\n  }\n\n  public getInputDimensions(batchIdx: number): number[] {\n    return this._inputDimensions[batchIdx];\n  }\n\n  public getInputHeight(batchIdx: number): number {\n    return this._inputDimensions[batchIdx][0];\n  }\n\n  public getInputWidth(batchIdx: number): number {\n    return this._inputDimensions[batchIdx][1];\n  }\n\n  public getReshapedInputDimensions(batchIdx: number): Dimensions {\n    if (typeof this.inputSize !== 'number') {\n      throw new Error('getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet');\n    }\n\n    const width = this.getInputWidth(batchIdx);\n    const height = this.getInputHeight(batchIdx);\n    return computeReshapedDimensions({ width, height }, this.inputSize);\n  }\n\n  /**\n   * Create a batch tensor from all input canvases and tensors\n   * with size [batchSize, inputSize, inputSize, 3].\n   *\n   * @param inputSize Height and width of the tensor.\n   * @param isCenterImage (optional, default: false) If true, add an equal amount of padding on\n   * both sides of the minor dimension oof the image.\n   * @returns The batch tensor.\n   */\n  public toBatchTensor(inputSize: number, isCenterInputs = true): tf.Tensor4D {\n    this._inputSize = inputSize;\n\n    return tf.tidy(() => {\n      const inputTensors = range(this.batchSize, 0, 1).map((batchIdx) => {\n        const input = this.getInput(batchIdx);\n\n        if (input instanceof tf.Tensor) {\n          let imgTensor = isTensor4D(input) ? input : tf.expandDims(input);\n          imgTensor = padToSquare(imgTensor as tf.Tensor4D, isCenterInputs);\n\n          if (imgTensor.shape[1] !== inputSize || imgTensor.shape[2] !== inputSize) {\n            imgTensor = tf.image.resizeBilinear(imgTensor as tf.Tensor4D, [inputSize, inputSize], false, false);\n          }\n\n          return imgTensor.as3D(inputSize, inputSize, 3);\n        }\n\n        if (input instanceof env.getEnv().Canvas) {\n          return tf.browser.fromPixels(imageToSquare(input, inputSize, isCenterInputs));\n        }\n\n        throw new Error(`toBatchTensor - at batchIdx ${batchIdx}, expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have ${input}`);\n      });\n\n      const batchTensor = tf.stack(inputTensors.map((t) => tf.cast(t, 'float32'))).as4D(this.batchSize, inputSize, inputSize, 3);\n      // const batchTensor = tf.stack(inputTensors.map((t) => tf.cast(t, 'float32'))) as tf.Tensor4D;\n\n      return batchTensor;\n    });\n  }\n}\n", "import { isTensor3D, isTensor4D } from '../utils/index';\nimport { awaitMediaLoaded } from './awaitMediaLoaded';\nimport { isMediaElement } from './isMediaElement';\nimport { NetInput } from './NetInput';\nimport { resolveInput } from './resolveInput';\nimport { TNetInput } from './types';\n\n/**\n * Validates the input to make sure, they are valid net inputs and awaits all media elements\n * to be finished loading.\n *\n * @param input The input, which can be a media element or an array of different media elements.\n * @returns A NetInput instance, which can be passed into one of the neural networks.\n */\nexport async function toNetInput(inputs: TNetInput): Promise<NetInput> {\n  if (inputs instanceof NetInput) return inputs;\n  const inputArgArray = Array.isArray(inputs) ? inputs : [inputs];\n  if (!inputArgArray.length) throw new Error('toNetInput - empty array passed as input');\n  const getIdxHint = (idx: number) => (Array.isArray(inputs) ? ` at input index ${idx}:` : '');\n  const inputArray = inputArgArray.map(resolveInput);\n  inputArray.forEach((input, i) => {\n    if (!isMediaElement(input) && !isTensor3D(input) && !isTensor4D(input)) {\n      if (typeof inputArgArray[i] === 'string') throw new Error(`toNetInput -${getIdxHint(i)} string passed, but could not resolve HTMLElement for element id ${inputArgArray[i]}`);\n      throw new Error(`toNetInput -${getIdxHint(i)} expected media to be of type HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | tf.Tensor3D, or to be an element id`);\n    }\n    if (isTensor4D(input)) {\n      // if tf.Tensor4D is passed in the input array, the batch size has to be 1\n      const batchSize = input.shape[0];\n      if (batchSize !== 1) throw new Error(`toNetInput -${getIdxHint(i)} tf.Tensor4D with batchSize ${batchSize} passed, but not supported in input array`);\n    }\n  });\n  // wait for all media elements being loaded\n  await Promise.all(inputArray.map((input) => isMediaElement(input) && awaitMediaLoaded(input)));\n  return new NetInput(inputArray, Array.isArray(inputs));\n}\n", "import { FaceDetection } from '../classes/FaceDetection';\nimport { Rect } from '../classes/Rect';\nimport { env } from '../env/index';\nimport { createCanvas } from './createCanvas';\nimport { getContext2dOrThrow } from './getContext2dOrThrow';\nimport { imageTensorToCanvas } from './imageTensorToCanvas';\nimport { toNetInput } from './toNetInput';\nimport { TNetInput } from './types';\n\n/**\n * Extracts the image regions containing the detected faces.\n *\n * @param input The image that face detection has been performed on.\n * @param detections The face detection results or face bounding boxes for that image.\n * @returns The Canvases of the corresponding image region for each detected face.\n */\nexport async function extractFaces(input: TNetInput, detections: Array<FaceDetection | Rect>): Promise<HTMLCanvasElement[]> {\n  const { Canvas } = env.getEnv();\n  let canvas = input as HTMLCanvasElement;\n  if (!(input instanceof Canvas)) {\n    const netInput = await toNetInput(input);\n    if (netInput.batchSize > 1) throw new Error('extractFaces - batchSize > 1 not supported');\n    const tensorOrCanvas = netInput.getInput(0);\n    canvas = tensorOrCanvas instanceof Canvas ? tensorOrCanvas : await imageTensorToCanvas(tensorOrCanvas);\n  }\n  const ctx = getContext2dOrThrow(canvas);\n  const boxes = detections\n    .map((det) => (det instanceof FaceDetection ? det.forSize(canvas.width, canvas.height).box.floor() : det))\n    .map((box) => box.clipAtImageBorders(canvas.width, canvas.height));\n  return boxes.map(({ x, y, width, height }) => {\n    const faceImg = createCanvas({ width, height });\n    if (width > 0 && height > 0) getContext2dOrThrow(faceImg).putImageData(ctx.getImageData(x, y, width, height), 0, 0);\n    return faceImg;\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { Rect } from '../classes/index';\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { isTensor3D, isTensor4D } from '../utils/index';\n\n/**\n * Extracts the tensors of the image regions containing the detected faces.\n * Useful if you want to compute the face descriptors for the face images.\n * Using this method is faster then extracting a canvas for each face and\n * converting them to tensors individually.\n *\n * @param imageTensor The image tensor that face detection has been performed on.\n * @param detections The face detection results or face bounding boxes for that image.\n * @returns Tensors of the corresponding image region for each detected face.\n */\nexport async function extractFaceTensors(imageTensor: tf.Tensor3D | tf.Tensor4D, detections: Array<FaceDetection | Rect>): Promise<tf.Tensor3D[]> {\n  if (!isTensor3D(imageTensor) && !isTensor4D(imageTensor)) {\n    throw new Error('extractFaceTensors - expected image tensor to be 3D or 4D');\n  }\n\n  if (isTensor4D(imageTensor) && imageTensor.shape[0] > 1) {\n    throw new Error('extractFaceTensors - batchSize > 1 not supported');\n  }\n\n  return tf.tidy(() => {\n    const [imgHeight, imgWidth, numChannels] = imageTensor.shape.slice(isTensor4D(imageTensor) ? 1 : 0);\n\n    const boxes = detections\n      .map((det) => (det instanceof FaceDetection\n        ? det.forSize(imgWidth, imgHeight).box\n        : det))\n      .map((box) => box.clipAtImageBorders(imgWidth, imgHeight));\n\n    const faceTensors = boxes.map(({\n      x, y, width, height,\n    }) => tf.slice3d(imageTensor.as3D(imgHeight, imgWidth, numChannels), [y, x, 0], [height, width, numChannels]));\n\n    return faceTensors;\n  });\n}\n", "import { env } from '../env/index';\n\nexport async function fetchOrThrow(\n  url: string,\n  // eslint-disable-next-line no-undef\n  init?: RequestInit,\n): Promise<Response> {\n  const { fetch } = env.getEnv();\n  const res = await fetch(url, init);\n  if (!(res.status < 400)) {\n    throw new Error(`failed to fetch: (${res.status}) ${res.statusText}, from url: ${res.url}`);\n  }\n  return res;\n}\n", "import { bufferToImage } from './bufferToImage';\nimport { fetchOrThrow } from './fetchOrThrow';\n\nexport async function fetchImage(uri: string): Promise<HTMLImageElement> {\n  const res = await fetchOrThrow(uri);\n  const blob = await (res).blob();\n\n  if (!blob.type.startsWith('image/')) {\n    throw new Error(`fetchImage - expected blob type to be of type image/*, instead have: ${blob.type}, for url: ${res.url}`);\n  }\n  return bufferToImage(blob);\n}\n", "import { fetchOrThrow } from './fetchOrThrow';\n\nexport async function fetchJson<T>(uri: string): Promise<T> {\n  return (await fetchOrThrow(uri)).json();\n}\n", "import { fetchOrThrow } from './fetchOrThrow';\n\nexport async function fetchNetWeights(uri: string): Promise<Float32Array> {\n  return new Float32Array(await (await fetchOrThrow(uri)).arrayBuffer());\n}\n", "import { env } from '../env/index';\n\nexport function bufferToVideo(buf: Blob): Promise<HTMLVideoElement> {\n  return new Promise((resolve, reject) => {\n    if (!(buf instanceof Blob)) reject(new Error('bufferToVideo - expected buf to be of type: Blob'));\n\n    const video = env.getEnv().createVideoElement();\n    video.oncanplay = () => resolve(video);\n    video.onerror = reject;\n    video.playsInline = true;\n    video.muted = true;\n    video.src = URL.createObjectURL(buf);\n    video.play();\n  });\n}\n", "import { bufferToVideo } from './bufferToVideo';\nimport { fetchOrThrow } from './fetchOrThrow';\n\nexport async function fetchVideo(uri: string): Promise<HTMLVideoElement> {\n  const res = await fetchOrThrow(uri);\n  const blob = await (res).blob();\n\n  if (!blob.type.startsWith('video/')) {\n    throw new Error(`fetchVideo - expected blob type to be of type video/*, instead have: ${blob.type}, for url: ${res.url}`);\n  }\n  return bufferToVideo(blob);\n}\n", "export function getModelUris(uri: string | undefined, defaultModelName: string) {\n  const defaultManifestFilename = `${defaultModelName}-weights_manifest.json`;\n\n  if (!uri) {\n    return {\n      modelBaseUri: '',\n      manifestUri: defaultManifestFilename,\n    };\n  }\n\n  if (uri === '/') {\n    return {\n      modelBaseUri: '/',\n      manifestUri: `/${defaultManifestFilename}`,\n    };\n  }\n  // eslint-disable-next-line no-nested-ternary\n  const protocol = uri.startsWith('http://') ? 'http://' : uri.startsWith('https://') ? 'https://' : '';\n  uri = uri.replace(protocol, '');\n\n  const parts = uri.split('/').filter((s) => s);\n\n  const manifestFile = uri.endsWith('.json')\n    ? parts[parts.length - 1]\n    : defaultManifestFilename;\n\n  let modelBaseUri = protocol + (uri.endsWith('.json') ? parts.slice(0, parts.length - 1) : parts).join('/');\n  modelBaseUri = uri.startsWith('/') ? `/${modelBaseUri}` : modelBaseUri;\n\n  return {\n    modelBaseUri,\n    manifestUri: modelBaseUri === '/' ? `/${manifestFile}` : `${modelBaseUri}/${manifestFile}`,\n  };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { getModelUris } from '../common/getModelUris';\nimport { fetchJson } from './fetchJson';\n\nexport async function loadWeightMap(\n  uri: string | undefined,\n  defaultModelName: string,\n): Promise<tf.NamedTensorMap> {\n  const { manifestUri, modelBaseUri } = getModelUris(uri, defaultModelName);\n  const manifest = await fetchJson<tf.io.WeightsManifestConfig>(manifestUri);\n  // if (manifest['weightsManifest']) manifest = manifest['weightsManifest'];\n  return tf.io.loadWeights(manifest, modelBaseUri);\n}\n", "import { IDimensions } from '../classes/index';\nimport { getMediaDimensions } from './getMediaDimensions';\n\nexport function matchDimensions(input: IDimensions, reference: IDimensions, useMediaDimensions = false) {\n  const { width, height } = useMediaDimensions\n    ? getMediaDimensions(reference)\n    : reference;\n  input.width = width;\n  input.height = height;\n  return { width, height };\n}\n", "import * as tf from '../dist/tfjs.esm';\n\nimport { ParamMapping } from './common/index';\nimport { getModelUris } from './common/getModelUris';\nimport { loadWeightMap } from './dom/index';\nimport { env } from './env/index';\n\nexport abstract class NeuralNetwork<TNetParams> {\n  constructor(name: string) {\n    this._name = name;\n  }\n\n  protected _params: TNetParams | undefined = undefined;\n\n  protected _paramMappings: ParamMapping[] = [];\n\n  public _name: any;\n\n  public get params(): TNetParams | undefined { return this._params; }\n\n  public get paramMappings(): ParamMapping[] { return this._paramMappings; }\n\n  public get isLoaded(): boolean { return !!this.params; }\n\n  public getParamFromPath(paramPath: string): tf.Tensor {\n    const { obj, objProp } = this.traversePropertyPath(paramPath);\n    return obj[objProp];\n  }\n\n  public reassignParamFromPath(paramPath: string, tensor: tf.Tensor) {\n    const { obj, objProp } = this.traversePropertyPath(paramPath);\n    obj[objProp].dispose();\n    obj[objProp] = tensor;\n  }\n\n  public getParamList() {\n    return this._paramMappings.map(({ paramPath }) => ({\n      path: paramPath,\n      tensor: this.getParamFromPath(paramPath),\n    }));\n  }\n\n  public getTrainableParams() {\n    return this.getParamList().filter((param) => param.tensor instanceof tf.Variable);\n  }\n\n  public getFrozenParams() {\n    return this.getParamList().filter((param) => !(param.tensor instanceof tf.Variable));\n  }\n\n  public variable() {\n    this.getFrozenParams().forEach(({ path, tensor }) => {\n      this.reassignParamFromPath(path, tensor.variable());\n    });\n  }\n\n  public freeze() {\n    this.getTrainableParams().forEach(({ path, tensor: variable }) => {\n      const tensor = tf.tensor(variable.dataSync());\n      variable.dispose();\n      this.reassignParamFromPath(path, tensor);\n    });\n  }\n\n  public dispose(throwOnRedispose = true) {\n    this.getParamList().forEach((param) => {\n      if (throwOnRedispose && param.tensor.isDisposed) {\n        throw new Error(`param tensor has already been disposed for path ${param.path}`);\n      }\n      param.tensor.dispose();\n    });\n    this._params = undefined;\n  }\n\n  public serializeParams(): Float32Array {\n    return new Float32Array(\n      this.getParamList()\n        .map(({ tensor }) => Array.from(tensor.dataSync()) as number[])\n        .reduce((flat, arr) => flat.concat(arr)),\n    );\n  }\n\n  public async load(weightsOrUrl: Float32Array | string | undefined): Promise<void> {\n    if (weightsOrUrl instanceof Float32Array) {\n      this.extractWeights(weightsOrUrl);\n      return;\n    }\n    await this.loadFromUri(weightsOrUrl);\n  }\n\n  public async loadFromUri(uri: string | undefined) {\n    if (uri && typeof uri !== 'string') {\n      throw new Error(`${this._name}.loadFromUri - expected model uri`);\n    }\n    const weightMap = await loadWeightMap(uri, this.getDefaultModelName());\n    this.loadFromWeightMap(weightMap);\n  }\n\n  public async loadFromDisk(filePath: string | undefined) {\n    if (filePath && typeof filePath !== 'string') {\n      throw new Error(`${this._name}.loadFromDisk - expected model file path`);\n    }\n    const { readFile } = env.getEnv();\n    const { manifestUri, modelBaseUri } = getModelUris(filePath, this.getDefaultModelName());\n    const fetchWeightsFromDisk = (filePaths: string[]) => Promise.all(filePaths.map((fp) => readFile(fp).then((buf) => buf.buffer)));\n    const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk);\n    const manifest = JSON.parse((await readFile(manifestUri)).toString());\n    const weightMap = await loadWeights(manifest, modelBaseUri);\n    this.loadFromWeightMap(weightMap);\n  }\n\n  public loadFromWeightMap(weightMap: tf.NamedTensorMap) {\n    const { paramMappings, params } = this.extractParamsFromWeightMap(weightMap);\n    this._paramMappings = paramMappings;\n    this._params = params;\n  }\n\n  public extractWeights(weights: Float32Array) {\n    const { paramMappings, params } = this.extractParams(weights);\n    this._paramMappings = paramMappings;\n    this._params = params;\n  }\n\n  private traversePropertyPath(paramPath: string) {\n    if (!this.params) {\n      throw new Error('traversePropertyPath - model has no loaded params');\n    }\n\n    const result = paramPath.split('/').reduce((res: { nextObj: any, obj?: any, objProp?: string }, objProp) => {\n      // eslint-disable-next-line no-prototype-builtins\n      if (!res.nextObj.hasOwnProperty(objProp)) {\n        throw new Error(`traversePropertyPath - object does not have property ${objProp}, for path ${paramPath}`);\n      }\n      return { obj: res.nextObj, objProp, nextObj: res.nextObj[objProp] };\n    }, { nextObj: this.params });\n\n    const { obj, objProp } = result;\n    if (!obj || !objProp || !(obj[objProp] instanceof tf.Tensor)) {\n      throw new Error(`traversePropertyPath - parameter is not a tensor, for path ${paramPath}`);\n    }\n\n    return { obj, objProp };\n  }\n\n  protected abstract getDefaultModelName(): string\n\n  // eslint-disable-next-line no-unused-vars\n  protected abstract extractParamsFromWeightMap(weightMap: tf.NamedTensorMap): { params: TNetParams, paramMappings: ParamMapping[] }\n\n  // eslint-disable-next-line no-unused-vars\n  protected abstract extractParams(weights: Float32Array): { params: TNetParams, paramMappings: ParamMapping[] }\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { SeparableConvParams } from './types';\n\nexport function depthwiseSeparableConv(\n  x: tf.Tensor4D,\n  params: SeparableConvParams,\n  stride: [number, number],\n): tf.Tensor4D {\n  return tf.tidy(() => {\n    let out = tf.separableConv2d(x, params.depthwise_filter, params.pointwise_filter, stride, 'same');\n    out = tf.add(out, params.bias);\n    return out;\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { ConvParams, SeparableConvParams } from '../common/index';\nimport { depthwiseSeparableConv } from '../common/depthwiseSeparableConv';\nimport { DenseBlock3Params, DenseBlock4Params } from './types';\n\nexport function denseBlock3(\n  x: tf.Tensor4D,\n  denseBlockParams: DenseBlock3Params,\n  isFirstLayer = false,\n): tf.Tensor4D {\n  return tf.tidy(() => {\n    const out1 = tf.relu(\n      isFirstLayer\n        ? tf.add(\n          tf.conv2d(x, (denseBlockParams.conv0 as ConvParams).filters, [2, 2], 'same'),\n          denseBlockParams.conv0.bias,\n        )\n        : depthwiseSeparableConv(x, denseBlockParams.conv0 as SeparableConvParams, [2, 2]),\n    ) as tf.Tensor4D;\n    const out2 = depthwiseSeparableConv(out1, denseBlockParams.conv1, [1, 1]);\n\n    const in3 = tf.relu(tf.add(out1, out2)) as tf.Tensor4D;\n    const out3 = depthwiseSeparableConv(in3, denseBlockParams.conv2, [1, 1]);\n\n    return tf.relu(tf.add(out1, tf.add(out2, out3))) as tf.Tensor4D;\n  });\n}\n\nexport function denseBlock4(\n  x: tf.Tensor4D,\n  denseBlockParams: DenseBlock4Params,\n  isFirstLayer = false,\n  isScaleDown = true,\n): tf.Tensor4D {\n  return tf.tidy(() => {\n    const out1 = tf.relu(\n      isFirstLayer\n        ? tf.add(\n          tf.conv2d(x, (denseBlockParams.conv0 as ConvParams).filters, isScaleDown ? [2, 2] : [1, 1], 'same'),\n          denseBlockParams.conv0.bias,\n        )\n        : depthwiseSeparableConv(x, denseBlockParams.conv0 as SeparableConvParams, isScaleDown ? [2, 2] : [1, 1]),\n    ) as tf.Tensor4D;\n    const out2 = depthwiseSeparableConv(out1, denseBlockParams.conv1, [1, 1]);\n\n    const in3 = tf.relu(tf.add(out1, out2)) as tf.Tensor4D;\n    const out3 = depthwiseSeparableConv(in3, denseBlockParams.conv2, [1, 1]);\n\n    const in4 = tf.relu(tf.add(out1, tf.add(out2, out3))) as tf.Tensor4D;\n    const out4 = depthwiseSeparableConv(in4, denseBlockParams.conv3, [1, 1]);\n\n    return tf.relu(tf.add(out1, tf.add(out2, tf.add(out3, out4)))) as tf.Tensor4D;\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { ConvParams } from './types';\n\nexport function convLayer(\n  x: tf.Tensor4D,\n  params: ConvParams,\n  padding: 'valid' | 'same' = 'same',\n  withRelu = false,\n): tf.Tensor4D {\n  return tf.tidy(() => {\n    const out = tf.add(\n      tf.conv2d(x, params.filters, [1, 1], padding),\n      params.bias,\n    ) as tf.Tensor4D;\n\n    return withRelu ? tf.relu(out) : out;\n  });\n}\n", "import { ParamMapping } from './types';\n\nexport function disposeUnusedWeightTensors(weightMap: any, paramMappings: ParamMapping[]) {\n  Object.keys(weightMap).forEach((path) => {\n    if (!paramMappings.some((pm) => pm.originalPath === path)) {\n      weightMap[path].dispose();\n    }\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { ConvParams, ExtractWeightsFunction, ParamMapping } from './types';\n\nexport function extractConvParamsFactory(\n  extractWeights: ExtractWeightsFunction,\n  paramMappings: ParamMapping[],\n) {\n  return (\n    channelsIn: number,\n    channelsOut: number,\n    filterSize: number,\n    mappedPrefix: string,\n  ): ConvParams => {\n    const filters = tf.tensor4d(\n      extractWeights(channelsIn * channelsOut * filterSize * filterSize),\n      [filterSize, filterSize, channelsIn, channelsOut],\n    );\n    const bias = tf.tensor1d(extractWeights(channelsOut));\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/filters` },\n      { paramPath: `${mappedPrefix}/bias` },\n    );\n\n    return { filters, bias };\n  };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { ExtractWeightsFunction, FCParams, ParamMapping } from './types';\n\nexport function extractFCParamsFactory(\n  extractWeights: ExtractWeightsFunction,\n  paramMappings: ParamMapping[],\n) {\n  return (\n    channelsIn: number,\n    channelsOut: number,\n    mappedPrefix: string,\n  ): FCParams => {\n    const fc_weights = tf.tensor2d(extractWeights(channelsIn * channelsOut), [channelsIn, channelsOut]);\n    const fc_bias = tf.tensor1d(extractWeights(channelsOut));\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/weights` },\n      { paramPath: `${mappedPrefix}/bias` },\n    );\n\n    return {\n      weights: fc_weights,\n      bias: fc_bias,\n    };\n  };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\n// eslint-disable-next-line no-unused-vars\nexport type ExtractWeightsFunction = (numWeights: number) => Float32Array\n\nexport type ParamMapping = {\n  originalPath?: string\n  paramPath: string\n}\n\nexport type ConvParams = {\n  filters: tf.Tensor4D\n  bias: tf.Tensor1D\n}\n\nexport type FCParams = {\n  weights: tf.Tensor2D\n  bias: tf.Tensor1D\n}\n\nexport class SeparableConvParams {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(\n    // eslint-disable-next-line no-unused-vars\n    public depthwise_filter: tf.Tensor4D,\n    // eslint-disable-next-line no-unused-vars\n    public pointwise_filter: tf.Tensor4D,\n    // eslint-disable-next-line no-unused-vars\n    public bias: tf.Tensor1D,\n  // eslint-disable-next-line no-empty-function\n  ) {}\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { ExtractWeightsFunction, ParamMapping, SeparableConvParams } from './types';\n\nexport function extractSeparableConvParamsFactory(\n  extractWeights: ExtractWeightsFunction,\n  paramMappings: ParamMapping[],\n) {\n  return (channelsIn: number, channelsOut: number, mappedPrefix: string): SeparableConvParams => {\n    const depthwise_filter = tf.tensor4d(extractWeights(3 * 3 * channelsIn), [3, 3, channelsIn, 1]);\n    const pointwise_filter = tf.tensor4d(extractWeights(channelsIn * channelsOut), [1, 1, channelsIn, channelsOut]);\n    const bias = tf.tensor1d(extractWeights(channelsOut));\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/depthwise_filter` },\n      { paramPath: `${mappedPrefix}/pointwise_filter` },\n      { paramPath: `${mappedPrefix}/bias` },\n    );\n\n    return new SeparableConvParams(\n      depthwise_filter,\n      pointwise_filter,\n      bias,\n    );\n  };\n}\n\nexport function loadSeparableConvParamsFactory(\n  // eslint-disable-next-line no-unused-vars\n  extractWeightEntry: <T>(originalPath: string, paramRank: number) => T,\n) {\n  return (prefix: string): SeparableConvParams => {\n    const depthwise_filter = extractWeightEntry<tf.Tensor4D>(`${prefix}/depthwise_filter`, 4);\n    const pointwise_filter = extractWeightEntry<tf.Tensor4D>(`${prefix}/pointwise_filter`, 4);\n    const bias = extractWeightEntry<tf.Tensor1D>(`${prefix}/bias`, 1);\n\n    return new SeparableConvParams(\n      depthwise_filter,\n      pointwise_filter,\n      bias,\n    );\n  };\n}\n", "import { isTensor } from '../utils/index';\nimport { ParamMapping } from './types';\n\nexport function extractWeightEntryFactory(weightMap: any, paramMappings: ParamMapping[]) {\n  return (originalPath: string, paramRank: number, mappedPath?: string) => {\n    const tensor = weightMap[originalPath];\n\n    if (!isTensor(tensor, paramRank)) {\n      throw new Error(`expected weightMap[${originalPath}] to be a Tensor${paramRank}D, instead have ${tensor}`);\n    }\n\n    paramMappings.push(\n      { originalPath, paramPath: mappedPath || originalPath },\n    );\n\n    return tensor;\n  };\n}\n", "export function extractWeightsFactory(weights: Float32Array) {\n  let remainingWeights = weights;\n\n  function extractWeights(numWeights: number): Float32Array {\n    const ret = remainingWeights.slice(0, numWeights);\n    remainingWeights = remainingWeights.slice(numWeights);\n    return ret;\n  }\n\n  function getRemainingWeights(): Float32Array {\n    return remainingWeights;\n  }\n\n  return {\n    extractWeights,\n    getRemainingWeights,\n  };\n}\n", "import { extractConvParamsFactory, extractSeparableConvParamsFactory, ExtractWeightsFunction, ParamMapping } from '../common/index';\nimport { DenseBlock3Params, DenseBlock4Params } from './types';\n\nexport function extractorsFactory(extractWeights: ExtractWeightsFunction, paramMappings: ParamMapping[]) {\n  const extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\n  const extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings);\n\n  function extractDenseBlock3Params(channelsIn: number, channelsOut: number, mappedPrefix: string, isFirstLayer = false): DenseBlock3Params {\n    const conv0 = isFirstLayer\n      ? extractConvParams(channelsIn, channelsOut, 3, `${mappedPrefix}/conv0`)\n      : extractSeparableConvParams(channelsIn, channelsOut, `${mappedPrefix}/conv0`);\n    const conv1 = extractSeparableConvParams(channelsOut, channelsOut, `${mappedPrefix}/conv1`);\n    const conv2 = extractSeparableConvParams(channelsOut, channelsOut, `${mappedPrefix}/conv2`);\n\n    return { conv0, conv1, conv2 };\n  }\n\n  function extractDenseBlock4Params(channelsIn: number, channelsOut: number, mappedPrefix: string, isFirstLayer = false): DenseBlock4Params {\n    const { conv0, conv1, conv2 } = extractDenseBlock3Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer);\n    const conv3 = extractSeparableConvParams(channelsOut, channelsOut, `${mappedPrefix}/conv3`);\n\n    return {\n      conv0, conv1, conv2, conv3,\n    };\n  }\n\n  return {\n    extractDenseBlock3Params,\n    extractDenseBlock4Params,\n  };\n}\n", "import { extractWeightsFactory, ParamMapping } from '../common/index';\nimport { extractorsFactory } from './extractorsFactory';\nimport { FaceFeatureExtractorParams } from './types';\n\nexport function extractParams(weights: Float32Array): { params: FaceFeatureExtractorParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n\n  const {\n    extractWeights,\n    getRemainingWeights,\n  } = extractWeightsFactory(weights);\n\n  const {\n    extractDenseBlock4Params,\n  } = extractorsFactory(extractWeights, paramMappings);\n\n  const dense0 = extractDenseBlock4Params(3, 32, 'dense0', true);\n  const dense1 = extractDenseBlock4Params(32, 64, 'dense1');\n  const dense2 = extractDenseBlock4Params(64, 128, 'dense2');\n  const dense3 = extractDenseBlock4Params(128, 256, 'dense3');\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`);\n  }\n\n  return {\n    paramMappings,\n    params: {\n      dense0, dense1, dense2, dense3,\n    },\n  };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { ConvParams } from './types';\n\n// eslint-disable-next-line no-unused-vars\nexport function loadConvParamsFactory(extractWeightEntry: <T>(originalPath: string, paramRank: number) => T) {\n  return (prefix: string): ConvParams => {\n    const filters = extractWeightEntry<tf.Tensor4D>(`${prefix}/filters`, 4);\n    const bias = extractWeightEntry<tf.Tensor1D>(`${prefix}/bias`, 1);\n\n    return { filters, bias };\n  };\n}\n", "import { extractWeightEntryFactory, loadSeparableConvParamsFactory, ParamMapping } from '../common/index';\nimport { loadConvParamsFactory } from '../common/loadConvParamsFactory';\nimport { DenseBlock3Params, DenseBlock4Params } from './types';\n\nexport function loadParamsFactory(weightMap: any, paramMappings: ParamMapping[]) {\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  const extractConvParams = loadConvParamsFactory(extractWeightEntry);\n  const extractSeparableConvParams = loadSeparableConvParamsFactory(extractWeightEntry);\n\n  function extractDenseBlock3Params(prefix: string, isFirstLayer = false): DenseBlock3Params {\n    const conv0 = isFirstLayer\n      ? extractConvParams(`${prefix}/conv0`)\n      : extractSeparableConvParams(`${prefix}/conv0`);\n    const conv1 = extractSeparableConvParams(`${prefix}/conv1`);\n    const conv2 = extractSeparableConvParams(`${prefix}/conv2`);\n\n    return { conv0, conv1, conv2 };\n  }\n\n  function extractDenseBlock4Params(prefix: string, isFirstLayer = false): DenseBlock4Params {\n    const conv0 = isFirstLayer\n      ? extractConvParams(`${prefix}/conv0`)\n      : extractSeparableConvParams(`${prefix}/conv0`);\n    const conv1 = extractSeparableConvParams(`${prefix}/conv1`);\n    const conv2 = extractSeparableConvParams(`${prefix}/conv2`);\n    const conv3 = extractSeparableConvParams(`${prefix}/conv3`);\n\n    return {\n      conv0, conv1, conv2, conv3,\n    };\n  }\n\n  return {\n    extractDenseBlock3Params,\n    extractDenseBlock4Params,\n  };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { disposeUnusedWeightTensors, ParamMapping } from '../common/index';\nimport { loadParamsFactory } from './loadParamsFactory';\nimport { FaceFeatureExtractorParams } from './types';\n\nexport function extractParamsFromWeightMap(\n  weightMap: tf.NamedTensorMap,\n): { params: FaceFeatureExtractorParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n\n  const {\n    extractDenseBlock4Params,\n  } = loadParamsFactory(weightMap, paramMappings);\n\n  const params = {\n    dense0: extractDenseBlock4Params('dense0', true),\n    dense1: extractDenseBlock4Params('dense1'),\n    dense2: extractDenseBlock4Params('dense2'),\n    dense3: extractDenseBlock4Params('dense3'),\n  };\n\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n\n  return { params, paramMappings };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { NetInput, TNetInput, toNetInput } from '../dom/index';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops/index';\nimport { denseBlock4 } from './denseBlock';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeightMap } from './extractParamsFromWeightMap';\nimport { FaceFeatureExtractorParams, IFaceFeatureExtractor } from './types';\n\nexport class FaceFeatureExtractor extends NeuralNetwork<FaceFeatureExtractorParams> implements IFaceFeatureExtractor<FaceFeatureExtractorParams> {\n  constructor() {\n    super('FaceFeatureExtractor');\n  }\n\n  public forwardInput(input: NetInput): tf.Tensor4D {\n    const { params } = this;\n\n    if (!params) {\n      throw new Error('FaceFeatureExtractor - load model before inference');\n    }\n\n    return tf.tidy(() => {\n      const batchTensor = tf.cast(input.toBatchTensor(112, true), 'float32');\n      const meanRgb = [122.782, 117.001, 104.298];\n      const normalized = normalize(batchTensor, meanRgb).div(255) as tf.Tensor4D;\n\n      let out = denseBlock4(normalized, params.dense0, true);\n      out = denseBlock4(out, params.dense1);\n      out = denseBlock4(out, params.dense2);\n      out = denseBlock4(out, params.dense3);\n      out = tf.avgPool(out, [7, 7], [2, 2], 'valid');\n\n      return out;\n    });\n  }\n\n  public async forward(input: TNetInput): Promise<tf.Tensor4D> {\n    return this.forwardInput(await toNetInput(input));\n  }\n\n  protected getDefaultModelName(): string {\n    return 'face_feature_extractor_model';\n  }\n\n  protected extractParamsFromWeightMap(weightMap: tf.NamedTensorMap) {\n    return extractParamsFromWeightMap(weightMap);\n  }\n\n  protected extractParams(weights: Float32Array) {\n    return extractParams(weights);\n  }\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { FCParams } from './types';\n\nexport function fullyConnectedLayer(\n  x: tf.Tensor2D,\n  params: FCParams,\n): tf.Tensor2D {\n  return tf.tidy(() => tf.add(\n    tf.matMul(x, params.weights),\n    params.bias,\n  ));\n}\n", "import { extractFCParamsFactory, extractWeightsFactory, ParamMapping } from '../common/index';\nimport { NetParams } from './types';\n\nexport function extractParams(weights: Float32Array, channelsIn: number, channelsOut: number): { params: NetParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n\n  const {\n    extractWeights,\n    getRemainingWeights,\n  } = extractWeightsFactory(weights);\n\n  const extractFCParams = extractFCParamsFactory(extractWeights, paramMappings);\n\n  const fc = extractFCParams(channelsIn, channelsOut, 'fc');\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`);\n  }\n\n  return {\n    paramMappings,\n    params: { fc },\n  };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { disposeUnusedWeightTensors, extractWeightEntryFactory, FCParams, ParamMapping } from '../common/index';\nimport { NetParams } from './types';\n\nexport function extractParamsFromWeightMap(\n  weightMap: tf.NamedTensorMap,\n): { params: NetParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractFcParams(prefix: string): FCParams {\n    const weights = extractWeightEntry(`${prefix}/weights`, 2);\n    const bias = extractWeightEntry(`${prefix}/bias`, 1);\n    return { weights, bias };\n  }\n\n  const params = {\n    fc: extractFcParams('fc'),\n  };\n\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n\n  return { params, paramMappings };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nexport function seperateWeightMaps(weightMap: tf.NamedTensorMap) {\n  const featureExtractorMap: tf.NamedTensorMap = {};\n  const classifierMap: tf.NamedTensorMap = {};\n\n  Object.keys(weightMap).forEach((key) => {\n    const map = key.startsWith('fc') ? classifierMap : featureExtractorMap;\n    map[key] = weightMap[key];\n  });\n\n  return { featureExtractorMap, classifierMap };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { NetInput } from '../dom/index';\nimport { FaceFeatureExtractorParams, IFaceFeatureExtractor, TinyFaceFeatureExtractorParams } from '../faceFeatureExtractor/types';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeightMap } from './extractParamsFromWeightMap';\nimport { NetParams } from './types';\nimport { seperateWeightMaps } from './util';\n\nexport abstract class FaceProcessor<\n  TExtractorParams extends FaceFeatureExtractorParams | TinyFaceFeatureExtractorParams\n>\n  extends NeuralNetwork<NetParams> {\n  protected _faceFeatureExtractor: IFaceFeatureExtractor<TExtractorParams>;\n\n  constructor(_name: string, faceFeatureExtractor: IFaceFeatureExtractor<TExtractorParams>) {\n    super(_name);\n    this._faceFeatureExtractor = faceFeatureExtractor;\n  }\n\n  public get faceFeatureExtractor(): IFaceFeatureExtractor<TExtractorParams> {\n    return this._faceFeatureExtractor;\n  }\n\n  protected abstract override getDefaultModelName(): string\n\n  protected abstract getClassifierChannelsIn(): number\n\n  protected abstract getClassifierChannelsOut(): number\n\n  public runNet(input: NetInput | tf.Tensor4D): tf.Tensor2D {\n    const { params } = this;\n\n    if (!params) {\n      throw new Error(`${this._name} - load model before inference`);\n    }\n\n    return tf.tidy(() => {\n      const bottleneckFeatures = input instanceof NetInput\n        ? this.faceFeatureExtractor.forwardInput(input)\n        : input;\n      return fullyConnectedLayer(bottleneckFeatures.as2D(bottleneckFeatures.shape[0], -1), params.fc);\n    });\n  }\n\n  public override dispose(throwOnRedispose = true) {\n    this.faceFeatureExtractor.dispose(throwOnRedispose);\n    super.dispose(throwOnRedispose);\n  }\n\n  public loadClassifierParams(weights: Float32Array) {\n    const { params, paramMappings } = this.extractClassifierParams(weights);\n    this._params = params;\n    this._paramMappings = paramMappings;\n  }\n\n  public extractClassifierParams(weights: Float32Array) {\n    return extractParams(weights, this.getClassifierChannelsIn(), this.getClassifierChannelsOut());\n  }\n\n  protected extractParamsFromWeightMap(weightMap: tf.NamedTensorMap) {\n    const { featureExtractorMap, classifierMap } = seperateWeightMaps(weightMap);\n\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\n\n    return extractParamsFromWeightMap(classifierMap);\n  }\n\n  protected extractParams(weights: Float32Array) {\n    const cIn = this.getClassifierChannelsIn();\n    const cOut = this.getClassifierChannelsOut();\n    const classifierWeightSize = (cOut * cIn) + cOut;\n\n    const featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\n    const classifierWeights = weights.slice(weights.length - classifierWeightSize);\n\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\n    return this.extractClassifierParams(classifierWeights);\n  }\n}\n", "export const FACE_EXPRESSION_LABELS = ['neutral', 'happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised'];\n\nexport class FaceExpressions {\n  public neutral = 0;\n  public happy = 0;\n  public sad = 0;\n  public angry = 0;\n  public fearful = 0;\n  public disgusted = 0;\n  public surprised = 0;\n\n  constructor(probabilities: number[] | Float32Array) {\n    if (probabilities.length !== 7) {\n      throw new Error(`FaceExpressions.constructor - expected probabilities.length to be 7, have: ${probabilities.length}`);\n    }\n\n    FACE_EXPRESSION_LABELS.forEach((expression, idx) => {\n      this[expression] = probabilities[idx];\n    });\n  }\n\n  asSortedArray() {\n    return FACE_EXPRESSION_LABELS\n      .map((expression) => ({ expression, probability: this[expression] as number }))\n      .sort((e0, e1) => e1.probability - e0.probability);\n  }\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { NetInput, TNetInput, toNetInput } from '../dom/index';\nimport { FaceFeatureExtractor } from '../faceFeatureExtractor/FaceFeatureExtractor';\nimport { FaceFeatureExtractorParams } from '../faceFeatureExtractor/types';\nimport { FaceProcessor } from '../faceProcessor/FaceProcessor';\nimport { FaceExpressions } from './FaceExpressions';\n\nexport class FaceExpressionNet extends FaceProcessor<FaceFeatureExtractorParams> {\n  constructor(faceFeatureExtractor: FaceFeatureExtractor = new FaceFeatureExtractor()) {\n    super('FaceExpressionNet', faceFeatureExtractor);\n  }\n\n  public forwardInput(input: NetInput | tf.Tensor4D): tf.Tensor2D {\n    return tf.tidy(() => tf.softmax(this.runNet(input)));\n  }\n\n  public async forward(input: TNetInput): Promise<tf.Tensor2D> {\n    return this.forwardInput(await toNetInput(input));\n  }\n\n  public async predictExpressions(input: TNetInput) {\n    const netInput = await toNetInput(input);\n    const out = await this.forwardInput(netInput);\n    const probabilitesByBatch = await Promise.all(tf.unstack(out).map(async (t) => {\n      const data = t.dataSync();\n      t.dispose();\n      return data;\n    }));\n    out.dispose();\n\n    const predictionsByBatch = probabilitesByBatch\n      .map((probabilites) => new FaceExpressions(probabilites as Float32Array));\n\n    return netInput.isBatchInput\n      ? predictionsByBatch\n      : predictionsByBatch[0];\n  }\n\n  protected getDefaultModelName(): string {\n    return 'face_expression_model';\n  }\n\n  protected getClassifierChannelsIn(): number {\n    return 256;\n  }\n\n  protected getClassifierChannelsOut(): number {\n    return 7;\n  }\n}\n", "import { FaceExpressions } from '../faceExpressionNet/FaceExpressions';\n\nexport type WithFaceExpressions<TSource> = TSource & { expressions: FaceExpressions }\n\nexport function isWithFaceExpressions(obj: any): obj is WithFaceExpressions<{}> {\n  return obj.expressions instanceof FaceExpressions;\n}\n\nexport function extendWithFaceExpressions<TSource>(sourceObj: TSource, expressions: FaceExpressions): WithFaceExpressions<TSource> {\n  const extension = { expressions };\n  return { ...sourceObj, ...extension };\n}\n", "import { IPoint, Point } from '../classes/index';\nimport { FaceExpressions } from '../faceExpressionNet/index';\nimport { isWithFaceDetection } from '../factories/WithFaceDetection';\nimport { isWithFaceExpressions, WithFaceExpressions } from '../factories/WithFaceExpressions';\nimport { round } from '../utils/index';\nimport { DrawTextField } from './DrawTextField';\n\nexport type DrawFaceExpressionsInput = FaceExpressions | WithFaceExpressions<{}>\n\nexport function drawFaceExpressions(canvasArg: string | HTMLCanvasElement, faceExpressions: DrawFaceExpressionsInput | Array<DrawFaceExpressionsInput>, minConfidence = 0.1, textFieldAnchor?: IPoint) {\n  const faceExpressionsArray = Array.isArray(faceExpressions) ? faceExpressions : [faceExpressions];\n\n  faceExpressionsArray.forEach((e) => {\n    // eslint-disable-next-line no-nested-ternary\n    const expr = e instanceof FaceExpressions\n      ? e\n      : (isWithFaceExpressions(e) ? e.expressions : undefined);\n    if (!expr) {\n      throw new Error('drawFaceExpressions - expected faceExpressions to be FaceExpressions | WithFaceExpressions<{}> or array thereof');\n    }\n\n    const sorted = expr.asSortedArray();\n    const resultsToDisplay = sorted.filter((exprLocal) => exprLocal.probability > minConfidence);\n\n    const anchor = isWithFaceDetection(e)\n      ? e.detection.box.bottomLeft\n      : (textFieldAnchor || new Point(0, 0));\n\n    const drawTextField = new DrawTextField(\n      resultsToDisplay.map((exprLocal) => `${exprLocal.expression} (${round(exprLocal.probability)})`),\n      anchor,\n    );\n    drawTextField.draw(canvasArg);\n  });\n}\n", "import { FaceDetection } from '../classes/FaceDetection';\nimport { FaceLandmarks } from '../classes/FaceLandmarks';\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { isWithFaceDetection, WithFaceDetection } from './WithFaceDetection';\n\nexport type WithFaceLandmarks<\n  TSource extends WithFaceDetection<{}>,\n  TFaceLandmarks extends FaceLandmarks = FaceLandmarks68 > = TSource & {\n    landmarks: TFaceLandmarks,\n    unshiftedLandmarks: TFaceLandmarks,\n    alignedRect: FaceDetection,\n    angle: { roll: number | undefined, pitch: number | undefined, yaw: number | undefined },\n  }\n\nexport function isWithFaceLandmarks(obj: any): obj is WithFaceLandmarks<WithFaceDetection<{}>, FaceLandmarks> {\n  return isWithFaceDetection(obj)\n    // eslint-disable-next-line dot-notation\n    && obj['landmarks'] instanceof FaceLandmarks\n    // eslint-disable-next-line dot-notation\n    && obj['unshiftedLandmarks'] instanceof FaceLandmarks\n    // eslint-disable-next-line dot-notation\n    && obj['alignedRect'] instanceof FaceDetection;\n}\n\nfunction calculateFaceAngle(mesh) {\n  // returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y)\n  const radians = (a1, a2, b1, b2) => (Math.atan2(b2 - a2, b1 - a1) % Math.PI);\n  // convert radians to degrees\n  // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\n  const degrees = (theta) => (theta * 180) / Math.PI;\n\n  const angle = { roll: <number | undefined>undefined, pitch: <number | undefined>undefined, yaw: <number | undefined>undefined };\n\n  if (!mesh || !mesh._positions || mesh._positions.length !== 68) return angle;\n  const pt = mesh._positions;\n\n  // values are in radians in range of -pi/2 to pi/2 which is -90 to +90 degrees\n  // value of 0 means center\n\n  // roll is face lean from left to right\n  // comparing x,y of outside corners of leftEye and rightEye\n  angle.roll = -radians(pt[36]._x, pt[36]._y, pt[45]._x, pt[45]._y);\n\n  // pitch is face turn from left right\n  // comparing x distance of top of nose to left and right edge of face\n  // precision is lacking since coordinates are not precise enough\n  angle.pitch = radians(0, Math.abs(pt[0]._x - pt[30]._x) / pt[30]._x, Math.PI, Math.abs(pt[16]._x - pt[30]._x) / pt[30]._x);\n\n  // yaw is face move from up to down\n  // comparing size of the box around the face with top and bottom of detected landmarks\n  // silly hack, but this gives us face compression on y-axis\n  // e.g., tilting head up hides the forehead that doesn't have any landmarks so ratio drops\n  const bottom = pt.reduce((prev, cur) => (prev < cur._y ? prev : cur._y), +Infinity);\n  const top = pt.reduce((prev, cur) => (prev > cur._y ? prev : cur._y), -Infinity);\n  angle.yaw = Math.PI * (mesh._imgDims._height / (top - bottom) / 1.40 - 1);\n\n  return angle;\n}\n\nexport function extendWithFaceLandmarks<\n  TSource extends WithFaceDetection<{}>,\n  TFaceLandmarks extends FaceLandmarks = FaceLandmarks68 >(sourceObj: TSource, unshiftedLandmarks: TFaceLandmarks): WithFaceLandmarks<TSource, TFaceLandmarks> {\n  const { box: shift } = sourceObj.detection;\n  const landmarks = unshiftedLandmarks.shiftBy<TFaceLandmarks>(shift.x, shift.y);\n\n  const rect = landmarks.align();\n  const { imageDims } = sourceObj.detection;\n  const alignedRect = new FaceDetection(sourceObj.detection.score, rect.rescale(imageDims.reverse()), imageDims);\n  const angle = calculateFaceAngle(unshiftedLandmarks);\n\n  const extension = {\n    landmarks,\n    unshiftedLandmarks,\n    alignedRect,\n    angle,\n  };\n\n  return { ...sourceObj, ...extension };\n}\n", "/* eslint-disable max-classes-per-file */\nimport { IPoint } from '../classes/index';\nimport { FaceLandmarks } from '../classes/FaceLandmarks';\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { getContext2dOrThrow } from '../dom/getContext2dOrThrow';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { isWithFaceLandmarks, WithFaceLandmarks } from '../factories/WithFaceLandmarks';\nimport { drawContour } from './drawContour';\n\nexport interface IDrawFaceLandmarksOptions {\n  drawLines?: boolean\n  drawPoints?: boolean\n  lineWidth?: number\n  pointSize?: number\n  lineColor?: string\n  pointColor?: string\n}\n\nexport class DrawFaceLandmarksOptions {\n  public drawLines: boolean;\n\n  public drawPoints: boolean;\n\n  public lineWidth: number;\n\n  public pointSize: number;\n\n  public lineColor: string;\n\n  public pointColor: string;\n\n  constructor(options: IDrawFaceLandmarksOptions = {}) {\n    const {\n      drawLines = true, drawPoints = true, lineWidth, lineColor, pointSize, pointColor,\n    } = options;\n    this.drawLines = drawLines;\n    this.drawPoints = drawPoints;\n    this.lineWidth = lineWidth || 1;\n    this.pointSize = pointSize || 2;\n    this.lineColor = lineColor || 'rgba(0, 255, 255, 1)';\n    this.pointColor = pointColor || 'rgba(255, 0, 255, 1)';\n  }\n}\n\nexport class DrawFaceLandmarks {\n  public faceLandmarks: FaceLandmarks;\n\n  public options: DrawFaceLandmarksOptions;\n\n  constructor(\n    faceLandmarks: FaceLandmarks,\n    options: IDrawFaceLandmarksOptions = {},\n  ) {\n    this.faceLandmarks = faceLandmarks;\n    this.options = new DrawFaceLandmarksOptions(options);\n  }\n\n  draw(canvasArg: string | HTMLCanvasElement | CanvasRenderingContext2D) {\n    const ctx = getContext2dOrThrow(canvasArg);\n\n    const {\n      drawLines, drawPoints, lineWidth, lineColor, pointSize, pointColor,\n    } = this.options;\n\n    if (drawLines && this.faceLandmarks instanceof FaceLandmarks68) {\n      ctx.strokeStyle = lineColor;\n      ctx.lineWidth = lineWidth;\n      drawContour(ctx, this.faceLandmarks.getJawOutline());\n      drawContour(ctx, this.faceLandmarks.getLeftEyeBrow());\n      drawContour(ctx, this.faceLandmarks.getRightEyeBrow());\n      drawContour(ctx, this.faceLandmarks.getNose());\n      drawContour(ctx, this.faceLandmarks.getLeftEye(), true);\n      drawContour(ctx, this.faceLandmarks.getRightEye(), true);\n      drawContour(ctx, this.faceLandmarks.getMouth(), true);\n    }\n\n    if (drawPoints) {\n      ctx.strokeStyle = pointColor;\n      ctx.fillStyle = pointColor;\n\n      const drawPoint = (pt: IPoint) => {\n        ctx.beginPath();\n        ctx.arc(pt.x, pt.y, pointSize, 0, 2 * Math.PI);\n        ctx.fill();\n      };\n      this.faceLandmarks.positions.forEach(drawPoint);\n    }\n  }\n}\n\nexport type DrawFaceLandmarksInput = FaceLandmarks | WithFaceLandmarks<WithFaceDetection<{}>>\n\nexport function drawFaceLandmarks(\n  canvasArg: string | HTMLCanvasElement,\n  faceLandmarks: DrawFaceLandmarksInput | Array<DrawFaceLandmarksInput>,\n) {\n  const faceLandmarksArray = Array.isArray(faceLandmarks) ? faceLandmarks : [faceLandmarks];\n  faceLandmarksArray.forEach((f) => {\n    // eslint-disable-next-line no-nested-ternary\n    const landmarks = f instanceof FaceLandmarks\n      ? f\n      : (isWithFaceLandmarks(f) ? f.landmarks : undefined);\n    if (!landmarks) {\n      throw new Error('drawFaceLandmarks - expected faceExpressions to be FaceLandmarks | WithFaceLandmarks<WithFaceDetection<{}>> or array thereof');\n    }\n\n    new DrawFaceLandmarks(landmarks).draw(canvasArg);\n  });\n}\n", "import { extractConvParamsFactory, extractSeparableConvParamsFactory, extractWeightsFactory } from '../common/index';\nimport { ExtractWeightsFunction, ParamMapping } from '../common/types';\nimport { range } from '../utils/index';\nimport { MainBlockParams, ReductionBlockParams, TinyXceptionParams } from './types';\n\nfunction extractorsFactory(extractWeights: ExtractWeightsFunction, paramMappings: ParamMapping[]) {\n  const extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\n  const extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings);\n\n  function extractReductionBlockParams(channelsIn: number, channelsOut: number, mappedPrefix: string): ReductionBlockParams {\n    const separable_conv0 = extractSeparableConvParams(channelsIn, channelsOut, `${mappedPrefix}/separable_conv0`);\n    const separable_conv1 = extractSeparableConvParams(channelsOut, channelsOut, `${mappedPrefix}/separable_conv1`);\n    const expansion_conv = extractConvParams(channelsIn, channelsOut, 1, `${mappedPrefix}/expansion_conv`);\n\n    return { separable_conv0, separable_conv1, expansion_conv };\n  }\n\n  function extractMainBlockParams(channels: number, mappedPrefix: string): MainBlockParams {\n    const separable_conv0 = extractSeparableConvParams(channels, channels, `${mappedPrefix}/separable_conv0`);\n    const separable_conv1 = extractSeparableConvParams(channels, channels, `${mappedPrefix}/separable_conv1`);\n    const separable_conv2 = extractSeparableConvParams(channels, channels, `${mappedPrefix}/separable_conv2`);\n\n    return { separable_conv0, separable_conv1, separable_conv2 };\n  }\n\n  return {\n    extractConvParams,\n    extractSeparableConvParams,\n    extractReductionBlockParams,\n    extractMainBlockParams,\n  };\n}\n\nexport function extractParams(weights: Float32Array, numMainBlocks: number): { params: TinyXceptionParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n\n  const {\n    extractWeights,\n    getRemainingWeights,\n  } = extractWeightsFactory(weights);\n\n  const {\n    extractConvParams,\n    extractSeparableConvParams,\n    extractReductionBlockParams,\n    extractMainBlockParams,\n  } = extractorsFactory(extractWeights, paramMappings);\n\n  const entry_flow_conv_in = extractConvParams(3, 32, 3, 'entry_flow/conv_in');\n  const entry_flow_reduction_block_0 = extractReductionBlockParams(32, 64, 'entry_flow/reduction_block_0');\n  const entry_flow_reduction_block_1 = extractReductionBlockParams(64, 128, 'entry_flow/reduction_block_1');\n\n  const entry_flow = {\n    conv_in: entry_flow_conv_in,\n    reduction_block_0: entry_flow_reduction_block_0,\n    reduction_block_1: entry_flow_reduction_block_1,\n  };\n\n  const middle_flow = {};\n  range(numMainBlocks, 0, 1).forEach((idx) => {\n    middle_flow[`main_block_${idx}`] = extractMainBlockParams(128, `middle_flow/main_block_${idx}`);\n  });\n\n  const exit_flow_reduction_block = extractReductionBlockParams(128, 256, 'exit_flow/reduction_block');\n  const exit_flow_separable_conv = extractSeparableConvParams(256, 512, 'exit_flow/separable_conv');\n\n  const exit_flow = {\n    reduction_block: exit_flow_reduction_block,\n    separable_conv: exit_flow_separable_conv,\n  };\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`);\n  }\n\n  return {\n    paramMappings,\n    params: { entry_flow, middle_flow, exit_flow },\n  };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { disposeUnusedWeightTensors, extractWeightEntryFactory, loadSeparableConvParamsFactory, ParamMapping } from '../common/index';\nimport { loadConvParamsFactory } from '../common/loadConvParamsFactory';\nimport { range } from '../utils/index';\nimport { MainBlockParams, ReductionBlockParams, TinyXceptionParams } from './types';\n\nfunction loadParamsFactory(weightMap: any, paramMappings: ParamMapping[]) {\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  const extractConvParams = loadConvParamsFactory(extractWeightEntry);\n  const extractSeparableConvParams = loadSeparableConvParamsFactory(extractWeightEntry);\n\n  function extractReductionBlockParams(mappedPrefix: string): ReductionBlockParams {\n    const separable_conv0 = extractSeparableConvParams(`${mappedPrefix}/separable_conv0`);\n    const separable_conv1 = extractSeparableConvParams(`${mappedPrefix}/separable_conv1`);\n    const expansion_conv = extractConvParams(`${mappedPrefix}/expansion_conv`);\n\n    return { separable_conv0, separable_conv1, expansion_conv };\n  }\n\n  function extractMainBlockParams(mappedPrefix: string): MainBlockParams {\n    const separable_conv0 = extractSeparableConvParams(`${mappedPrefix}/separable_conv0`);\n    const separable_conv1 = extractSeparableConvParams(`${mappedPrefix}/separable_conv1`);\n    const separable_conv2 = extractSeparableConvParams(`${mappedPrefix}/separable_conv2`);\n\n    return { separable_conv0, separable_conv1, separable_conv2 };\n  }\n\n  return {\n    extractConvParams,\n    extractSeparableConvParams,\n    extractReductionBlockParams,\n    extractMainBlockParams,\n  };\n}\n\nexport function extractParamsFromWeightMap(\n  weightMap: tf.NamedTensorMap,\n  numMainBlocks: number,\n): { params: TinyXceptionParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n\n  const {\n    extractConvParams,\n    extractSeparableConvParams,\n    extractReductionBlockParams,\n    extractMainBlockParams,\n  } = loadParamsFactory(weightMap, paramMappings);\n\n  const entry_flow_conv_in = extractConvParams('entry_flow/conv_in');\n  const entry_flow_reduction_block_0 = extractReductionBlockParams('entry_flow/reduction_block_0');\n  const entry_flow_reduction_block_1 = extractReductionBlockParams('entry_flow/reduction_block_1');\n\n  const entry_flow = {\n    conv_in: entry_flow_conv_in,\n    reduction_block_0: entry_flow_reduction_block_0,\n    reduction_block_1: entry_flow_reduction_block_1,\n  };\n\n  const middle_flow = {};\n  range(numMainBlocks, 0, 1).forEach((idx) => {\n    middle_flow[`main_block_${idx}`] = extractMainBlockParams(`middle_flow/main_block_${idx}`);\n  });\n\n  const exit_flow_reduction_block = extractReductionBlockParams('exit_flow/reduction_block');\n  const exit_flow_separable_conv = extractSeparableConvParams('exit_flow/separable_conv');\n\n  const exit_flow = {\n    reduction_block: exit_flow_reduction_block,\n    separable_conv: exit_flow_separable_conv,\n  };\n\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n\n  return { params: { entry_flow, middle_flow, exit_flow }, paramMappings };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { ConvParams, depthwiseSeparableConv } from '../common/index';\nimport { NetInput, TNetInput, toNetInput } from '../dom/index';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops/index';\nimport { range } from '../utils/index';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeightMap } from './extractParamsFromWeightMap';\nimport { MainBlockParams, ReductionBlockParams, TinyXceptionParams } from './types';\n\nfunction conv(x: tf.Tensor4D, params: ConvParams, stride: [number, number]): tf.Tensor4D {\n  return tf.add(tf.conv2d(x, params.filters, stride, 'same'), params.bias);\n}\n\nfunction reductionBlock(x: tf.Tensor4D, params: ReductionBlockParams, isActivateInput = true): tf.Tensor4D {\n  let out = isActivateInput ? tf.relu(x) : x;\n  out = depthwiseSeparableConv(out, params.separable_conv0, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\n  out = tf.maxPool(out, [3, 3], [2, 2], 'same');\n  out = tf.add(out, conv(x, params.expansion_conv, [2, 2]));\n  return out;\n}\n\nfunction mainBlock(x: tf.Tensor4D, params: MainBlockParams): tf.Tensor4D {\n  let out = depthwiseSeparableConv(tf.relu(x), params.separable_conv0, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv2, [1, 1]);\n  out = tf.add(out, x);\n  return out;\n}\n\nexport class TinyXception extends NeuralNetwork<TinyXceptionParams> {\n  private _numMainBlocks: number;\n\n  constructor(numMainBlocks: number) {\n    super('TinyXception');\n    this._numMainBlocks = numMainBlocks;\n  }\n\n  public forwardInput(input: NetInput): tf.Tensor4D {\n    const { params } = this;\n    if (!params) {\n      throw new Error('TinyXception - load model before inference');\n    }\n    return tf.tidy(() => {\n      const batchTensor = tf.cast(input.toBatchTensor(112, true), 'float32');\n      const meanRgb = [122.782, 117.001, 104.298];\n      const normalized = normalize(batchTensor, meanRgb).div(255) as tf.Tensor4D;\n      let out = tf.relu(conv(normalized, params.entry_flow.conv_in, [2, 2]));\n      out = reductionBlock(out, params.entry_flow.reduction_block_0, false);\n      out = reductionBlock(out, params.entry_flow.reduction_block_1);\n      range(this._numMainBlocks, 0, 1).forEach((idx) => {\n        out = mainBlock(out, params.middle_flow[`main_block_${idx}`]);\n      });\n      out = reductionBlock(out, params.exit_flow.reduction_block);\n      out = tf.relu(depthwiseSeparableConv(out, params.exit_flow.separable_conv, [1, 1]));\n      return out;\n    });\n  }\n\n  public async forward(input: TNetInput): Promise<tf.Tensor4D> {\n    return this.forwardInput(await toNetInput(input));\n  }\n\n  protected getDefaultModelName(): string {\n    return 'tiny_xception_model';\n  }\n\n  protected extractParamsFromWeightMap(weightMap: tf.NamedTensorMap) {\n    return extractParamsFromWeightMap(weightMap, this._numMainBlocks);\n  }\n\n  protected extractParams(weights: Float32Array) {\n    return extractParams(weights, this._numMainBlocks);\n  }\n}\n", "import { extractFCParamsFactory, extractWeightsFactory, ParamMapping } from '../common/index';\nimport { NetParams } from './types';\n\nexport function extractParams(weights: Float32Array): { params: NetParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n\n  const {\n    extractWeights,\n    getRemainingWeights,\n  } = extractWeightsFactory(weights);\n\n  const extractFCParams = extractFCParamsFactory(extractWeights, paramMappings);\n\n  const age = extractFCParams(512, 1, 'fc/age');\n  const gender = extractFCParams(512, 2, 'fc/gender');\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`);\n  }\n\n  return {\n    paramMappings,\n    params: { fc: { age, gender } },\n  };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { disposeUnusedWeightTensors, extractWeightEntryFactory, FCParams, ParamMapping } from '../common/index';\nimport { NetParams } from './types';\n\nexport function extractParamsFromWeightMap(\n  weightMap: tf.NamedTensorMap,\n): { params: NetParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractFcParams(prefix: string): FCParams {\n    const weights = extractWeightEntry(`${prefix}/weights`, 2);\n    const bias = extractWeightEntry(`${prefix}/bias`, 1);\n    return { weights, bias };\n  }\n\n  const params = {\n    fc: {\n      age: extractFcParams('fc/age'),\n      gender: extractFcParams('fc/gender'),\n    },\n  };\n\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n\n  return { params, paramMappings };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { FCParams } from '../common/index';\n\n// eslint-disable-next-line no-shadow\nexport enum Gender {\n  // eslint-disable-next-line no-unused-vars\n  FEMALE = 'female',\n  // eslint-disable-next-line no-unused-vars\n  MALE = 'male'\n}\n\nexport type AgeAndGenderPrediction = {\n  age: number\n  gender: Gender\n  genderProbability: number\n}\n\nexport type NetOutput = { age: tf.Tensor1D, gender: tf.Tensor2D }\n\nexport type NetParams = {\n  fc: {\n    age: FCParams\n    gender: FCParams\n  }\n}\n", "import * as tf from '../../dist/tfjs.esm.js';\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { seperateWeightMaps } from '../faceProcessor/util';\nimport { TinyXception } from '../xception/TinyXception';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeightMap } from './extractParamsFromWeightMap';\nimport { AgeAndGenderPrediction, Gender, NetOutput, NetParams } from './types';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { NetInput, TNetInput, toNetInput } from '../dom/index';\n\nexport class AgeGenderNet extends NeuralNetwork<NetParams> {\n  private _faceFeatureExtractor: TinyXception;\n\n  constructor(faceFeatureExtractor: TinyXception = new TinyXception(2)) {\n    super('AgeGenderNet');\n    this._faceFeatureExtractor = faceFeatureExtractor;\n  }\n\n  public get faceFeatureExtractor(): TinyXception {\n    return this._faceFeatureExtractor;\n  }\n\n  public runNet(input: NetInput | tf.Tensor4D): NetOutput {\n    const { params } = this;\n\n    if (!params) {\n      throw new Error(`${this._name} - load model before inference`);\n    }\n\n    return tf.tidy(() => {\n      const bottleneckFeatures = input instanceof NetInput\n        ? this.faceFeatureExtractor.forwardInput(input)\n        : input;\n\n      const pooled = tf.avgPool(bottleneckFeatures, [7, 7], [2, 2], 'valid').as2D(bottleneckFeatures.shape[0], -1);\n      const age = fullyConnectedLayer(pooled, params.fc.age).as1D();\n      const gender = fullyConnectedLayer(pooled, params.fc.gender);\n      return { age, gender };\n    });\n  }\n\n  public forwardInput(input: NetInput | tf.Tensor4D): NetOutput {\n    return tf.tidy(() => {\n      const { age, gender } = this.runNet(input);\n      return { age, gender: tf.softmax(gender) };\n    });\n  }\n\n  public async forward(input: TNetInput): Promise<NetOutput> {\n    return this.forwardInput(await toNetInput(input));\n  }\n\n  public async predictAgeAndGender(input: TNetInput): Promise<AgeAndGenderPrediction | AgeAndGenderPrediction[]> {\n    const netInput = await toNetInput(input);\n    const out = await this.forwardInput(netInput);\n\n    const ages = tf.unstack(out.age);\n    const genders = tf.unstack(out.gender);\n    const ageAndGenderTensors = ages.map((ageTensor, i) => ({\n      ageTensor,\n      genderTensor: genders[i],\n    }));\n\n    const predictionsByBatch = await Promise.all(\n      ageAndGenderTensors.map(async ({ ageTensor, genderTensor }) => {\n        const age = (ageTensor.dataSync())[0];\n        const probMale = (genderTensor.dataSync())[0];\n        const isMale = probMale > 0.5;\n        const gender = isMale ? Gender.MALE : Gender.FEMALE;\n        const genderProbability = isMale ? probMale : (1 - probMale);\n\n        ageTensor.dispose();\n        genderTensor.dispose();\n        return { age, gender, genderProbability };\n      }),\n    );\n    out.age.dispose();\n    out.gender.dispose();\n\n    return netInput.isBatchInput ? predictionsByBatch as AgeAndGenderPrediction[] : predictionsByBatch[0] as AgeAndGenderPrediction;\n  }\n\n  protected getDefaultModelName(): string {\n    return 'age_gender_model';\n  }\n\n  public override dispose(throwOnRedispose = true) {\n    this.faceFeatureExtractor.dispose(throwOnRedispose);\n    super.dispose(throwOnRedispose);\n  }\n\n  public loadClassifierParams(weights: Float32Array) {\n    const { params, paramMappings } = this.extractClassifierParams(weights);\n    this._params = params;\n    this._paramMappings = paramMappings;\n  }\n\n  public extractClassifierParams(weights: Float32Array) {\n    return extractParams(weights);\n  }\n\n  protected extractParamsFromWeightMap(weightMap: tf.NamedTensorMap) {\n    const { featureExtractorMap, classifierMap } = seperateWeightMaps(weightMap);\n\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\n\n    return extractParamsFromWeightMap(classifierMap);\n  }\n\n  protected extractParams(weights: Float32Array) {\n    const classifierWeightSize = (512 * 1 + 1) + (512 * 2 + 2);\n\n    const featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\n    const classifierWeights = weights.slice(weights.length - classifierWeightSize);\n\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\n    return this.extractClassifierParams(classifierWeights);\n  }\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { IDimensions, Point } from '../classes/index';\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { NetInput, TNetInput, toNetInput } from '../dom/index';\nimport { FaceFeatureExtractorParams, TinyFaceFeatureExtractorParams } from '../faceFeatureExtractor/types';\nimport { FaceProcessor } from '../faceProcessor/FaceProcessor';\nimport { isEven } from '../utils/index';\n\nexport abstract class FaceLandmark68NetBase<\n  TExtractorParams extends FaceFeatureExtractorParams | TinyFaceFeatureExtractorParams\n>\n  extends FaceProcessor<TExtractorParams> {\n  public postProcess(output: tf.Tensor2D, inputSize: number, originalDimensions: IDimensions[]): tf.Tensor2D {\n    const inputDimensions = originalDimensions.map(({ width, height }) => {\n      const scale = inputSize / Math.max(height, width);\n      return {\n        width: width * scale,\n        height: height * scale,\n      };\n    });\n\n    const batchSize = inputDimensions.length;\n\n    return tf.tidy(() => {\n      const createInterleavedTensor = (fillX: number, fillY: number) => tf.stack([tf.fill([68], fillX, 'float32'), tf.fill([68], fillY, 'float32')], 1).as2D(1, 136).as1D();\n\n      // eslint-disable-next-line no-unused-vars\n      const getPadding = (batchIdx: number, cond: (w: number, h: number) => boolean): number => {\n        const { width, height } = inputDimensions[batchIdx];\n        return cond(width, height) ? Math.abs(width - height) / 2 : 0;\n      };\n\n      const getPaddingX = (batchIdx: number) => getPadding(batchIdx, (w, h) => w < h);\n      const getPaddingY = (batchIdx: number) => getPadding(batchIdx, (w, h) => h < w);\n\n      const landmarkTensors = output\n        .mul(tf.fill([batchSize, 136], inputSize, 'float32'))\n        .sub(tf.stack(Array.from(Array(batchSize), (_, batchIdx) => createInterleavedTensor(\n          getPaddingX(batchIdx),\n          getPaddingY(batchIdx),\n        ))))\n        .div(tf.stack(Array.from(Array(batchSize), (_, batchIdx) => createInterleavedTensor(\n          inputDimensions[batchIdx].width,\n          inputDimensions[batchIdx].height,\n        ))));\n\n      return landmarkTensors as tf.Tensor2D;\n    });\n  }\n\n  public forwardInput(input: NetInput): tf.Tensor2D {\n    return tf.tidy(() => {\n      const out = this.runNet(input);\n      return this.postProcess(\n        out,\n        input.inputSize as number,\n        input.inputDimensions.map(([height, width]) => ({ height, width })),\n      );\n    });\n  }\n\n  public async forward(input: TNetInput): Promise<tf.Tensor2D> {\n    return this.forwardInput(await toNetInput(input));\n  }\n\n  public async detectLandmarks(input: TNetInput): Promise<FaceLandmarks68 | FaceLandmarks68[]> {\n    const netInput = await toNetInput(input);\n    const landmarkTensors = tf.tidy(\n      () => tf.unstack(this.forwardInput(netInput)),\n    );\n\n    const landmarksForBatch = await Promise.all(landmarkTensors.map(\n      async (landmarkTensor, batchIdx) => {\n        const landmarksArray = Array.from(landmarkTensor.dataSync());\n        const xCoords = landmarksArray.filter((_, i) => isEven(i));\n        const yCoords = landmarksArray.filter((_, i) => !isEven(i));\n\n        return new FaceLandmarks68(\n          Array(68).fill(0).map((_, i) => new Point(xCoords[i] as number, yCoords[i] as number)),\n          {\n            height: netInput.getInputHeight(batchIdx),\n            width: netInput.getInputWidth(batchIdx),\n          },\n        );\n      },\n    ));\n\n    landmarkTensors.forEach((t) => t.dispose());\n\n    return netInput.isBatchInput ? landmarksForBatch as FaceLandmarks68[] : landmarksForBatch[0] as FaceLandmarks68;\n  }\n\n  protected getClassifierChannelsOut(): number {\n    return 136;\n  }\n}\n", "import { FaceFeatureExtractor } from '../faceFeatureExtractor/FaceFeatureExtractor';\nimport { FaceFeatureExtractorParams } from '../faceFeatureExtractor/types';\nimport { FaceLandmark68NetBase } from './FaceLandmark68NetBase';\n\nexport class FaceLandmark68Net extends FaceLandmark68NetBase<FaceFeatureExtractorParams> {\n  constructor(faceFeatureExtractor: FaceFeatureExtractor = new FaceFeatureExtractor()) {\n    super('FaceLandmark68Net', faceFeatureExtractor);\n  }\n\n  protected getDefaultModelName(): string {\n    return 'face_landmark_68_model';\n  }\n\n  protected getClassifierChannelsIn(): number {\n    return 256;\n  }\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { disposeUnusedWeightTensors, ParamMapping } from '../common/index';\nimport { loadParamsFactory } from './loadParamsFactory';\nimport { TinyFaceFeatureExtractorParams } from './types';\n\nexport function extractParamsFromWeightMapTiny(\n  weightMap: tf.NamedTensorMap,\n): { params: TinyFaceFeatureExtractorParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n\n  const {\n    extractDenseBlock3Params,\n  } = loadParamsFactory(weightMap, paramMappings);\n\n  const params = {\n    dense0: extractDenseBlock3Params('dense0', true),\n    dense1: extractDenseBlock3Params('dense1'),\n    dense2: extractDenseBlock3Params('dense2'),\n  };\n\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n\n  return { params, paramMappings };\n}\n", "import { extractWeightsFactory, ParamMapping } from '../common/index';\nimport { extractorsFactory } from './extractorsFactory';\nimport { TinyFaceFeatureExtractorParams } from './types';\n\nexport function extractParamsTiny(weights: Float32Array): { params: TinyFaceFeatureExtractorParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n\n  const {\n    extractWeights,\n    getRemainingWeights,\n  } = extractWeightsFactory(weights);\n\n  const {\n    extractDenseBlock3Params,\n  } = extractorsFactory(extractWeights, paramMappings);\n\n  const dense0 = extractDenseBlock3Params(3, 32, 'dense0', true);\n  const dense1 = extractDenseBlock3Params(32, 64, 'dense1');\n  const dense2 = extractDenseBlock3Params(64, 128, 'dense2');\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`);\n  }\n\n  return {\n    paramMappings,\n    params: { dense0, dense1, dense2 },\n  };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { NetInput, TNetInput, toNetInput } from '../dom/index';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops/index';\nimport { denseBlock3 } from './denseBlock';\nimport { extractParamsFromWeightMapTiny } from './extractParamsFromWeightMapTiny';\nimport { extractParamsTiny } from './extractParamsTiny';\nimport { IFaceFeatureExtractor, TinyFaceFeatureExtractorParams } from './types';\n\nexport class TinyFaceFeatureExtractor extends NeuralNetwork<TinyFaceFeatureExtractorParams> implements IFaceFeatureExtractor<TinyFaceFeatureExtractorParams> {\n  constructor() {\n    super('TinyFaceFeatureExtractor');\n  }\n\n  public forwardInput(input: NetInput): tf.Tensor4D {\n    const { params } = this;\n\n    if (!params) {\n      throw new Error('TinyFaceFeatureExtractor - load model before inference');\n    }\n\n    return tf.tidy(() => {\n      const batchTensor = tf.cast(input.toBatchTensor(112, true), 'float32');\n      const meanRgb = [122.782, 117.001, 104.298];\n      const normalized = normalize(batchTensor, meanRgb).div(255) as tf.Tensor4D;\n\n      let out = denseBlock3(normalized, params.dense0, true);\n      out = denseBlock3(out, params.dense1);\n      out = denseBlock3(out, params.dense2);\n      out = tf.avgPool(out, [14, 14], [2, 2], 'valid');\n\n      return out;\n    });\n  }\n\n  public async forward(input: TNetInput): Promise<tf.Tensor4D> {\n    return this.forwardInput(await toNetInput(input));\n  }\n\n  protected getDefaultModelName(): string {\n    return 'face_feature_extractor_tiny_model';\n  }\n\n  protected extractParamsFromWeightMap(weightMap: tf.NamedTensorMap) {\n    return extractParamsFromWeightMapTiny(weightMap);\n  }\n\n  protected extractParams(weights: Float32Array) {\n    return extractParamsTiny(weights);\n  }\n}\n", "import { TinyFaceFeatureExtractor } from '../faceFeatureExtractor/TinyFaceFeatureExtractor';\nimport { TinyFaceFeatureExtractorParams } from '../faceFeatureExtractor/types';\nimport { FaceLandmark68NetBase } from './FaceLandmark68NetBase';\n\nexport class FaceLandmark68TinyNet extends FaceLandmark68NetBase<TinyFaceFeatureExtractorParams> {\n  constructor(faceFeatureExtractor: TinyFaceFeatureExtractor = new TinyFaceFeatureExtractor()) {\n    super('FaceLandmark68TinyNet', faceFeatureExtractor);\n  }\n\n  protected getDefaultModelName(): string {\n    return 'face_landmark_68_tiny_model';\n  }\n\n  protected getClassifierChannelsIn(): number {\n    return 128;\n  }\n}\n", "import { FaceLandmark68Net } from './FaceLandmark68Net';\n\nexport * from './FaceLandmark68Net';\nexport * from './FaceLandmark68TinyNet';\nexport class FaceLandmarkNet extends FaceLandmark68Net {}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { ScaleLayerParams } from './types';\n\nexport function scale(x: tf.Tensor4D, params: ScaleLayerParams): tf.Tensor4D {\n  return tf.add(tf.mul(x, params.weights), params.biases);\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { scale } from './scaleLayer';\nimport { ConvLayerParams } from './types';\n\nfunction convLayer(\n  x: tf.Tensor4D,\n  params: ConvLayerParams,\n  strides: [number, number],\n  withRelu: boolean,\n  padding: 'valid' | 'same' = 'same',\n): tf.Tensor4D {\n  const { filters, bias } = params.conv;\n\n  let out = tf.conv2d(x, filters, strides, padding);\n  out = tf.add(out, bias);\n  out = scale(out, params.scale);\n  return withRelu ? tf.relu(out) : out;\n}\n\nexport function conv(x: tf.Tensor4D, params: ConvLayerParams) {\n  return convLayer(x, params, [1, 1], true);\n}\n\nexport function convNoRelu(x: tf.Tensor4D, params: ConvLayerParams) {\n  return convLayer(x, params, [1, 1], false);\n}\n\nexport function convDown(x: tf.Tensor4D, params: ConvLayerParams) {\n  return convLayer(x, params, [2, 2], true, 'valid');\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { ConvParams, extractWeightsFactory, ExtractWeightsFunction, ParamMapping } from '../common/index';\nimport { isFloat } from '../utils/index';\nimport { ConvLayerParams, NetParams, ResidualLayerParams, ScaleLayerParams } from './types';\n\nfunction extractorsFactory(extractWeights: ExtractWeightsFunction, paramMappings: ParamMapping[]) {\n  function extractFilterValues(numFilterValues: number, numFilters: number, filterSize: number): tf.Tensor4D {\n    const weights = extractWeights(numFilterValues);\n    const depth = weights.length / (numFilters * filterSize * filterSize);\n\n    if (isFloat(depth)) {\n      throw new Error(`depth has to be an integer: ${depth}, weights.length: ${weights.length}, numFilters: ${numFilters}, filterSize: ${filterSize}`);\n    }\n\n    return tf.tidy(\n      () => tf.transpose(\n        tf.tensor4d(weights, [numFilters, depth, filterSize, filterSize]),\n        [2, 3, 1, 0],\n      ),\n    );\n  }\n\n  function extractConvParams(\n    numFilterValues: number,\n    numFilters: number,\n    filterSize: number,\n    mappedPrefix: string,\n  ): ConvParams {\n    const filters = extractFilterValues(numFilterValues, numFilters, filterSize);\n    const bias = tf.tensor1d(extractWeights(numFilters));\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/filters` },\n      { paramPath: `${mappedPrefix}/bias` },\n    );\n\n    return { filters, bias };\n  }\n\n  function extractScaleLayerParams(numWeights: number, mappedPrefix: string): ScaleLayerParams {\n    const weights = tf.tensor1d(extractWeights(numWeights));\n    const biases = tf.tensor1d(extractWeights(numWeights));\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/weights` },\n      { paramPath: `${mappedPrefix}/biases` },\n    );\n\n    return {\n      weights,\n      biases,\n    };\n  }\n\n  function extractConvLayerParams(\n    numFilterValues: number,\n    numFilters: number,\n    filterSize: number,\n    mappedPrefix: string,\n  ): ConvLayerParams {\n    const conv = extractConvParams(numFilterValues, numFilters, filterSize, `${mappedPrefix}/conv`);\n    const scale = extractScaleLayerParams(numFilters, `${mappedPrefix}/scale`);\n\n    return { conv, scale };\n  }\n\n  function extractResidualLayerParams(\n    numFilterValues: number,\n    numFilters: number,\n    filterSize: number,\n    mappedPrefix: string,\n    isDown = false,\n  ): ResidualLayerParams {\n    const conv1 = extractConvLayerParams((isDown ? 0.5 : 1) * numFilterValues, numFilters, filterSize, `${mappedPrefix}/conv1`);\n    const conv2 = extractConvLayerParams(numFilterValues, numFilters, filterSize, `${mappedPrefix}/conv2`);\n\n    return { conv1, conv2 };\n  }\n\n  return {\n    extractConvLayerParams,\n    extractResidualLayerParams,\n  };\n}\n\nexport function extractParams(weights: Float32Array): { params: NetParams, paramMappings: ParamMapping[] } {\n  const {\n    extractWeights,\n    getRemainingWeights,\n  } = extractWeightsFactory(weights);\n\n  const paramMappings: ParamMapping[] = [];\n\n  const {\n    extractConvLayerParams,\n    extractResidualLayerParams,\n  } = extractorsFactory(extractWeights, paramMappings);\n\n  const conv32_down = extractConvLayerParams(4704, 32, 7, 'conv32_down');\n  const conv32_1 = extractResidualLayerParams(9216, 32, 3, 'conv32_1');\n  const conv32_2 = extractResidualLayerParams(9216, 32, 3, 'conv32_2');\n  const conv32_3 = extractResidualLayerParams(9216, 32, 3, 'conv32_3');\n\n  const conv64_down = extractResidualLayerParams(36864, 64, 3, 'conv64_down', true);\n  const conv64_1 = extractResidualLayerParams(36864, 64, 3, 'conv64_1');\n  const conv64_2 = extractResidualLayerParams(36864, 64, 3, 'conv64_2');\n  const conv64_3 = extractResidualLayerParams(36864, 64, 3, 'conv64_3');\n\n  const conv128_down = extractResidualLayerParams(147456, 128, 3, 'conv128_down', true);\n  const conv128_1 = extractResidualLayerParams(147456, 128, 3, 'conv128_1');\n  const conv128_2 = extractResidualLayerParams(147456, 128, 3, 'conv128_2');\n\n  const conv256_down = extractResidualLayerParams(589824, 256, 3, 'conv256_down', true);\n  const conv256_1 = extractResidualLayerParams(589824, 256, 3, 'conv256_1');\n  const conv256_2 = extractResidualLayerParams(589824, 256, 3, 'conv256_2');\n  const conv256_down_out = extractResidualLayerParams(589824, 256, 3, 'conv256_down_out');\n\n  const fc = tf.tidy(\n    () => tf.transpose(tf.tensor2d(extractWeights(256 * 128), [128, 256]), [1, 0]),\n  );\n  paramMappings.push({ paramPath: 'fc' });\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`);\n  }\n\n  const params = {\n    conv32_down,\n    conv32_1,\n    conv32_2,\n    conv32_3,\n    conv64_down,\n    conv64_1,\n    conv64_2,\n    conv64_3,\n    conv128_down,\n    conv128_1,\n    conv128_2,\n    conv256_down,\n    conv256_1,\n    conv256_2,\n    conv256_down_out,\n    fc,\n  };\n\n  return { params, paramMappings };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { disposeUnusedWeightTensors, extractWeightEntryFactory, ParamMapping } from '../common/index';\nimport { isTensor2D } from '../utils/index';\nimport { ConvLayerParams, NetParams, ResidualLayerParams, ScaleLayerParams } from './types';\n\nfunction extractorsFactory(weightMap: any, paramMappings: ParamMapping[]) {\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractScaleLayerParams(prefix: string): ScaleLayerParams {\n    const weights = extractWeightEntry(`${prefix}/scale/weights`, 1);\n    const biases = extractWeightEntry(`${prefix}/scale/biases`, 1);\n\n    return { weights, biases };\n  }\n\n  function extractConvLayerParams(prefix: string): ConvLayerParams {\n    const filters = extractWeightEntry(`${prefix}/conv/filters`, 4);\n    const bias = extractWeightEntry(`${prefix}/conv/bias`, 1);\n    const scale = extractScaleLayerParams(prefix);\n\n    return { conv: { filters, bias }, scale };\n  }\n\n  function extractResidualLayerParams(prefix: string): ResidualLayerParams {\n    return {\n      conv1: extractConvLayerParams(`${prefix}/conv1`),\n      conv2: extractConvLayerParams(`${prefix}/conv2`),\n    };\n  }\n\n  return {\n    extractConvLayerParams,\n    extractResidualLayerParams,\n  };\n}\n\nexport function extractParamsFromWeightMap(\n  weightMap: tf.NamedTensorMap,\n): { params: NetParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n\n  const {\n    extractConvLayerParams,\n    extractResidualLayerParams,\n  } = extractorsFactory(weightMap, paramMappings);\n\n  const conv32_down = extractConvLayerParams('conv32_down');\n  const conv32_1 = extractResidualLayerParams('conv32_1');\n  const conv32_2 = extractResidualLayerParams('conv32_2');\n  const conv32_3 = extractResidualLayerParams('conv32_3');\n\n  const conv64_down = extractResidualLayerParams('conv64_down');\n  const conv64_1 = extractResidualLayerParams('conv64_1');\n  const conv64_2 = extractResidualLayerParams('conv64_2');\n  const conv64_3 = extractResidualLayerParams('conv64_3');\n\n  const conv128_down = extractResidualLayerParams('conv128_down');\n  const conv128_1 = extractResidualLayerParams('conv128_1');\n  const conv128_2 = extractResidualLayerParams('conv128_2');\n\n  const conv256_down = extractResidualLayerParams('conv256_down');\n  const conv256_1 = extractResidualLayerParams('conv256_1');\n  const conv256_2 = extractResidualLayerParams('conv256_2');\n  const conv256_down_out = extractResidualLayerParams('conv256_down_out');\n\n  const { fc } = weightMap;\n  paramMappings.push({ originalPath: 'fc', paramPath: 'fc' });\n\n  if (!isTensor2D(fc)) {\n    throw new Error(`expected weightMap[fc] to be a Tensor2D, instead have ${fc}`);\n  }\n\n  const params = {\n    conv32_down,\n    conv32_1,\n    conv32_2,\n    conv32_3,\n    conv64_down,\n    conv64_1,\n    conv64_2,\n    conv64_3,\n    conv128_down,\n    conv128_1,\n    conv128_2,\n    conv256_down,\n    conv256_1,\n    conv256_2,\n    conv256_down_out,\n    fc,\n  };\n\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n\n  return { params, paramMappings };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { conv, convDown, convNoRelu } from './convLayer';\nimport { ResidualLayerParams } from './types';\n\nexport function residual(x: tf.Tensor4D, params: ResidualLayerParams): tf.Tensor4D {\n  let out = conv(x, params.conv1);\n  out = convNoRelu(out, params.conv2);\n  out = tf.add(out, x);\n  out = tf.relu(out);\n  return out;\n}\n\nexport function residualDown(x: tf.Tensor4D, params: ResidualLayerParams): tf.Tensor4D {\n  let out = convDown(x, params.conv1);\n  out = convNoRelu(out, params.conv2);\n\n  let pooled = tf.avgPool(x, 2, 2, 'valid') as tf.Tensor4D;\n  const zeros = tf.zeros<tf.Rank.R4>(pooled.shape);\n  const isPad = pooled.shape[3] !== out.shape[3];\n  const isAdjustShape = pooled.shape[1] !== out.shape[1] || pooled.shape[2] !== out.shape[2];\n\n  if (isAdjustShape) {\n    const padShapeX = [...out.shape] as [number, number, number, number];\n    padShapeX[1] = 1;\n    const zerosW = tf.zeros<tf.Rank.R4>(padShapeX);\n    out = tf.concat([out, zerosW], 1);\n\n    const padShapeY = [...out.shape] as [number, number, number, number];\n    padShapeY[2] = 1;\n    const zerosH = tf.zeros<tf.Rank.R4>(padShapeY);\n    out = tf.concat([out, zerosH], 2);\n  }\n\n  pooled = isPad ? tf.concat([pooled, zeros], 3) : pooled;\n  out = tf.add(pooled, out) as tf.Tensor4D;\n\n  out = tf.relu(out);\n  return out;\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { NetInput, TNetInput, toNetInput } from '../dom/index';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops/index';\nimport { convDown } from './convLayer';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeightMap } from './extractParamsFromWeightMap';\nimport { residual, residualDown } from './residualLayer';\nimport { NetParams } from './types';\n\nexport class FaceRecognitionNet extends NeuralNetwork<NetParams> {\n  constructor() {\n    super('FaceRecognitionNet');\n  }\n\n  public forwardInput(input: NetInput): tf.Tensor2D {\n    const { params } = this;\n\n    if (!params) {\n      throw new Error('FaceRecognitionNet - load model before inference');\n    }\n\n    return tf.tidy(() => {\n      const batchTensor = tf.cast(input.toBatchTensor(150, true), 'float32');\n\n      const meanRgb = [122.782, 117.001, 104.298];\n      const normalized = normalize(batchTensor, meanRgb).div(255) as tf.Tensor4D;\n\n      let out = convDown(normalized, params.conv32_down);\n      out = tf.maxPool(out, 3, 2, 'valid');\n\n      out = residual(out, params.conv32_1);\n      out = residual(out, params.conv32_2);\n      out = residual(out, params.conv32_3);\n\n      out = residualDown(out, params.conv64_down);\n      out = residual(out, params.conv64_1);\n      out = residual(out, params.conv64_2);\n      out = residual(out, params.conv64_3);\n\n      out = residualDown(out, params.conv128_down);\n      out = residual(out, params.conv128_1);\n      out = residual(out, params.conv128_2);\n\n      out = residualDown(out, params.conv256_down);\n      out = residual(out, params.conv256_1);\n      out = residual(out, params.conv256_2);\n      out = residualDown(out, params.conv256_down_out);\n\n      const globalAvg = out.mean([1, 2]) as tf.Tensor2D;\n      const fullyConnected = tf.matMul(globalAvg, params.fc);\n\n      return fullyConnected as tf.Tensor2D;\n    });\n  }\n\n  public async forward(input: TNetInput): Promise<tf.Tensor2D> {\n    return this.forwardInput(await toNetInput(input));\n  }\n\n  public async computeFaceDescriptor(input: TNetInput): Promise<Float32Array|Float32Array[]> {\n    // @ts-ignore\n    if (input?.shape?.some((dim) => dim <= 0)) return new Float32Array(128);\n    const netInput = await toNetInput(input);\n    const faceDescriptorTensors = tf.tidy(() => tf.unstack(this.forwardInput(netInput)));\n    const faceDescriptorsForBatch = await Promise.all(faceDescriptorTensors.map((t) => t.data())) as Float32Array[];\n    faceDescriptorTensors.forEach((t) => t.dispose());\n    return netInput.isBatchInput ? faceDescriptorsForBatch : faceDescriptorsForBatch[0];\n  }\n\n  protected getDefaultModelName(): string {\n    return 'face_recognition_model';\n  }\n\n  protected extractParamsFromWeightMap(weightMap: tf.NamedTensorMap) {\n    return extractParamsFromWeightMap(weightMap);\n  }\n\n  protected extractParams(weights: Float32Array) {\n    return extractParams(weights);\n  }\n}\n", "import { FaceRecognitionNet } from './FaceRecognitionNet';\n\nexport * from './FaceRecognitionNet';\n\nexport function createFaceRecognitionNet(weights: Float32Array) {\n  const net = new FaceRecognitionNet();\n  net.extractWeights(weights);\n  return net;\n}\n", "export type WithFaceDescriptor<TSource> = TSource & {\n  descriptor: Float32Array\n}\n\nexport function extendWithFaceDescriptor<\n  TSource\n>(\n  sourceObj: TSource,\n  descriptor: Float32Array,\n): WithFaceDescriptor<TSource> {\n  const extension = { descriptor };\n  return { ...sourceObj, ...extension };\n}\n", "export type WithAge<TSource> = TSource & {\n  age: number\n}\n\nexport function isWithAge(obj: any): obj is WithAge<{}> {\n  return typeof obj.age === 'number';\n}\n\nexport function extendWithAge<\n  TSource\n>(\n  sourceObj: TSource,\n  age: number,\n): WithAge<TSource> {\n  const extension = { age };\n  return { ...sourceObj, ...extension };\n}\n", "import { Gender } from '../ageGenderNet/types';\nimport { isValidProbablitiy } from '../utils/index';\n\nexport type WithGender<TSource> = TSource & {\n  gender: Gender\n  genderProbability: number\n}\n\nexport function isWithGender(obj: any): obj is WithGender<{}> {\n  return (obj.gender === Gender.MALE || obj.gender === Gender.FEMALE)\n    && isValidProbablitiy(obj.genderProbability);\n}\n\nexport function extendWithGender<\n  TSource\n>(\n  sourceObj: TSource,\n  gender: Gender,\n  genderProbability: number,\n): WithGender<TSource> {\n  const extension = { gender, genderProbability };\n  return { ...sourceObj, ...extension };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { ExtractWeightsFunction, ParamMapping, ConvParams, extractWeightsFactory } from '../common/index';\nimport { MobileNetV1, NetParams, PointwiseConvParams, PredictionLayerParams } from './types';\n\nfunction extractorsFactory(extractWeights: ExtractWeightsFunction, paramMappings: ParamMapping[]) {\n  function extractDepthwiseConvParams(numChannels: number, mappedPrefix: string): MobileNetV1.DepthwiseConvParams {\n    const filters = tf.tensor4d(extractWeights(3 * 3 * numChannels), [3, 3, numChannels, 1]);\n    const batch_norm_scale = tf.tensor1d(extractWeights(numChannels));\n    const batch_norm_offset = tf.tensor1d(extractWeights(numChannels));\n    const batch_norm_mean = tf.tensor1d(extractWeights(numChannels));\n    const batch_norm_variance = tf.tensor1d(extractWeights(numChannels));\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/filters` },\n      { paramPath: `${mappedPrefix}/batch_norm_scale` },\n      { paramPath: `${mappedPrefix}/batch_norm_offset` },\n      { paramPath: `${mappedPrefix}/batch_norm_mean` },\n      { paramPath: `${mappedPrefix}/batch_norm_variance` },\n    );\n\n    return {\n      filters,\n      batch_norm_scale,\n      batch_norm_offset,\n      batch_norm_mean,\n      batch_norm_variance,\n    };\n  }\n\n  function extractConvParams(\n    channelsIn: number,\n    channelsOut: number,\n    filterSize: number,\n    mappedPrefix: string,\n    isPointwiseConv?: boolean,\n  ): ConvParams {\n    const filters = tf.tensor4d(\n      extractWeights(channelsIn * channelsOut * filterSize * filterSize),\n      [filterSize, filterSize, channelsIn, channelsOut],\n    );\n    const bias = tf.tensor1d(extractWeights(channelsOut));\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/filters` },\n      { paramPath: `${mappedPrefix}/${isPointwiseConv ? 'batch_norm_offset' : 'bias'}` },\n    );\n\n    return { filters, bias };\n  }\n\n  function extractPointwiseConvParams(\n    channelsIn: number,\n    channelsOut: number,\n    filterSize: number,\n    mappedPrefix: string,\n  ): PointwiseConvParams {\n    const {\n      filters,\n      bias,\n    } = extractConvParams(channelsIn, channelsOut, filterSize, mappedPrefix, true);\n\n    return {\n      filters,\n      batch_norm_offset: bias,\n    };\n  }\n\n  function extractConvPairParams(\n    channelsIn: number,\n    channelsOut: number,\n    mappedPrefix: string,\n  ): MobileNetV1.ConvPairParams {\n    const depthwise_conv = extractDepthwiseConvParams(channelsIn, `${mappedPrefix}/depthwise_conv`);\n    const pointwise_conv = extractPointwiseConvParams(channelsIn, channelsOut, 1, `${mappedPrefix}/pointwise_conv`);\n\n    return { depthwise_conv, pointwise_conv };\n  }\n\n  function extractMobilenetV1Params(): MobileNetV1.Params {\n    const conv_0 = extractPointwiseConvParams(3, 32, 3, 'mobilenetv1/conv_0');\n    const conv_1 = extractConvPairParams(32, 64, 'mobilenetv1/conv_1');\n    const conv_2 = extractConvPairParams(64, 128, 'mobilenetv1/conv_2');\n    const conv_3 = extractConvPairParams(128, 128, 'mobilenetv1/conv_3');\n    const conv_4 = extractConvPairParams(128, 256, 'mobilenetv1/conv_4');\n    const conv_5 = extractConvPairParams(256, 256, 'mobilenetv1/conv_5');\n    const conv_6 = extractConvPairParams(256, 512, 'mobilenetv1/conv_6');\n    const conv_7 = extractConvPairParams(512, 512, 'mobilenetv1/conv_7');\n    const conv_8 = extractConvPairParams(512, 512, 'mobilenetv1/conv_8');\n    const conv_9 = extractConvPairParams(512, 512, 'mobilenetv1/conv_9');\n    const conv_10 = extractConvPairParams(512, 512, 'mobilenetv1/conv_10');\n    const conv_11 = extractConvPairParams(512, 512, 'mobilenetv1/conv_11');\n    const conv_12 = extractConvPairParams(512, 1024, 'mobilenetv1/conv_12');\n    const conv_13 = extractConvPairParams(1024, 1024, 'mobilenetv1/conv_13');\n    return {\n      conv_0,\n      conv_1,\n      conv_2,\n      conv_3,\n      conv_4,\n      conv_5,\n      conv_6,\n      conv_7,\n      conv_8,\n      conv_9,\n      conv_10,\n      conv_11,\n      conv_12,\n      conv_13,\n    };\n  }\n\n  function extractPredictionLayerParams(): PredictionLayerParams {\n    const conv_0 = extractPointwiseConvParams(1024, 256, 1, 'prediction_layer/conv_0');\n    const conv_1 = extractPointwiseConvParams(256, 512, 3, 'prediction_layer/conv_1');\n    const conv_2 = extractPointwiseConvParams(512, 128, 1, 'prediction_layer/conv_2');\n    const conv_3 = extractPointwiseConvParams(128, 256, 3, 'prediction_layer/conv_3');\n    const conv_4 = extractPointwiseConvParams(256, 128, 1, 'prediction_layer/conv_4');\n    const conv_5 = extractPointwiseConvParams(128, 256, 3, 'prediction_layer/conv_5');\n    const conv_6 = extractPointwiseConvParams(256, 64, 1, 'prediction_layer/conv_6');\n    const conv_7 = extractPointwiseConvParams(64, 128, 3, 'prediction_layer/conv_7');\n    const box_encoding_0_predictor = extractConvParams(512, 12, 1, 'prediction_layer/box_predictor_0/box_encoding_predictor');\n    const class_predictor_0 = extractConvParams(512, 9, 1, 'prediction_layer/box_predictor_0/class_predictor');\n    const box_encoding_1_predictor = extractConvParams(1024, 24, 1, 'prediction_layer/box_predictor_1/box_encoding_predictor');\n    const class_predictor_1 = extractConvParams(1024, 18, 1, 'prediction_layer/box_predictor_1/class_predictor');\n    const box_encoding_2_predictor = extractConvParams(512, 24, 1, 'prediction_layer/box_predictor_2/box_encoding_predictor');\n    const class_predictor_2 = extractConvParams(512, 18, 1, 'prediction_layer/box_predictor_2/class_predictor');\n    const box_encoding_3_predictor = extractConvParams(256, 24, 1, 'prediction_layer/box_predictor_3/box_encoding_predictor');\n    const class_predictor_3 = extractConvParams(256, 18, 1, 'prediction_layer/box_predictor_3/class_predictor');\n    const box_encoding_4_predictor = extractConvParams(256, 24, 1, 'prediction_layer/box_predictor_4/box_encoding_predictor');\n    const class_predictor_4 = extractConvParams(256, 18, 1, 'prediction_layer/box_predictor_4/class_predictor');\n    const box_encoding_5_predictor = extractConvParams(128, 24, 1, 'prediction_layer/box_predictor_5/box_encoding_predictor');\n    const class_predictor_5 = extractConvParams(128, 18, 1, 'prediction_layer/box_predictor_5/class_predictor');\n\n    const box_predictor_0 = {\n      box_encoding_predictor: box_encoding_0_predictor,\n      class_predictor: class_predictor_0,\n    };\n    const box_predictor_1 = {\n      box_encoding_predictor: box_encoding_1_predictor,\n      class_predictor: class_predictor_1,\n    };\n    const box_predictor_2 = {\n      box_encoding_predictor: box_encoding_2_predictor,\n      class_predictor: class_predictor_2,\n    };\n    const box_predictor_3 = {\n      box_encoding_predictor: box_encoding_3_predictor,\n      class_predictor: class_predictor_3,\n    };\n    const box_predictor_4 = {\n      box_encoding_predictor: box_encoding_4_predictor,\n      class_predictor: class_predictor_4,\n    };\n    const box_predictor_5 = {\n      box_encoding_predictor: box_encoding_5_predictor,\n      class_predictor: class_predictor_5,\n    };\n    return {\n      conv_0,\n      conv_1,\n      conv_2,\n      conv_3,\n      conv_4,\n      conv_5,\n      conv_6,\n      conv_7,\n      box_predictor_0,\n      box_predictor_1,\n      box_predictor_2,\n      box_predictor_3,\n      box_predictor_4,\n      box_predictor_5,\n    };\n  }\n\n  return {\n    extractMobilenetV1Params,\n    extractPredictionLayerParams,\n  };\n}\n\nexport function extractParams(weights: Float32Array): { params: NetParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n  const {\n    extractWeights,\n    getRemainingWeights,\n  } = extractWeightsFactory(weights);\n  const {\n    extractMobilenetV1Params,\n    extractPredictionLayerParams,\n  } = extractorsFactory(extractWeights, paramMappings);\n  const mobilenetv1 = extractMobilenetV1Params();\n  const prediction_layer = extractPredictionLayerParams();\n  const extra_dim = tf.tensor3d(\n    extractWeights(5118 * 4),\n    [1, 5118, 4],\n  );\n  const output_layer = {\n    extra_dim,\n  };\n  paramMappings.push({ paramPath: 'output_layer/extra_dim' });\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`);\n  }\n\n  return {\n    params: {\n      mobilenetv1,\n      prediction_layer,\n      output_layer,\n    },\n    paramMappings,\n  };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { ConvParams, disposeUnusedWeightTensors, extractWeightEntryFactory, ParamMapping } from '../common/index';\nimport { isTensor3D } from '../utils/index';\nimport { BoxPredictionParams, MobileNetV1, NetParams, PointwiseConvParams, PredictionLayerParams } from './types';\n\nfunction extractorsFactory(weightMap: any, paramMappings: ParamMapping[]) {\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractPointwiseConvParams(prefix: string, idx: number, mappedPrefix: string): PointwiseConvParams {\n    const filters = extractWeightEntry(`${prefix}/Conv2d_${idx}_pointwise/weights`, 4, `${mappedPrefix}/filters`);\n    const batch_norm_offset = extractWeightEntry(`${prefix}/Conv2d_${idx}_pointwise/convolution_bn_offset`, 1, `${mappedPrefix}/batch_norm_offset`);\n    return { filters, batch_norm_offset };\n  }\n\n  function extractConvPairParams(idx: number): MobileNetV1.ConvPairParams {\n    const mappedPrefix = `mobilenetv1/conv_${idx}`;\n    const prefixDepthwiseConv = `MobilenetV1/Conv2d_${idx}_depthwise`;\n    const mappedPrefixDepthwiseConv = `${mappedPrefix}/depthwise_conv`;\n    const mappedPrefixPointwiseConv = `${mappedPrefix}/pointwise_conv`;\n\n    const filters = extractWeightEntry(`${prefixDepthwiseConv}/depthwise_weights`, 4, `${mappedPrefixDepthwiseConv}/filters`);\n    const batch_norm_scale = extractWeightEntry(`${prefixDepthwiseConv}/BatchNorm/gamma`, 1, `${mappedPrefixDepthwiseConv}/batch_norm_scale`);\n    const batch_norm_offset = extractWeightEntry(`${prefixDepthwiseConv}/BatchNorm/beta`, 1, `${mappedPrefixDepthwiseConv}/batch_norm_offset`);\n    const batch_norm_mean = extractWeightEntry(`${prefixDepthwiseConv}/BatchNorm/moving_mean`, 1, `${mappedPrefixDepthwiseConv}/batch_norm_mean`);\n    const batch_norm_variance = extractWeightEntry(`${prefixDepthwiseConv}/BatchNorm/moving_variance`, 1, `${mappedPrefixDepthwiseConv}/batch_norm_variance`);\n\n    return {\n      depthwise_conv: {\n        filters,\n        batch_norm_scale,\n        batch_norm_offset,\n        batch_norm_mean,\n        batch_norm_variance,\n      },\n      pointwise_conv: extractPointwiseConvParams('MobilenetV1', idx, mappedPrefixPointwiseConv),\n    };\n  }\n\n  function extractMobilenetV1Params(): MobileNetV1.Params {\n    return {\n      conv_0: extractPointwiseConvParams('MobilenetV1', 0, 'mobilenetv1/conv_0'),\n      conv_1: extractConvPairParams(1),\n      conv_2: extractConvPairParams(2),\n      conv_3: extractConvPairParams(3),\n      conv_4: extractConvPairParams(4),\n      conv_5: extractConvPairParams(5),\n      conv_6: extractConvPairParams(6),\n      conv_7: extractConvPairParams(7),\n      conv_8: extractConvPairParams(8),\n      conv_9: extractConvPairParams(9),\n      conv_10: extractConvPairParams(10),\n      conv_11: extractConvPairParams(11),\n      conv_12: extractConvPairParams(12),\n      conv_13: extractConvPairParams(13),\n    };\n  }\n\n  function extractConvParams(prefix: string, mappedPrefix: string): ConvParams {\n    const filters = extractWeightEntry(`${prefix}/weights`, 4, `${mappedPrefix}/filters`);\n    const bias = extractWeightEntry(`${prefix}/biases`, 1, `${mappedPrefix}/bias`);\n    return { filters, bias };\n  }\n\n  function extractBoxPredictorParams(idx: number): BoxPredictionParams {\n    const box_encoding_predictor = extractConvParams(\n      `Prediction/BoxPredictor_${idx}/BoxEncodingPredictor`,\n      `prediction_layer/box_predictor_${idx}/box_encoding_predictor`,\n    );\n    const class_predictor = extractConvParams(\n      `Prediction/BoxPredictor_${idx}/ClassPredictor`,\n      `prediction_layer/box_predictor_${idx}/class_predictor`,\n    );\n    return { box_encoding_predictor, class_predictor };\n  }\n\n  function extractPredictionLayerParams(): PredictionLayerParams {\n    return {\n      conv_0: extractPointwiseConvParams('Prediction', 0, 'prediction_layer/conv_0'),\n      conv_1: extractPointwiseConvParams('Prediction', 1, 'prediction_layer/conv_1'),\n      conv_2: extractPointwiseConvParams('Prediction', 2, 'prediction_layer/conv_2'),\n      conv_3: extractPointwiseConvParams('Prediction', 3, 'prediction_layer/conv_3'),\n      conv_4: extractPointwiseConvParams('Prediction', 4, 'prediction_layer/conv_4'),\n      conv_5: extractPointwiseConvParams('Prediction', 5, 'prediction_layer/conv_5'),\n      conv_6: extractPointwiseConvParams('Prediction', 6, 'prediction_layer/conv_6'),\n      conv_7: extractPointwiseConvParams('Prediction', 7, 'prediction_layer/conv_7'),\n      box_predictor_0: extractBoxPredictorParams(0),\n      box_predictor_1: extractBoxPredictorParams(1),\n      box_predictor_2: extractBoxPredictorParams(2),\n      box_predictor_3: extractBoxPredictorParams(3),\n      box_predictor_4: extractBoxPredictorParams(4),\n      box_predictor_5: extractBoxPredictorParams(5),\n    };\n  }\n\n  return {\n    extractMobilenetV1Params,\n    extractPredictionLayerParams,\n  };\n}\n\nexport function extractParamsFromWeightMap(\n  weightMap: tf.NamedTensorMap,\n): { params: NetParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n  const {\n    extractMobilenetV1Params,\n    extractPredictionLayerParams,\n  } = extractorsFactory(weightMap, paramMappings);\n  const extra_dim = weightMap['Output/extra_dim'];\n  paramMappings.push({ originalPath: 'Output/extra_dim', paramPath: 'output_layer/extra_dim' });\n  if (!isTensor3D(extra_dim)) {\n    throw new Error(`expected weightMap['Output/extra_dim'] to be a Tensor3D, instead have ${extra_dim}`);\n  }\n\n  const params = {\n    mobilenetv1: extractMobilenetV1Params(),\n    prediction_layer: extractPredictionLayerParams(),\n    output_layer: {\n      extra_dim,\n    },\n  };\n\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n  return { params, paramMappings };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { PointwiseConvParams } from './types';\n\nexport function pointwiseConvLayer(x: tf.Tensor4D, params: PointwiseConvParams, strides: [number, number]) {\n  return tf.tidy(() => {\n    let out = tf.conv2d(x, params.filters, strides, 'same');\n    out = tf.add(out, params.batch_norm_offset);\n    return tf.clipByValue(out, 0, 6);\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { pointwiseConvLayer } from './pointwiseConvLayer';\nimport { MobileNetV1 } from './types';\n\nconst epsilon = 0.0010000000474974513;\n\nfunction depthwiseConvLayer(x: tf.Tensor4D, params: MobileNetV1.DepthwiseConvParams, strides: [number, number]) {\n  return tf.tidy(() => {\n    let out = tf.depthwiseConv2d(x, params.filters, strides, 'same');\n    out = tf.batchNorm<tf.Rank.R4>(\n      out,\n      params.batch_norm_mean,\n      params.batch_norm_variance,\n      params.batch_norm_offset,\n      params.batch_norm_scale,\n      epsilon,\n    );\n    return tf.clipByValue(out, 0, 6);\n  });\n}\n\nfunction getStridesForLayerIdx(layerIdx: number): [number, number] {\n  return [2, 4, 6, 12].some((idx) => idx === layerIdx) ? [2, 2] : [1, 1];\n}\n\nexport function mobileNetV1(x: tf.Tensor4D, params: MobileNetV1.Params) {\n  return tf.tidy(() => {\n    let conv11;\n    let out = pointwiseConvLayer(x, params.conv_0, [2, 2]);\n\n    const convPairParams = [\n      params.conv_1,\n      params.conv_2,\n      params.conv_3,\n      params.conv_4,\n      params.conv_5,\n      params.conv_6,\n      params.conv_7,\n      params.conv_8,\n      params.conv_9,\n      params.conv_10,\n      params.conv_11,\n      params.conv_12,\n      params.conv_13,\n    ];\n\n    convPairParams.forEach((param, i) => {\n      const layerIdx = i + 1;\n      const depthwiseConvStrides = getStridesForLayerIdx(layerIdx);\n      out = depthwiseConvLayer(out, param.depthwise_conv, depthwiseConvStrides);\n      out = pointwiseConvLayer(out, param.pointwise_conv, [1, 1]);\n      if (layerIdx === 11) conv11 = out;\n    });\n\n    if (conv11 === null) {\n      throw new Error('mobileNetV1 - output of conv layer 11 is null');\n    }\n\n    return {\n      out,\n      conv11: conv11 as any,\n    };\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nfunction IOU(boxes: tf.Tensor2D, i: number, j: number) {\n  const boxesData = boxes.arraySync();\n  const yminI = Math.min(boxesData[i][0], boxesData[i][2]);\n  const xminI = Math.min(boxesData[i][1], boxesData[i][3]);\n  const ymaxI = Math.max(boxesData[i][0], boxesData[i][2]);\n  const xmaxI = Math.max(boxesData[i][1], boxesData[i][3]);\n  const yminJ = Math.min(boxesData[j][0], boxesData[j][2]);\n  const xminJ = Math.min(boxesData[j][1], boxesData[j][3]);\n  const ymaxJ = Math.max(boxesData[j][0], boxesData[j][2]);\n  const xmaxJ = Math.max(boxesData[j][1], boxesData[j][3]);\n  const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n  const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n  if (areaI <= 0 || areaJ <= 0) return 0.0;\n  const intersectionYmin = Math.max(yminI, yminJ);\n  const intersectionXmin = Math.max(xminI, xminJ);\n  const intersectionYmax = Math.min(ymaxI, ymaxJ);\n  const intersectionXmax = Math.min(xmaxI, xmaxJ);\n  const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) * Math.max(intersectionXmax - intersectionXmin, 0.0);\n  return intersectionArea / (areaI + areaJ - intersectionArea);\n}\n\nexport function nonMaxSuppression(\n  boxes: tf.Tensor2D,\n  scores: number[],\n  maxOutputSize: number,\n  iouThreshold: number,\n  scoreThreshold: number,\n): number[] {\n  const numBoxes = boxes.shape[0];\n  const outputSize = Math.min(maxOutputSize, numBoxes);\n\n  const candidates = scores\n    .map((score, boxIndex) => ({ score, boxIndex }))\n    .filter((c) => c.score > scoreThreshold)\n    .sort((c1, c2) => c2.score - c1.score);\n\n  const suppressFunc = (x: number) => (x <= iouThreshold ? 1 : 0);\n  const selected: number[] = [];\n\n  candidates.forEach((c) => {\n    if (selected.length >= outputSize) return;\n    const originalScore = c.score;\n    for (let j = selected.length - 1; j >= 0; --j) {\n      const iou = IOU(boxes, c.boxIndex, selected[j]);\n      if (iou === 0.0) continue;\n      c.score *= suppressFunc(iou);\n      if (c.score <= scoreThreshold) break;\n    }\n    if (originalScore === c.score) {\n      selected.push(c.boxIndex);\n    }\n  });\n  return selected;\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { OutputLayerParams } from './types';\n\nfunction getCenterCoordinatesAndSizesLayer(x: tf.Tensor2D) {\n  const vec = tf.unstack(tf.transpose(x, [1, 0]));\n\n  const sizes = [\n    tf.sub(vec[2], vec[0]),\n    tf.sub(vec[3], vec[1]),\n  ];\n  const centers = [\n    tf.add(vec[0], tf.div(sizes[0], 2)),\n    tf.add(vec[1], tf.div(sizes[1], 2)),\n  ];\n  return { sizes, centers };\n}\n\nfunction decodeBoxesLayer(x0: tf.Tensor2D, x1: tf.Tensor2D) {\n  const { sizes, centers } = getCenterCoordinatesAndSizesLayer(x0);\n\n  const vec = tf.unstack(tf.transpose(x1, [1, 0]));\n  const div0_out = tf.div(tf.mul(tf.exp(tf.div(vec[2], 5)), sizes[0]), 2);\n  const add0_out = tf.add(tf.mul(tf.div(vec[0], 10), sizes[0]), centers[0]);\n  const div1_out = tf.div(tf.mul(tf.exp(tf.div(vec[3], 5)), sizes[1]), 2);\n  const add1_out = tf.add(tf.mul(tf.div(vec[1], 10), sizes[1]), centers[1]);\n\n  return tf.transpose(\n    tf.stack([\n      tf.sub(add0_out, div0_out),\n      tf.sub(add1_out, div1_out),\n      tf.add(add0_out, div0_out),\n      tf.add(add1_out, div1_out),\n    ]),\n    [1, 0],\n  );\n}\n\nexport function outputLayer(boxPredictions: tf.Tensor4D, classPredictions: tf.Tensor4D, params: OutputLayerParams) {\n  return tf.tidy(() => {\n    const batchSize = boxPredictions.shape[0];\n\n    let boxes = decodeBoxesLayer(\n      tf.reshape(tf.tile(params.extra_dim, [batchSize, 1, 1]), [-1, 4]) as tf.Tensor2D,\n      tf.reshape(boxPredictions, [-1, 4]) as tf.Tensor2D,\n    );\n    boxes = tf.reshape(boxes, [batchSize, (boxes.shape[0] / batchSize), 4]);\n\n    const scoresAndClasses = tf.sigmoid(tf.slice(classPredictions, [0, 0, 1], [-1, -1, -1]));\n    let scores = tf.slice(scoresAndClasses, [0, 0, 0], [-1, -1, 1]) as tf.Tensor;\n\n    scores = tf.reshape(scores, [batchSize, scores.shape[1] as number]);\n\n    const boxesByBatch = tf.unstack(boxes) as tf.Tensor2D[];\n    const scoresByBatch = tf.unstack(scores) as tf.Tensor1D[];\n\n    return { boxes: boxesByBatch, scores: scoresByBatch };\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { convLayer } from '../common/index';\nimport { BoxPredictionParams } from './types';\n\nexport function boxPredictionLayer(\n  x: tf.Tensor4D,\n  params: BoxPredictionParams,\n) {\n  return tf.tidy(() => {\n    const batchSize = x.shape[0];\n    const boxPredictionEncoding = tf.reshape(\n      convLayer(x, params.box_encoding_predictor),\n      [batchSize, -1, 1, 4],\n    );\n    const classPrediction = tf.reshape(\n      convLayer(x, params.class_predictor),\n      [batchSize, -1, 3],\n    );\n    return { boxPredictionEncoding, classPrediction };\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { boxPredictionLayer } from './boxPredictionLayer';\nimport { pointwiseConvLayer } from './pointwiseConvLayer';\nimport { PredictionLayerParams } from './types';\n\nexport function predictionLayer(\n  x: tf.Tensor4D,\n  conv11: tf.Tensor4D,\n  params: PredictionLayerParams,\n) {\n  return tf.tidy(() => {\n    const conv0 = pointwiseConvLayer(x, params.conv_0, [1, 1]);\n    const conv1 = pointwiseConvLayer(conv0, params.conv_1, [2, 2]);\n    const conv2 = pointwiseConvLayer(conv1, params.conv_2, [1, 1]);\n    const conv3 = pointwiseConvLayer(conv2, params.conv_3, [2, 2]);\n    const conv4 = pointwiseConvLayer(conv3, params.conv_4, [1, 1]);\n    const conv5 = pointwiseConvLayer(conv4, params.conv_5, [2, 2]);\n    const conv6 = pointwiseConvLayer(conv5, params.conv_6, [1, 1]);\n    const conv7 = pointwiseConvLayer(conv6, params.conv_7, [2, 2]);\n\n    const boxPrediction0 = boxPredictionLayer(conv11, params.box_predictor_0);\n    const boxPrediction1 = boxPredictionLayer(x, params.box_predictor_1);\n    const boxPrediction2 = boxPredictionLayer(conv1, params.box_predictor_2);\n    const boxPrediction3 = boxPredictionLayer(conv3, params.box_predictor_3);\n    const boxPrediction4 = boxPredictionLayer(conv5, params.box_predictor_4);\n    const boxPrediction5 = boxPredictionLayer(conv7, params.box_predictor_5);\n\n    const boxPredictions = tf.concat([\n      boxPrediction0.boxPredictionEncoding,\n      boxPrediction1.boxPredictionEncoding,\n      boxPrediction2.boxPredictionEncoding,\n      boxPrediction3.boxPredictionEncoding,\n      boxPrediction4.boxPredictionEncoding,\n      boxPrediction5.boxPredictionEncoding,\n    ], 1) as tf.Tensor4D;\n\n    const classPredictions = tf.concat([\n      boxPrediction0.classPrediction,\n      boxPrediction1.classPrediction,\n      boxPrediction2.classPrediction,\n      boxPrediction3.classPrediction,\n      boxPrediction4.classPrediction,\n      boxPrediction5.classPrediction,\n    ], 1) as tf.Tensor4D;\n\n    return {\n      boxPredictions,\n      classPredictions,\n    };\n  });\n}\n", "export interface ISsdMobilenetv1Options {\n  minConfidence?: number\n  maxResults?: number\n}\n\nexport class SsdMobilenetv1Options {\n  protected _name = 'SsdMobilenetv1Options';\n\n  private _minConfidence: number;\n\n  private _maxResults: number;\n\n  constructor({ minConfidence, maxResults }: ISsdMobilenetv1Options = {}) {\n    this._minConfidence = minConfidence || 0.5;\n    this._maxResults = maxResults || 100;\n\n    if (typeof this._minConfidence !== 'number' || this._minConfidence <= 0 || this._minConfidence >= 1) {\n      throw new Error(`${this._name} - expected minConfidence to be a number between 0 and 1`);\n    }\n\n    if (typeof this._maxResults !== 'number') {\n      throw new Error(`${this._name} - expected maxResults to be a number`);\n    }\n  }\n\n  get minConfidence(): number { return this._minConfidence; }\n\n  get maxResults(): number { return this._maxResults; }\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { Rect } from '../classes/index';\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { NetInput, TNetInput, toNetInput } from '../dom/index';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeightMap } from './extractParamsFromWeightMap';\nimport { mobileNetV1 } from './mobileNetV1';\nimport { nonMaxSuppression } from './nonMaxSuppression';\nimport { outputLayer } from './outputLayer';\nimport { predictionLayer } from './predictionLayer';\nimport { ISsdMobilenetv1Options, SsdMobilenetv1Options } from './SsdMobilenetv1Options';\nimport { NetParams } from './types';\n\nexport class SsdMobilenetv1 extends NeuralNetwork<NetParams> {\n  constructor() {\n    super('SsdMobilenetv1');\n  }\n\n  public forwardInput(input: NetInput) {\n    const { params } = this;\n    if (!params) throw new Error('SsdMobilenetv1 - load model before inference');\n    return tf.tidy(() => {\n      const batchTensor = tf.cast(input.toBatchTensor(512, false), 'float32');\n      const x = tf.sub(tf.div(batchTensor, 127.5), 1) as tf.Tensor4D; // input is normalized -1..1\n      const features = mobileNetV1(x, params.mobilenetv1);\n      const { boxPredictions, classPredictions } = predictionLayer(features.out, features.conv11, params.prediction_layer);\n      return outputLayer(boxPredictions, classPredictions, params.output_layer);\n    });\n  }\n\n  public async forward(input: TNetInput) {\n    return this.forwardInput(await toNetInput(input));\n  }\n\n  public async locateFaces(input: TNetInput, options: ISsdMobilenetv1Options = {}): Promise<FaceDetection[]> {\n    const { maxResults, minConfidence } = new SsdMobilenetv1Options(options);\n    const netInput = await toNetInput(input);\n    const { boxes: _boxes, scores: _scores } = this.forwardInput(netInput);\n    const boxes = _boxes[0];\n    const scores = _scores[0];\n    for (let i = 1; i < _boxes.length; i++) {\n      _boxes[i].dispose();\n      _scores[i].dispose();\n    }\n    const scoresData = Array.from(scores.dataSync());\n    const iouThreshold = 0.5;\n    const indices = nonMaxSuppression(boxes, scoresData as number[], maxResults, iouThreshold, minConfidence);\n    const reshapedDims = netInput.getReshapedInputDimensions(0);\n    const inputSize = netInput.inputSize as number;\n    const padX = inputSize / reshapedDims.width;\n    const padY = inputSize / reshapedDims.height;\n    const boxesData = boxes.arraySync();\n    const results = indices\n      .map((idx) => {\n        const [top, bottom] = [\n          Math.max(0, boxesData[idx][0]),\n          Math.min(1.0, boxesData[idx][2]),\n        ].map((val) => val * padY);\n        const [left, right] = [\n          Math.max(0, boxesData[idx][1]),\n          Math.min(1.0, boxesData[idx][3]),\n        ].map((val) => val * padX);\n        return new FaceDetection(\n          scoresData[idx] as number,\n          new Rect(left, top, right - left, bottom - top),\n          { height: netInput.getInputHeight(0), width: netInput.getInputWidth(0) },\n        );\n      });\n    boxes.dispose();\n    scores.dispose();\n    return results;\n  }\n\n  protected getDefaultModelName(): string {\n    return 'ssd_mobilenetv1_model';\n  }\n\n  protected extractParamsFromWeightMap(weightMap: tf.NamedTensorMap) {\n    return extractParamsFromWeightMap(weightMap);\n  }\n\n  protected extractParams(weights: Float32Array) {\n    return extractParams(weights);\n  }\n}\n", "import { SsdMobilenetv1 } from './SsdMobilenetv1';\n\nexport * from './SsdMobilenetv1';\nexport * from './SsdMobilenetv1Options';\n\nexport function createSsdMobilenetv1(weights: Float32Array) {\n  const net = new SsdMobilenetv1();\n  net.extractWeights(weights);\n  return net;\n}\n\nexport function createFaceDetectionNet(weights: Float32Array) {\n  return createSsdMobilenetv1(weights);\n}\n\n// alias for backward compatibily\nexport class FaceDetectionNet extends SsdMobilenetv1 {}\n", "import { Point } from '../classes/index';\n\nexport const IOU_THRESHOLD = 0.4;\n\nexport const BOX_ANCHORS = [\n  new Point(0.738768, 0.874946),\n  new Point(2.42204, 2.65704),\n  new Point(4.30971, 7.04493),\n  new Point(10.246, 4.59428),\n  new Point(12.6868, 11.8741),\n];\n\nexport const BOX_ANCHORS_SEPARABLE = [\n  new Point(1.603231, 2.094468),\n  new Point(6.041143, 7.080126),\n  new Point(2.882459, 3.518061),\n  new Point(4.266906, 5.178857),\n  new Point(9.041765, 10.66308),\n];\n\nexport const MEAN_RGB_SEPARABLE: [number, number, number] = [117.001, 114.697, 97.404];\n\nexport const DEFAULT_MODEL_NAME = 'tiny_yolov2_model';\nexport const DEFAULT_MODEL_NAME_SEPARABLE_CONV = 'tiny_yolov2_separable_conv_model';\n", "import { Point } from '../classes/Point';\n\nexport type TinyYolov2Config = {\n  withSeparableConvs: boolean\n  iouThreshold: number\n  anchors: Point[]\n  classes: string[]\n  meanRgb?: [number, number, number]\n  withClassScores?: boolean,\n  filterSizes?: number[]\n  isFirstLayerConv2d?: boolean\n}\n\nconst isNumber = (arg: any) => typeof arg === 'number';\n\nexport function validateConfig(config: any) {\n  if (!config) {\n    throw new Error(`invalid config: ${config}`);\n  }\n\n  if (typeof config.withSeparableConvs !== 'boolean') {\n    throw new Error(`config.withSeparableConvs has to be a boolean, have: ${config.withSeparableConvs}`);\n  }\n\n  if (!isNumber(config.iouThreshold) || config.iouThreshold < 0 || config.iouThreshold > 1.0) {\n    throw new Error(`config.iouThreshold has to be a number between [0, 1], have: ${config.iouThreshold}`);\n  }\n\n  if (\n    !Array.isArray(config.classes)\n    || !config.classes.length\n    || !config.classes.every((c: any) => typeof c === 'string')\n  ) {\n    throw new Error(`config.classes has to be an array class names: string[], have: ${JSON.stringify(config.classes)}`);\n  }\n\n  if (\n    !Array.isArray(config.anchors)\n    || !config.anchors.length\n    || !config.anchors.map((a: any) => a || {}).every((a: any) => isNumber(a.x) && isNumber(a.y))\n  ) {\n    throw new Error(`config.anchors has to be an array of { x: number, y: number }, have: ${JSON.stringify(config.anchors)}`);\n  }\n\n  if (config.meanRgb && (\n    !Array.isArray(config.meanRgb)\n    || config.meanRgb.length !== 3\n    || !config.meanRgb.every(isNumber)\n  )) {\n    throw new Error(`config.meanRgb has to be an array of shape [number, number, number], have: ${JSON.stringify(config.meanRgb)}`);\n  }\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nexport function leaky(x: tf.Tensor4D): tf.Tensor4D {\n  return tf.tidy(() => {\n    const min = tf.mul(x, tf.scalar(0.10000000149011612));\n    return tf.add(tf.relu(tf.sub(x, min)), min);\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { leaky } from './leaky';\nimport { ConvWithBatchNorm } from './types';\n\nexport function convWithBatchNorm(x: tf.Tensor4D, params: ConvWithBatchNorm): tf.Tensor4D {\n  return tf.tidy(() => {\n    let out = tf.pad(x, [[0, 0], [1, 1], [1, 1], [0, 0]]) as tf.Tensor4D;\n    out = tf.conv2d(out, params.conv.filters, [1, 1], 'valid');\n    out = tf.sub(out, params.bn.sub);\n    out = tf.mul(out, params.bn.truediv);\n    out = tf.add(out, params.conv.bias);\n    return leaky(out);\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { SeparableConvParams } from '../common/types';\nimport { leaky } from './leaky';\n\nexport function depthwiseSeparableConv(x: tf.Tensor4D, params: SeparableConvParams): tf.Tensor4D {\n  return tf.tidy(() => {\n    let out = tf.pad(x, [[0, 0], [1, 1], [1, 1], [0, 0]]) as tf.Tensor4D;\n    out = tf.separableConv2d(out, params.depthwise_filter, params.pointwise_filter, [1, 1], 'valid');\n    out = tf.add(out, params.bias);\n    return leaky(out);\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { extractConvParamsFactory } from '../common/index';\nimport { extractSeparableConvParamsFactory } from '../common/extractSeparableConvParamsFactory';\nimport { extractWeightsFactory } from '../common/extractWeightsFactory';\nimport { ExtractWeightsFunction, ParamMapping } from '../common/types';\nimport { TinyYolov2Config } from './config';\nimport { BatchNorm, ConvWithBatchNorm, TinyYolov2NetParams } from './types';\n\nfunction extractorsFactory(extractWeights: ExtractWeightsFunction, paramMappings: ParamMapping[]) {\n  const extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\n\n  function extractBatchNormParams(size: number, mappedPrefix: string): BatchNorm {\n    const sub = tf.tensor1d(extractWeights(size));\n    const truediv = tf.tensor1d(extractWeights(size));\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/sub` },\n      { paramPath: `${mappedPrefix}/truediv` },\n    );\n    return { sub, truediv };\n  }\n\n  function extractConvWithBatchNormParams(channelsIn: number, channelsOut: number, mappedPrefix: string): ConvWithBatchNorm {\n    const conv = extractConvParams(channelsIn, channelsOut, 3, `${mappedPrefix}/conv`);\n    const bn = extractBatchNormParams(channelsOut, `${mappedPrefix}/bn`);\n    return { conv, bn };\n  }\n  const extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings);\n\n  return {\n    extractConvParams,\n    extractConvWithBatchNormParams,\n    extractSeparableConvParams,\n  };\n}\n\nexport function extractParams(\n  weights: Float32Array,\n  config: TinyYolov2Config,\n  boxEncodingSize: number,\n  filterSizes: number[],\n): { params: TinyYolov2NetParams, paramMappings: ParamMapping[] } {\n  const {\n    extractWeights,\n    getRemainingWeights,\n  } = extractWeightsFactory(weights);\n\n  const paramMappings: ParamMapping[] = [];\n  const {\n    extractConvParams,\n    extractConvWithBatchNormParams,\n    extractSeparableConvParams,\n  } = extractorsFactory(extractWeights, paramMappings);\n  let params: TinyYolov2NetParams;\n\n  if (config.withSeparableConvs) {\n    const [s0, s1, s2, s3, s4, s5, s6, s7, s8] = filterSizes;\n    const conv0 = config.isFirstLayerConv2d\n      ? extractConvParams(s0, s1, 3, 'conv0')\n      : extractSeparableConvParams(s0, s1, 'conv0');\n    const conv1 = extractSeparableConvParams(s1, s2, 'conv1');\n    const conv2 = extractSeparableConvParams(s2, s3, 'conv2');\n    const conv3 = extractSeparableConvParams(s3, s4, 'conv3');\n    const conv4 = extractSeparableConvParams(s4, s5, 'conv4');\n    const conv5 = extractSeparableConvParams(s5, s6, 'conv5');\n    const conv6 = s7 ? extractSeparableConvParams(s6, s7, 'conv6') : undefined;\n    const conv7 = s8 ? extractSeparableConvParams(s7, s8, 'conv7') : undefined;\n    const conv8 = extractConvParams(s8 || s7 || s6, 5 * boxEncodingSize, 1, 'conv8');\n    params = {\n      conv0, conv1, conv2, conv3, conv4, conv5, conv6, conv7, conv8,\n    };\n  } else {\n    const [s0, s1, s2, s3, s4, s5, s6, s7, s8] = filterSizes;\n    const conv0 = extractConvWithBatchNormParams(s0, s1, 'conv0');\n    const conv1 = extractConvWithBatchNormParams(s1, s2, 'conv1');\n    const conv2 = extractConvWithBatchNormParams(s2, s3, 'conv2');\n    const conv3 = extractConvWithBatchNormParams(s3, s4, 'conv3');\n    const conv4 = extractConvWithBatchNormParams(s4, s5, 'conv4');\n    const conv5 = extractConvWithBatchNormParams(s5, s6, 'conv5');\n    const conv6 = extractConvWithBatchNormParams(s6, s7, 'conv6');\n    const conv7 = extractConvWithBatchNormParams(s7, s8, 'conv7');\n    const conv8 = extractConvParams(s8, 5 * boxEncodingSize, 1, 'conv8');\n    params = {\n      conv0, conv1, conv2, conv3, conv4, conv5, conv6, conv7, conv8,\n    };\n  }\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`);\n  }\n  return { params, paramMappings };\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { ConvParams } from '../common/index';\nimport { disposeUnusedWeightTensors } from '../common/disposeUnusedWeightTensors';\nimport { loadSeparableConvParamsFactory } from '../common/extractSeparableConvParamsFactory';\nimport { extractWeightEntryFactory } from '../common/extractWeightEntryFactory';\nimport { ParamMapping } from '../common/types';\nimport { TinyYolov2Config } from './config';\nimport { BatchNorm, ConvWithBatchNorm, TinyYolov2NetParams } from './types';\n\nfunction extractorsFactory(weightMap: any, paramMappings: ParamMapping[]) {\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractBatchNormParams(prefix: string): BatchNorm {\n    const sub = extractWeightEntry(`${prefix}/sub`, 1);\n    const truediv = extractWeightEntry(`${prefix}/truediv`, 1);\n    return { sub, truediv };\n  }\n\n  function extractConvParams(prefix: string): ConvParams {\n    const filters = extractWeightEntry(`${prefix}/filters`, 4);\n    const bias = extractWeightEntry(`${prefix}/bias`, 1);\n    return { filters, bias };\n  }\n\n  function extractConvWithBatchNormParams(prefix: string): ConvWithBatchNorm {\n    const conv = extractConvParams(`${prefix}/conv`);\n    const bn = extractBatchNormParams(`${prefix}/bn`);\n    return { conv, bn };\n  }\n\n  const extractSeparableConvParams = loadSeparableConvParamsFactory(extractWeightEntry);\n  return {\n    extractConvParams,\n    extractConvWithBatchNormParams,\n    extractSeparableConvParams,\n  };\n}\n\nexport function extractParamsFromWeightMap(\n  weightMap: tf.NamedTensorMap,\n  config: TinyYolov2Config,\n): { params: TinyYolov2NetParams, paramMappings: ParamMapping[] } {\n  const paramMappings: ParamMapping[] = [];\n\n  const {\n    extractConvParams,\n    extractConvWithBatchNormParams,\n    extractSeparableConvParams,\n  } = extractorsFactory(weightMap, paramMappings);\n\n  let params: TinyYolov2NetParams;\n\n  if (config.withSeparableConvs) {\n    // eslint-disable-next-line no-mixed-operators\n    const numFilters = (config.filterSizes && config.filterSizes.length || 9);\n    params = {\n      conv0: config.isFirstLayerConv2d ? extractConvParams('conv0') : extractSeparableConvParams('conv0'),\n      conv1: extractSeparableConvParams('conv1'),\n      conv2: extractSeparableConvParams('conv2'),\n      conv3: extractSeparableConvParams('conv3'),\n      conv4: extractSeparableConvParams('conv4'),\n      conv5: extractSeparableConvParams('conv5'),\n      conv6: numFilters > 7 ? extractSeparableConvParams('conv6') : undefined,\n      conv7: numFilters > 8 ? extractSeparableConvParams('conv7') : undefined,\n      conv8: extractConvParams('conv8'),\n    };\n  } else {\n    params = {\n      conv0: extractConvWithBatchNormParams('conv0'),\n      conv1: extractConvWithBatchNormParams('conv1'),\n      conv2: extractConvWithBatchNormParams('conv2'),\n      conv3: extractConvWithBatchNormParams('conv3'),\n      conv4: extractConvWithBatchNormParams('conv4'),\n      conv5: extractConvWithBatchNormParams('conv5'),\n      conv6: extractConvWithBatchNormParams('conv6'),\n      conv7: extractConvWithBatchNormParams('conv7'),\n      conv8: extractConvParams('conv8'),\n    };\n  }\n\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n  return { params, paramMappings };\n}\n", "export interface ITinyYolov2Options {\n  inputSize?: number\n  scoreThreshold?: number\n}\n\nexport class TinyYolov2Options {\n  protected _name = 'TinyYolov2Options';\n\n  private _inputSize: number;\n\n  private _scoreThreshold: number;\n\n  constructor({ inputSize, scoreThreshold }: ITinyYolov2Options = {}) {\n    this._inputSize = inputSize || 416;\n    this._scoreThreshold = scoreThreshold || 0.5;\n\n    if (typeof this._inputSize !== 'number' || this._inputSize % 32 !== 0) {\n      throw new Error(`${this._name} - expected inputSize to be a number divisible by 32`);\n    }\n\n    if (typeof this._scoreThreshold !== 'number' || this._scoreThreshold <= 0 || this._scoreThreshold >= 1) {\n      throw new Error(`${this._name} - expected scoreThreshold to be a number between 0 and 1`);\n    }\n  }\n\n  get inputSize(): number { return this._inputSize; }\n\n  get scoreThreshold(): number { return this._scoreThreshold; }\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { BoundingBox } from '../classes/BoundingBox';\nimport { Dimensions } from '../classes/Dimensions';\nimport { ObjectDetection } from '../classes/ObjectDetection';\nimport { convLayer } from '../common/index';\nimport { ConvParams, SeparableConvParams } from '../common/types';\nimport { toNetInput } from '../dom/index';\nimport { NetInput } from '../dom/NetInput';\nimport { TNetInput } from '../dom/types';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { sigmoid } from '../ops/index';\nimport { nonMaxSuppression } from '../ops/nonMaxSuppression';\nimport { normalize } from '../ops/normalize';\nimport { TinyYolov2Config, validateConfig } from './config';\nimport { convWithBatchNorm } from './convWithBatchNorm';\nimport { depthwiseSeparableConv } from './depthwiseSeparableConv';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeightMap } from './extractParamsFromWeightMap';\nimport { leaky } from './leaky';\nimport { ITinyYolov2Options, TinyYolov2Options } from './TinyYolov2Options';\nimport { DefaultTinyYolov2NetParams, MobilenetParams, TinyYolov2NetParams } from './types';\n\nexport class TinyYolov2Base extends NeuralNetwork<TinyYolov2NetParams> {\n  public static DEFAULT_FILTER_SIZES = [3, 16, 32, 64, 128, 256, 512, 1024, 1024];\n\n  private _config: TinyYolov2Config;\n\n  constructor(config: TinyYolov2Config) {\n    super('TinyYolov2');\n    validateConfig(config);\n    this._config = config;\n  }\n\n  public get config(): TinyYolov2Config {\n    return this._config;\n  }\n\n  public get withClassScores(): boolean {\n    return this.config.withClassScores || this.config.classes.length > 1;\n  }\n\n  public get boxEncodingSize(): number {\n    return 5 + (this.withClassScores ? this.config.classes.length : 0);\n  }\n\n  public runTinyYolov2(x: tf.Tensor4D, params: DefaultTinyYolov2NetParams): tf.Tensor4D {\n    let out = convWithBatchNorm(x, params.conv0);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv1);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv2);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv3);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv4);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv5);\n    out = tf.maxPool(out, [2, 2], [1, 1], 'same');\n    out = convWithBatchNorm(out, params.conv6);\n    out = convWithBatchNorm(out, params.conv7);\n    return convLayer(out, params.conv8, 'valid', false);\n  }\n\n  public runMobilenet(x: tf.Tensor4D, params: MobilenetParams): tf.Tensor4D {\n    let out = this.config.isFirstLayerConv2d\n      ? leaky(convLayer(x, params.conv0 as ConvParams, 'valid', false))\n      : depthwiseSeparableConv(x, params.conv0 as SeparableConvParams);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv1);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv2);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv3);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv4);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv5);\n    out = tf.maxPool(out, [2, 2], [1, 1], 'same');\n    out = params.conv6 ? depthwiseSeparableConv(out, params.conv6) : out;\n    out = params.conv7 ? depthwiseSeparableConv(out, params.conv7) : out;\n    return convLayer(out, params.conv8, 'valid', false);\n  }\n\n  public forwardInput(input: NetInput, inputSize: number): tf.Tensor4D {\n    const { params } = this;\n\n    if (!params) {\n      throw new Error('TinyYolov2 - load model before inference');\n    }\n\n    return tf.tidy(() => {\n      let batchTensor = tf.cast(input.toBatchTensor(inputSize, false), 'float32');\n      batchTensor = this.config.meanRgb\n        ? normalize(batchTensor, this.config.meanRgb)\n        : batchTensor;\n      batchTensor = batchTensor.div(255) as tf.Tensor4D;\n      return this.config.withSeparableConvs\n        ? this.runMobilenet(batchTensor, params as MobilenetParams)\n        : this.runTinyYolov2(batchTensor, params as DefaultTinyYolov2NetParams);\n    });\n  }\n\n  public async forward(input: TNetInput, inputSize: number): Promise<tf.Tensor4D> {\n    return this.forwardInput(await toNetInput(input), inputSize);\n  }\n\n  public async detect(input: TNetInput, forwardParams: ITinyYolov2Options = {}): Promise<ObjectDetection[]> {\n    const { inputSize, scoreThreshold } = new TinyYolov2Options(forwardParams);\n    const netInput = await toNetInput(input);\n    const out = await this.forwardInput(netInput, inputSize);\n    const out0 = tf.tidy(() => tf.unstack(out)[0].expandDims()) as tf.Tensor4D;\n    const inputDimensions = {\n      width: netInput.getInputWidth(0),\n      height: netInput.getInputHeight(0),\n    };\n\n    const results = await this.extractBoxes(out0, netInput.getReshapedInputDimensions(0), scoreThreshold);\n    out.dispose();\n    out0.dispose();\n\n    const boxes = results.map((res) => res.box);\n    const scores = results.map((res) => res.score);\n    const classScores = results.map((res) => res.classScore);\n    const classNames = results.map((res) => this.config.classes[res.label]);\n\n    const indices = nonMaxSuppression(\n      boxes.map((box) => box.rescale(inputSize)),\n      scores,\n      this.config.iouThreshold,\n      true,\n    );\n\n    const detections = indices.map((idx) => new ObjectDetection(\n      scores[idx],\n      classScores[idx],\n      classNames[idx],\n      boxes[idx],\n      inputDimensions,\n    ));\n    return detections;\n  }\n\n  protected getDefaultModelName(): string {\n    return '';\n  }\n\n  protected extractParamsFromWeightMap(weightMap: tf.NamedTensorMap) {\n    return extractParamsFromWeightMap(weightMap, this.config);\n  }\n\n  protected extractParams(weights: Float32Array) {\n    const filterSizes = this.config.filterSizes || TinyYolov2Base.DEFAULT_FILTER_SIZES;\n\n    const numFilters = filterSizes ? filterSizes.length : undefined;\n    if (numFilters !== 7 && numFilters !== 8 && numFilters !== 9) {\n      throw new Error(`TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found ${numFilters} filterSizes in config`);\n    }\n    return extractParams(weights, this.config, this.boxEncodingSize, filterSizes);\n  }\n\n  protected async extractBoxes(\n    outputTensor: tf.Tensor4D,\n    inputBlobDimensions: Dimensions,\n    scoreThreshold?: number,\n  ) {\n    const { width, height } = inputBlobDimensions;\n    const inputSize = Math.max(width, height);\n    const correctionFactorX = inputSize / width;\n    const correctionFactorY = inputSize / height;\n\n    const numCells = outputTensor.shape[1];\n    const numBoxes = this.config.anchors.length;\n\n    const [boxesTensor, scoresTensor, classScoresTensor] = tf.tidy(() => {\n      const reshaped = outputTensor.reshape([numCells, numCells, numBoxes, this.boxEncodingSize]);\n\n      const boxes = reshaped.slice([0, 0, 0, 0], [numCells, numCells, numBoxes, 4]);\n      const scores = reshaped.slice([0, 0, 0, 4], [numCells, numCells, numBoxes, 1]);\n      const classScores = this.withClassScores\n        ? tf.softmax(reshaped.slice([0, 0, 0, 5], [numCells, numCells, numBoxes, this.config.classes.length]), 3)\n        : tf.scalar(0);\n      return [boxes, scores, classScores];\n    });\n\n    const results = [] as any;\n    const scoresData = await scoresTensor.array();\n    const boxesData = await boxesTensor.array();\n    for (let row = 0; row < numCells; row++) {\n      for (let col = 0; col < numCells; col++) {\n        for (let anchor = 0; anchor < numBoxes; anchor++) {\n          const score = sigmoid(scoresData[row][col][anchor][0]);\n          if (!scoreThreshold || score > scoreThreshold) {\n            const ctX = ((col + sigmoid(boxesData[row][col][anchor][0])) / numCells) * correctionFactorX;\n            const ctY = ((row + sigmoid(boxesData[row][col][anchor][1])) / numCells) * correctionFactorY;\n            const widthLocal = ((Math.exp(boxesData[row][col][anchor][2]) * this.config.anchors[anchor].x) / numCells) * correctionFactorX;\n            const heightLocal = ((Math.exp(boxesData[row][col][anchor][3]) * this.config.anchors[anchor].y) / numCells) * correctionFactorY;\n            const x = (ctX - (widthLocal / 2));\n            const y = (ctY - (heightLocal / 2));\n            const pos = { row, col, anchor };\n            const { classScore, label } = this.withClassScores\n              ? await this.extractPredictedClass(classScoresTensor as tf.Tensor4D, pos)\n              : { classScore: 1, label: 0 };\n            results.push({\n              box: new BoundingBox(x, y, x + widthLocal, y + heightLocal),\n              score,\n              classScore: score * classScore,\n              label,\n              ...pos,\n            });\n          }\n        }\n      }\n    }\n\n    boxesTensor.dispose();\n    scoresTensor.dispose();\n    classScoresTensor.dispose();\n    return results;\n  }\n\n  private async extractPredictedClass(classesTensor: tf.Tensor4D, pos: { row: number, col: number, anchor: number }) {\n    const { row, col, anchor } = pos;\n    const classesData = await classesTensor.array();\n    return Array(this.config.classes.length).fill(0)\n      .map((_, i) => classesData[row][col][anchor][i])\n      .map((classScore, label) => ({\n        classScore,\n        label,\n      }))\n      .reduce((max, curr) => (max.classScore > curr.classScore ? max : curr));\n  }\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { FaceDetection, Point } from '../classes/index';\nimport { ParamMapping } from '../common/types';\nimport { TNetInput } from '../dom/types';\nimport {\n  BOX_ANCHORS,\n  BOX_ANCHORS_SEPARABLE,\n  DEFAULT_MODEL_NAME,\n  DEFAULT_MODEL_NAME_SEPARABLE_CONV,\n  IOU_THRESHOLD,\n  MEAN_RGB_SEPARABLE,\n} from './const';\nimport { TinyYolov2Base } from './TinyYolov2Base';\nimport { ITinyYolov2Options } from './TinyYolov2Options';\nimport { TinyYolov2NetParams } from './types';\n\nexport class TinyYolov2 extends TinyYolov2Base {\n  constructor(withSeparableConvs = true) {\n    const config = {\n      withSeparableConvs,\n      iouThreshold: IOU_THRESHOLD,\n      classes: ['face'],\n      ...(withSeparableConvs\n        ? {\n          anchors: BOX_ANCHORS_SEPARABLE,\n          meanRgb: MEAN_RGB_SEPARABLE,\n        }\n        : {\n          anchors: BOX_ANCHORS,\n          withClassScores: true,\n        }),\n    };\n\n    super(config);\n  }\n\n  public get withSeparableConvs(): boolean {\n    return this.config.withSeparableConvs;\n  }\n\n  public get anchors(): Point[] {\n    return this.config.anchors;\n  }\n\n  public async locateFaces(input: TNetInput, forwardParams: ITinyYolov2Options): Promise<FaceDetection[]> {\n    const objectDetections = await this.detect(input, forwardParams);\n    return objectDetections.map((det) => new FaceDetection(det.score, det.relativeBox, { width: det.imageWidth, height: det.imageHeight }));\n  }\n\n  protected override getDefaultModelName(): string {\n    return this.withSeparableConvs ? DEFAULT_MODEL_NAME_SEPARABLE_CONV : DEFAULT_MODEL_NAME;\n  }\n\n  protected override extractParamsFromWeightMap(weightMap: tf.NamedTensorMap): { params: TinyYolov2NetParams, paramMappings: ParamMapping[] } {\n    return super.extractParamsFromWeightMap(weightMap);\n  }\n}\n", "import { TinyYolov2 } from './TinyYolov2';\n\nexport * from './TinyYolov2Options';\nexport * from './config';\nexport * from './types';\nexport { TinyYolov2 };\n\nexport function createTinyYolov2(weights: Float32Array, withSeparableConvs = true) {\n  const net = new TinyYolov2(withSeparableConvs);\n  net.extractWeights(weights);\n  return net;\n}\n", "import { ITinyYolov2Options, TinyYolov2Options } from '../tinyYolov2/index';\n\nexport type ITinyFaceDetectorOptions = ITinyYolov2Options\n\nexport class TinyFaceDetectorOptions extends TinyYolov2Options {\n  protected override _name = 'TinyFaceDetectorOptions';\n}\n", "export class ComposableTask<T> {\n  // eslint-disable-next-line no-unused-vars\n  public async then(onfulfilled: (value: T) => T | PromiseLike<T>): Promise<T> {\n    return onfulfilled(await this.run());\n  }\n\n  public async run(): Promise<T> {\n    throw new Error('ComposableTask - run is not implemented');\n  }\n}\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { extractFaces, extractFaceTensors, TNetInput } from '../dom/index';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { isWithFaceLandmarks, WithFaceLandmarks } from '../factories/WithFaceLandmarks';\n\nexport async function extractAllFacesAndComputeResults<TSource extends WithFaceDetection<{}>, TResult>(\n  parentResults: TSource[],\n  input: TNetInput,\n  // eslint-disable-next-line no-unused-vars\n  computeResults: (faces: Array<HTMLCanvasElement | tf.Tensor3D>) => Promise<TResult>,\n  extractedFaces?: Array<HTMLCanvasElement | tf.Tensor3D> | null,\n  // eslint-disable-next-line no-unused-vars\n  getRectForAlignment: (parentResult: WithFaceLandmarks<TSource, any>) => FaceDetection = ({ alignedRect }) => alignedRect,\n) {\n  const faceBoxes = parentResults.map((parentResult) => (isWithFaceLandmarks(parentResult)\n    ? getRectForAlignment(parentResult)\n    : parentResult.detection));\n  const faces: Array<HTMLCanvasElement | tf.Tensor3D> = extractedFaces || (\n    input instanceof tf.Tensor\n      ? await extractFaceTensors(input, faceBoxes)\n      : await extractFaces(input, faceBoxes)\n  );\n  const results = await computeResults(faces);\n  faces.forEach((f) => f instanceof tf.Tensor && f.dispose());\n  return results;\n}\n\nexport async function extractSingleFaceAndComputeResult<TSource extends WithFaceDetection<{}>, TResult>(\n  parentResult: TSource,\n  input: TNetInput,\n  // eslint-disable-next-line no-unused-vars\n  computeResult: (face: HTMLCanvasElement | tf.Tensor3D) => Promise<TResult>,\n  extractedFaces?: Array<HTMLCanvasElement | tf.Tensor3D> | null,\n  // eslint-disable-next-line no-unused-vars\n  getRectForAlignment?: (parentResultLocal: WithFaceLandmarks<TSource, any>) => FaceDetection,\n) {\n  return extractAllFacesAndComputeResults<TSource, TResult>(\n    [parentResult],\n    input,\n    async (faces) => computeResult(faces[0]),\n    extractedFaces,\n    getRectForAlignment,\n  );\n}\n", "import { Point } from '../classes/index';\n\nexport const IOU_THRESHOLD = 0.4;\n\nexport const BOX_ANCHORS = [\n  new Point(1.603231, 2.094468),\n  new Point(6.041143, 7.080126),\n  new Point(2.882459, 3.518061),\n  new Point(4.266906, 5.178857),\n  new Point(9.041765, 10.66308),\n];\n\nexport const MEAN_RGB: [number, number, number] = [117.001, 114.697, 97.404];\n", "import * as tf from '../../dist/tfjs.esm';\n\nimport { FaceDetection, Point } from '../classes/index';\nimport { ParamMapping } from '../common/index';\nimport { TNetInput } from '../dom/index';\nimport { ITinyYolov2Options } from '../tinyYolov2/index';\nimport { TinyYolov2Base } from '../tinyYolov2/TinyYolov2Base';\nimport { TinyYolov2NetParams } from '../tinyYolov2/types';\nimport { BOX_ANCHORS, IOU_THRESHOLD, MEAN_RGB } from './const';\n\nexport class TinyFaceDetector extends TinyYolov2Base {\n  constructor() {\n    const config = {\n      withSeparableConvs: true,\n      iouThreshold: IOU_THRESHOLD,\n      classes: ['face'],\n      anchors: BOX_ANCHORS,\n      meanRgb: MEAN_RGB,\n      isFirstLayerConv2d: true,\n      filterSizes: [3, 16, 32, 64, 128, 256, 512],\n    };\n\n    super(config);\n  }\n\n  public get anchors(): Point[] {\n    return this.config.anchors;\n  }\n\n  public async locateFaces(input: TNetInput, forwardParams: ITinyYolov2Options): Promise<FaceDetection[]> {\n    const objectDetections = await this.detect(input, forwardParams);\n    return objectDetections.map((det) => new FaceDetection(det.score, det.relativeBox, { width: det.imageWidth, height: det.imageHeight }));\n  }\n\n  protected override getDefaultModelName(): string {\n    return 'tiny_face_detector_model';\n  }\n\n  protected override extractParamsFromWeightMap(weightMap: tf.NamedTensorMap): { params: TinyYolov2NetParams, paramMappings: ParamMapping[] } {\n    return super.extractParamsFromWeightMap(weightMap);\n  }\n}\n", "import { AgeGenderNet } from '../ageGenderNet/AgeGenderNet';\nimport { AgeAndGenderPrediction } from '../ageGenderNet/types';\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { TNetInput } from '../dom/index';\nimport { FaceExpressionNet } from '../faceExpressionNet/FaceExpressionNet';\nimport { FaceExpressions } from '../faceExpressionNet/FaceExpressions';\nimport { FaceLandmark68Net } from '../faceLandmarkNet/FaceLandmark68Net';\nimport { FaceLandmark68TinyNet } from '../faceLandmarkNet/FaceLandmark68TinyNet';\nimport { FaceRecognitionNet } from '../faceRecognitionNet/FaceRecognitionNet';\nimport { SsdMobilenetv1 } from '../ssdMobilenetv1/SsdMobilenetv1';\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1/SsdMobilenetv1Options';\nimport { TinyFaceDetector } from '../tinyFaceDetector/TinyFaceDetector';\nimport { TinyFaceDetectorOptions } from '../tinyFaceDetector/TinyFaceDetectorOptions';\nimport { ITinyYolov2Options, TinyYolov2 } from '../tinyYolov2/index';\n\nexport const nets = {\n  ssdMobilenetv1: new SsdMobilenetv1(),\n  tinyFaceDetector: new TinyFaceDetector(),\n  tinyYolov2: new TinyYolov2(),\n  faceLandmark68Net: new FaceLandmark68Net(),\n  faceLandmark68TinyNet: new FaceLandmark68TinyNet(),\n  faceRecognitionNet: new FaceRecognitionNet(),\n  faceExpressionNet: new FaceExpressionNet(),\n  ageGenderNet: new AgeGenderNet(),\n};\n\n/**\n * Attempts to detect all faces in an image using SSD Mobilenetv1 Network.\n *\n * @param input The input image.\n * @param options (optional, default: see SsdMobilenetv1Options constructor for default parameters).\n * @returns Bounding box of each face with score.\n */\nexport const ssdMobilenetv1 = (input: TNetInput, options: SsdMobilenetv1Options): Promise<FaceDetection[]> => nets.ssdMobilenetv1.locateFaces(input, options);\n\n/**\n * Attempts to detect all faces in an image using the Tiny Face Detector.\n *\n * @param input The input image.\n * @param options (optional, default: see TinyFaceDetectorOptions constructor for default parameters).\n * @returns Bounding box of each face with score.\n */\nexport const tinyFaceDetector = (input: TNetInput, options: TinyFaceDetectorOptions): Promise<FaceDetection[]> => nets.tinyFaceDetector.locateFaces(input, options);\n\n/**\n * Attempts to detect all faces in an image using the Tiny Yolov2 Network.\n *\n * @param input The input image.\n * @param options (optional, default: see TinyYolov2Options constructor for default parameters).\n * @returns Bounding box of each face with score.\n */\nexport const tinyYolov2 = (input: TNetInput, options: ITinyYolov2Options): Promise<FaceDetection[]> => nets.tinyYolov2.locateFaces(input, options);\n\n/**\n * Detects the 68 point face landmark positions of the face shown in an image.\n *\n * @param inputs The face image extracted from the bounding box of a face. Can\n * also be an array of input images, which will be batch processed.\n * @returns 68 point face landmarks or array thereof in case of batch input.\n */\nexport const detectFaceLandmarks = (input: TNetInput): Promise<FaceLandmarks68 | FaceLandmarks68[]> => nets.faceLandmark68Net.detectLandmarks(input);\n\n/**\n * Detects the 68 point face landmark positions of the face shown in an image\n * using a tinier version of the 68 point face landmark model, which is slightly\n * faster at inference, but also slightly less accurate.\n *\n * @param inputs The face image extracted from the bounding box of a face. Can\n * also be an array of input images, which will be batch processed.\n * @returns 68 point face landmarks or array thereof in case of batch input.\n */\nexport const detectFaceLandmarksTiny = (input: TNetInput): Promise<FaceLandmarks68 | FaceLandmarks68[]> => nets.faceLandmark68TinyNet.detectLandmarks(input);\n\n/**\n * Computes a 128 entry vector (face descriptor / face embeddings) from the face shown in an image,\n * which uniquely represents the features of that persons face. The computed face descriptor can\n * be used to measure the similarity between faces, by computing the euclidean distance of two\n * face descriptors.\n *\n * @param inputs The face image extracted from the aligned bounding box of a face. Can\n * also be an array of input images, which will be batch processed.\n * @returns Face descriptor with 128 entries or array thereof in case of batch input.\n */\nexport const computeFaceDescriptor = (input: TNetInput): Promise<Float32Array | Float32Array[]> => nets.faceRecognitionNet.computeFaceDescriptor(input);\n\n/**\n * Recognizes the facial expressions from a face image.\n *\n * @param inputs The face image extracted from the bounding box of a face. Can\n * also be an array of input images, which will be batch processed.\n * @returns Facial expressions with corresponding probabilities or array thereof in case of batch input.\n */\nexport const recognizeFaceExpressions = (input: TNetInput): Promise<FaceExpressions | FaceExpressions[]> => nets.faceExpressionNet.predictExpressions(input);\n\n/**\n * Predicts age and gender from a face image.\n *\n * @param inputs The face image extracted from the bounding box of a face. Can\n * also be an array of input images, which will be batch processed.\n * @returns Predictions with age, gender and gender probability or array thereof in case of batch input.\n */\nexport const predictAgeAndGender = (input: TNetInput): Promise<AgeAndGenderPrediction | AgeAndGenderPrediction[]> => nets.ageGenderNet.predictAgeAndGender(input);\n\nexport const loadSsdMobilenetv1Model = (url: string) => nets.ssdMobilenetv1.load(url);\nexport const loadTinyFaceDetectorModel = (url: string) => nets.tinyFaceDetector.load(url);\nexport const loadTinyYolov2Model = (url: string) => nets.tinyYolov2.load(url);\nexport const loadFaceLandmarkModel = (url: string) => nets.faceLandmark68Net.load(url);\nexport const loadFaceLandmarkTinyModel = (url: string) => nets.faceLandmark68TinyNet.load(url);\nexport const loadFaceRecognitionModel = (url: string) => nets.faceRecognitionNet.load(url);\nexport const loadFaceExpressionModel = (url: string) => nets.faceExpressionNet.load(url);\nexport const loadAgeGenderModel = (url: string) => nets.ageGenderNet.load(url);\n\n// backward compatibility\nexport const loadFaceDetectionModel = loadSsdMobilenetv1Model;\nexport const locateFaces = ssdMobilenetv1;\nexport const detectLandmarks = detectFaceLandmarks;\n", "/* eslint-disable max-classes-per-file */\nimport * as tf from '../../dist/tfjs.esm';\n\nimport { TNetInput } from '../dom/index';\nimport { FaceExpressions } from '../faceExpressionNet/FaceExpressions';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { extendWithFaceExpressions, WithFaceExpressions } from '../factories/WithFaceExpressions';\nimport { WithFaceLandmarks } from '../factories/WithFaceLandmarks';\nimport { ComposableTask } from './ComposableTask';\nimport { ComputeAllFaceDescriptorsTask, ComputeSingleFaceDescriptorTask } from './ComputeFaceDescriptorsTasks';\nimport { extractAllFacesAndComputeResults, extractSingleFaceAndComputeResult } from './extractFacesAndComputeResults';\nimport { nets } from './nets';\nimport { PredictAllAgeAndGenderTask, PredictAllAgeAndGenderWithFaceAlignmentTask, PredictSingleAgeAndGenderTask, PredictSingleAgeAndGenderWithFaceAlignmentTask } from './PredictAgeAndGenderTask';\n\nexport class PredictFaceExpressionsTaskBase<TReturn, TParentReturn> extends ComposableTask<TReturn> {\n  constructor(\n    // eslint-disable-next-line no-unused-vars\n    protected parentTask: ComposableTask<TParentReturn> | Promise<TParentReturn>,\n    // eslint-disable-next-line no-unused-vars\n    protected input: TNetInput,\n    // eslint-disable-next-line no-unused-vars\n    protected extractedFaces?: Array<HTMLCanvasElement | tf.Tensor3D>,\n  ) {\n    super();\n  }\n}\n\nexport class PredictAllFaceExpressionsTask<TSource extends WithFaceDetection<{}>> extends PredictFaceExpressionsTaskBase<WithFaceExpressions<TSource>[], TSource[]> {\n  public override async run(): Promise<WithFaceExpressions<TSource>[]> {\n    const parentResults = await this.parentTask;\n\n    const faceExpressionsByFace = await extractAllFacesAndComputeResults<TSource, FaceExpressions[]>(\n      parentResults,\n      this.input,\n      async (faces) => Promise.all(\n        faces.map((face) => nets.faceExpressionNet.predictExpressions(face) as Promise<FaceExpressions>),\n      ),\n      this.extractedFaces,\n    );\n\n    return parentResults.map(\n      (parentResult, i) => extendWithFaceExpressions<TSource>(parentResult, faceExpressionsByFace[i]),\n    );\n  }\n\n  withAgeAndGender() {\n    return new PredictAllAgeAndGenderTask(this, this.input);\n  }\n}\n\nexport class PredictSingleFaceExpressionsTask<TSource extends WithFaceDetection<{}>> extends PredictFaceExpressionsTaskBase<WithFaceExpressions<TSource> | undefined, TSource | undefined> {\n  public override async run(): Promise<WithFaceExpressions<TSource> | undefined> {\n    const parentResult = await this.parentTask;\n    if (!parentResult) {\n      return undefined;\n    }\n\n    const faceExpressions = await extractSingleFaceAndComputeResult<TSource, FaceExpressions>(\n      parentResult,\n      this.input,\n      (face) => nets.faceExpressionNet.predictExpressions(face) as Promise<FaceExpressions>,\n      this.extractedFaces,\n    );\n\n    return extendWithFaceExpressions(parentResult, faceExpressions);\n  }\n\n  withAgeAndGender() {\n    return new PredictSingleAgeAndGenderTask(this, this.input);\n  }\n}\n\nexport class PredictAllFaceExpressionsWithFaceAlignmentTask<TSource extends WithFaceLandmarks<WithFaceDetection<{}>>> extends PredictAllFaceExpressionsTask<TSource> {\n  override withAgeAndGender() {\n    return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  }\n\n  withFaceDescriptors() {\n    return new ComputeAllFaceDescriptorsTask(this, this.input);\n  }\n}\n\nexport class PredictSingleFaceExpressionsWithFaceAlignmentTask<TSource extends WithFaceLandmarks<WithFaceDetection<{}>>> extends PredictSingleFaceExpressionsTask<TSource> {\n  override withAgeAndGender() {\n    return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  }\n\n  withFaceDescriptor() {\n    return new ComputeSingleFaceDescriptorTask(this, this.input);\n  }\n}\n", "/* eslint-disable max-classes-per-file */\nimport * as tf from '../../dist/tfjs.esm';\n\nimport { AgeAndGenderPrediction } from '../ageGenderNet/types';\nimport { TNetInput } from '../dom/index';\nimport { extendWithAge, WithAge } from '../factories/WithAge';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { WithFaceLandmarks } from '../factories/WithFaceLandmarks';\nimport { extendWithGender, WithGender } from '../factories/WithGender';\nimport { ComposableTask } from './ComposableTask';\nimport { ComputeAllFaceDescriptorsTask, ComputeSingleFaceDescriptorTask } from './ComputeFaceDescriptorsTasks';\nimport { extractAllFacesAndComputeResults, extractSingleFaceAndComputeResult } from './extractFacesAndComputeResults';\nimport { nets } from './nets';\nimport { PredictAllFaceExpressionsTask, PredictAllFaceExpressionsWithFaceAlignmentTask, PredictSingleFaceExpressionsTask, PredictSingleFaceExpressionsWithFaceAlignmentTask } from './PredictFaceExpressionsTask';\n\nexport class PredictAgeAndGenderTaskBase<TReturn, TParentReturn> extends ComposableTask<TReturn> {\n  constructor(\n    // eslint-disable-next-line no-unused-vars\n    protected parentTask: ComposableTask<TParentReturn> | Promise<TParentReturn>,\n    // eslint-disable-next-line no-unused-vars\n    protected input: TNetInput,\n    // eslint-disable-next-line no-unused-vars\n    protected extractedFaces?: Array<HTMLCanvasElement | tf.Tensor3D>,\n  ) {\n    super();\n  }\n}\n\nexport class PredictAllAgeAndGenderTask<TSource extends WithFaceDetection<{}>> extends PredictAgeAndGenderTaskBase<WithAge<WithGender<TSource>>[], TSource[]> {\n  public override async run(): Promise<WithAge<WithGender<TSource>>[]> {\n    const parentResults = await this.parentTask;\n    const ageAndGenderByFace = await extractAllFacesAndComputeResults<TSource, AgeAndGenderPrediction[]>(\n      parentResults,\n      this.input,\n      async (faces) => Promise.all(faces.map((face) => nets.ageGenderNet.predictAgeAndGender(face) as Promise<AgeAndGenderPrediction>)),\n      this.extractedFaces,\n    );\n    return parentResults.map((parentResult, i) => {\n      const { age, gender, genderProbability } = ageAndGenderByFace[i];\n      return extendWithAge(extendWithGender(parentResult, gender, genderProbability), age);\n    });\n  }\n\n  withFaceExpressions() {\n    return new PredictAllFaceExpressionsTask(this, this.input);\n  }\n}\n\nexport class PredictSingleAgeAndGenderTask<TSource extends WithFaceDetection<{}>> extends PredictAgeAndGenderTaskBase<WithAge<WithGender<TSource>> | undefined, TSource | undefined> {\n  public override async run(): Promise<WithAge<WithGender<TSource>> | undefined> {\n    const parentResult = await this.parentTask;\n    if (!parentResult) return undefined;\n    const { age, gender, genderProbability } = await extractSingleFaceAndComputeResult<TSource, AgeAndGenderPrediction>(\n      parentResult,\n      this.input,\n      (face) => nets.ageGenderNet.predictAgeAndGender(face) as Promise<AgeAndGenderPrediction>,\n      this.extractedFaces,\n    );\n    return extendWithAge(extendWithGender(parentResult, gender, genderProbability), age);\n  }\n\n  withFaceExpressions() {\n    return new PredictSingleFaceExpressionsTask(this, this.input);\n  }\n}\n\nexport class PredictAllAgeAndGenderWithFaceAlignmentTask<TSource extends WithFaceLandmarks<WithFaceDetection<{}>>> extends PredictAllAgeAndGenderTask<TSource> {\n  override withFaceExpressions() {\n    return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  }\n\n  withFaceDescriptors() {\n    return new ComputeAllFaceDescriptorsTask(this, this.input);\n  }\n}\n\nexport class PredictSingleAgeAndGenderWithFaceAlignmentTask<TSource extends WithFaceLandmarks<WithFaceDetection<{}>>> extends PredictSingleAgeAndGenderTask<TSource> {\n  override withFaceExpressions() {\n    return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  }\n\n  withFaceDescriptor() {\n    return new ComputeSingleFaceDescriptorTask(this, this.input);\n  }\n}\n", "/* eslint-disable max-classes-per-file */\nimport { TNetInput } from '../dom/index';\nimport { extendWithFaceDescriptor, WithFaceDescriptor } from '../factories/WithFaceDescriptor';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { WithFaceLandmarks } from '../factories/WithFaceLandmarks';\nimport { ComposableTask } from './ComposableTask';\nimport { extractAllFacesAndComputeResults, extractSingleFaceAndComputeResult } from './extractFacesAndComputeResults';\nimport { nets } from './nets';\nimport { PredictAllAgeAndGenderWithFaceAlignmentTask, PredictSingleAgeAndGenderWithFaceAlignmentTask } from './PredictAgeAndGenderTask';\nimport { PredictAllFaceExpressionsWithFaceAlignmentTask, PredictSingleFaceExpressionsWithFaceAlignmentTask } from './PredictFaceExpressionsTask';\n\nexport class ComputeFaceDescriptorsTaskBase<TReturn, TParentReturn> extends ComposableTask<TReturn> {\n  constructor(\n    // eslint-disable-next-line no-unused-vars\n    protected parentTask: ComposableTask<TParentReturn> | Promise<TParentReturn>,\n    // eslint-disable-next-line no-unused-vars\n    protected input: TNetInput,\n  ) {\n    super();\n  }\n}\n\nexport class ComputeAllFaceDescriptorsTask<TSource extends WithFaceLandmarks<WithFaceDetection<{}>>> extends ComputeFaceDescriptorsTaskBase<WithFaceDescriptor<TSource>[], TSource[]> {\n  public override async run(): Promise<WithFaceDescriptor<TSource>[]> {\n    const parentResults = await this.parentTask;\n    const descriptors = await extractAllFacesAndComputeResults<TSource, Float32Array[]>(\n      parentResults,\n      this.input,\n      (faces) => Promise.all(faces.map((face) => nets.faceRecognitionNet.computeFaceDescriptor(face) as Promise<Float32Array>)),\n      null,\n      (parentResult) => parentResult.landmarks.align(null, { useDlibAlignment: true }),\n    );\n    return descriptors.map((descriptor, i) => extendWithFaceDescriptor<TSource>(parentResults[i], descriptor));\n  }\n\n  withFaceExpressions() {\n    return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  }\n\n  withAgeAndGender() {\n    return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  }\n}\n\nexport class ComputeSingleFaceDescriptorTask<TSource extends WithFaceLandmarks<WithFaceDetection<{}>>> extends ComputeFaceDescriptorsTaskBase<WithFaceDescriptor<TSource> | undefined, TSource | undefined> {\n  public override async run(): Promise<WithFaceDescriptor<TSource> | undefined> {\n    const parentResult = await this.parentTask;\n    if (!parentResult) return undefined;\n    const descriptor = await extractSingleFaceAndComputeResult<TSource, Float32Array>(\n      parentResult,\n      this.input,\n      (face) => nets.faceRecognitionNet.computeFaceDescriptor(face) as Promise<Float32Array>,\n      null,\n      // eslint-disable-next-line no-shadow, @typescript-eslint/no-shadow\n      (parentResult) => parentResult.landmarks.align(null, { useDlibAlignment: true }),\n    );\n    return extendWithFaceDescriptor(parentResult, descriptor);\n  }\n\n  withFaceExpressions() {\n    return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  }\n\n  withAgeAndGender() {\n    return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  }\n}\n", "/* eslint-disable max-classes-per-file */\nimport * as tf from '../../dist/tfjs.esm';\n\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { extractFaces, extractFaceTensors, TNetInput } from '../dom/index';\nimport { FaceLandmark68Net } from '../faceLandmarkNet/FaceLandmark68Net';\nimport { FaceLandmark68TinyNet } from '../faceLandmarkNet/FaceLandmark68TinyNet';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { extendWithFaceLandmarks, WithFaceLandmarks } from '../factories/WithFaceLandmarks';\nimport { ComposableTask } from './ComposableTask';\nimport { ComputeAllFaceDescriptorsTask, ComputeSingleFaceDescriptorTask } from './ComputeFaceDescriptorsTasks';\nimport { nets } from './nets';\nimport { PredictAllAgeAndGenderWithFaceAlignmentTask, PredictSingleAgeAndGenderWithFaceAlignmentTask } from './PredictAgeAndGenderTask';\nimport { PredictAllFaceExpressionsWithFaceAlignmentTask, PredictSingleFaceExpressionsWithFaceAlignmentTask } from './PredictFaceExpressionsTask';\n\nexport class DetectFaceLandmarksTaskBase<TReturn, TParentReturn> extends ComposableTask<TReturn> {\n  constructor(\n    // eslint-disable-next-line no-unused-vars\n    protected parentTask: ComposableTask<TParentReturn> | Promise<TParentReturn>,\n    // eslint-disable-next-line no-unused-vars\n    protected input: TNetInput,\n    // eslint-disable-next-line no-unused-vars\n    protected useTinyLandmarkNet: boolean,\n  ) {\n    super();\n  }\n\n  protected get landmarkNet(): FaceLandmark68Net | FaceLandmark68TinyNet {\n    return this.useTinyLandmarkNet\n      ? nets.faceLandmark68TinyNet\n      : nets.faceLandmark68Net;\n  }\n}\n\nexport class DetectAllFaceLandmarksTask<TSource extends WithFaceDetection<{}>> extends DetectFaceLandmarksTaskBase<WithFaceLandmarks<TSource>[], TSource[]> {\n  public override async run(): Promise<WithFaceLandmarks<TSource>[]> {\n    const parentResults = await this.parentTask;\n    const detections = parentResults.map((res) => res.detection);\n    const faces: Array<HTMLCanvasElement | tf.Tensor3D> = this.input instanceof tf.Tensor\n      ? await extractFaceTensors(this.input, detections)\n      : await extractFaces(this.input, detections);\n    const faceLandmarksByFace = await Promise.all(\n      faces.map((face) => this.landmarkNet.detectLandmarks(face)),\n    ) as FaceLandmarks68[];\n    faces.forEach((f) => f instanceof tf.Tensor && f.dispose());\n    return parentResults.map((parentResult, i) => extendWithFaceLandmarks<TSource>(parentResult, faceLandmarksByFace[i]));\n  }\n\n  withFaceExpressions() {\n    return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  }\n\n  withAgeAndGender() {\n    return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  }\n\n  withFaceDescriptors() {\n    return new ComputeAllFaceDescriptorsTask(this, this.input);\n  }\n}\n\nexport class DetectSingleFaceLandmarksTask<TSource extends WithFaceDetection<{}>> extends DetectFaceLandmarksTaskBase<WithFaceLandmarks<TSource> | undefined, TSource | undefined> {\n  public override async run(): Promise<WithFaceLandmarks<TSource> | undefined> {\n    const parentResult = await this.parentTask;\n    if (!parentResult) {\n      return undefined;\n    }\n    const { detection } = parentResult;\n    const faces: Array<HTMLCanvasElement | tf.Tensor3D> = this.input instanceof tf.Tensor\n      ? await extractFaceTensors(this.input, [detection])\n      : await extractFaces(this.input, [detection]);\n    const landmarks = await this.landmarkNet.detectLandmarks(faces[0]) as FaceLandmarks68;\n    faces.forEach((f) => f instanceof tf.Tensor && f.dispose());\n    return extendWithFaceLandmarks<TSource>(parentResult, landmarks);\n  }\n\n  withFaceExpressions() {\n    return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  }\n\n  withAgeAndGender() {\n    return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  }\n\n  withFaceDescriptor() {\n    return new ComputeSingleFaceDescriptorTask(this, this.input);\n  }\n}\n", "/* eslint-disable max-classes-per-file */\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { TNetInput } from '../dom/index';\nimport { extendWithFaceDetection, WithFaceDetection } from '../factories/WithFaceDetection';\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1/SsdMobilenetv1Options';\nimport { TinyFaceDetectorOptions } from '../tinyFaceDetector/TinyFaceDetectorOptions';\nimport { TinyYolov2Options } from '../tinyYolov2/index';\nimport { ComposableTask } from './ComposableTask';\nimport { DetectAllFaceLandmarksTask, DetectSingleFaceLandmarksTask } from './DetectFaceLandmarksTasks';\nimport { nets } from './nets';\nimport { PredictAllAgeAndGenderTask, PredictSingleAgeAndGenderTask } from './PredictAgeAndGenderTask';\nimport { PredictAllFaceExpressionsTask, PredictSingleFaceExpressionsTask } from './PredictFaceExpressionsTask';\nimport { FaceDetectionOptions } from './types';\n\nexport class DetectFacesTaskBase<TReturn> extends ComposableTask<TReturn> {\n  // eslint-disable-next-line no-unused-vars\n  constructor(protected input: TNetInput, protected options: FaceDetectionOptions = new SsdMobilenetv1Options()) {\n    super();\n  }\n}\n\nexport class DetectAllFacesTask extends DetectFacesTaskBase<FaceDetection[]> {\n  public override async run(): Promise<FaceDetection[]> {\n    const { input, options } = this;\n    let result;\n    if (options instanceof TinyFaceDetectorOptions) result = nets.tinyFaceDetector.locateFaces(input, options);\n    else if (options instanceof SsdMobilenetv1Options) result = nets.ssdMobilenetv1.locateFaces(input, options);\n    else if (options instanceof TinyYolov2Options) result = nets.tinyYolov2.locateFaces(input, options);\n    else throw new Error('detectFaces - expected options to be instance of TinyFaceDetectorOptions | SsdMobilenetv1Options | TinyYolov2Options');\n    return result;\n  }\n\n  private runAndExtendWithFaceDetections(): Promise<WithFaceDetection<{}>[]> {\n    return new Promise<WithFaceDetection<{}>[]>((resolve, reject) => {\n      this.run()\n        .then((detections) => resolve(detections.map((detection) => extendWithFaceDetection({}, detection))))\n        .catch((err) => reject(err));\n    });\n  }\n\n  withFaceLandmarks(useTinyLandmarkNet = false) {\n    return new DetectAllFaceLandmarksTask(\n      this.runAndExtendWithFaceDetections(),\n      this.input,\n      useTinyLandmarkNet,\n    );\n  }\n\n  withFaceExpressions() {\n    return new PredictAllFaceExpressionsTask(\n      this.runAndExtendWithFaceDetections(),\n      this.input,\n    );\n  }\n\n  withAgeAndGender() {\n    return new PredictAllAgeAndGenderTask(\n      this.runAndExtendWithFaceDetections(),\n      this.input,\n    );\n  }\n}\n\nexport class DetectSingleFaceTask extends DetectFacesTaskBase<FaceDetection | undefined> {\n  public override async run(): Promise<FaceDetection | undefined> {\n    const faceDetections = await new DetectAllFacesTask(this.input, this.options);\n    let faceDetectionWithHighestScore = faceDetections[0];\n    faceDetections.forEach((faceDetection) => {\n      if (faceDetection.score > faceDetectionWithHighestScore.score) faceDetectionWithHighestScore = faceDetection;\n    });\n    return faceDetectionWithHighestScore;\n  }\n\n  private runAndExtendWithFaceDetection(): Promise<WithFaceDetection<{}> | undefined> {\n    // eslint-disable-next-line no-async-promise-executor\n    return new Promise<WithFaceDetection<{}> | undefined>(async (resolve) => {\n      const detection = await this.run();\n      resolve(detection ? extendWithFaceDetection<{}>({}, detection) : undefined);\n    });\n  }\n\n  withFaceLandmarks(useTinyLandmarkNet = false) {\n    return new DetectSingleFaceLandmarksTask(\n      this.runAndExtendWithFaceDetection(),\n      this.input,\n      useTinyLandmarkNet,\n    );\n  }\n\n  withFaceExpressions() {\n    return new PredictSingleFaceExpressionsTask(\n      this.runAndExtendWithFaceDetection(),\n      this.input,\n    );\n  }\n\n  withAgeAndGender() {\n    return new PredictSingleAgeAndGenderTask(\n      this.runAndExtendWithFaceDetection(),\n      this.input,\n    );\n  }\n}\n", "import { TNetInput } from '../dom/index';\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1/SsdMobilenetv1Options';\nimport { DetectAllFacesTask, DetectSingleFaceTask } from './DetectFacesTasks';\nimport { FaceDetectionOptions } from './types';\n\nexport function detectSingleFace(input: TNetInput, options: FaceDetectionOptions = new SsdMobilenetv1Options()): DetectSingleFaceTask {\n  return new DetectSingleFaceTask(input, options);\n}\n\nexport function detectAllFaces(input: TNetInput, options: FaceDetectionOptions = new SsdMobilenetv1Options()): DetectAllFacesTask {\n  return new DetectAllFacesTask(input, options);\n}\n", "import { TNetInput } from '../dom/index';\nimport { WithFaceDescriptor, WithFaceDetection, WithFaceLandmarks } from '../factories/index';\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1/index';\nimport { ITinyYolov2Options, TinyYolov2Options } from '../tinyYolov2/index';\nimport { detectAllFaces } from './detectFaces';\n\nexport async function allFacesSsdMobilenetv1(input: TNetInput, minConfidence?: number): Promise<WithFaceDescriptor<WithFaceLandmarks<WithFaceDetection<{}>>>[]> {\n  return detectAllFaces(input, new SsdMobilenetv1Options(minConfidence ? { minConfidence } : {}))\n    .withFaceLandmarks()\n    .withFaceDescriptors();\n}\n\nexport async function allFacesTinyYolov2(input: TNetInput, forwardParams: ITinyYolov2Options = {}): Promise<WithFaceDescriptor<WithFaceLandmarks<WithFaceDetection<{}>>>[]> {\n  return detectAllFaces(input, new TinyYolov2Options(forwardParams))\n    .withFaceLandmarks()\n    .withFaceDescriptors();\n}\n\nexport const allFaces = allFacesSsdMobilenetv1;\n", "export function euclideanDistance(arr1: number[] | Float32Array, arr2: number[] | Float32Array) {\n  if (arr1.length !== arr2.length) throw new Error('euclideanDistance: arr1.length !== arr2.length');\n\n  const desc1 = Array.from(arr1);\n  const desc2 = Array.from(arr2);\n\n  return Math.sqrt(\n    desc1\n      .map((val, i) => val - desc2[i])\n      .reduce((res, diff) => res + (diff ** 2), 0),\n  );\n}\n", "import { FaceMatch } from '../classes/FaceMatch';\nimport { LabeledFaceDescriptors } from '../classes/LabeledFaceDescriptors';\nimport { euclideanDistance } from '../euclideanDistance';\nimport { WithFaceDescriptor } from '../factories/index';\n\nexport class FaceMatcher {\n  private _labeledDescriptors: LabeledFaceDescriptors[];\n  private _distanceThreshold: number;\n\n  constructor(inputs: LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array | Array<LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array>, distanceThreshold = 0.6) {\n    this._distanceThreshold = distanceThreshold;\n    const inputArray = Array.isArray(inputs) ? inputs : [inputs];\n    if (!inputArray.length) throw new Error('FaceRecognizer.constructor - expected atleast one input');\n    let count = 1;\n    const createUniqueLabel = () => `person ${count++}`;\n    this._labeledDescriptors = inputArray.map((desc) => {\n      if (desc instanceof LabeledFaceDescriptors) return desc;\n      if (desc instanceof Float32Array) return new LabeledFaceDescriptors(createUniqueLabel(), [desc]);\n      if (desc.descriptor && desc.descriptor instanceof Float32Array) return new LabeledFaceDescriptors(createUniqueLabel(), [desc.descriptor]);\n      throw new Error('FaceRecognizer.constructor - expected inputs to be of type LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array | Array<LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array>');\n    });\n  }\n\n  public get labeledDescriptors(): LabeledFaceDescriptors[] { return this._labeledDescriptors; }\n\n  public get distanceThreshold(): number { return this._distanceThreshold; }\n\n  public computeMeanDistance(queryDescriptor: Float32Array, descriptors: Float32Array[]): number {\n    return descriptors\n      .map((d) => euclideanDistance(d, queryDescriptor))\n      .reduce((d1, d2) => d1 + d2, 0) / (descriptors.length || 1);\n  }\n\n  public matchDescriptor(queryDescriptor: Float32Array): FaceMatch {\n    return this.labeledDescriptors\n      .map(({ descriptors, label }) => new FaceMatch(label, this.computeMeanDistance(queryDescriptor, descriptors)))\n      .reduce((best, curr) => (best.distance < curr.distance ? best : curr));\n  }\n\n  public findBestMatch(queryDescriptor: Float32Array): FaceMatch {\n    const bestMatch = this.matchDescriptor(queryDescriptor);\n    return (bestMatch.distance < this._distanceThreshold) ? bestMatch : new FaceMatch('unknown', bestMatch.distance);\n  }\n\n  public toJSON(): any {\n    return {\n      distanceThreshold: this._distanceThreshold,\n      labeledDescriptors: this._labeledDescriptors.map((ld) => ld.toJSON()),\n    };\n  }\n\n  public static fromJSON(json: any): FaceMatcher {\n    const labeledDescriptors = json.labeledDescriptors.map((ld: any) => LabeledFaceDescriptors.fromJSON(ld));\n    return new FaceMatcher(labeledDescriptors, json.distanceThreshold);\n  }\n}\n", "import { TinyFaceDetector } from './TinyFaceDetector';\n\nexport * from './TinyFaceDetector';\nexport * from './TinyFaceDetectorOptions';\n\nexport function createTinyFaceDetector(weights: Float32Array) {\n  const net = new TinyFaceDetector();\n  net.extractWeights(weights);\n  return net;\n}\n", "import { Dimensions, IDimensions } from './classes/index';\nimport { FaceDetection } from './classes/FaceDetection';\nimport { FaceLandmarks } from './classes/FaceLandmarks';\nimport { extendWithFaceDetection, isWithFaceDetection } from './factories/WithFaceDetection';\nimport { extendWithFaceLandmarks, isWithFaceLandmarks } from './factories/WithFaceLandmarks';\n\nexport function resizeResults<T>(results: T, dimensions: IDimensions): T {\n  const { width, height } = new Dimensions(dimensions.width, dimensions.height);\n\n  if (width <= 0 || height <= 0) {\n    throw new Error(`resizeResults - invalid dimensions: ${JSON.stringify({ width, height })}`);\n  }\n\n  if (Array.isArray(results)) {\n    // return results.map(obj => resizeResults(obj, { width, height })) as any as T\n    return (results as Array<any>).map((obj) => resizeResults(obj, { width, height } as IDimensions)) as any as T;\n  }\n\n  if (isWithFaceLandmarks(results)) {\n    const resizedDetection = results.detection.forSize(width, height);\n    const resizedLandmarks = results.unshiftedLandmarks.forSize(resizedDetection.box.width, resizedDetection.box.height);\n    return extendWithFaceLandmarks(extendWithFaceDetection(results, resizedDetection), resizedLandmarks);\n  }\n\n  if (isWithFaceDetection(results)) {\n    return extendWithFaceDetection(results, results.detection.forSize(width, height));\n  }\n\n  if (results instanceof FaceLandmarks || results instanceof FaceDetection) {\n    return (results as any).forSize(width, height);\n  }\n\n  return results;\n}\n", "import * as tf from '../dist/tfjs.esm';\nimport * as draw from './draw/index';\nimport * as utils from './utils/index';\nimport * as pkg from '../package.json';\n\nexport { tf, draw, utils };\n\nexport * from './ageGenderNet/index';\nexport * from './classes/index';\nexport * from './dom/index';\nexport * from './env/index';\nexport * from './faceExpressionNet/index';\nexport * from './faceLandmarkNet/index';\nexport * from './faceRecognitionNet/index';\nexport * from './factories/index';\nexport * from './globalApi/index';\nexport * from './ops/index';\nexport * from './ssdMobilenetv1/index';\nexport * from './tinyFaceDetector/index';\nexport * from './tinyYolov2/index';\nexport * from './euclideanDistance';\nexport * from './NeuralNetwork';\nexport * from './resizeResults';\n\nexport const version = pkg.version as string;\n\n// set webgl defaults\n// if (browser) tf.ENV.set('WEBGL_USE_SHAPES_UNIFORMS', true);\n"],
  "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",
  "names": []
}
